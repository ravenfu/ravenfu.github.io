<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>book</title>
    <url>/posts/uncategorized/cbe5a331/</url>
    <content><![CDATA[<h1 id="区块链">1.  区块链</h1>
<ul>
<li>区块链技术驱动金融 : 数字货币与智能合约技术</li>
<li>精通比特币</li>
<li>深度探索区块链: Hyperledger技术与应用</li>
<li>
<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/" title target>Hyperledger Fabric 官网文档</a>
</li>
</ul>
<p>穷查理宝典: 查理·芒格的智慧箴言录<br>
影响力  – Robert Cialdini<br>
打破思维里的框<br>
我生活的种种模式<br>
Succeeding<br>
别逗了, 费曼先生<br>
发现的乐趣<br>
探索智慧: 从达尔文到芒格</p>
<ol>
<li>水平思考法</li>
<li>6 顶思考帽</li>
<li>思考快与慢</li>
<li>感知的力量</li>
</ol>
<p>程序员修炼之道<br>
人月神话<br>
UNIX编程艺术<br>
代码大全<br>
卓有成效的程序员</p>
<p>Martin Fowler:<br>
企业应用架构模式<br>
UML精粹<br>
重构</p>
<h1 id="java">2.  Java</h1>
<ul>
<li>
<p>thinking in java</p>
</li>
<li>
<p>thinking in enterprise java</p>
</li>
<li>
<p>effective java</p>
</li>
<li>
<p>Java 虚拟机规范 8</p>
</li>
<li>
<p>Java 极限编程</p>
</li>
<li>
<p>Java 编程思想, Think in Java</p>
</li>
<li>
<p>重构与模式</p>
</li>
<li>
<p>深入了解Java虚拟机 第3版 周志明</p>
<ul>
<li>Java 虚拟机规范 Oracle官方</li>
</ul>
</li>
</ul>
<h1 id="算法">3.  算法</h1>
<ul>
<li>算法导论</li>
</ul>
<h1 id="x-nix">4.  X-nix</h1>
<ul>
<li>UNIX网络编程</li>
</ul>
<h1 id="安全">5.  安全</h1>
<ul>
<li>欺骗的艺术</li>
</ul>
<h1 id="设计模式">6.  设计模式</h1>
<ul>
<li>thinking in patterns</li>
<li>thinking in c</li>
<li>可复用面向对象软件的基础</li>
<li>head first</li>
<li>设计模式之蝉</li>
<li>研磨设计模式</li>
</ul>
<h1 id="沟通">7.  沟通</h1>
<ul>
<li>聪明人是怎么沟通的</li>
<li>卡耐基语言的突破与沟通的艺术</li>
<li>说话心理学</li>
<li>把你的情商用起来</li>
<li>别输在不会表达上</li>
<li>情商高就是说话商人舒服</li>
<li>所谓情商高就是会说话</li>
<li>别让不好意思害了你</li>
<li>把话说到点子上</li>
<li>超级沟通力</li>
<li>沟通心理学</li>
<li>超级搭讪学</li>
</ul>
<h1 id="管理">8.  管理</h1>
<p>卓有成效的管理者</p>
<h2 id="问题">8.1.  问题</h2>
<p>著名的管理学家有哪些, 他们有哪些著作</p>
<p>哈伯企业管理经典丛书</p>
<h1 id="时间管理">9.  时间管理</h1>
<ul>
<li>深度工作</li>
</ul>
<h1 id="其他">10.  其他</h1>
]]></content>
  </entry>
  <entry>
    <title>缓存常见问题</title>
    <url>/posts/cache/c7de5e4b/</url>
    <content><![CDATA[<h1 id="常见问题">1.  常见问题</h1>
<h2 id="代码耦合">1.1.  代码耦合</h2>
<p>假如业务代码中交织大量缓存相关的代码, 会增加维护工作量<br>
可以使用 aop 的方式, 将缓存代码剥离出来, 集中在一起, 提高代码的可重用性和可维护性.<br>
可以参考 <br>
以及 <a href="https://github.com/qiujiayu/AutoLoadCache" title target>qiujiayu&#x2F;AutoLoadCache</a></p>
<h2 id="缓存冲突">1.2.  缓存冲突</h2>
<p>在多模块开发中, 可能有多个模块使用同一个 key 的问题</p>
<p>解决办法:</p>
<ol>
<li>在每个 key 之前加上一个 namespace, 用来标识区分不同模块的缓存</li>
<li>在 redis 中, 也可以让不同的模块使用不同的 database 的方式</li>
</ol>
<h2 id="缓存穿透">1.3.  缓存穿透</h2>
<p>@TO-BE-CONTINUE 2020-04-27</p>
<h2 id="缓存雪崩">1.4.  缓存雪崩</h2>
<p>突然在某一时刻, 有大量的缓存失效, 导致大量查询请求涌向数据库. 如果数据库顶不住压力, 就会连锁导致服务报错与超时, 然后请求等待时间过长后, 服务不可用</p>
<p>解决办法:</p>
<ol>
<li>在使用缓存时, 如果发现缓存即将失效, 则通过异步队列刷新缓存</li>
<li>使用查询锁的方式, 同一个缓存的查询, 保证只有一个线程处理, 防止大量重复查询</li>
</ol>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>
<a href="https://github.com/qiujiayu/AutoLoadCache" title target>qiujiayu&#x2F;AutoLoadCache</a>
</li>
</ul>
]]></content>
      <categories>
        <category>cache</category>
      </categories>
      <tags>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/posts/uncategorized/9505ccb9/</url>
    <content><![CDATA[<p>// todo 2020-07-25</p>
<h1 id="8-种算法思想">1.  8 种算法思想</h1>
<h2 id="枚举">1.1.  枚举</h2>
<p>枚举思想的特点在于会尝试所有的可能性.<br>
将问题的所有可能一一列举, 然后根据条件判断逐一判断.</p>
<h2 id="递推">1.2.  递推</h2>
<h2 id="递归">1.3.  递归</h2>
<h2 id="分治">1.4.  分治</h2>
<h2 id="贪心">1.5.  贪心</h2>
<p>哈弗曼算法</p>
<h2 id="试探法">1.6.  试探法</h2>
<h2 id="动态迭代">1.7.  动态迭代</h2>
<h2 id="模拟">1.8.  模拟</h2>
]]></content>
  </entry>
  <entry>
    <title>缓存驱逐策略</title>
    <url>/posts/cache/cbf880d1/</url>
    <content><![CDATA[<ul>
<li>
<p>LRU<br>
Least Recently Used<br>
时间最久没有使用算法</p>
</li>
<li>
<p>LFU<br>
Least Frequently Used<br>
频率(次数)最少没有使用的算法</p>
</li>
<li>
<p>FIFO<br>
先进先出</p>
</li>
<li>
<p>SOFT</p>
</li>
<li>
<p>WEAK</p>
</li>
<li>
<p>volatile-lru: 从已设置过期时间的数据集中淘汰最近最少使用的数据</p>
</li>
<li>
<p>volatile-ttl: 从已设置过期时间的数据集中淘汰将要过期的数据</p>
</li>
<li>
<p>volatile-random: 从已设置过期时间的数据集中淘汰随机的数据</p>
</li>
<li>
<p>allkeys-lru</p>
</li>
<li>
<p>allkeys-random</p>
</li>
</ul>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://github.com/redisson/redisson/wiki/14.-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88#142-spring-cache%E6%95%B4%E5%90%88" title target>Redisson 第三方框架整合</a>
</li>
<li>
<a href="https://www.jianshu.com/p/33c019de9115" title target>Spring Cache</a></li>
</ul>
]]></content>
      <categories>
        <category>cache</category>
      </categories>
      <tags>
        <tag>cache-eviction-policy</tag>
      </tags>
  </entry>
  <entry>
    <title>fabric-config-orderer</title>
    <url>/posts/uncategorized/46f2211f/</url>
    <content><![CDATA[<p>peer 的配置对应 <code>fabric/sampleconfig/orderer.yaml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Orderer Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This controls the type and configuration of the orderer.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">General:</span></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">    <span class="comment"># Listen address: The IP on which to bind to listen.</span></span><br><span class="line">    <span class="attr">ListenAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_LISTENPORT=7050</span></span><br><span class="line">    <span class="comment"># Listen port: The port on which to bind to listen.</span></span><br><span class="line">    <span class="attr">ListenPort:</span> <span class="number">7050</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TLS: TLS settings for the GRPC server.</span></span><br><span class="line">    <span class="attr">TLS:</span></span><br><span class="line">        <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># PrivateKey governs the file location of the private key of the TLS certificate.</span></span><br><span class="line">        <span class="attr">PrivateKey:</span> <span class="string">tls/server.key</span></span><br><span class="line">        <span class="comment"># Certificate governs the file location of the server TLS certificate.</span></span><br><span class="line">        <span class="attr">Certificate:</span> <span class="string">tls/server.crt</span></span><br><span class="line">        <span class="attr">RootCAs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tls/ca.crt</span></span><br><span class="line">        <span class="attr">ClientAuthRequired:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">ClientRootCAs:</span></span><br><span class="line">    <span class="comment"># Keepalive settings for the GRPC server.</span></span><br><span class="line">    <span class="attr">Keepalive:</span></span><br><span class="line">        <span class="comment"># ServerMinInterval is the minimum permitted time between client pings.</span></span><br><span class="line">        <span class="comment"># If clients send pings more frequently, the server will</span></span><br><span class="line">        <span class="comment"># disconnect them.</span></span><br><span class="line">        <span class="attr">ServerMinInterval:</span> <span class="string">60s</span></span><br><span class="line">        <span class="comment"># ServerInterval is the time between pings to clients.</span></span><br><span class="line">        <span class="attr">ServerInterval:</span> <span class="string">7200s</span></span><br><span class="line">        <span class="comment"># ServerTimeout is the duration the server waits for a response from</span></span><br><span class="line">        <span class="comment"># a client before closing the connection.</span></span><br><span class="line">        <span class="attr">ServerTimeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="comment"># Cluster settings for ordering service nodes that communicate with other ordering service nodes</span></span><br><span class="line">    <span class="comment"># such as Raft based ordering service.</span></span><br><span class="line">    <span class="attr">Cluster:</span></span><br><span class="line">        <span class="comment"># SendBufferSize is the maximum number of messages in the egress buffer.</span></span><br><span class="line">        <span class="comment"># Consensus messages are dropped if the buffer is full, and transaction</span></span><br><span class="line">        <span class="comment"># messages are waiting for space to be freed.</span></span><br><span class="line">        <span class="attr">SendBufferSize:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">        <span class="comment"># ClientCertificate governs the file location of the client TLS certificate</span></span><br><span class="line">        <span class="comment"># used to establish mutual TLS connections with other ordering service nodes.</span></span><br><span class="line">        <span class="attr">ClientCertificate:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">        <span class="comment"># ClientPrivateKey governs the file location of the private key of the client TLS certificate.</span></span><br><span class="line">        <span class="attr">ClientPrivateKey:</span></span><br><span class="line">        <span class="comment"># The below 4 properties should be either set together, or be unset together.</span></span><br><span class="line">        <span class="comment"># If they are set, then the orderer node uses a separate listener for intra-cluster</span></span><br><span class="line">        <span class="comment"># communication. If they are unset, then the general orderer listener is used.</span></span><br><span class="line">        <span class="comment"># This is useful if you want to use a different TLS server certificates on the</span></span><br><span class="line">        <span class="comment"># client-facing and the intra-cluster listeners.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ListenPort defines the port on which the cluster listens to connections.</span></span><br><span class="line">        <span class="attr">ListenPort:</span></span><br><span class="line">        <span class="comment"># ListenAddress defines the IP on which to listen to intra-cluster communication.</span></span><br><span class="line">        <span class="attr">ListenAddress:</span></span><br><span class="line">        <span class="comment"># ServerCertificate defines the file location of the server TLS certificate used for intra-cluster</span></span><br><span class="line">        <span class="comment"># communication.</span></span><br><span class="line">        <span class="attr">ServerCertificate:</span></span><br><span class="line">        <span class="comment"># ServerPrivateKey defines the file location of the private key of the TLS certificate.</span></span><br><span class="line">        <span class="attr">ServerPrivateKey:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">    <span class="comment"># Bootstrap method: The method by which to obtain the bootstrap block</span></span><br><span class="line">    <span class="comment"># system channel is specified. The option can be one of:</span></span><br><span class="line">    <span class="comment">#   "file" - path to a file containing the genesis block or config block of system channel</span></span><br><span class="line">    <span class="comment">#   "none" - allows an orderer to start without a system channel configuration</span></span><br><span class="line">    <span class="attr">BootstrapMethod:</span> <span class="string">file</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">    <span class="comment"># Bootstrap file: The file containing the bootstrap block to use when</span></span><br><span class="line">    <span class="comment"># initializing the orderer system channel and BootstrapMethod is set to</span></span><br><span class="line">    <span class="comment"># "file".  The bootstrap file can be the genesis block, and it can also be</span></span><br><span class="line">    <span class="comment"># a config block for late bootstrap of some consensus methods like Raft.</span></span><br><span class="line">    <span class="comment"># Generate a genesis block by updating $FABRIC_CFG_PATH/configtx.yaml and</span></span><br><span class="line">    <span class="comment"># using configtxgen command with "-outputBlock" option.</span></span><br><span class="line">    <span class="comment"># Defaults to file "genesisblock" (in $FABRIC_CFG_PATH directory) if not specified.</span></span><br><span class="line">    <span class="attr">BootstrapFile:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span></span><br><span class="line">    <span class="comment"># LocalMSPDir is where to find the private crypto material needed by the</span></span><br><span class="line">    <span class="comment"># orderer. It is set relative here as a default for dev environments but</span></span><br><span class="line">    <span class="comment"># should be changed to the real location in production.</span></span><br><span class="line">    <span class="attr">LocalMSPDir:</span> <span class="string">msp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">    <span class="comment"># LocalMSPID is the identity to register the local MSP material with the MSP</span></span><br><span class="line">    <span class="comment"># manager. IMPORTANT: The local MSP ID of an orderer needs to match the MSP</span></span><br><span class="line">    <span class="comment"># ID of one of the organizations defined in the orderer system channel's</span></span><br><span class="line">    <span class="comment"># /Channel/Orderer configuration. The sample organization defined in the</span></span><br><span class="line">    <span class="comment"># sample configuration provided has an MSP ID of "SampleOrg".</span></span><br><span class="line">    <span class="attr">LocalMSPID:</span> <span class="string">SampleOrg</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable an HTTP service for Go "pprof" profiling as documented at:</span></span><br><span class="line">    <span class="comment"># https://golang.org/pkg/net/http/pprof</span></span><br><span class="line">    <span class="attr">Profile:</span></span><br><span class="line">        <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">Address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:6060</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BCCSP configures the blockchain crypto service providers.</span></span><br><span class="line">    <span class="attr">BCCSP:</span></span><br><span class="line">        <span class="comment"># Default specifies the preferred blockchain crypto service provider</span></span><br><span class="line">        <span class="comment"># to use. If the preferred provider is not available, the software</span></span><br><span class="line">        <span class="comment"># based provider ("SW") will be used.</span></span><br><span class="line">        <span class="comment"># Valid providers are:</span></span><br><span class="line">        <span class="comment">#  - SW: a software based crypto provider</span></span><br><span class="line">        <span class="comment">#  - PKCS11: a CA hardware security module crypto provider.</span></span><br><span class="line">        <span class="attr">Default:</span> <span class="string">SW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># SW configures the software based blockchain crypto provider.</span></span><br><span class="line">        <span class="attr">SW:</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> The default Hash and Security level needs refactoring to be</span></span><br><span class="line">            <span class="comment"># fully configurable. Changing these defaults requires coordination</span></span><br><span class="line">            <span class="comment"># SHA2 is hardcoded in several places, not only BCCSP</span></span><br><span class="line">            <span class="attr">Hash:</span> <span class="string">SHA2</span></span><br><span class="line">            <span class="attr">Security:</span> <span class="number">256</span></span><br><span class="line">            <span class="comment"># Location of key store. If this is unset, a location will be</span></span><br><span class="line">            <span class="comment"># chosen using: 'LocalMSPDir'/keystore</span></span><br><span class="line">            <span class="attr">FileKeyStore:</span></span><br><span class="line">                <span class="attr">KeyStore:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)</span></span><br><span class="line">        <span class="attr">PKCS11:</span></span><br><span class="line">            <span class="comment"># Location of the PKCS11 module library</span></span><br><span class="line">            <span class="attr">Library:</span></span><br><span class="line">            <span class="comment"># Token Label</span></span><br><span class="line">            <span class="attr">Label:</span></span><br><span class="line">            <span class="comment"># User PIN</span></span><br><span class="line">            <span class="attr">Pin:</span></span><br><span class="line">            <span class="attr">Hash:</span></span><br><span class="line">            <span class="attr">Security:</span></span><br><span class="line">            <span class="attr">FileKeyStore:</span></span><br><span class="line">                <span class="attr">KeyStore:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Authentication contains configuration parameters related to authenticating</span></span><br><span class="line">    <span class="comment"># client messages</span></span><br><span class="line">    <span class="attr">Authentication:</span></span><br><span class="line">        <span class="comment"># the acceptable difference between the current server time and the</span></span><br><span class="line">        <span class="comment"># client's time as specified in a client request message</span></span><br><span class="line">        <span class="attr">TimeWindow:</span> <span class="string">15m</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: File Ledger</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section applies to the configuration of the file ledger.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">FileLedger:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Location: The directory to store the blocks in.</span></span><br><span class="line">    <span class="attr">Location:</span> <span class="string">/var/hyperledger/production/orderer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Kafka</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section applies to the configuration of the Kafka-based orderer, and</span></span><br><span class="line"><span class="comment">#     its interaction with the Kafka cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Kafka:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retry: What do if a connection to the Kafka cluster cannot be established,</span></span><br><span class="line">    <span class="comment"># or if a metadata request to the Kafka cluster needs to be repeated.</span></span><br><span class="line">    <span class="attr">Retry:</span></span><br><span class="line">        <span class="comment"># When a new channel is created, or when an existing channel is reloaded</span></span><br><span class="line">        <span class="comment"># (in case of a just-restarted orderer), the orderer interacts with the</span></span><br><span class="line">        <span class="comment"># Kafka cluster in the following ways:</span></span><br><span class="line">        <span class="comment"># 1. It creates a Kafka producer (writer) for the Kafka partition that</span></span><br><span class="line">        <span class="comment"># corresponds to the channel.</span></span><br><span class="line">        <span class="comment"># 2. It uses that producer to post a no-op CONNECT message to that</span></span><br><span class="line">        <span class="comment"># partition</span></span><br><span class="line">        <span class="comment"># 3. It creates a Kafka consumer (reader) for that partition.</span></span><br><span class="line">        <span class="comment"># If any of these steps fail, they will be re-attempted every</span></span><br><span class="line">        <span class="comment"># &lt;ShortInterval&gt; for a total of &lt;ShortTotal&gt;, and then every</span></span><br><span class="line">        <span class="comment"># &lt;LongInterval&gt; for a total of &lt;LongTotal&gt; until they succeed.</span></span><br><span class="line">        <span class="comment"># Note that the orderer will be unable to write to or read from a</span></span><br><span class="line">        <span class="comment"># channel until all of the steps above have been completed successfully.</span></span><br><span class="line">        <span class="attr">ShortInterval:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">ShortTotal:</span> <span class="string">10m</span></span><br><span class="line">        <span class="attr">LongInterval:</span> <span class="string">5m</span></span><br><span class="line">        <span class="attr">LongTotal:</span> <span class="string">12h</span></span><br><span class="line">        <span class="comment"># Affects the socket timeouts when waiting for an initial connection, a</span></span><br><span class="line">        <span class="comment"># response, or a transmission. See Config.Net for more info:</span></span><br><span class="line">        <span class="comment"># https://godoc.org/github.com/Shopify/sarama#Config</span></span><br><span class="line">        <span class="attr">NetworkTimeouts:</span></span><br><span class="line">            <span class="attr">DialTimeout:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">ReadTimeout:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">WriteTimeout:</span> <span class="string">10s</span></span><br><span class="line">        <span class="comment"># Affects the metadata requests when the Kafka cluster is in the middle</span></span><br><span class="line">        <span class="comment"># of a leader election.See Config.Metadata for more info:</span></span><br><span class="line">        <span class="comment"># https://godoc.org/github.com/Shopify/sarama#Config</span></span><br><span class="line">        <span class="attr">Metadata:</span></span><br><span class="line">            <span class="attr">RetryBackoff:</span> <span class="string">250ms</span></span><br><span class="line">            <span class="attr">RetryMax:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># What to do if posting a message to the Kafka cluster fails. See</span></span><br><span class="line">        <span class="comment"># Config.Producer for more info:</span></span><br><span class="line">        <span class="comment"># https://godoc.org/github.com/Shopify/sarama#Config</span></span><br><span class="line">        <span class="attr">Producer:</span></span><br><span class="line">            <span class="attr">RetryBackoff:</span> <span class="string">100ms</span></span><br><span class="line">            <span class="attr">RetryMax:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># What to do if reading from the Kafka cluster fails. See</span></span><br><span class="line">        <span class="comment"># Config.Consumer for more info:</span></span><br><span class="line">        <span class="comment"># https://godoc.org/github.com/Shopify/sarama#Config</span></span><br><span class="line">        <span class="attr">Consumer:</span></span><br><span class="line">            <span class="attr">RetryBackoff:</span> <span class="string">2s</span></span><br><span class="line">    <span class="comment"># Settings to use when creating Kafka topics.  Only applies when</span></span><br><span class="line">    <span class="comment"># Kafka.Version is v0.10.1.0 or higher</span></span><br><span class="line">    <span class="attr">Topic:</span></span><br><span class="line">        <span class="comment">## ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1</span></span><br><span class="line">        <span class="comment"># The number of Kafka brokers across which to replicate the topic</span></span><br><span class="line">        <span class="attr">ReplicationFactor:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ORDERER_KAFKA_VERBOSE=true</span></span><br><span class="line">    <span class="comment"># Verbose: Enable logging for interactions with the Kafka cluster.</span></span><br><span class="line">    <span class="attr">Verbose:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TLS: TLS settings for the orderer's connection to the Kafka cluster.</span></span><br><span class="line">    <span class="attr">TLS:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="comment"># Enabled: Use TLS when connecting to the Kafka cluster.</span></span><br><span class="line">      <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">      <span class="comment"># PrivateKey: PEM-encoded private key the orderer will use for</span></span><br><span class="line">      <span class="comment"># authentication.</span></span><br><span class="line">      <span class="attr">PrivateKey:</span></span><br><span class="line">        <span class="comment"># As an alternative to specifying the PrivateKey here, uncomment the</span></span><br><span class="line">        <span class="comment"># following "File" key and specify the file name from which to load the</span></span><br><span class="line">        <span class="comment"># value of PrivateKey.</span></span><br><span class="line">        <span class="comment">#File: path/to/PrivateKey</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">      <span class="comment"># Certificate: PEM-encoded signed public key certificate the orderer will</span></span><br><span class="line">      <span class="comment"># use for authentication.</span></span><br><span class="line">      <span class="attr">Certificate:</span></span><br><span class="line">        <span class="comment"># As an alternative to specifying the Certificate here, uncomment the</span></span><br><span class="line">        <span class="comment"># following "File" key and specify the file name from which to load the</span></span><br><span class="line">        <span class="comment"># value of Certificate.</span></span><br><span class="line">        <span class="comment">#File: path/to/Certificate</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">      <span class="comment"># RootCAs: PEM-encoded trusted root certificates used to validate</span></span><br><span class="line">      <span class="comment"># certificates from the Kafka cluster.</span></span><br><span class="line">      <span class="attr">RootCAs:</span></span><br><span class="line">        <span class="comment"># As an alternative to specifying the RootCAs here, uncomment the</span></span><br><span class="line">        <span class="comment"># following "File" key and specify the file name from which to load the</span></span><br><span class="line">        <span class="comment"># value of RootCAs.</span></span><br><span class="line">        <span class="comment">#File: path/to/RootCAs</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SASLPlain: Settings for using SASL/PLAIN authentication with Kafka brokers</span></span><br><span class="line">    <span class="attr">SASLPlain:</span></span><br><span class="line">      <span class="comment"># Enabled: Use SASL/PLAIN to authenticate with Kafka brokers</span></span><br><span class="line">      <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># User: Required when Enabled is set to true</span></span><br><span class="line">      <span class="attr">User:</span></span><br><span class="line">      <span class="comment"># Password: Required when Enabled is set to true</span></span><br><span class="line">      <span class="attr">Password:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Kafka protocol version used to communicate with the Kafka cluster brokers</span></span><br><span class="line">    <span class="comment"># (defaults to 0.10.2.0 if not specified)</span></span><br><span class="line">    <span class="attr">Version:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Debug Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This controls the debugging options for the orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Debug:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BroadcastTraceDir when set will cause each request to the Broadcast service</span></span><br><span class="line">    <span class="comment"># for this orderer to be written to a file in this directory</span></span><br><span class="line">    <span class="attr">BroadcastTraceDir:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DeliverTraceDir when set will cause each request to the Deliver service</span></span><br><span class="line">    <span class="comment"># for this orderer to be written to a file in this directory</span></span><br><span class="line">    <span class="attr">DeliverTraceDir:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Operations Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This configures the operations server endpoint for the orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Operations:</span></span><br><span class="line">    <span class="comment"># host and port for the operations server</span></span><br><span class="line">    <span class="attr">ListenAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8443</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TLS configuration for the operations endpoint</span></span><br><span class="line">    <span class="attr">TLS:</span></span><br><span class="line">        <span class="comment"># TLS enabled</span></span><br><span class="line">        <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Certificate is the location of the PEM encoded TLS certificate</span></span><br><span class="line">        <span class="attr">Certificate:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># PrivateKey points to the location of the PEM-encoded key</span></span><br><span class="line">        <span class="attr">PrivateKey:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Most operations service endpoints require client authentication when TLS</span></span><br><span class="line">        <span class="comment"># is enabled. ClientAuthRequired requires client certificate authentication</span></span><br><span class="line">        <span class="comment"># at the TLS layer to access all resources.</span></span><br><span class="line">        <span class="attr">ClientAuthRequired:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Paths to PEM encoded ca certificates to trust for client authentication</span></span><br><span class="line">        <span class="attr">ClientRootCAs:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Metrics  Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This configures metrics collection for the orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Metrics:</span></span><br><span class="line">    <span class="comment"># The metrics provider is one of statsd, prometheus, or disabled</span></span><br><span class="line">    <span class="attr">Provider:</span> <span class="string">disabled</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The statsd configuration</span></span><br><span class="line">    <span class="attr">Statsd:</span></span><br><span class="line">      <span class="comment"># network type: tcp or udp</span></span><br><span class="line">      <span class="attr">Network:</span> <span class="string">udp</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># the statsd server address</span></span><br><span class="line">      <span class="attr">Address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8125</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># The interval at which locally cached counters and gauges are pushed</span></span><br><span class="line">      <span class="comment"># to statsd; timings are pushed immediately</span></span><br><span class="line">      <span class="attr">WriteInterval:</span> <span class="string">30s</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># The prefix is prepended to all emitted statsd metrics</span></span><br><span class="line">      <span class="attr">Prefix:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Channel participation API Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This provides the channel participation API configuration for the orderer.</span></span><br><span class="line"><span class="comment">#   - Channel participation uses the same ListenAddress and TLS settings of the</span></span><br><span class="line"><span class="comment">#     Operations service.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">ChannelParticipation:</span></span><br><span class="line">    <span class="comment"># Channel participation API is enabled.</span></span><br><span class="line">    <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Permanently remove storage resources when a channel is removed.</span></span><br><span class="line">    <span class="comment"># Defines the default behavior of channel removal.</span></span><br><span class="line">    <span class="attr">RemoveStorage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The maximum size of the request body when joining a channel.</span></span><br><span class="line">    <span class="attr">MaxRequestBodySize:</span> <span class="number">1</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Consensus Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section contains config options for a consensus plugin. It is opaque</span></span><br><span class="line"><span class="comment">#     to orderer, and completely up to consensus implementation to make use of.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Consensus:</span></span><br><span class="line">    <span class="comment"># The allowed key-value pairs here depend on consensus plugin. For etcd/raft,</span></span><br><span class="line">    <span class="comment"># we use following options:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># WALDir specifies the location at which Write Ahead Logs for etcd/raft are</span></span><br><span class="line">    <span class="comment"># stored. Each channel will have its own subdir named after channel ID.</span></span><br><span class="line">    <span class="attr">WALDir:</span> <span class="string">/var/hyperledger/production/orderer/etcdraft/wal</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SnapDir specifies the location at which snapshots for etcd/raft are</span></span><br><span class="line">    <span class="comment"># stored. Each channel will have its own subdir named after channel ID.</span></span><br><span class="line">    <span class="attr">SnapDir:</span> <span class="string">/var/hyperledger/production/orderer/etcdraft/snapshot</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>fabric-config-peer</title>
    <url>/posts/uncategorized/a72b5fe9/</url>
    <content><![CDATA[<p>peer 的配置对应 <code>fabric/sampleconfig/core.yaml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Peer section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">peer:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 节点 ID, 一般与 Docker 服务名称相同</span></span><br><span class="line">    <span class="comment">## CORE_PEER_ID=peer0.org1.example.com</span></span><br><span class="line">    <span class="comment"># The peer id provides a name for this peer instance and is used when</span></span><br><span class="line">    <span class="comment"># naming docker resources.</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">jdoe</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The networkId allows for logical separation of networks and is used when</span></span><br><span class="line">    <span class="comment"># naming docker resources.</span></span><br><span class="line">    <span class="attr">networkId:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 该 peer 节点监听的本地地址和端口</span></span><br><span class="line">    <span class="comment">## CORE_PEER_LISTENADDRESS=0.0.0.0:7051</span></span><br><span class="line">    <span class="comment"># The Address at local network interface this Peer will listen on.</span></span><br><span class="line">    <span class="comment"># By default, it will listen on all network interfaces</span></span><br><span class="line">    <span class="attr">listenAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:7051</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 该 peer 节点链码连接的本地地址和端口</span></span><br><span class="line">    <span class="comment">## CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052</span></span><br><span class="line">    <span class="comment"># The endpoint this peer uses to listen for inbound chaincode connections.</span></span><br><span class="line">    <span class="comment"># If this is commented-out, the listen address is selected to be</span></span><br><span class="line">    <span class="comment"># the peer's address (see below) with port 7052</span></span><br><span class="line">    <span class="comment"># chaincodeListenAddress: 0.0.0.0:7052</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 提供给链码来连接该 peer 节点的地址和端口</span></span><br><span class="line">    <span class="comment">## CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052</span></span><br><span class="line">    <span class="comment"># The endpoint the chaincode for this peer uses to connect to the peer.</span></span><br><span class="line">    <span class="comment"># If this is not specified, the chaincodeListenAddress address is selected.</span></span><br><span class="line">    <span class="comment"># And if chaincodeListenAddress is not specified, address is selected from</span></span><br><span class="line">    <span class="comment"># peer address (see below). If specified peer address is invalid then it</span></span><br><span class="line">    <span class="comment"># will fallback to the auto detected IP (local IP) regardless of the peer</span></span><br><span class="line">    <span class="comment"># addressAutoDetect value.</span></span><br><span class="line">    <span class="comment"># chaincodeAddress: 0.0.0.0:7052</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 如果是 peer 配置, 则该地址和端口用于和其他节点建立通讯, 保持在一个网络中</span></span><br><span class="line">    <span class="comment">## 如果是 CLI 配置, 则该地址和端口用于交互</span></span><br><span class="line">    <span class="comment">## CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">    <span class="comment"># When used as peer config, this represents the endpoint to other peers</span></span><br><span class="line">    <span class="comment"># in the same organization. For peers in other organization, see</span></span><br><span class="line">    <span class="comment"># gossip.externalEndpoint for more info.</span></span><br><span class="line">    <span class="comment"># When used as CLI config, this means the peer's endpoint to interact with</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:7051</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Whether the Peer should programmatically determine its address</span></span><br><span class="line">    <span class="comment"># This case is useful for docker containers.</span></span><br><span class="line">    <span class="comment"># When set to true, will override peer address.</span></span><br><span class="line">    <span class="attr">addressAutoDetect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keepalive settings for peer server and clients</span></span><br><span class="line">    <span class="attr">keepalive:</span></span><br><span class="line">        <span class="comment"># Interval is the duration after which if the server does not see</span></span><br><span class="line">        <span class="comment"># any activity from the client it pings the client to see if it's alive</span></span><br><span class="line">        <span class="attr">interval:</span> <span class="string">7200s</span></span><br><span class="line">        <span class="comment"># Timeout is the duration the server waits for a response</span></span><br><span class="line">        <span class="comment"># from the client after sending a ping before closing the connection</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">        <span class="comment"># MinInterval is the minimum permitted time between client pings.</span></span><br><span class="line">        <span class="comment"># If clients send pings more frequently, the peer server will</span></span><br><span class="line">        <span class="comment"># disconnect them</span></span><br><span class="line">        <span class="attr">minInterval:</span> <span class="string">60s</span></span><br><span class="line">        <span class="comment"># Client keepalive settings for communicating with other peer nodes</span></span><br><span class="line">        <span class="attr">client:</span></span><br><span class="line">            <span class="comment"># Interval is the time between pings to peer nodes.  This must</span></span><br><span class="line">            <span class="comment"># greater than or equal to the minInterval specified by peer</span></span><br><span class="line">            <span class="comment"># nodes</span></span><br><span class="line">            <span class="attr">interval:</span> <span class="string">60s</span></span><br><span class="line">            <span class="comment"># Timeout is the duration the client waits for a response from</span></span><br><span class="line">            <span class="comment"># peer nodes before closing the connection</span></span><br><span class="line">            <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">        <span class="comment"># DeliveryClient keepalive settings for communication with ordering</span></span><br><span class="line">        <span class="comment"># nodes.</span></span><br><span class="line">        <span class="attr">deliveryClient:</span></span><br><span class="line">            <span class="comment"># Interval is the time between pings to ordering nodes.  This must</span></span><br><span class="line">            <span class="comment"># greater than or equal to the minInterval specified by ordering</span></span><br><span class="line">            <span class="comment"># nodes.</span></span><br><span class="line">            <span class="attr">interval:</span> <span class="string">60s</span></span><br><span class="line">            <span class="comment"># Timeout is the duration the client waits for a response from</span></span><br><span class="line">            <span class="comment"># ordering nodes before closing the connection</span></span><br><span class="line">            <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Gossip related configuration</span></span><br><span class="line">    <span class="attr">gossip:</span></span><br><span class="line">        <span class="comment">## CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051</span></span><br><span class="line">        <span class="comment"># Bootstrap set to initialize gossip with.</span></span><br><span class="line">        <span class="comment"># This is a list of other peers that this peer reaches out to at startup.</span></span><br><span class="line">        <span class="comment"># Important: The endpoints here have to be endpoints of peers in the same</span></span><br><span class="line">        <span class="comment"># organization, because the peer would refuse connecting to these endpoints</span></span><br><span class="line">        <span class="comment"># unless they are in the same organization as the peer.</span></span><br><span class="line">        <span class="attr">bootstrap:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:7051</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> orgLeader and useLeaderElection parameters are mutual exclusive.</span></span><br><span class="line">        <span class="comment"># Setting both to true would result in the termination of the peer</span></span><br><span class="line">        <span class="comment"># since this is undefined state. If the peers are configured with</span></span><br><span class="line">        <span class="comment"># useLeaderElection=false, make sure there is at least 1 peer in the</span></span><br><span class="line">        <span class="comment"># organization that its orgLeader is set to true.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Defines whenever peer will initialize dynamic algorithm for</span></span><br><span class="line">        <span class="comment"># "leader" selection, where leader is the peer to establish</span></span><br><span class="line">        <span class="comment"># connection with ordering service and use delivery protocol</span></span><br><span class="line">        <span class="comment"># to pull ledger blocks from ordering service.</span></span><br><span class="line">        <span class="attr">useLeaderElection:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># Statically defines peer to be an organization "leader",</span></span><br><span class="line">        <span class="comment"># where this means that current peer will maintain connection</span></span><br><span class="line">        <span class="comment"># with ordering service and disseminate block across peers in</span></span><br><span class="line">        <span class="comment"># its own organization. Multiple peers or all peers in an organization</span></span><br><span class="line">        <span class="comment"># may be configured as org leaders, so that they all pull</span></span><br><span class="line">        <span class="comment"># blocks directly from ordering service.</span></span><br><span class="line">        <span class="attr">orgLeader:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Interval for membershipTracker polling</span></span><br><span class="line">        <span class="attr">membershipTrackerInterval:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Overrides the endpoint that the peer publishes to peers</span></span><br><span class="line">        <span class="comment"># in its organization. For peers in foreign organizations</span></span><br><span class="line">        <span class="comment"># see 'externalEndpoint'</span></span><br><span class="line">        <span class="attr">endpoint:</span></span><br><span class="line">        <span class="comment"># Maximum count of blocks stored in memory</span></span><br><span class="line">        <span class="attr">maxBlockCountToStore:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># Max time between consecutive message pushes(unit: millisecond)</span></span><br><span class="line">        <span class="attr">maxPropagationBurstLatency:</span> <span class="string">10ms</span></span><br><span class="line">        <span class="comment"># Max number of messages stored until a push is triggered to remote peers</span></span><br><span class="line">        <span class="attr">maxPropagationBurstSize:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># Number of times a message is pushed to remote peers</span></span><br><span class="line">        <span class="attr">propagateIterations:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># Number of peers selected to push messages to</span></span><br><span class="line">        <span class="attr">propagatePeerNum:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># Determines frequency of pull phases(unit: second)</span></span><br><span class="line">        <span class="comment"># Must be greater than digestWaitTime + responseWaitTime</span></span><br><span class="line">        <span class="attr">pullInterval:</span> <span class="string">4s</span></span><br><span class="line">        <span class="comment"># Number of peers to pull from</span></span><br><span class="line">        <span class="attr">pullPeerNum:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># Determines frequency of pulling state info messages from peers(unit: second)</span></span><br><span class="line">        <span class="attr">requestStateInfoInterval:</span> <span class="string">4s</span></span><br><span class="line">        <span class="comment"># Determines frequency of pushing state info messages to peers(unit: second)</span></span><br><span class="line">        <span class="attr">publishStateInfoInterval:</span> <span class="string">4s</span></span><br><span class="line">        <span class="comment"># Maximum time a stateInfo message is kept until expired</span></span><br><span class="line">        <span class="attr">stateInfoRetentionInterval:</span></span><br><span class="line">        <span class="comment"># Time from startup certificates are included in Alive messages(unit: second)</span></span><br><span class="line">        <span class="attr">publishCertPeriod:</span> <span class="string">10s</span></span><br><span class="line">        <span class="comment"># Should we skip verifying block messages or not (currently not in use)</span></span><br><span class="line">        <span class="attr">skipBlockVerification:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># Dial timeout(unit: second)</span></span><br><span class="line">        <span class="attr">dialTimeout:</span> <span class="string">3s</span></span><br><span class="line">        <span class="comment"># Connection timeout(unit: second)</span></span><br><span class="line">        <span class="attr">connTimeout:</span> <span class="string">2s</span></span><br><span class="line">        <span class="comment"># Buffer size of received messages</span></span><br><span class="line">        <span class="attr">recvBuffSize:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment"># Buffer size of sending messages</span></span><br><span class="line">        <span class="attr">sendBuffSize:</span> <span class="number">200</span></span><br><span class="line">        <span class="comment"># Time to wait before pull engine processes incoming digests (unit: second)</span></span><br><span class="line">        <span class="comment"># Should be slightly smaller than requestWaitTime</span></span><br><span class="line">        <span class="attr">digestWaitTime:</span> <span class="string">1s</span></span><br><span class="line">        <span class="comment"># Time to wait before pull engine removes incoming nonce (unit: milliseconds)</span></span><br><span class="line">        <span class="comment"># Should be slightly bigger than digestWaitTime</span></span><br><span class="line">        <span class="attr">requestWaitTime:</span> <span class="string">1500ms</span></span><br><span class="line">        <span class="comment"># Time to wait before pull engine ends pull (unit: second)</span></span><br><span class="line">        <span class="attr">responseWaitTime:</span> <span class="string">2s</span></span><br><span class="line">        <span class="comment"># Alive check interval(unit: second)</span></span><br><span class="line">        <span class="attr">aliveTimeInterval:</span> <span class="string">5s</span></span><br><span class="line">        <span class="comment"># Alive expiration timeout(unit: second)</span></span><br><span class="line">        <span class="attr">aliveExpirationTimeout:</span> <span class="string">25s</span></span><br><span class="line">        <span class="comment"># Reconnect interval(unit: second)</span></span><br><span class="line">        <span class="attr">reconnectInterval:</span> <span class="string">25s</span></span><br><span class="line">        <span class="comment"># Max number of attempts to connect to a peer</span></span><br><span class="line">        <span class="attr">maxConnectionAttempts:</span> <span class="number">120</span></span><br><span class="line">        <span class="comment"># Message expiration factor for alive messages</span></span><br><span class="line">        <span class="attr">msgExpirationFactor:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 需要告诉组织里其他成员的地址和端口</span></span><br><span class="line">        <span class="comment">## CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051</span></span><br><span class="line">        <span class="comment"># This is an endpoint that is published to peers outside of the organization.</span></span><br><span class="line">        <span class="comment"># If this isn't set, the peer will not be known to other organizations.</span></span><br><span class="line">        <span class="attr">externalEndpoint:</span></span><br><span class="line">        <span class="comment"># Leader election service configuration</span></span><br><span class="line">        <span class="attr">election:</span></span><br><span class="line">            <span class="comment"># Longest time peer waits for stable membership during leader election startup (unit: second)</span></span><br><span class="line">            <span class="attr">startupGracePeriod:</span> <span class="string">15s</span></span><br><span class="line">            <span class="comment"># Interval gossip membership samples to check its stability (unit: second)</span></span><br><span class="line">            <span class="attr">membershipSampleInterval:</span> <span class="string">1s</span></span><br><span class="line">            <span class="comment"># Time passes since last declaration message before peer decides to perform leader election (unit: second)</span></span><br><span class="line">            <span class="attr">leaderAliveThreshold:</span> <span class="string">10s</span></span><br><span class="line">            <span class="comment"># Time between peer sends propose message and declares itself as a leader (sends declaration message) (unit: second)</span></span><br><span class="line">            <span class="attr">leaderElectionDuration:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">pvtData:</span></span><br><span class="line">            <span class="comment"># pullRetryThreshold determines the maximum duration of time private data corresponding for a given block</span></span><br><span class="line">            <span class="comment"># would be attempted to be pulled from peers until the block would be committed without the private data</span></span><br><span class="line">            <span class="attr">pullRetryThreshold:</span> <span class="string">60s</span></span><br><span class="line">            <span class="comment"># As private data enters the transient store, it is associated with the peer's ledger's height at that time.</span></span><br><span class="line">            <span class="comment"># transientstoreMaxBlockRetention defines the maximum difference between the current ledger's height upon commit,</span></span><br><span class="line">            <span class="comment"># and the private data residing inside the transient store that is guaranteed not to be purged.</span></span><br><span class="line">            <span class="comment"># Private data is purged from the transient store when blocks with sequences that are multiples</span></span><br><span class="line">            <span class="comment"># of transientstoreMaxBlockRetention are committed.</span></span><br><span class="line">            <span class="attr">transientstoreMaxBlockRetention:</span> <span class="number">1000</span></span><br><span class="line">            <span class="comment"># pushAckTimeout is the maximum time to wait for an acknowledgement from each peer</span></span><br><span class="line">            <span class="comment"># at private data push at endorsement time.</span></span><br><span class="line">            <span class="attr">pushAckTimeout:</span> <span class="string">3s</span></span><br><span class="line">            <span class="comment"># Block to live pulling margin, used as a buffer</span></span><br><span class="line">            <span class="comment"># to prevent peer from trying to pull private data</span></span><br><span class="line">            <span class="comment"># from peers that is soon to be purged in next N blocks.</span></span><br><span class="line">            <span class="comment"># This helps a newly joined peer catch up to current</span></span><br><span class="line">            <span class="comment"># blockchain height quicker.</span></span><br><span class="line">            <span class="attr">btlPullMargin:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># the process of reconciliation is done in an endless loop, while in each iteration reconciler tries to</span></span><br><span class="line">            <span class="comment"># pull from the other peers the most recent missing blocks with a maximum batch size limitation.</span></span><br><span class="line">            <span class="comment"># reconcileBatchSize determines the maximum batch size of missing private data that will be reconciled in a</span></span><br><span class="line">            <span class="comment"># single iteration.</span></span><br><span class="line">            <span class="attr">reconcileBatchSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># reconcileSleepInterval determines the time reconciler sleeps from end of an iteration until the beginning</span></span><br><span class="line">            <span class="comment"># of the next reconciliation iteration.</span></span><br><span class="line">            <span class="attr">reconcileSleepInterval:</span> <span class="string">1m</span></span><br><span class="line">            <span class="comment"># reconciliationEnabled is a flag that indicates whether private data reconciliation is enable or not.</span></span><br><span class="line">            <span class="attr">reconciliationEnabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment"># skipPullingInvalidTransactionsDuringCommit is a flag that indicates whether pulling of invalid</span></span><br><span class="line">            <span class="comment"># transaction's private data from other peers need to be skipped during the commit time and pulled</span></span><br><span class="line">            <span class="comment"># only through reconciler.</span></span><br><span class="line">            <span class="attr">skipPullingInvalidTransactionsDuringCommit:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># implicitCollectionDisseminationPolicy specifies the dissemination  policy for the peer's own implicit collection.</span></span><br><span class="line">            <span class="comment"># When a peer endorses a proposal that writes to its own implicit collection, below values override the default values</span></span><br><span class="line">            <span class="comment"># for disseminating private data.</span></span><br><span class="line">            <span class="comment"># Note that it is applicable to all channels the peer has joined. The implication is that requiredPeerCount has to</span></span><br><span class="line">            <span class="comment"># be smaller than the number of peers in a channel that has the lowest numbers of peers from the organization.</span></span><br><span class="line">            <span class="attr">implicitCollectionDisseminationPolicy:</span></span><br><span class="line">               <span class="comment"># requiredPeerCount defines the minimum number of eligible peers to which the peer must successfully</span></span><br><span class="line">               <span class="comment"># disseminate private data for its own implicit collection during endorsement. Default value is 0.</span></span><br><span class="line">               <span class="attr">requiredPeerCount:</span> <span class="number">0</span></span><br><span class="line">               <span class="comment"># maxPeerCount defines the maximum number of eligible peers to which the peer will attempt to</span></span><br><span class="line">               <span class="comment"># disseminate private data for its own implicit collection during endorsement. Default value is 1.</span></span><br><span class="line">               <span class="attr">maxPeerCount:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Gossip state transfer related configuration</span></span><br><span class="line">        <span class="attr">state:</span></span><br><span class="line">            <span class="comment"># indicates whenever state transfer is enabled or not</span></span><br><span class="line">            <span class="comment"># default value is true, i.e. state transfer is active</span></span><br><span class="line">            <span class="comment"># and takes care to sync up missing blocks allowing</span></span><br><span class="line">            <span class="comment"># lagging peer to catch up to speed with rest network</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># checkInterval interval to check whether peer is lagging behind enough to</span></span><br><span class="line">            <span class="comment"># request blocks via state transfer from another peer.</span></span><br><span class="line">            <span class="attr">checkInterval:</span> <span class="string">10s</span></span><br><span class="line">            <span class="comment"># responseTimeout amount of time to wait for state transfer response from</span></span><br><span class="line">            <span class="comment"># other peers</span></span><br><span class="line">            <span class="attr">responseTimeout:</span> <span class="string">3s</span></span><br><span class="line">            <span class="comment"># batchSize the number of blocks to request via state transfer from another peer</span></span><br><span class="line">            <span class="attr">batchSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># blockBufferSize reflects the size of the re-ordering buffer</span></span><br><span class="line">            <span class="comment"># which captures blocks and takes care to deliver them in order</span></span><br><span class="line">            <span class="comment"># down to the ledger layer. The actual buffer size is bounded between</span></span><br><span class="line">            <span class="comment"># 0 and 2*blockBufferSize, each channel maintains its own buffer</span></span><br><span class="line">            <span class="attr">blockBufferSize:</span> <span class="number">20</span></span><br><span class="line">            <span class="comment"># maxRetries maximum number of re-tries to ask</span></span><br><span class="line">            <span class="comment"># for single state transfer request</span></span><br><span class="line">            <span class="attr">maxRetries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TLS Settings</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">        <span class="comment"># CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">        <span class="comment"># Require server-side TLS</span></span><br><span class="line">        <span class="attr">enabled:</span>  <span class="literal">false</span></span><br><span class="line">        <span class="comment"># Require client certificates / mutual TLS.</span></span><br><span class="line">        <span class="comment"># Note that clients that are not configured to use a certificate will</span></span><br><span class="line">        <span class="comment"># fail to connect to the peer.</span></span><br><span class="line">        <span class="attr">clientAuthRequired:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># X.509 certificate used for TLS server</span></span><br><span class="line">        <span class="attr">cert:</span></span><br><span class="line">            <span class="comment">## CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">tls/server.crt</span></span><br><span class="line">        <span class="comment"># Private key used for TLS server (and client if clientAuthEnabled</span></span><br><span class="line">        <span class="comment"># is set to true</span></span><br><span class="line">        <span class="attr">key:</span></span><br><span class="line">            <span class="comment">## CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">tls/server.key</span></span><br><span class="line">        <span class="comment"># Trusted root certificate chain for tls.cert</span></span><br><span class="line">        <span class="attr">rootcert:</span></span><br><span class="line">            <span class="comment">## CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">tls/ca.crt</span></span><br><span class="line">        <span class="comment"># Set of root certificate authorities used to verify client certificates</span></span><br><span class="line">        <span class="attr">clientRootCAs:</span></span><br><span class="line">            <span class="attr">files:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">tls/ca.crt</span></span><br><span class="line">        <span class="comment"># Private key used for TLS when making client connections.  If</span></span><br><span class="line">        <span class="comment"># not set, peer.tls.key.file will be used instead</span></span><br><span class="line">        <span class="attr">clientKey:</span></span><br><span class="line">            <span class="attr">file:</span></span><br><span class="line">        <span class="comment"># X.509 certificate used for TLS when making client connections.</span></span><br><span class="line">        <span class="comment"># If not set, peer.tls.cert.file will be used instead</span></span><br><span class="line">        <span class="attr">clientCert:</span></span><br><span class="line">            <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Authentication contains configuration parameters related to authenticating</span></span><br><span class="line">    <span class="comment"># client messages</span></span><br><span class="line">    <span class="attr">authentication:</span></span><br><span class="line">        <span class="comment"># the acceptable difference between the current server time and the</span></span><br><span class="line">        <span class="comment"># client's time as specified in a client request message</span></span><br><span class="line">        <span class="attr">timewindow:</span> <span class="string">15m</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path on the file system where peer will store data (eg ledger). This</span></span><br><span class="line">    <span class="comment"># location must be access control protected to prevent unintended</span></span><br><span class="line">    <span class="comment"># modification that might corrupt the peer operations.</span></span><br><span class="line">    <span class="attr">fileSystemPath:</span> <span class="string">/var/hyperledger/production</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BCCSP (Blockchain crypto provider): Select which crypto implementation or</span></span><br><span class="line">    <span class="comment"># library to use</span></span><br><span class="line">    <span class="attr">BCCSP:</span></span><br><span class="line">        <span class="attr">Default:</span> <span class="string">SW</span></span><br><span class="line">        <span class="comment"># Settings for the SW crypto provider (i.e. when DEFAULT: SW)</span></span><br><span class="line">        <span class="attr">SW:</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> The default Hash and Security level needs refactoring to be</span></span><br><span class="line">            <span class="comment"># fully configurable. Changing these defaults requires coordination</span></span><br><span class="line">            <span class="comment"># SHA2 is hardcoded in several places, not only BCCSP</span></span><br><span class="line">            <span class="attr">Hash:</span> <span class="string">SHA2</span></span><br><span class="line">            <span class="attr">Security:</span> <span class="number">256</span></span><br><span class="line">            <span class="comment"># Location of Key Store</span></span><br><span class="line">            <span class="attr">FileKeyStore:</span></span><br><span class="line">                <span class="comment"># If "", defaults to 'mspConfigPath'/keystore</span></span><br><span class="line">                <span class="attr">KeyStore:</span></span><br><span class="line">        <span class="comment"># Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)</span></span><br><span class="line">        <span class="attr">PKCS11:</span></span><br><span class="line">            <span class="comment"># Location of the PKCS11 module library</span></span><br><span class="line">            <span class="attr">Library:</span></span><br><span class="line">            <span class="comment"># Token Label</span></span><br><span class="line">            <span class="attr">Label:</span></span><br><span class="line">            <span class="comment"># User PIN</span></span><br><span class="line">            <span class="attr">Pin:</span></span><br><span class="line">            <span class="attr">Hash:</span></span><br><span class="line">            <span class="attr">Security:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path on the file system where peer will find MSP local configurations</span></span><br><span class="line">    <span class="attr">mspConfigPath:</span> <span class="string">msp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## localMspId 至少要与一个通道内记录的成员名称一致</span></span><br><span class="line">    <span class="comment">## CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="comment"># Identifier of the local MSP</span></span><br><span class="line">    <span class="comment"># ----!!!!IMPORTANT!!!-!!!IMPORTANT!!!-!!!IMPORTANT!!!!----</span></span><br><span class="line">    <span class="comment"># Deployers need to change the value of the localMspId string.</span></span><br><span class="line">    <span class="comment"># In particular, the name of the local MSP ID of a peer needs</span></span><br><span class="line">    <span class="comment"># to match the name of one of the MSPs in each of the channel</span></span><br><span class="line">    <span class="comment"># that this peer is a member of. Otherwise this peer's messages</span></span><br><span class="line">    <span class="comment"># will not be identified as valid by other nodes.</span></span><br><span class="line">    <span class="attr">localMspId:</span> <span class="string">SampleOrg</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CLI common client config options</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># connection timeout</span></span><br><span class="line">        <span class="attr">connTimeout:</span> <span class="string">3s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Delivery service related config</span></span><br><span class="line">    <span class="attr">deliveryclient:</span></span><br><span class="line">        <span class="comment"># It sets the total time the delivery service may spend in reconnection</span></span><br><span class="line">        <span class="comment"># attempts until its retry logic gives up and returns an error</span></span><br><span class="line">        <span class="attr">reconnectTotalTimeThreshold:</span> <span class="string">3600s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># It sets the delivery service &lt;-&gt; ordering service node connection timeout</span></span><br><span class="line">        <span class="attr">connTimeout:</span> <span class="string">3s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># It sets the delivery service maximal delay between consecutive retries</span></span><br><span class="line">        <span class="attr">reConnectBackoffThreshold:</span> <span class="string">3600s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># A list of orderer endpoint addresses which should be overridden</span></span><br><span class="line">        <span class="comment"># when found in channel configurations.</span></span><br><span class="line">        <span class="attr">addressOverrides:</span></span><br><span class="line">        <span class="comment">#  - from:</span></span><br><span class="line">        <span class="comment">#    to:</span></span><br><span class="line">        <span class="comment">#    caCertsFile:</span></span><br><span class="line">        <span class="comment">#  - from:</span></span><br><span class="line">        <span class="comment">#    to:</span></span><br><span class="line">        <span class="comment">#    caCertsFile:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Type for the local MSP - by default it's of type bccsp</span></span><br><span class="line">    <span class="attr">localMspType:</span> <span class="string">bccsp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Used with Go profiling tools only in none production environment. In</span></span><br><span class="line">    <span class="comment"># production, it should be disabled (eg enabled: false)</span></span><br><span class="line">    <span class="attr">profile:</span></span><br><span class="line">        <span class="comment">## 可以在非生产环境配置, 使用 Go profiling 工具</span></span><br><span class="line">        <span class="comment">## CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">        <span class="attr">enabled:</span>     <span class="literal">false</span></span><br><span class="line">        <span class="attr">listenAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:6060</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Handlers defines custom handlers that can filter and mutate</span></span><br><span class="line">    <span class="comment"># objects passing within the peer, such as:</span></span><br><span class="line">    <span class="comment">#   Auth filter - reject or forward proposals from clients</span></span><br><span class="line">    <span class="comment">#   Decorators  - append or mutate the chaincode input passed to the chaincode</span></span><br><span class="line">    <span class="comment">#   Endorsers   - Custom signing over proposal response payload and its mutation</span></span><br><span class="line">    <span class="comment"># Valid handler definition contains:</span></span><br><span class="line">    <span class="comment">#   - A name which is a factory method name defined in</span></span><br><span class="line">    <span class="comment">#     core/handlers/library/library.go for statically compiled handlers</span></span><br><span class="line">    <span class="comment">#   - library path to shared object binary for pluggable filters</span></span><br><span class="line">    <span class="comment"># Auth filters and decorators are chained and executed in the order that</span></span><br><span class="line">    <span class="comment"># they are defined. For example:</span></span><br><span class="line">    <span class="comment"># authFilters:</span></span><br><span class="line">    <span class="comment">#   -</span></span><br><span class="line">    <span class="comment">#     name: FilterOne</span></span><br><span class="line">    <span class="comment">#     library: /opt/lib/filter.so</span></span><br><span class="line">    <span class="comment">#   -</span></span><br><span class="line">    <span class="comment">#     name: FilterTwo</span></span><br><span class="line">    <span class="comment"># decorators:</span></span><br><span class="line">    <span class="comment">#   -</span></span><br><span class="line">    <span class="comment">#     name: DecoratorOne</span></span><br><span class="line">    <span class="comment">#   -</span></span><br><span class="line">    <span class="comment">#     name: DecoratorTwo</span></span><br><span class="line">    <span class="comment">#     library: /opt/lib/decorator.so</span></span><br><span class="line">    <span class="comment"># Endorsers are configured as a map that its keys are the endorsement system chaincodes that are being overridden.</span></span><br><span class="line">    <span class="comment"># Below is an example that overrides the default ESCC and uses an endorsement plugin that has the same functionality</span></span><br><span class="line">    <span class="comment"># as the default ESCC.</span></span><br><span class="line">    <span class="comment"># If the 'library' property is missing, the name is used as the constructor method in the builtin library similar</span></span><br><span class="line">    <span class="comment"># to auth filters and decorators.</span></span><br><span class="line">    <span class="comment"># endorsers:</span></span><br><span class="line">    <span class="comment">#   escc:</span></span><br><span class="line">    <span class="comment">#     name: DefaultESCC</span></span><br><span class="line">    <span class="comment">#     library: /etc/hyperledger/fabric/plugin/escc.so</span></span><br><span class="line">    <span class="attr">handlers:</span></span><br><span class="line">        <span class="attr">authFilters:</span></span><br><span class="line">          <span class="bullet">-</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">DefaultAuth</span></span><br><span class="line">          <span class="bullet">-</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ExpirationCheck</span>    <span class="comment"># This filter checks identity x509 certificate expiration</span></span><br><span class="line">        <span class="attr">decorators:</span></span><br><span class="line">          <span class="bullet">-</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">DefaultDecorator</span></span><br><span class="line">        <span class="attr">endorsers:</span></span><br><span class="line">          <span class="attr">escc:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">DefaultEndorsement</span></span><br><span class="line">            <span class="attr">library:</span></span><br><span class="line">        <span class="attr">validators:</span></span><br><span class="line">          <span class="attr">vscc:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">DefaultValidation</span></span><br><span class="line">            <span class="attr">library:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    library: /etc/hyperledger/fabric/plugin/escc.so</span></span><br><span class="line">    <span class="comment"># Number of goroutines that will execute transaction validation in parallel.</span></span><br><span class="line">    <span class="comment"># By default, the peer chooses the number of CPUs on the machine. Set this</span></span><br><span class="line">    <span class="comment"># variable to override that choice.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> overriding this value might negatively influence the performance of</span></span><br><span class="line">    <span class="comment"># the peer so please change this value only if you know what you're doing</span></span><br><span class="line">    <span class="attr">validatorPoolSize:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The discovery service is used by clients to query information about peers,</span></span><br><span class="line">    <span class="comment"># such as - which peers have joined a certain channel, what is the latest</span></span><br><span class="line">    <span class="comment"># channel config, and most importantly - given a chaincode and a channel,</span></span><br><span class="line">    <span class="comment"># what possible sets of peers satisfy the endorsement policy.</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># Whether the authentication cache is enabled or not.</span></span><br><span class="line">        <span class="attr">authCacheEnabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># The maximum size of the cache, after which a purge takes place</span></span><br><span class="line">        <span class="attr">authCacheMaxSize:</span> <span class="number">1000</span></span><br><span class="line">        <span class="comment"># The proportion (0 to 1) of entries that remain in the cache after the cache is purged due to overpopulation</span></span><br><span class="line">        <span class="attr">authCachePurgeRetentionRatio:</span> <span class="number">0.75</span></span><br><span class="line">        <span class="comment"># Whether to allow non-admins to perform non channel scoped queries.</span></span><br><span class="line">        <span class="comment"># When this is false, it means that only peer admins can perform non channel scoped queries.</span></span><br><span class="line">        <span class="attr">orgMembersAllowedAccess:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Limits is used to configure some internal resource limits.</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">        <span class="comment"># Concurrency limits the number of concurrently running requests to a service on each peer.</span></span><br><span class="line">        <span class="comment"># Currently this option is only applied to endorser service and deliver service.</span></span><br><span class="line">        <span class="comment"># When the property is missing or the value is 0, the concurrency limit is disabled for the service.</span></span><br><span class="line">        <span class="attr">concurrency:</span></span><br><span class="line">            <span class="comment"># endorserService limits concurrent requests to endorser service that handles chaincode deployment, query and invocation,</span></span><br><span class="line">            <span class="comment"># including both user chaincodes and system chaincodes.</span></span><br><span class="line">            <span class="attr">endorserService:</span> <span class="number">2500</span></span><br><span class="line">            <span class="comment"># deliverService limits concurrent event listeners registered to deliver service for blocks and transaction events.</span></span><br><span class="line">            <span class="attr">deliverService:</span> <span class="number">2500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    VM section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">vm:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 虚拟机管理端口</span></span><br><span class="line">    <span class="comment">## CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">    <span class="comment"># Endpoint of the vm management system.  For docker can be one of the following in general</span></span><br><span class="line">    <span class="comment"># unix:///var/run/docker.sock</span></span><br><span class="line">    <span class="comment"># http://localhost:2375</span></span><br><span class="line">    <span class="comment"># https://localhost:2376</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">unix:///var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># settings for docker vms</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">        <span class="attr">tls:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">ca:</span></span><br><span class="line">                <span class="attr">file:</span> <span class="string">docker/ca.crt</span></span><br><span class="line">            <span class="attr">cert:</span></span><br><span class="line">                <span class="attr">file:</span> <span class="string">docker/tls.crt</span></span><br><span class="line">            <span class="attr">key:</span></span><br><span class="line">                <span class="attr">file:</span> <span class="string">docker/tls.key</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Enables/disables the standard out/err from chaincode containers for</span></span><br><span class="line">        <span class="comment"># debugging purposes</span></span><br><span class="line">        <span class="attr">attachStdout:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Parameters on creating docker container.</span></span><br><span class="line">        <span class="comment"># Container may be efficiently created using ipam &amp; dns-server for cluster</span></span><br><span class="line">        <span class="comment"># NetworkMode - sets the networking mode for the container. Supported</span></span><br><span class="line">        <span class="comment"># standard values are: `host`(default),`bridge`,`ipvlan`,`none`.</span></span><br><span class="line">        <span class="comment"># Dns - a list of DNS servers for the container to use.</span></span><br><span class="line">        <span class="comment"># <span class="doctag">Note:</span>  `Privileged` `Binds` `Links` and `PortBindings` properties of</span></span><br><span class="line">        <span class="comment"># Docker Host Config are not supported and will not be used if set.</span></span><br><span class="line">        <span class="comment"># LogConfig - sets the logging driver (Type) and related options</span></span><br><span class="line">        <span class="comment"># (Config) for Docker. For more info,</span></span><br><span class="line">        <span class="comment"># https://docs.docker.com/engine/admin/logging/overview/</span></span><br><span class="line">        <span class="comment"># <span class="doctag">Note:</span> Set LogConfig using Environment Variables is not supported.</span></span><br><span class="line">        <span class="attr">hostConfig:</span></span><br><span class="line">            <span class="comment">## CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_test</span></span><br><span class="line">            <span class="attr">NetworkMode:</span> <span class="string">host</span></span><br><span class="line">            <span class="attr">Dns:</span></span><br><span class="line">               <span class="comment"># - 192.168.0.1</span></span><br><span class="line">            <span class="attr">LogConfig:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">json-file</span></span><br><span class="line">                <span class="attr">Config:</span></span><br><span class="line">                    <span class="attr">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">                    <span class="attr">max-file:</span> <span class="string">"5"</span></span><br><span class="line">            <span class="attr">Memory:</span> <span class="number">2147483648</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Chaincode section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">chaincode:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The id is used by the Chaincode stub to register the executing Chaincode</span></span><br><span class="line">    <span class="comment"># ID with the Peer and is generally supplied through ENV variables</span></span><br><span class="line">    <span class="comment"># the `path` form of ID is provided when installing the chaincode.</span></span><br><span class="line">    <span class="comment"># The `name` is used for all other requests and can be any string.</span></span><br><span class="line">    <span class="attr">id:</span></span><br><span class="line">        <span class="attr">path:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generic builder environment, suitable for most chaincode types</span></span><br><span class="line">    <span class="attr">builder:</span> <span class="string">$(DOCKER_NS)/fabric-ccenv:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enables/disables force pulling of the base docker images (listed below)</span></span><br><span class="line">    <span class="comment"># during user chaincode instantiation.</span></span><br><span class="line">    <span class="comment"># Useful when using moving image tags (such as :latest)</span></span><br><span class="line">    <span class="attr">pull:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">golang:</span></span><br><span class="line">        <span class="comment"># golang will never need more than baseos</span></span><br><span class="line">        <span class="attr">runtime:</span> <span class="string">$(DOCKER_NS)/fabric-baseos:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># whether or not golang chaincode should be linked dynamically</span></span><br><span class="line">        <span class="attr">dynamicLink:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">java:</span></span><br><span class="line">        <span class="comment"># This is an image based on java:openjdk-8 with addition compiler</span></span><br><span class="line">        <span class="comment"># tools added for java shim layer packaging.</span></span><br><span class="line">        <span class="comment"># This image is packed with shim layer libraries that are necessary</span></span><br><span class="line">        <span class="comment"># for Java chaincode runtime.</span></span><br><span class="line">        <span class="attr">runtime:</span> <span class="string">$(DOCKER_NS)/fabric-javaenv:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">node:</span></span><br><span class="line">        <span class="comment"># This is an image based on node:$(NODE_VER)-alpine</span></span><br><span class="line">        <span class="attr">runtime:</span> <span class="string">$(DOCKER_NS)/fabric-nodeenv:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># List of directories to treat as external builders and launchers for</span></span><br><span class="line">    <span class="comment"># chaincode. The external builder detection processing will iterate over the</span></span><br><span class="line">    <span class="comment"># builders in the order specified below.</span></span><br><span class="line">    <span class="attr">externalBuilders:</span> <span class="string">[]</span></span><br><span class="line">        <span class="comment"># - path: /path/to/directory</span></span><br><span class="line">        <span class="comment">#   name: descriptive-builder-name</span></span><br><span class="line">        <span class="comment">#   propagateEnvironment:</span></span><br><span class="line">        <span class="comment">#      - ENVVAR_NAME_TO_PROPAGATE_FROM_PEER</span></span><br><span class="line">        <span class="comment">#      - GOPROXY</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The maximum duration to wait for the chaincode build and install process</span></span><br><span class="line">    <span class="comment"># to complete.</span></span><br><span class="line">    <span class="attr">installTimeout:</span> <span class="string">300s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Timeout duration for starting up a container and waiting for Register</span></span><br><span class="line">    <span class="comment"># to come through.</span></span><br><span class="line">    <span class="attr">startuptimeout:</span> <span class="string">300s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Timeout duration for Invoke and Init calls to prevent runaway.</span></span><br><span class="line">    <span class="comment"># This timeout is used by all chaincodes in all the channels, including</span></span><br><span class="line">    <span class="comment"># system chaincodes.</span></span><br><span class="line">    <span class="comment"># Note that during Invoke, if the image is not available (e.g. being</span></span><br><span class="line">    <span class="comment"># cleaned up when in development environment), the peer will automatically</span></span><br><span class="line">    <span class="comment"># build the image, which might take more time. In production environment,</span></span><br><span class="line">    <span class="comment"># the chaincode image is unlikely to be deleted, so the timeout could be</span></span><br><span class="line">    <span class="comment"># reduced accordingly.</span></span><br><span class="line">    <span class="attr">executetimeout:</span> <span class="string">30s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># There are 2 modes: "dev" and "net".</span></span><br><span class="line">    <span class="comment"># In dev mode, user runs the chaincode after starting peer from</span></span><br><span class="line">    <span class="comment"># command line on local machine.</span></span><br><span class="line">    <span class="comment"># In net mode, peer will run chaincode in a docker container.</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">net</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># keepalive in seconds. In situations where the communication goes through a</span></span><br><span class="line">    <span class="comment"># proxy that does not support keep-alive, this parameter will maintain connection</span></span><br><span class="line">    <span class="comment"># between peer and chaincode.</span></span><br><span class="line">    <span class="comment"># A value &lt;= 0 turns keepalive off</span></span><br><span class="line">    <span class="attr">keepalive:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># enabled system chaincodes</span></span><br><span class="line">    <span class="attr">system:</span></span><br><span class="line">        <span class="attr">_lifecycle:</span> <span class="string">enable</span></span><br><span class="line">        <span class="attr">cscc:</span> <span class="string">enable</span></span><br><span class="line">        <span class="attr">lscc:</span> <span class="string">enable</span></span><br><span class="line">        <span class="attr">escc:</span> <span class="string">enable</span></span><br><span class="line">        <span class="attr">vscc:</span> <span class="string">enable</span></span><br><span class="line">        <span class="attr">qscc:</span> <span class="string">enable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Logging section for the chaincode container</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="comment"># Default level for all loggers within the chaincode container</span></span><br><span class="line">      <span class="attr">level:</span>  <span class="string">info</span></span><br><span class="line">      <span class="comment"># Override default level for the 'shim' logger</span></span><br><span class="line">      <span class="attr">shim:</span>   <span class="string">warning</span></span><br><span class="line">      <span class="comment"># Format for the chaincode container logs</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">'<span class="template-variable">%&#123;color&#125;</span><span class="template-variable">%&#123;time:2006-01-02 15:04:05.000 MST&#125;</span> [<span class="template-variable">%&#123;module&#125;</span>] <span class="template-variable">%&#123;shortfunc&#125;</span> -&gt; <span class="template-variable">%&#123;level:.4s&#125;</span> <span class="template-variable">%&#123;id:03x&#125;</span><span class="template-variable">%&#123;color:reset&#125;</span> <span class="template-variable">%&#123;message&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Ledger section - ledger configuration encompasses both the blockchain</span></span><br><span class="line"><span class="comment">#    and the state</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">ledger:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">blockchain:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">state:</span></span><br><span class="line">    <span class="comment"># stateDatabase - options are "goleveldb", "CouchDB"</span></span><br><span class="line">    <span class="comment"># goleveldb - default state database stored in goleveldb.</span></span><br><span class="line">    <span class="comment"># CouchDB - store state database in CouchDB</span></span><br><span class="line">    <span class="attr">stateDatabase:</span> <span class="string">goleveldb</span></span><br><span class="line">    <span class="comment"># Limit on the number of records to return per query</span></span><br><span class="line">    <span class="attr">totalQueryLimit:</span> <span class="number">100000</span></span><br><span class="line">    <span class="attr">couchDBConfig:</span></span><br><span class="line">       <span class="comment"># It is recommended to run CouchDB on the same server as the peer, and</span></span><br><span class="line">       <span class="comment"># not map the CouchDB container port to a server port in docker-compose.</span></span><br><span class="line">       <span class="comment"># Otherwise proper security must be provided on the connection between</span></span><br><span class="line">       <span class="comment"># CouchDB client (on the peer) and server.</span></span><br><span class="line">       <span class="attr">couchDBAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5984</span></span><br><span class="line">       <span class="comment"># This username must have read and write authority on CouchDB</span></span><br><span class="line">       <span class="attr">username:</span></span><br><span class="line">       <span class="comment"># The password is recommended to pass as an environment variable</span></span><br><span class="line">       <span class="comment"># during start up (eg CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD).</span></span><br><span class="line">       <span class="comment"># If it is stored here, the file must be access control protected</span></span><br><span class="line">       <span class="comment"># to prevent unintended users from discovering the password.</span></span><br><span class="line">       <span class="attr">password:</span></span><br><span class="line">       <span class="comment"># Number of retries for CouchDB errors</span></span><br><span class="line">       <span class="attr">maxRetries:</span> <span class="number">3</span></span><br><span class="line">       <span class="comment"># Number of retries for CouchDB errors during peer startup.</span></span><br><span class="line">       <span class="comment"># The delay between retries doubles for each attempt.</span></span><br><span class="line">       <span class="comment"># Default of 10 retries results in 11 attempts over 2 minutes.</span></span><br><span class="line">       <span class="attr">maxRetriesOnStartup:</span> <span class="number">10</span></span><br><span class="line">       <span class="comment"># CouchDB request timeout (unit: duration, e.g. 20s)</span></span><br><span class="line">       <span class="attr">requestTimeout:</span> <span class="string">35s</span></span><br><span class="line">       <span class="comment"># Limit on the number of records per each CouchDB query</span></span><br><span class="line">       <span class="comment"># Note that chaincode queries are only bound by totalQueryLimit.</span></span><br><span class="line">       <span class="comment"># Internally the chaincode may execute multiple CouchDB queries,</span></span><br><span class="line">       <span class="comment"># each of size internalQueryLimit.</span></span><br><span class="line">       <span class="attr">internalQueryLimit:</span> <span class="number">1000</span></span><br><span class="line">       <span class="comment"># Limit on the number of records per CouchDB bulk update batch</span></span><br><span class="line">       <span class="attr">maxBatchUpdateSize:</span> <span class="number">1000</span></span><br><span class="line">       <span class="comment"># Warm indexes after every N blocks.</span></span><br><span class="line">       <span class="comment"># This option warms any indexes that have been</span></span><br><span class="line">       <span class="comment"># deployed to CouchDB after every N blocks.</span></span><br><span class="line">       <span class="comment"># A value of 1 will warm indexes after every block commit,</span></span><br><span class="line">       <span class="comment"># to ensure fast selector queries.</span></span><br><span class="line">       <span class="comment"># Increasing the value may improve write efficiency of peer and CouchDB,</span></span><br><span class="line">       <span class="comment"># but may degrade query response time.</span></span><br><span class="line">       <span class="attr">warmIndexesAfterNBlocks:</span> <span class="number">1</span></span><br><span class="line">       <span class="comment"># Create the _global_changes system database</span></span><br><span class="line">       <span class="comment"># This is optional.  Creating the global changes database will require</span></span><br><span class="line">       <span class="comment"># additional system resources to track changes and maintain the database</span></span><br><span class="line">       <span class="attr">createGlobalChangesDB:</span> <span class="literal">false</span></span><br><span class="line">       <span class="comment"># CacheSize denotes the maximum mega bytes (MB) to be allocated for the in-memory state</span></span><br><span class="line">       <span class="comment"># cache. Note that CacheSize needs to be a multiple of 32 MB. If it is not a multiple</span></span><br><span class="line">       <span class="comment"># of 32 MB, the peer would round the size to the next multiple of 32 MB.</span></span><br><span class="line">       <span class="comment"># To disable the cache, 0 MB needs to be assigned to the cacheSize.</span></span><br><span class="line">       <span class="attr">cacheSize:</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">history:</span></span><br><span class="line">    <span class="comment"># enableHistoryDatabase - options are true or false</span></span><br><span class="line">    <span class="comment"># Indicates if the history of key updates should be stored.</span></span><br><span class="line">    <span class="comment"># All history 'index' will be stored in goleveldb, regardless if using</span></span><br><span class="line">    <span class="comment"># CouchDB or alternate database for the state.</span></span><br><span class="line">    <span class="attr">enableHistoryDatabase:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pvtdataStore:</span></span><br><span class="line">    <span class="comment"># the maximum db batch size for converting</span></span><br><span class="line">    <span class="comment"># the ineligible missing data entries to eligible missing data entries</span></span><br><span class="line">    <span class="attr">collElgProcMaxDbBatchSize:</span> <span class="number">5000</span></span><br><span class="line">    <span class="comment"># the minimum duration (in milliseconds) between writing</span></span><br><span class="line">    <span class="comment"># two consecutive db batches for converting the ineligible missing data entries to eligible missing data entries</span></span><br><span class="line">    <span class="attr">collElgProcDbBatchesInterval:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Operations section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">operations:</span></span><br><span class="line">    <span class="comment"># host and port for the operations server</span></span><br><span class="line">    <span class="attr">listenAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9443</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TLS configuration for the operations endpoint</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">        <span class="comment"># TLS enabled</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># path to PEM encoded server certificate for the operations server</span></span><br><span class="line">        <span class="attr">cert:</span></span><br><span class="line">            <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># path to PEM encoded server key for the operations server</span></span><br><span class="line">        <span class="attr">key:</span></span><br><span class="line">            <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># most operations service endpoints require client authentication when TLS</span></span><br><span class="line">        <span class="comment"># is enabled. clientAuthRequired requires client certificate authentication</span></span><br><span class="line">        <span class="comment"># at the TLS layer to access all resources.</span></span><br><span class="line">        <span class="attr">clientAuthRequired:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># paths to PEM encoded ca certificates to trust for client authentication</span></span><br><span class="line">        <span class="attr">clientRootCAs:</span></span><br><span class="line">            <span class="attr">files:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    Metrics section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line">    <span class="comment"># metrics provider is one of statsd, prometheus, or disabled</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">disabled</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># statsd configuration</span></span><br><span class="line">    <span class="attr">statsd:</span></span><br><span class="line">        <span class="comment"># network type: tcp or udp</span></span><br><span class="line">        <span class="attr">network:</span> <span class="string">udp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># statsd server address</span></span><br><span class="line">        <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8125</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># the interval at which locally cached counters and gauges are pushed</span></span><br><span class="line">        <span class="comment"># to statsd; timings are pushed immediately</span></span><br><span class="line">        <span class="attr">writeInterval:</span> <span class="string">10s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># prefix is prepended to all emitted statsd metrics</span></span><br><span class="line">        <span class="attr">prefix:</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>fabric-deploy</title>
    <url>/posts/uncategorized/cba64898/</url>
    <content><![CDATA[<h1 id="先决条件">1.  先决条件</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:hyperledger/fabric.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap.sh 初始化脚本</span></span><br><span class="line"><span class="comment"># -h 查看帮助</span></span><br><span class="line"><span class="comment"># 可以下载 Docker 镜像, 通过 -d 跳过</span></span><br><span class="line"><span class="comment"># 可以下载 fabric-samples 项目, 通过 -s 跳过</span></span><br><span class="line"><span class="comment"># 可以下载运行时的二进制文件, 通过 -b 跳过</span></span><br><span class="line"><span class="comment"># 1. 下载 Docker 镜像</span></span><br><span class="line">fabric/scripts/bootstrap.sh -s -b</span><br><span class="line"><span class="comment"># 2. 下载 fabric-samples 项目到当前目录</span></span><br><span class="line">fabric/scripts/bootstrap.sh -d -b</span><br><span class="line"><span class="comment"># 3. 下载运行时的二进制文件</span></span><br><span class="line"><span class="comment"># 下载比较慢, 可进入脚本修改 download 方法, 改用 axel 下载</span></span><br><span class="line">fabric/scripts/bootstrap.sh -d -s</span><br><span class="line"><span class="comment"># axel -q -n 100 https://github.com/hyperledger/fabric/releases/download/v2.2.0/hyperledger-fabric-linux-amd64-2.2.0.tar.gz</span></span><br><span class="line"><span class="comment"># axel -q -n 100 https://github.com/hyperledger/fabric-ca/releases/download/v1.4.8/hyperledger-fabric-ca-linux-amd64-1.4.8.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.1. 将二进制文件下的 bin 目录配置到 PATH 环境变量</span></span><br><span class="line"><span class="built_in">export</span> FABRIC_BINARY_PATH=/home/raven/Workspace/ForkProjects/fabric-binary</span><br><span class="line"><span class="built_in">export</span> FABRIC_SAMPLES_PATH=/home/raven/Workspace/ForkProjects/fabric-samples</span><br><span class="line"><span class="built_in">export</span> FABRIC_CFG_PATH=<span class="variable">$FABRIC_SAMPLES_PATH</span>/config/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$FABRIC_SAMPLES_PATH</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2. 将运行时的二进制文件 `/bin`, `/config` 放在 fabric-samples 目录下, 可用软连接的方式</span></span><br><span class="line">ln -sf <span class="variable">$FABRIC_BINARY_PATH</span>/bin <span class="variable">$FABRIC_SAMPLES_PATH</span>/bin</span><br><span class="line">ln -sf <span class="variable">$FABRIC_BINARY_PATH</span>/config <span class="variable">$FABRIC_SAMPLES_PATH</span>/config</span><br></pre></td></tr></table></figure>
<p>通过 <a href="http://bootstrap.sh" target="_blank" rel="noopener">bootstrap.sh</a> 安装完 3 样东西后, 可以部署测试网络</p>
<h1 id="部署测试网络">2.  部署测试网络</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须到 test-network 目录下, 否则会报错:</span></span><br><span class="line"><span class="comment"># ERROR! Peer binary and configuration files not found..</span></span><br><span class="line"><span class="built_in">cd</span> fabric-samples/<span class="built_in">test</span>-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">./network.sh -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署测试网络</span></span><br><span class="line">./network.sh up</span><br><span class="line"><span class="comment"># ./network.sh up createChannel -ca -c mychannel -s couchdb -i 2.0.0</span></span><br><span class="line"><span class="comment"># ./network.sh createChannel -c channelName</span></span><br><span class="line"><span class="comment"># ./network.sh deployCC -ccn basic -ccl javascript</span></span><br><span class="line"><span class="comment"># ./network.sh deployCC -ccn mychaincode -ccp ./user/mychaincode -ccv 1 -ccl javascript</span></span><br></pre></td></tr></table></figure>
<p><code>./network.sh up</code> 做了以下事情:</p>
<ol>
<li>读取 <code>organizations/cryptogen</code> 目录下的配置, 通过 <code>cryptogen</code> 工具为 2 个 peer (org1, org2) 和 1 个 orderer 节点生成身份验证材料.<br>
身份验证材料分别放在 ordererOrganizations 和 peerOrganizations 目录下.</li>
<li>读取 <code>configtx/configtx.yaml</code> 配置, 通过 <code>configtxgen</code> 工具创建系统通道创世区块<br>
系统通道创世区块放在 system-genesis-block 目录下</li>
<li>读取 <code>docker/docker-compose-test-net.yaml</code>, 通过 <code>docker</code> 建立网络</li>
</ol>
<h1 id="创建通道">3.  创建通道</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./network.sh createChannel</span><br></pre></td></tr></table></figure>
<p><code>./network.sh</code> 会调用 <code>scripts/createChannel.sh</code> 脚本创建通道:</p>
<ol>
<li>读取 <code>configtx/configtx.yaml</code> 配置, 初始化事务</li>
<li>将 2 个 peer 节点加入通道, 并相互锚定.</li>
</ol>
<h1 id="部署链码">4.  部署链码</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在当前目录下生成链码包 basic.tar.gz</span></span><br><span class="line"><span class="comment"># --path 指定代码目录</span></span><br><span class="line"><span class="comment"># --lang 指定语言</span></span><br><span class="line"><span class="comment"># --label 创建链码标签, 用于安装后标识链码</span></span><br><span class="line"><span class="comment"># peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-java//build/install/basic --lang java --label basic_1.0</span></span><br><span class="line"></span><br><span class="line">./network.sh deployCC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置以下环境变量, 之后调用 peer 命令就可以以 org1 的身份查询</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ENABLED=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_LOCALMSPID=<span class="string">"Org1MSP"</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ROOTCERT_FILE=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_MSPCONFIGPATH=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_ADDRESS=localhost:7051</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装链码</span></span><br><span class="line"><span class="comment"># 过程有点慢</span></span><br><span class="line">peer lifecycle chaincode install basic.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的链码</span></span><br><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure>
<p><code>./network.sh</code> 会调用 <code>scripts/deployCC.sh</code> 脚本部署链码:</p>
<ol>
<li>构建打包链码项目</li>
<li>将链码包提交给通道</li>
<li>将初始数据提交到账本</li>
</ol>
<h1 id="账本操作">5.  账本操作</h1>
<h2 id="初始化">5.1.  初始化</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">'&#123;"function":"InitLedger","Args":[]&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="查询账本">5.2.  查询账本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c <span class="string">'&#123;"Args":["GetAllAssets"]&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="修改账本">5.3.  修改账本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">'&#123;"function":"TransferAsset","Args":["asset6","Christopher"]&#125;'</span></span><br></pre></td></tr></table></figure>
<h1 id="关闭区块链网络">6.  关闭区块链网络</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure>
<h1 id="resource">7.  Resource</h1>
<ul>
<li><a href="https://github.com/hyperledger/fabric" target="_blank" rel="noopener">https://github.com/hyperledger/fabric</a></li>
<li><a href="https://github.com/hyperledger/fabric-samples" target="_blank" rel="noopener">https://github.com/hyperledger/fabric-samples</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>fabric-config</title>
    <url>/posts/uncategorized/8d175f1e/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FABRIC_LOGGING_SPEC&#x3D;INFO</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>双花</title>
    <url>/posts/uncategorized/b9897791/</url>
    <content><![CDATA[<p><a href="https://baijiahao.baidu.com/s?id=1659156491130048039&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1659156491130048039&amp;wfr=spider&amp;for=pc</a></p>
]]></content>
  </entry>
  <entry>
    <title>fabric-faq</title>
    <url>/posts/uncategorized/29dd6750/</url>
    <content><![CDATA[<h1 id="faq">1.  FAQ</h1>
<h2 id="fabric14为何选择couchdb作为数据库">1.1.  fabric1.4为何选择couchDB作为数据库</h2>
<p>CouchDB是一种NoSQL解决方案. 它是一个面向文档的数据库, 其中文档字段存储为键值映射. 字段可以是简单的键值对, 列表或映射. 除了LevelDB支持的键控/合成键/键范围查询之外, CouchDB还支持完整的数据富查询功能, 比如针对整个区块链数据的非键查询, 因为它的数据内容是以JSON格式存储的, 并且是完全可查询的. 因此, CouchDB可以满足LevelDB不支持的许多用例的链代码, 审计和报告需求.</p>
<p>CouchDB还可以增强区块链中的遵从性和数据保护的安全性. 因为它能够通过筛选和屏蔽事务中的各个属性来实现字段级别的安全性, 并且只在需要时授权只读权限.</p>
<p>另外, CouchDB属于CAP定理的ap类型(可用性和分区公差). 它使用具有最终一致性的主-主复制模型. 更多信息可以在CouchDB文档的最终一致性页面上找到. 然而, 在每个fabric对等点下, 没有数据库副本, 对数据库的写操作保证一致和持久(而不是最终的一致性).</p>
<p>CouchDB是Fabric的第一个外部可插入状态数据库, 可以而且应该有其他外部数据库选项. 例如, IBM为其区块链启用关系数据库. 还可能需要cp类型(一致性和分区容忍度)的数据库, 以便在不保证应用层的情况下实现数据一致性.</p>
]]></content>
  </entry>
  <entry>
    <title>fabric-learning</title>
    <url>/posts/uncategorized/c8cb8546/</url>
    <content><![CDATA[<p>复式记账法</p>
<h1 id="共识协议">1.  共识协议</h1>
<ul>
<li>拜占庭容错 Byzantine Fault Tolerant, BFT<br>
PBFT, PoW</li>
<li>崩溃容错 Crash Fault-Tolerant, CFT</li>
</ul>
<h1 id="身份管理协议">2.  身份管理协议</h1>
<ul>
<li>LDAP</li>
<li>OpenID Connect</li>
</ul>
<p>总体来看, Fabric 由以下模块化的组件组成:</p>
<p>可插拔的排序服务对交易顺序建立共识, 然后向节点广播区块;<br>
可插拔的成员服务提供者负责将网络中的实体与加密身份相关联;<br>
可选的P2P gossip 服务通过排序服务将区块发送到其他节点;<br>
智能合约 ( <em>链码</em>) 隔离运行在容器环境 (例如 Docker) 中. 它们可以用标准编程语言编写, 但不能直接 访问账本状态;<br>
账本可以通过配置支持多种 DBMS;<br>
可插拔的背书和验证策略, 每个应用程序可以独立配置.</p>
<p>链码<br>
背书<br>
Raft 协议</p>
<h1 id="共识">3.  共识</h1>
<p>保持账本在整个网络中同步的过程称为 共识 . 该过程确保账本仅在交易被相应参与者批准时更新, 并且当账本更新时, 它们以相同的顺序更新相同的交易.</p>
<h1 id="msp">4.  MSP</h1>
<p>Hyperledger Fabric 与其他区块链系统不同的地方是 私有 和 许可 . 与允许未知身份参与网络的开放式非许可系统 (需要诸如 <em>工作量证明</em>之类的协议来验证交易并保护网络) 不同, Hyperledger Fabric 网络的成员需要从可信赖的 成员服务提供者 (MSP)  注册.</p>
<h2 id="pki">4.1.  PKI</h2>
<p>数字证书<br>
公钥和私钥<br>
证书授权中心<br>
证书撤销列表</p>
<p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/identity/identity.html" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/zh_CN/latest/identity/identity.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>crawler/代理</title>
    <url>/posts/uncategorized/23b471ef/</url>
    <content><![CDATA[<h1 id="网游加速器和换ip工具的区别">1.  网游加速器和换ip工具的区别</h1>
<p>网游加速器是针对游戏ip进行加速, 从而达到降低游戏延迟的效果.</p>
<p>主要是针对个人用户快速, 安全连接网游服务器的一种服务.<br>
它利用IDC资源, 采用数据转发的技术为个人用户提供快速, 优质网游加速服务.</p>
<p>原理是在全国各大网络节点均架设服务器, 让全国各地的玩家均可选择最优的节点从而享受完美的网游速度.<br>
无论是从联通到电信, 从电信到联通, 还是从教育网到联通与电信, 都可以完美解决跨网所造成的网络屏障, 从而实现电信-联通-教育网, 畅通无阻.</p>
<p>换ip工具是指虚拟专用网络, 是通过第三方网络协议传输数据的一种加密工具.<br>
换ip工具可以实现不同网络的组件和资源之间的相互连接.<br>
具体实现是采用隧道技术, 将数据封装在隧道中进行传输.<br>
而隧道协议又可分为第二层隧道协议pptp, L2F, l2tp和第三隧道协GRE, lpsec.<br>
区别在于用户的数据包是被封装在哪种数据包中在隧道中传输的.</p>
<p>那么这两者到底有和区别呢？接下来就为大家简单介绍下换ip工具和网游加速器的不同之处.</p>
<p>换ip工具是改变你本机的IP, 通过国内专用路线连接你所选IP所在地, 在进行直连.<br>
而网游加速器是不改变你的IP地址 通过加速器优化通道转发数据连接游戏服务器.<br>
网游加速器是优化游戏网络的, 降ping和减少丢包的, 一般都不允许你使用过度下载, 不给更换ip功能.<br>
而换ip工具主要是更换ip, 如果你选择更换服务器地区的ip, 也可以降低延时, 达到加速效果.</p>
<p>PPTP, 即点对点协议, 该协议是在PPP协议的基础上开发的一种新的增强型安全协议, 支持多协议虚拟专用网 (换ip软件) , 可以通过密码身份验证协议, 可扩展身份验证协议(EAP)等方法增强安全性.<br>
可以使远程用户通过拨入ISP, 通过直接连接Internet或其他网络安全地访问企业网.</p>
<h1 id="pptp和l2tp的区别">2.  PPTP和L2TP的区别</h1>
<p>L2TP是国际标准隧道协议, 它结合了PPtp协议以及第二层转发L2F协议的优点, 能以隧道方式使PPP包通过各种网络协议, 包括ATM, SONET和帧中继.<br>
但是L2TP没有任何加密措施, 更多是和IPSec协议结合使用, 提供隧道验证.</p>
<p>主要区别:</p>
<p>1: PPTP要求互联网络为IP网络.<br>
L2TP只要求隧道媒介提供面向数据包的点对点的连接.<br>
L2TP可以在IP (使用UDP) , 桢中继永久虚拟电路 (PVCs) , X.25虚拟电路 (VCs) 或ATM VCs网络上使用.</p>
<p>2: PPTP只能在两端点间建立单一隧道.<br>
L2TP支持在两端点间使用多隧道.<br>
使用L2TP, 用户可以针对不同的服务质量创建不同的隧道.</p>
<p>3: L2TP可以提供包头压缩.<br>
当压缩包头时, 系统开销 (overhead) 占用4个字节, 而PPTP协议下要占用6个字节.</p>
<p>4: L2TP可以提供隧道验证, 而PPTP不支持隧道验证.<br>
但当L2TP或PPTP与IPSEC共同使用时, 可由IPSEC提供隧道验证, 不需在第2层协议上验证隧道.</p>
<h1 id="ip地址如何分类">3.  IP地址如何分类</h1>
<p>在国际互联网上有成千上万台电脑主机, 人们为了区分这些主机, 就给连接到Internet主机都分配了一个专门的 <em>地址</em>作为标识, 也就是ip地址.</p>
<p>IP地址是IP协议提供的一种统一的地址格式, 它为互联网上的每一个网络和每一台主机分配一个逻辑地址, 以此来屏蔽物理地址的差异.<br>
就和在中国每个人的身份证是唯一的一样, 一个IP地址在整个因特网范围内也是唯一的.<br>
ip地址总共分为5类, A, B, C, D, E, 其中A类分配给政府机关使用, B类地址给大中型企业使用, C类地址给个人使用.<br>
我们今天主要来说明下这3类地址.</p>
<p>A类地址:范围从0-127, 0是保留的并且表示所有IP地址, 而127也是保留的地址, 并且是用于测试环回用的.<br>
因此A类地址的范围其实是从1-126之间.<br>
如: 10.0.0.1,  第- -段号码为网络号码, 剩下的三段号码为本地计算机的号码.<br>
转换为2进制来说, -一个A类P地址由1字节的网络IP地址和3字节主机地址组成, 网络IP地址的最高位必须是 <em>0</em>,   地址范围从0.0.0.1到126.0.0.0.<br>
可用的A类网络有126个, 每个网络能容纳1亿多个主机(2的24次方的主机数目).</p>
<p>B类地址:范围从128-191, 如172.168.1.1,第一和第二段号码为网络号码, 剩下的2段号码为本地计算机的号码.<br>
转换为2进制来说, 一个B类IP地址由2个字节的网络IP地址和2个字节的主机地址组成, 网络IP地址的最高位必须是 <em>10</em>, IP地址范围从128.0.0.0到191.255.255.255.<br>
可用的B类网络有16382个, 每个网络能容纳6万多个主机.</p>
<p>C类地址:范围从192-223, 如192.168.1.1, 第一, 第二, 第三段号码为网络号码, 剩下的最后一-段号码为本地计算机的号码.<br>
转换为2进制来说, - -个C 类IP地址由3字节的网络IP地址和1字节的主机地址组成, 网络IP地址的最高位必须是 <em>110</em>.<br>
范围从192.0.0.0到223.255.255.255.<br>
C类网络可达209万余个, 每个网络能容纳254个主机.</p>
<h1 id="改ip软件的作用">4.  改ip软件的作用</h1>
<p>在如今的互联网时代, 我们无论是生活还是工作都离不开网络, 而用来连接互联网的计算机都会有一个ip地址, ip地址的作用是用来确定计算机的位置同事也是为了标识计算机, 毕竟每天都会有成千上万台的电脑主机连接, 总要区分开来.</p>
<p>每一台连接了英特网的电脑都有一个唯一的ip地址就像我们每一个人的身份证一样, 那么这个ip地址能不能更改呢, 答案是可以的.<br>
就是使用改ip软件.<br>
, 很多人可能都听说过, 但是不太了解改ip软件的具体用处, 现在就给大家普及一下改ip软件的作用.</p>
<p>1用于网络加速, 通过改ip软件改善与目标服务器之间的连接速度, 举个最简单的列子, 现在许多的网络游戏都有电信大区和网通大区, 在家中用的是电信宽带连接的是电信服务器大区, 而假如去学校或者去外地在只能连接网通网络的情况下, 这时在上电信服务器大区会导致延迟异常的高, 而这时如果使用改ip软件切换到电信线路就可以使延时降低, 大大提升游戏的流程度.</p>
<p>2: 用于提高网络访问的安全性, 平时难免会遇到需要访问一些不信任站点或者可疑站点, 这样会带来一定的网络安全风险, 因为访问网络时候的数据传输很容易被黑客所控制, 特别是一些需要登录注册等等网站的时候, 泄露个人信息, 甚至银行卡信息, 带来的网络风险非常大.<br>
而使用改ip软件以后, 你在网络上的访问数据被加密和隐藏, 避免了个人敏感信息的泄露, 网购的时候一旦泄露银行卡信息, 可能会带来钱财的损失, 通过改ip软件再进行网购, 会增加安全性, 当然, 必须是可靠的改ip软件服务商.</p>
<p>3: 用于伪装某地区的IP有一些网络服务是必须本地IP才能使用的, 这个时候通过改ip软件选取一个此区域的线路连接, 使你的IP地址看起来就是该地区的IP地址, 从而可以享受到当地的一些特有的网络服务.</p>
<p>4: 用于隐藏你的真实IP地址, 使用改ip软件加密你的网络数据传输, 从而达到匿名效果.</p>
<h1 id="代理ip的作用">5.  代理ip的作用</h1>
<p>在生活中难免碰到一些这样的问题, 例如在外面需要访问学校的FTP下载资料, 但是由于网络限制不能访问, 这时就可以通过代理ip (前提是该代理地址在该资源 的允许访问范围之内) 使用教育网内地址段代理服务器, 就可以用于对教育网开放的各类FTP下载上传, 以及各类资料查询共享等服务.<br>
是不是很神奇呢, 那我们再来进一步的了解代理ip</p>
<p>代理IP就是代理服务器, 功能就是代理网络用户去取得网络信息.<br>
代理服务器是介于浏览器和Web服务器之间的一台服务器, 有了它之后, 浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求, Request信号会先送到代理服务器, 由代理服务器来取回浏览器所需要的信息并传送给你的浏览器如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的, 那么它就不重新从Web服务器取数据, 而直接将存储器上的数据传送给用户的浏览器, 这样就能显著提高浏览速度和效率.</p>
<p>理论介绍完了, 那我们在来讲下代理ip常用的一些功能.</p>
<p>1: 突破自身ip访问限制, 现在有许多的网站都对ip地址访问进行了限制, 这时则可以通过代理ip来突破限制, 让自己进入网站.</p>
<p>2: 提高访问速度, 通常代理ip服务器都设置一个较大的硬盘缓冲区, 当有外信息市, 则直接由缓冲区中取出信息, 传给用户, 以提高访问速度.</p>
<p>3隐藏真实ip达到匿名效果, 可以通过代理ip上网, 隐藏真实的ip地址, 避免受到黑客攻击.</p>
<p>4突破ip封锁, 例如要抓取一个网站的数据, 但是网站对每个ip所能抓取的数据做了限制, 这时我们使用代理ip, 不停地切换ip, 就可以突破限制, 从而提高工作效率.</p>
<h1 id="换ip软件和ip代理的区别">6.  换ip软件和ip代理的区别</h1>
<p>在生活中我们可能会遇到各种问题需要修改ip, 不想让自己的电脑使用同一个ip, 当然也是因为做一些工作方便, 而换ip经常会用这两种方法, 使用换ip软件和ip代理.</p>
<p>首先先来说一下换ip软件和ip代理的基本原理</p>
<p>换ip软件是通过第三方网络协议传输数据的一种加密软件具体实现是采用隧道技术, 将数据封装在隧道中进行传输.<br>
而隧道协议又可分为第二层隧道协议pptp, L2F, l2tp和第三隧道协GRE, lpsec.<br>
他们的本质区别在于用户的数据包是被封装在哪种数据包中在隧道中传输的.</p>
<p>ip代理则是内部网络客户端发送 Internet 连接请求时, NAT 协议驱动程序将截获该请求, 并将其转发到目标 Internet 服务器.</p>
<p>从这里可以看出换ip软件可以说是全局代理 , 功能是连接上软件里的线路后, 会改变整机电脑的IP地址, 无论你上游戏还是看视频或者登QQ, 所显示的IP地址都会显示成修改后的IP地址.</p>
<p>而ip代理则是局部代理 , 是非默认选项, 当然把这个选项打上后, 再进行线路连接才会生效.<br>
而当ip代理的用图是用来改变浏览器的IP地址时不会影响到电脑上的其它软件的使用.<br>
所以这时ip代理则可以理解为浏览器代理, 用来改变浏览网页时的ip.</p>
<h1 id="resource">7.  Resource</h1>
<p><a href="http://www.etdaili.com/Index-article-id-91.html" target="_blank" rel="noopener">http://www.etdaili.com/Index-article-id-91.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>db-sharding</title>
    <url>/posts/database/2cf03c67/</url>
    <content><![CDATA[<h1 id="如何分表分库">1.  如何分表分库</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="主键生成方式">1.1.  主键生成方式</h2>
<h1 id="聚合">2.  聚合</h1>
<h2 id="排序">2.1.  排序</h2>
<p>如果没有 order by, 每次查询出的结果循序将不同.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>sharding</tag>
      </tags>
  </entry>
  <entry>
    <title>fabric</title>
    <url>/posts/uncategorized/6de370a3/</url>
    <content><![CDATA[<p>Hyperledger Fabric 与其他区块链技术一样, 它有一个账本, 使用智能合约, 是一个参与者管理交易的系统.<br>
与其他块链系统不同的是 私有 和 许可 . 与允许未知身份参与网络的开放式非许可系统 (需要诸如 <em>工作量证明</em>之类的协议来验证交易并保护网络) 不同, Hyperledger Fabric 网络的成员需要从可信赖的 成员服务提供者 (MSP)  注册.</p>
<h1 id="关键概念">1.  关键概念</h1>
<ul>
<li>智能合约 Smart Contracts</li>
</ul>
<p>智能合约用 链码 编写, 当该应用程序需要与账本交互时, 由区块链外部的应用程序调用. 在大多数情况下, 链码只与账本的数据库, 世界状态 (例如, 查询) 交互, 而不与交易日志交互.</p>
<ul>
<li>共识 Consensus</li>
</ul>
<p><code>共识</code> 确保账本仅在交易被相应参与者批准时更新, 并且当账本更新时, 它们以相同的顺序更新相同的交易</p>
<ul>
<li>成员服务提供者 MSP</li>
</ul>
<p>身份管理</p>
<ul>
<li>链码</li>
</ul>
<p>链码是定义单项或多项资产的软件, 和能修改资产的交易指令; 换句话说, 它是业务逻辑. 链码强制执行读取或更改键值对或其他状态数据库信息的规则. 链码函数针对账本的当前状态数据库执行, 并通过交易提案启动. 链码执行会写入一组键值 (写集) , 会被提交给网络并应用于所有节点的账本.</p>
<ul>
<li>通道</li>
</ul>
<p>Hyperledger Fabric 使竞争商业利益以及任何需要私人, 机密交易的群体能够在同一个许可网络上共存. 私有 通道 是受限制的消息传递路径, 可用于为网络成员的特定子集提供交易隐私和机密性. 通道上的所有数据 (包括交易, 成员和通道信息) 都是不可见的, 并且对于未明确授予对该通道的访问权限的任何网络成员都是不可访问的.</p>
<p>每个通道对应一个账本. 每个peer节点为其所属的每个通道维护一份账本副本.</p>
<ul>
<li>共享账本</li>
</ul>
<p>Hyperledger Fabric 有一个账本子系统, 包括两个组件:  世界状态 和 交易日志 . 每个参与者都拥有他们所属的每个 Hyperledger Fabric 网络的账本副本.</p>
<p>世界状态组件描述了在给定时间点的账本的状态. 它是账本的数据库. 交易日志组件记录产生世界状态中当前值的所有交易; 这是世界状态的更新历史. 然后, 账本包括世界状态数据库和交易日志历史记录.</p>
<p>账本世界状态的数据存储是可替换的. 默认情况下, 这是 LevelDB 键值存储数据库. 交易日志不需要是可插拔的. 它只记录区块链网络使用的账本数据库前后的值.</p>
<ul>
<li>背书策略</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/zh_CN/latest/</a><br>
<a href="https://hyperledger-fabric.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/en/latest/</a><br>
<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/</a></p>
<ul>
<li>
<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/ledger.html" title target>账本</a>
</li>
<li>
<a href="http://www.btc126.com/video/ok60/" title target>OK区块链60讲</a>
</li>
<li>
<a href="https://www.hyperledger.org/wp-content/uploads/2018/08/HL_Whitepaper_IntroductiontoHyperledger.pdf" title target>区块链介绍白皮书</a>
</li>
<li>
<a href="https://wiki.hyperledger.org/" title target>Fabric Wiki</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>crawler/网络爬虫的定义</title>
    <url>/posts/uncategorized/1c97dba7/</url>
    <content><![CDATA[<p>网络爬虫是捜索引擎抓取系统的重要组成部分.<br>
爬虫的主要目的是将互联网上的网页下载到本地形成一个互联网内容的镜像备份.</p>
<p>一, 网络爬虫的基本结构及工作流程</p>
<p>一个通用的网络爬虫的框架如图所示:</p>
<img src="/posts/uncategorized/1c97dba7/1513923569450624.png" class>
<p>网络爬虫的基本工作流程:</p>
<p>1.首先选取一部分精心挑选的种子URL;</p>
<p>2.将这些URL放入待抓取URL队列;</p>
<p>3.从待抓取URL队列中取出待抓取在URL, 解析DNS, 并且得到主机的ip, 并将URL对应的网页下载下来, 存储进已下载网页库中.<br>
此外, 将这些URL放进已抓取URL队列.</p>
<p>4.分析已抓取URL队列中的URL, 分析其中的其他URL, 并且将URL放入待抓取URL队列, 从而进入下一个循环.</p>
<p>二, 从爬虫的角度对互联网进行划分</p>
<p>对应的, 可以将互联网的所有页面分为五个部分:</p>
<img src="/posts/uncategorized/1c97dba7/1513923582409083.png" class>
<p>1.已下载未过期网页</p>
<p>2.已下载已过期网页: 抓取到的网页实际上是互联网内容的一个镜像与备份, 互联网是动态变化的, 一部分互联网上的内容已经发生了变化, 这时, 这部分抓取到的网页就已经过期了.</p>
<p>3.待下载网页: 也就是待抓取URL队列中的那些页面</p>
<p>4.可知网页: 还没有抓取下来, 也没有在待抓取URL队列中, 但是可以通过对已抓取页面或者待抓取URL对应页面进行分析获取到的URL, 认为是可知网页.</p>
<p>5.还有一部分网页, 爬虫是无法直接抓取下载的.<br>
称为不可知网页.</p>
<p>三, 抓取策略</p>
<p>在爬虫系统中, 待抓取URL队列是很重要的一部分.<br>
待抓取URL队列中的URL以什么样的顺序排列也是一个很重要的问题, 因为这涉及到先抓取那个页面, 后抓取哪个页面.<br>
而决定这些URL排列顺序的方法, 叫做抓取策略.<br>
下面重点介绍几种常见的抓取策略:</p>
<p>1.深度优先遍历策略</p>
<p>深度优先遍历策略是指网络爬虫会从起始页开始, 一个链接一个链接跟踪下去, 处理完这条线路之后再转入下一个起始页, 继续跟踪链接.<br>
我们以下面的图为例:</p>
<img src="/posts/uncategorized/1c97dba7/1513923588967747.png" class>
<p>遍历的路径: A-F-G E-H-I B C D</p>
<p>2.宽度优先遍历策略</p>
<p>宽度优先遍历策略的基本思路是, 将新下载网页中发现的链接直接插入待抓取URL队列的末尾.<br>
也就是指网络爬虫会先抓取起始网页中链接的所有网页, 然后再选择其中的一个链接网页, 继续抓取在此网页中链接的所有网页.<br>
还是以上面的图为例:</p>
<p>遍历路径: A-B-C-D-E-F G H I</p>
<p>3.反向链接数策略</p>
<p>反向链接数是指一个网页被其他网页链接指向的数量.<br>
反向链接数表示的是一个网页的内容受到其他人的推荐的程度.<br>
因此, 很多时候搜索引擎的抓取系统会使用这个指标来评价网页的重要程度, 从而决定不同网页的抓取先后顺序.</p>
<p>在真实的网络环境中, 由于广告链接, 作弊链接的存在, 反向链接数不能完全等他我那个也的重要程度.<br>
因此, 搜索引擎往往考虑一些可靠的反向链接数.</p>
<p>4.Partial PageRank策略</p>
<p>Partial PageRank算法借鉴了PageRank算法的思想: 对于已经下载的网页, 连同待抓取URL队列中的URL, 形成网页集合, 计算每个页面的PageRank值, 计算完之后, 将待抓取URL队列中的URL按照PageRank值的大小排列, 并按照该顺序抓取页面.</p>
<p>如果每次抓取一个页面, 就重新计算PageRank值, 一种折中方案是: 每抓取K个页面后, 重新计算一次PageRank值.<br>
但是这种情况还会有一个问题: 对于已经下载下来的页面中分析出的链接, 也就是我们之前提到的未知网页那一部分, 暂时是没有PageRank值的.<br>
为了解决这个问题, 会给这些页面一个临时的PageRank值: 将这个网页所有入链传递进来的PageRank值进行汇总, 这样就形成了该未知页面的PageRank值, 从而参与排序.<br>
下面举例说明:</p>
<p>5.OPIC策略</p>
<p>该算法实际上也是对页面进行一个重要性打分.<br>
在算法开始前, 给所有页面一个相同的初始现金 (cash) .<br>
当下载了某个页面P之后, 将P的现金分摊给所有从P中分析出的链接, 并且将P的现金清空.<br>
对于待抓取URL队列中的所有页面按照现金数进行排序.</p>
<p>6.大站优先策略</p>
<p>对于待抓取URL队列中的所有网页, 根据所属的网站进行分类.<br>
对于待下载页面数多的网站, 优先下载.<br>
这个策略也因此叫做大站优先策略.</p>
]]></content>
  </entry>
  <entry>
    <title>crawler</title>
    <url>/posts/uncategorized/d42e5ea2/</url>
    <content><![CDATA[<h1 id="比较成熟的框架">1.  比较成熟的框架</h1>
<p>crawler4j<br>
heritrix<br>
nutch<br>
SpiderMan<br>
webmagic</p>
<h1 id="resource">2.  Resource</h1>
<a href="https://www.oschina.net/p/nutch" title target>nutch</a>
<a href="https://www.oschina.net/p/heritrix" title target>heritrix</a>
<a href="https://my.oschina.net/flashsword/blog/145796" title target>webmagic</a>
<a href="https://github.com/code4craft/webmagic" title target>webmagic git</a>
<a href="https://scrapy.org/" title target>ptthon scrapy</a>
]]></content>
  </entry>
  <entry>
    <title>drds</title>
    <url>/posts/uncategorized/ae88d53/</url>
    <content><![CDATA[<p><a href="https://help.aliyun.com/product/29657.html?spm=a2c4g.11186623.3.1.l1lX2S" target="_blank" rel="noopener">https://help.aliyun.com/product/29657.html?spm=a2c4g.11186623.3.1.l1lX2S</a></p>
<p>Lock conflict 报错处理</p>
<p>DRDS 执行 DDL 操作先会加库级锁, 操作完后再释放掉.<br>
KILL DDL 操作很可能会导致该锁没有释放, 此时再执行 DDL 会有以下报错:</p>
<p>Lock conflict , maybe last DDL is still running<br>
此时执行 RELEASE DBLOCK 释放该锁即可.<br>
指令取消及锁释放后, 选择业务低谷甚至停止期间, 重新执行该 DDL.</p>
]]></content>
  </entry>
  <entry>
    <title>impala</title>
    <url>/posts/database/2e4c3823/</url>
    <content><![CDATA[<p>为 hadoop 提供 SQL 支持, 性能比 hive 好.</p>
<ul>
<li>
<p>Impala不需要把中间结果写入磁盘, 省掉了大量的I/O开销.</p>
</li>
<li>
<p>省掉了MapReduce作业启动的开销.<br>
MapReduce启动task的速度很慢(默认每个心跳间隔是3秒钟), Impala直接通过相应的服务进程来进行作业调度, 速度快了很多.</p>
</li>
<li>
<p>Impala完全抛弃了MapReduce这个不太适合做SQL查询的范式, 而是像Dremel一样借鉴了MPP并行数据库的思想另起炉灶, 因此可做更多的查询优化, 从而省掉不必要的shuffle, sort等开销.</p>
</li>
<li>
<p>通过使用LLVM来统一编译运行时代码, 避免了为支持通用编译而带来的不必要开销.</p>
</li>
<li>
<p>用C++实现, 做了很多有针对性的硬件优化, 例如使用SSE指令.</p>
</li>
<li>
<p>使用了支持Data locality的I/O调度机制, 尽可能地将数据和计算分配在同一台机器上进行, 减少了网络开销.</p>
</li>
<li>
<p>Impala可以根据Apache许可证作为开源免费提供.</p>
</li>
<li>
<p>Impala支持内存中数据处理, 它访问/分析存储在Hadoop数据节点上的数据, 而无需数据移动.</p>
</li>
<li>
<p>使用类SQL查询访问数据.</p>
</li>
<li>
<p>Impala为HDFS中的数据提供了更快的访问.</p>
</li>
<li>
<p>可以将数据存储在Impala存储系统中, 如Apache HBase和Amazon s3.</p>
</li>
<li>
<p>Impala支持各种文件格式, 如LZO, 序列文件, Avro, RCFile和Parquet.</p>
</li>
</ul>
<h1 id="impala-支持的数据类型">1.  Impala 支持的数据类型</h1>
<ol>
<li>原生类型:</li>
</ol>
<ul>
<li>TINYINT</li>
<li>SMALLINT</li>
<li>INT</li>
<li>BIGINT</li>
<li>BOOLEAN</li>
<li>FLOAT</li>
<li>DOUBLE</li>
<li>DECIMAL</li>
<li>STRING</li>
<li>CHAR</li>
<li>VARCHAR</li>
<li>TIMESTAMP</li>
</ul>
<ol start="2">
<li>复合类型:</li>
</ol>
<ul>
<li>struct_type</li>
<li>array_type</li>
<li>map_type</li>
</ul>
<h1 id="kudu">2.  Kudu</h1>
<p>Kudu 不支持 TIMESTAMP 类型的字段</p>
<h1 id="docker">3.  Docker</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -i -t cloudera/impala-dev:minimal /bin/bash</span><br><span class="line">[container]$ docker-boot   <span class="comment"># starts Postgres and SSH both needed to run Impala</span></span><br><span class="line">[container]$ <span class="built_in">cd</span> Impala</span><br><span class="line">[container]$ . bin/impala-config.sh   <span class="comment"># sets the Impala environment variables</span></span><br><span class="line">[container]$ ./buildall.sh -format -skiptests</span><br><span class="line">[container]$ run-all.sh   <span class="comment"># starts dependent services -- HDFS, Hive metastore, etc</span></span><br><span class="line">[container]$ start-impala-cluster.py</span><br><span class="line">[container]$ impala-shell.sh</span><br><span class="line">[localhost:21000] &gt; create database <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure>
<h1 id="resource">4.  Resource</h1>
<p><a href="http://impala.apache.org/docs/build/html/" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/</a><br>
<a href="http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_langref_sql.html</a><br>
<a href="http://impala.apache.org/docs/build/html/topics/impala_functions_overview.html#functions" target="_blank" rel="noopener">http://impala.apache.org/docs/build/html/topics/impala_functions_overview.html#functions</a></p>
<ul>
<li>
<a href="https://hub.docker.com/[object%20Object]pala-dev/" title target>Docker Hub - impala-dev</a>
</li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/posts/database/8ffb7528/</url>
    <content><![CDATA[<p>分布式事务指事务的参与者, 支持事务的服务器, 资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上.</p>
<p>简单的说, 就是一次大的操作由不同的小操作组成, 这些小的操作分布在不同的服务器上, 且属于不同的应用, 分布式事务需要保证这些小操作要么全部成功, 要么全部失败.</p>
<h1 id="cap">1.  CAP</h1>
<p>CAP 是指以下 3 个属性:</p>
<ol>
<li>一致性 Consistency<br>
数据的一致性</li>
<li>可用性 Availability<br>
服务的可用性</li>
<li>分区容忍性 Partition tolerance<br>
在网络异常的情况下, 服务能容忍网络分区之间的数据不一致时</li>
</ol>
<p>CAP 理论指出分布式系统无法同时支持以上 3 个属性, 最多只能保证支持 2 个属性.</p>
<p>对于分布式系统, 必然要支持分区容忍性, 设计者需要在一致性与可用性之间权衡.</p>
<h1 id="base">2.  BASE</h1>
<p>BASE 就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案, 也称柔性事务.</p>
<p>BASE是下面三个术语的缩写:</p>
<ol>
<li>基本可用 Basically Available<br>
分布式系统在出现故障时, 允许损失部分可用功能, 保证核心功能可用.</li>
<li>软状态 Soft state<br>
允许系统中存在中间状态, 这个状态不影响系统可用性, 这里指的是 CAP 中的不一致.</li>
<li>最终一致 Eventually consistency<br>
最终一致是指经过一段时间后, 所有节点数据都将会达到一致.</li>
</ol>
<p>BASE 理论的核心思想是: 即使无法做到强一致性, 但每个应用都可以根据自身业务特点, 采用适当的方式来使系统达到最终一致性.<br>
它完全不同于 ACID 的强一致性模型, 而是通过牺牲强一致性来获得可用性, 并允许数据在一段时间内是不一致的, 但最终达到一致状态.<br>
但同时, 在实际的分布式场景中, 不同业务单元和组件对数据一致性的要求是不同的, 因此在具体的分布式系统架构设计过程中, ACID 特性和 BASE 理论往往又会结合在一起.</p>
<h1 id="xa">3.  XA</h1>
<p>XA 由 X/Open 组织提出的处理分布式事务的规范.<br>
XA 规范能够允许在一个全局事务中协调多个分散的事务资源.<br>
使用全局事务的应用会有一个或多个资源管理器和一个事务管理器.</p>
<ul>
<li>资源管理器 Resource Manager<br>
用于管理事务资源. 数据库服务就是一个资源管理器. 资源管理还应该具有管理事务提交或回滚的能力.</li>
<li>事务管理器 Transaction Manager<br>
事务管理器是分布式事务的核心管理者. 事务管理器与每个资源管理器进行通信, 协调并完成事务的处理. 事务的各个分支由唯一命名进行标识.</li>
</ul>
<h2 id="2pc">3.1.  2PC</h2>
<p>2PC, 二阶段提交, 2 Phase-Commit</p>
<p>XA 通常采用 2PC.</p>
<p>阶段一为准备(prepare)阶段.<br>
即所有的参与者准备执行事务并锁住需要的资源.<br>
参与者ready时, 向transaction manager报告已准备就绪.</p>
<p>阶段二为提交阶段(commit).<br>
当transaction manager确认所有参与者都ready后, 向所有参与者发送commit命令.</p>
<h2 id="3pc">3.2.  3PC</h2>
<p>3PC, 三阶段提交</p>
<h2 id="xa-2">3.3.  XA</h2>
<p>XA,  是 2PC 的一种实现方式</p>
<h1 id="tcc">4.  TCC</h1>
<p>补偿性事务, Try-Commit-Cancel</p>
<h1 id="paxos">5.  Paxos</h1>
<h1 id="其他">6.  其他</h1>
<p>异步处理<br>
幂等 失败, 成功, 处理中<br>
分布式锁<br>
乐观锁<br>
MQ</p>
<p><a href="http://www.tianshouzhi.com/api/tutorials/distributed_transaction/" target="_blank" rel="noopener">http://www.tianshouzhi.com/api/tutorials/distributed_transaction/</a></p>
<p>JTA/XA</p>
<h1 id="思考">7.  思考</h1>
<p>解决分布式事务</p>
<h2 id="1-重试">7.1.  1. 重试</h2>
<p>在分布式事务处理中要允许重试, 所以要让事务中的每个操作操作幂等.</p>
<p>对于那些无法将操作转化为幂等操作的, 则无法解决分布式事务的一致性问题.<br>
如 Reids 的 incr() 操作, 再不使用另外一个变量记录操作步骤的情况下, 就无法得知有没有重复操作过</p>
<h1 id="resource">8.  Resource</h1>
<a href="https://dev.mysql.com/doc/refman/5.7/en/xa.html" title target>MySQL XA</a>
<a href="https://dev.mysql.com/doc/refman/5.7/en/xa-statements.html" title target>MySQL XA SQL 语法</a>
<a href="http://pubs.opengroup.org/onlinepubs/9294999599/toc.pdf" title target>DTP 参考模型</a>
<a href="http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf" title target>DTP XA规范</a>
<p><a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html" target="_blank" rel="noopener">https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html</a><br>
<a href="https://www.jianshu.com/p/16b1baf015e8" target="_blank" rel="noopener">https://www.jianshu.com/p/16b1baf015e8</a></p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>B-Tree</title>
    <url>/posts/data-structure/fc4bcf8f/</url>
    <content><![CDATA[<h1 id="b-tree">1.  B-Tree</h1>
<p>平衡多路查找树</p>
<p>一棵 m 阶的 B-Tree, 或为空树, 或为满足以下特性的 m 叉树:</p>
<ol>
<li>树中的每个结点至多有 m 棵子树</li>
<li>若根结点不是叶子结点, 则至少有 2 棵子树</li>
<li>除根结点外的所有分支结点至少有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil m/2 \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span></span></span></span> 棵子树<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil m/2 \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span></span></span></span> 即不超过 m/2 的整数</li>
<li>所有的非叶子结点中包含下列信息数据: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><msub><mi>P</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>K</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>P</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, P_0, K_1, P_1, K_2, P_2, ..., K_n, P_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
n 为关键字数量, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><mo>≤</mo><mi>n</mi><mo>≤</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil m/2 \rceil\le n \le m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, n+1 为子树个数<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">K_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(i=1…n) 为关键字, 且关键字按从小到大顺序排列<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{j-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>(j=0…n) 为指向指向子树的指针, 且关键字 K 左指针指向的子树中的所有关键字都比 K 小, 关键字 K 右指针指向的子树中的所有关键字都比 K 大</li>
<li>所有叶子结点都出现在同一层次, 并且不带信息(可以看作是外部结点或查找失败的结点, 实际上这些结点不存在, 指向这些结点的指针为空)</li>
</ol>
<h1 id="btree">2.  B+Tree</h1>
<p>B+Tree 是应文件系统所需而出的 B-Tree 的变型树.</p>
<p>一棵 m 阶的 B-Tree 和一棵 m 阶的 B+Tree 差异在于:</p>
<ol>
<li>有 n 棵子树的结点中含有 n 个关键字<br>
关键字个数与指针个数相同</li>
<li>所有的非叶子结点可以看成是索引部分, 结点中仅含有其子树中的最大(或最小)关键字</li>
<li>所有的叶子结点中包含了全部的关键字信息, 及指向含这些关键字记录的指针, 且叶子结点本身按关键字的大小从小到大链接</li>
</ol>
<p>非叶子不包含数据, 只是索引, 只有叶子结点才包含数据.</p>
<p>通常 B+Tree 上有两个头指针, 一个指向根结点, 另一个指向关键字最小的叶子结点.<br>
因此可以堆 B+Tree 进行两种遍历运算:</p>
<ul>
<li>从根结点开始进行随机查找</li>
<li>从最小关键字开始顺序查找</li>
</ul>
<p>B+Tree 查找时, 如果非叶子结点上的关键字等于给定的值, 并不终止, 而是继续修改下直到叶子结点.</p>
<h1 id="btree-2">3.  B*Tree</h1>
<p>B<em>树是B+树的变体, 在B+树的非根和非叶子结点再增加指向兄弟的指针; B</em>树定义了非叶子结点关键字个数至少为(2/3)*M, 即块的最低使用率为2/3 (代替B+树的1/2) .</p>
<p>B+树的分裂: 当一个结点满时, 分配一个新的结点, 并将原结点中1/2的数据复制到新结点, 最后在父结点中增加新结点的指针; B+树的分裂只影响原结点和父结点, 而不会影响兄弟结点, 所以它不需要指向兄弟的指针;<br>
B*树的分裂: 当一个结点满时, 如果它的下一个兄弟结点未满, 那么将一部分数据移到兄弟结点中, 再在原结点插入关键字, 最后修改父结点中兄弟结点的关键字 (因为兄弟结点的关键字范围改变了) ; 如果兄弟也满了, 则在原结点与兄弟结点之间增加新结点, 并各复制1/3的数据到新结点, 最后在父结点增加新结点的指针;</p>
]]></content>
      <categories>
        <category>data-structure</category>
      </categories>
      <tags>
        <tag>B-Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>rbtree</title>
    <url>/posts/data-structure/82a0a884/</url>
    <content><![CDATA[<p>红黑树适用于需要频繁插入, 删除和查找, 且对性能有一定要求, 主要用来存储有序的数据<br>
查找的时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>.</p>
<h1 id="红黑树的性质">1.  红黑树的性质</h1>
<ol>
<li>每个结点要么是红色, 要么是黑色</li>
<li>根结点是黑色的</li>
<li>所有叶子都是黑色<br>
在红黑树中, 值为 NULL 的结点为叶子结点</li>
<li>如果一个结点是红色的, 那么它的叶子结点必须是黑色的<br>
从每个叶子结点到根结点的所有路径上不能出现两个连续的红色结点<br>
黑色结点的子结点颜色没有限制</li>
<li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点</li>
</ol>
<h1 id="关键特性">2.  关键特性</h1>
<pre><code>- 最多三次旋转达到平衡
    最多三次旋转达到平衡: 插入最多2次旋转达到平衡, 删除最多3次旋转达到平衡
- 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长
    最短的可能路径都是黑色节点, 最长的可能路径有交替的红色和黑色节点. 因为根据性质5所有最长的路径都有相同数目的黑色节点, 这就表明了没有路径能多于任何其他路径的两倍长. 
    插入, 删除和查找都与树的高度成比例. 基于上述理论, 红黑树在最坏情况下也是高效的.
</code></pre>
<h1 id="rb-tree-vs-avl-tree">3.  RB-Tree vs AVL-Tree</h1>
<p>AVL-Tree 与 RB-Tree 的查找时间复杂度都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span><br>
AVL-Tree 左右子树最大高度差不超过 1, 是严格平衡<br>
RB-Tree 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长, 且插入/删除操作时最多三次旋转达到平衡<br>
RB-Tree 相对于AVL树来说, 牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作, 保证了稳定的性能, 整体来说性能要优于AVL树</p>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
<a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" title target>红黑树</a>
</li>
<li>
<a href="https://www.jianshu.com/p/e136ec79235c" title target>30张图带你彻底理解红黑树</a>
</li>
<li><a href="https://www.jianshu.com/p/ab90c2ec07e4" target="_blank" rel="noopener">https://www.jianshu.com/p/ab90c2ec07e4</a></li>
<li><a href="https://blog.csdn.net/Beyond_2016/article/details/81202511" target="_blank" rel="noopener">https://blog.csdn.net/Beyond_2016/article/details/81202511</a></li>
</ul>
]]></content>
      <categories>
        <category>data-structure</category>
      </categories>
      <tags>
        <tag>RB-Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>设计相关目录</title>
    <url>/posts/design/6078bae8/</url>
    <content><![CDATA[<ul>
<li>

</li>
<li>

</li>
<li>

<ul>
<li>创建型
<ul>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
</ul>
</li>
<li>结构型
<ul>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
</ul>
</li>
<li>行为型
<ul>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>index</tag>
      </tags>
  </entry>
  <entry>
    <title>database-design</title>
    <url>/posts/design/72a6c9fa/</url>
    <content><![CDATA[<h1 id="3-大范式">1.  3 大范式</h1>
<ol>
<li>第一范式<br>
每一列都是不可分割的原子数据项</li>
<li>第二范式<br>
要求实体的属性完全依赖于主关键字.<br>
所谓完全依赖是指不能存在仅依赖主关键字一部分的属性<br>
第二范式就是在第一范式的基础上属性完全依赖于主键</li>
<li>第三范式 任何非主属性不依赖于其它非主属性</li>
</ol>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>database design</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/posts/data-structure/12122279/</url>
    <content><![CDATA[<h1 id="树">1.  树</h1>
<p>根结点: 没有父结点的结点<br>
分支结点: 有子结点的结点<br>
叶子结点: 没有子结点的结点<br>
兄弟结点: 拥有相同父结点的结点</p>
<p>边: 父结点与自结点之间的连线. 一棵树有 n 个结点, 则有 n-1 条边<br>
路径长度: 路径上边的条数; 路径上有 n 个结点, 则路径长度为 n-1<br>
内部路径长: 一棵树的所有结点的深度的和<br>
深度: 从根结点到任意结点的路径长度<br>
层数: 根结点在1层, 其他任一结点的层数是其父结点的层数加1<br>
高度: 从任意结点到叶子结点的层数<br>
树的高度 = 树的层数: 从根结点到叶子结点的最大层数</p>
<p>度: 子结点个数<br>
树的度: 最大子结点个数</p>
<h2 id="遍历方式">1.1.  遍历方式</h2>
<ul>
<li>前序遍历 结点的处理在它的子结点之前. 根左右</li>
<li>后序遍历 结点的处理在它的子结点之后. 左右根</li>
<li>中序遍历 先处理左子结点, 再处理当前结点, 最后处理右子结点. 左根右</li>
<li>层序遍历 深度为 d 的结点要在 d+1 的结点前处理.</li>
</ul>
<h1 id="二叉树-binary-tree">2.  二叉树 Binary Tree</h1>
<p>一棵平均二叉树的深度要比结点个数小的多</p>
<h2 id="二叉查找树-binary-search-tree">2.1.  二叉查找树 Binary Search Tree</h2>
<p>特点:</p>
<p>对于树中每个结点 X, 它的左子树中所有项的值都小于 X 中的项, 而它的右子树中的所有项的值都大于 X 中的项.</p>
<p>查找时间复杂度与二叉查找树的高度成正比: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, n 为结点个数</p>
<h1 id="平衡树">3.  平衡树</h1>
<p>平衡树有: AVL, SBT, 伸展树, 红黑树, TREAP, B-Tree, B+Tree, B*Tree等</p>
<h2 id="平衡二叉树-avl">3.1.  平衡二叉树 AVL</h2>
<p>左右子树的树高不大于 1.<br>
在插入或删除后自动平衡左右分支的高度.<br>
用于解决普通二叉树在大量插入或删除后出现查询复杂度退化的问题</p>
<h1 id="b-tree">4.  B-Tree</h1>

<h1 id="红黑树-rb-tree">5.  红黑树 RB-Tree</h1>

<h1 id="resource">6.  Resource</h1>
<ul>
<li>数据结构 – 清华大学出版社</li>
</ul>
]]></content>
      <categories>
        <category>data-structure</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>开发规范</title>
    <url>/posts/specification/b52f0648/</url>
    <content><![CDATA[<h1 id="项目结构">1.  项目结构</h1>
<ul>
<li>config</li>
<li>dto
<ul>
<li>builder</li>
<li>factory</li>
</ul>
</li>
<li>dao</li>
<li>service</li>
<li>util</li>
</ul>
<h1 id="controller">2.  controller</h1>
<p>类上需要注解 @Validated, @RestController, @RequestMapping<br>
参数上需要注解 @Valid<br>
参数效验放在 controller 层</p>
<h1 id="kotlin">3.  kotlin</h1>
<ul>
<li>注意类属性 is 开头, 在 json 处理时不一致的问题</li>
<li>尽量不要使用作用域函数嵌套, 对象引用是 it 的还能用别名处理, 但对象引用是 this 的就分不清了</li>
</ul>
]]></content>
      <categories>
        <category>specification</category>
      </categories>
  </entry>
  <entry>
    <title>distribution</title>
    <url>/posts/uncategorized/a4483781/</url>
    <content><![CDATA[<p>分布式事务管理<br>
CAP<br>
zookeeper, eureka</p>
]]></content>
  </entry>
  <entry>
    <title>异常处理设计</title>
    <url>/posts/design/ed344e1/</url>
    <content><![CDATA[<p>当系统异常时, 需要返回异常编码和异常描述, 格式如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;desc&quot;: &quot;xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中,<br>
code 是异常编码,一般是需要写在枚举类中的, 当需要增加或减少时, 需要动代码;<br>
desc 是异常的具体描述, 会根据具体的异常动态的调整输出.</p>
<p>code 是一个异常描述的抽象分类, code 与 desc 应该是一对多的关系</p>
<h1 id="问题">1.  问题</h1>
<h2 id="1-code-是用数字表示还是字符串表示比较好">1.1.  1. code 是用数字表示还是字符串表示比较好?</h2>
<p>数字表示不够直接, 需要维护一个异常码表来说明意义;<br>
写代码时, 枚举类中的枚举值按正常的命名规范是不能使用数字的, 所以无论用不用数字, 描述异常的字符串肯定是会有的.</p>
]]></content>
      <categories>
        <category>design</category>
      </categories>
  </entry>
  <entry>
    <title>接口设计</title>
    <url>/posts/design/d0f93cb9/</url>
    <content><![CDATA[<p>http 开发注意:</p>
<ul>
<li>请求参数是否必填<br>
非必填参数要有默认值</li>
<li>时效性<br>
是否必须立即生效, 不立即生效会有什么后果, 会影响重试策略, 因为重试需要时间</li>
<li>重试策略<br>
是否允许重试, 或者哪些情况下需要重试<br>
重试间隔与次数</li>
<li>幂等性<br>
是失败也幂等, 还是成功后幂等<br>
幂等时长</li>
<li>并发<br>
是否支持并发, 还是只能同一之间只能有一个线程在处理</li>
<li>事务<br>
批量处理接口的事物是否有关联性</li>
<li>重复请求<br>
如果区分或者避免重复请求的处理<br>
瞬间过来相同是请求会有什么影响</li>
</ul>
<p>持久化 开发注意:</p>
<ul>
<li>事务
<ul>
<li>是否需要事务支持</li>
<li>哪些操作需要放在事务之外, 哪些要放在事务内的</li>
<li>不同事务之间是否有影响</li>
</ul>
</li>
<li>SQL 优化</li>
<li>分布式事务</li>
</ul>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>mvp</title>
    <url>/posts/uncategorized/962e2e2d/</url>
    <content><![CDATA[<p>MVP—-Minimum Viable Product, 简称MVP, 即 <em>最小化可行产品</em></p>
<p>在市场不确定的情况下, 通过设计实验来快速检验你的产品或方向是否可行.<br>
如果你的假设得到了验证, 再投入资源大规模进入市场;如果没有通过, 那这就是一次快速试错, 尽快调整方向.</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="http://www.91yunying.com/124.html" target="_blank" rel="noopener">http://www.91yunying.com/124.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>UML</title>
    <url>/posts/design/392c4b30/</url>
    <content><![CDATA[<h1 id="类">1.  类</h1>
<p>类封装了信息和行为, 是面向对象的重要组成部分, 它是具有相同属性, 操作, 关系对象集合的总称.<br>
在系统中, 每个类都应该具有一定的职责, 职责是指类锁担任的任务. 一个类可以有多个职责, 但设计得好的类一般只有一种职责.<br>
在定义类时, 当类的职责分解为类的属性和操作, 其中属性用于封装数据, 操作用于封装行为.<br>
设计类时面向对象设计中最重要的组成部分, 也是最复杂和最耗时的部分.</p>
<p>在软件系统运行时, 类将被实例化成对象, 对象对应于某个具体的事物. 类是对一组具有相同属性, 表现相同行为的抽象, 对象是类的实例.</p>
<h1 id="类之间的关系">2.  类之间的关系</h1>
<p>按关系的强弱程度依次为: 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p>
<h2 id="泛化-generalization">2.1.  泛化 Generalization</h2>
<p>is-a<br>
是一种继承关系, 表示一般与特殊的关系.它指定了子类如何特例化父类的所有特征和行为.<br>
代码体现: extends</p>
<p>实线, 空心三角箭头指向父类</p>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLWX8B4hDA-62S9mpCdDIkBWWOWesDRgwK240">
<h2 id="实现-realization">2.2.  实现 Realization</h2>
<p>is-a<br>
接口的实现, 是类与接口的关系, 表示接口所有特征和行为的实现.<br>
代码体现: implements</p>
<p>虚线, 空心三角箭头指向接口</p>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbNmXB6uadCIYuiLF7CBSb9pK_DA4aioy_EukE3o2ZOrUdheqW00">
<h2 id="聚合-aggregation">2.3.  聚合 Aggregation</h2>
<p>has-a<br>
拥有关系, 是关联关系的一种特例, 整体与部分的关系, 且部分可以离开整体而单独存在.<br>
代码体现: 成员变量</p>
<p>实线, 空心菱形箭头指向整体, 普通箭头指向部分</p>
<img src="http://www.plantuml.com/plantuml/svg/utBEIImkLl39J2fABAhaWl2SylEpkRYWOWfAXaeA-Rfs2afvIX0P0000">
<h2 id="组合-composition">2.4.  组合 Composition</h2>
<p>contains-a<br>
拥有关系, 也是关联关系的一种特例, 整体与部分的关系, 但部分不能离开整体而单独存在.它具有比聚合更强的拥有关系, 强调整体与部分的生命周期是一致的.<br>
代码体现: 成员变量</p>
<p>实线, 实心菱形箭头指向整体, 普通箭头指向部分</p>
<img src="http://www.plantuml.com/plantuml/svg/utBEIImkLd3Epor8pAlaWl1SKWiIYqfoK_DAkBYWCWfAXaeAMhfs2afvIiZo0000">
<h2 id="关联-association">2.5.  关联 Association</h2>
<p>拥有关系, 它使一个类知道另一个类的属性和方法.<br>
代码体现: 成员变量</p>
<p>实线, 普通箭头指向被拥有者, 可以是单向的, 也可以是双向的, 甚至是自关联.</p>
<img src="http://www.plantuml.com/plantuml/svg/utBEIImkLWX9JKpEI2tYWl22IqfJKlDAkBYWmWfAXaeAkWfAUKfmgRpyabI5eipqZ1A5_3o5dCoyR2k5f_qzJoTCVDgw-KNZ52weKKxv-TbSN51T47Fim0Q19R2QqZiLmvJWpBpqdDII_3oWKJ2cWeqkaZWsarwqhu8Q0m00">
<h2 id="依赖-dependency">2.6.  依赖 Dependency</h2>
<p>use-a<br>
是一种使用的关系, 即一个类的实现需要另一个类的协助, 所以要尽量不使用双向的互相依赖.<br>
代码体现: 局部变量, 方法的参数或者对静态方法的调用</p>
<p>虚线, 普通箭头指向被使用者</p>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLd3aWj1EN5oE2dfsG1e0">
<h1 id="画图工具">3.  画图工具</h1>
<ul>
<li>yED   免费, 全平台</li>
<li>visio 收费, osx/win</li>
<li>edraw 收费, 全平台</li>
<li>OmniGraffle  收费, osx</li>
<li>Camunda      收费, win/linux</li>
<li><a href="http://draw.io" target="_blank" rel="noopener">draw.io</a>   online<br>
<a href="https://app.diagrams.net/" target="_blank" rel="noopener">https://app.diagrams.net/</a></li>
<li>lucidchart    online<br>
<a href="https://www.lucidchart.com/" target="_blank" rel="noopener">https://www.lucidchart.com/</a></li>
<li>ProcessOn online</li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="https://www.cnblogs.com/hoojo/p/uml_design.html" target="_blank" rel="noopener">https://www.cnblogs.com/hoojo/p/uml_design.html</a></li>
<li><a href="https://www.omg.org/spec/UML/" target="_blank" rel="noopener">https://www.omg.org/spec/UML/</a></li>
<li><a href="https://www.uml-diagrams.org/uml-25-diagrams.html" target="_blank" rel="noopener">https://www.uml-diagrams.org/uml-25-diagrams.html</a></li>
<li><a href="https://www.uml-diagrams.org/class-reference.html" target="_blank" rel="noopener">https://www.uml-diagrams.org/class-reference.html</a></li>
<li><a href="https://blog.csdn.net/qq_35559756/article/details/78245204" target="_blank" rel="noopener">https://blog.csdn.net/qq_35559756/article/details/78245204</a></li>
</ul>
<h1 id="趣闻">5.  趣闻</h1>
<a href="https://www.uml-diagrams.org/association.html?context=class-diagrams" title target>UML 官方文档</a> 中嘲讽维基百科: 搞不懂你们是从哪里听来的
<blockquote>
<p>UML specification categorizes association as semantic relationship. Some other UML sources also categorize association as a structural relationship.<br>
Wikipedia states that association is instance level relationship and that associations can only be shown on class diagrams.<br>
Not sure where they got that information from but it is not based on UML specification. Association could be used on different types of UML structure diagrams</p>
</blockquote>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>design tool</tag>
      </tags>
  </entry>
  <entry>
    <title>finance-term</title>
    <url>/posts/uncategorized/8909af22/</url>
    <content><![CDATA[<ul>
<li>
<p>七天年化收益率</p>
<p><code>七天年化收益率</code> 等于 <code>七天的总收益率(百分比)</code> 除以 <code>7</code>, 再乘以 <code>365</code></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>七天年化收益率</mtext><mo>=</mo><mtext>七天的总收益率</mtext><mo>÷</mo><mn>7</mn><mo>×</mo><mn>365</mn></mrow><annotation encoding="application/x-tex">\text{七天年化收益率} = \text{七天的总收益率} \div 7 \times 365</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">七天年化收益率</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord text"><span class="mord cjk_fallback">七天的总收益率</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">5</span></span></span></span></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>理财方式有哪些</title>
    <url>/posts/uncategorized/1f61a71a/</url>
    <content><![CDATA[<p>按风险/收益的由低到高顺序:</p>
<ul>
<li>银行存款</li>
<li>结构性存款</li>
<li>银行理财</li>
<li>手机app理财</li>
<li>P2P理财</li>
<li>基金</li>
<li>股票</li>
<li>贵金属/外汇</li>
</ul>
<h1 id="需要考虑的因素">1.  需要考虑的因素</h1>
<ul>
<li>风险</li>
<li>准入门槛</li>
<li>收益率</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>
<a href="http://www.zhicheng.com/zhishi/n/299916.html" title target>理财方式有哪些</a>
</li>
<li>
<a href="https://m.csai.cn/licai/1292344.html" title target>理财方式有哪些</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>OSGi</title>
    <url>/posts/uncategorized/a64cadc/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>classloader</title>
    <url>/posts/uncategorized/d3bc3fdc/</url>
    <content><![CDATA[<h1 id="3-种默认-classloader">1.  3 种默认 ClassLoader</h1>
<p>JVM 中的3 种默认 ClassLoader:</p>
<ul>
<li>启动类加载器 Bootstrap ClassLoader<br>
它是用 C++ 语言写的.<br>
它是在 Java 虚拟机启动后初始化的.<br>
它没有父类加载器.<br>
它负责加载 $JAVA_HOME/jre/lib, -Xbootclasspath 参数指定的路径以及 $JAVA_HOME/jre/classes 中的类, 并且仅按文件名识别, 如 rt.jar, 名字不符合的了库即使防在 lib 目录下, 也不会被加载.</li>
<li>扩展类加载器 Extension ClassLoader<br>
它的父类加载器为启动类加载器.<br>
它的具体为 sun.misc.Launcher$ExtClassLoader.<br>
它加载 $JAVA_HOME/jre/lib/ext, 此路径下的所有 classes 目录以及java.ext.dirs 系统变量指定的路径中类库.</li>
<li>应用程序类加载器 Application ClassLoader<br>
它的父类加载器为扩展类加载器.<br>
它的具体为 sun.misc.Launcher$AppClassLoader.<br>
ClassLoader.getSystemClassLoader() 方法返回的正是 AppClassLoader, 所以一般也称它为系统类加载器.<br>
负责加载 classpath 所指定的位置的类或者是 jar 文档, 它也是 Java 程序默认的类加载器.</li>
</ul>
<h1 id="双亲委派模型">2.  双亲委派模型</h1>
<p>结构: 除了顶层的启动类加载器之外, 其余的类加载器都应该有自己的父类加载器. 这里的父子关系不是用继承的方式实现的, 而是使用组合的方式实现.</p>
<p>工作过程: 如果一个类加载器收到了类加载的请求, 它首先不会自己区尝试加载这个类, 而是把这个请求委派给父类加载器去完成. 每一个层次的类加载器都是如此, 因此所有的加载请求最终都应该传送到顶层的启动类加载器中, 只有当父类加载器反馈自己无法完成这个加载请求 (它的搜索范围内没有找到所需的类) 时, 子加载器才会尝试自己去加载.</p>
<h1 id="java-类的生命周期">3.  Java 类的生命周期</h1>
<p>类从被加载到虚拟机内存开始, 到卸载出内存位置, 它的生命周期包括:</p>
<ul>
<li>加载 Loading</li>
<li>验证 Verification</li>
<li>准备 Preparation</li>
<li>解析 Resolution</li>
<li>初始化 Initialization</li>
<li>使用 Using</li>
<li>卸载 Unloading</li>
</ul>
<p>其中加载, 验证, 准备, 初始化, 卸载这5个阶段的顺序是确定的.</p>
<p>类在什么情况下进行加载:  虚拟机对类的加载时机并没有明确的规定, 是由具体的虚拟机具体实现来自由把握的, 但是对于初始化阶段, 虚拟机规范严格规定了有且仅有以下5种情况下必须立即进行初始化 (加载, 验证, 准备必须在初始化之前) .</p>
<ol>
<li>遇到 neｗ (使用 new 关键字创建实例对象的时候) , getstatic (读取一个静态变量, 被final修饰, 已在编译把结果放入常量池的静态变量除外) , putstatic (设置一个静态变量, 被final修饰, 已在编译把结果放入常量池的静态变量除外) 或invokestatic (调用一个类的静态方法) 这四条字节码指令的时候, 如果类没有进行初始化, 则需要先触发其初始化.</li>
<li>使用 java.lang.reflect 方法对类进行反射调用的时候, 如果类没有进行初始化, 则需要先触发器初始化</li>
<li>初始化一个类时, 发现其父类没有进行初始化, 则需要先触发父类的初始化.</li>
<li>虚拟机启动的时候, 用户需要指定一个执行的主类 (包含main方法的类) , 虚拟机会先对初始化这个主类</li>
<li>当使用 JDK 1.7 的动态语言支持时, 如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法的句柄, 并且这个方法句柄所对应的类没有进行过初始化, 则需要先触发其初始化.  (使用场景未知)</li>
</ol>
<p>这 5 种方式也被称为主动引用, 除此之外, 所有引用类的方式都不会触发初始化, 称为被动引用.</p>
<h1 id="jit">4.  JIT</h1>
<p><code>Just-In-Time</code>, 即时编译器技术.</p>
<p>这种技术可以把程序全部或部分翻译成本地机器码(这本来是Java虚拟机的工作), 程序运行速度因此得以提升.<br>
当需要装载某个类(通常是在为该类创建第一个对象)时, 编译器会先找到其<code>.class</code>文件, 然后将该类的字节码装入内存.<br>
此时有两种方案可供选择.<br>
一种就是让即时编译器编译所有代码.<br>
但这种做法有两个缺陷:这种加载动作散落在整个程序生命周期内, 累加起来要花更多时间;并且会增加可执行代码的长度(字节码要比即时编译器展开后的本地机器码小很多), 这将导致页面调度, 从而降低程序速度.<br>
另一种做法称为<code>惰性评估</code>(lazy evaluation), 意思是即时编译器只在必要的时候才编译代码.<br>
这样, 从不会被执行的代码也许就压根不会被JIT编译.<br>
新版JDK中Java HotSpot技术就采用了类似的方法, 代码每次被执行的时候都会做一些优化, 所以执行的次数越多, 它的速度就越快.</p>
<h1 id="多个-classloader-的作用和意义">5.  多个 ClassLoader 的作用和意义</h1>
<ul>
<li>类隔离<br>
如果想让同一个类 (类的包路径相同) 的不同版本共存, 那么这些类必须由不同的类加载器进行加载.<br>
比如 Tomcat 中, 为了各个应用之间的文件互不影响.</li>
<li>安全考虑<br>
避免类被恶意替换</li>
<li>热加载<br>
通过奇幻 ClassLoader 实例的方式实现热加载. 比如 Tomat 中, 可以不重启服务, 发布和删除服务上的应用.</li>
</ul>
<h1 id="resource">6.  Resource</h1>
<ul>
<li>深入理解 Java 虚拟机</li>
<li><a href="https://www.jianshu.com/p/c2c1d350d245" target="_blank" rel="noopener">https://www.jianshu.com/p/c2c1d350d245</a></li>
<li><a href="https://www.jianshu.com/p/0cf9aa251921" target="_blank" rel="noopener">https://www.jianshu.com/p/0cf9aa251921</a></li>
<li><a href="https://blog.csdn.net/javazejian/article/details/73413292" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/73413292</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-classloader/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>aop</title>
    <url>/posts/uncategorized/7372c9be/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>basic-type</title>
    <url>/posts/java/5bdaa8ed/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>final</title>
    <url>/posts/uncategorized/ecd55cc6/</url>
    <content><![CDATA[<h1 id="局部变量的引用">1.  局部变量的引用</h1>
<p>在 JDK 源码中可以看到会用到 final 的局部变量引用对象的属性, 如像 ArrayBlockingQueue 中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (count == <span class="number">0</span>) ? <span class="keyword">null</span> : dequeue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做有什么好处呢?</p>
<p>首先代码逻辑没有任何问题.<br>
假如我们直接 this.lock, 会在字节码中产生如下操作:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aload_0 # 表示当前对象</span><br><span class="line">getfield # 获取对象的属性</span><br></pre></td></tr></table></figure>
<p>但是加入使用 <code>final ReentrantLock lock = this.lock;</code>, 就会少一个 <code>getfield</code>, 程序会直接从堆栈中取属性的引用, 这样会更快.</p>
]]></content>
  </entry>
  <entry>
    <title>java-lock</title>
    <url>/posts/uncategorized/e08f29f8/</url>
    <content><![CDATA[<h1 id="锁优化">1.  锁优化</h1>
<h1 id="jvm-的锁优化">2.  jvm 的锁优化</h1>
<ul>
<li>偏向锁</li>
</ul>
<p>偏向锁是一种针对加锁操作的优化.<br>
它的核心思想是: 如果一个线程获得了锁, 那么锁就进入了偏向模式; 当这个线程再次请求这个锁的时候, 无须再做任何同步操作.<br>
这样就节省了大量有关锁申请的操作, 从而提高性能.<br>
对于没有锁竞争的场合, 偏向锁有比较好的优化效果, 因为连续多次极有可能是同一个线程请求相同的锁; 而对于锁竞争比较激烈的场景, 很可能每次都是不同的线程来请求同一把锁, 偏向模式就会失效, 导致其效果不佳.</p>
<p>可以使用 <code>-XX:+UseBiasedLocking</code> 参数打开偏向锁.</p>
<ul>
<li>轻量级锁</li>
</ul>
<p>如果偏向锁失败, 虚拟机并不会立即挂起线程, 它还会使用一种称为轻量级锁的优化手段.<br>
轻量级锁的操作也很轻便, 它只是简单的将对象头部作为指针, 指向持有锁的线程堆栈的内部, 来判断一个线程是否持有对象锁.<br>
如果线程获得轻量级锁成功, 则可以顺利进入临界区; 如果轻量级锁加锁失败, 则表示其他线程抢先争夺到了锁, 那么当前线程的锁请求就会膨胀为重量级锁.</p>
<ul>
<li>自旋锁</li>
</ul>
<p>锁膨胀后, 虚拟机威廉避免线程真实地在操作系统层面挂起, 虚拟机还会在做最后的努力 – 自旋锁.<br>
由于当前线程暂时无法获得锁, 什么时候可以获得锁是一个未知数. 也许在几个 CPU 时钟周期后, 就可以得到锁. 如果就这样简单粗暴地挂起线程可能是一种得不偿失的操作.<br>
因此, 系统会进行一次赌注: 假设线程会在不久的将来等到锁, 所以虚拟机会让当前线程做几个空循环 (这也就是自旋). 如果线程在经过若干次循环之后得到锁, 那么就顺利进入临界区; 如果还是不能获得锁, 才会真实地将线程在操作系统层面挂起.</p>
<p>可以使用 <code>-XX:+UseSpinning</code> 参数打开自旋锁, 默认开启.<br>
可以使用 <code>-XX:PreBlockSpin</code> 来设置自旋次数, 默认 10 次.</p>
<ul>
<li>锁消除</li>
</ul>
<p>锁消除是一种更彻底的锁优化.<br>
Java 虚拟机在 JIT 编译时, 通过运行上下文的扫描, 去除不可能存在共享资源竞争的锁.<br>
通过锁消除可以节省毫无意义的请求锁时间.</p>
<p>比如实例方法内部的 Vector, StringBuffer 等. 像 Vector 内部是使用 synchronized 请求锁, 但是在实例方法内部的局部变量是不可能存在锁竞争的, 所以 Vector 内部的加锁同步就会变得毫无必要.</p>
<p>锁消除设计的一项关键技术为逃逸分析. 所谓逃逸分析就是观察某个变量是否会逃出某一个作用域.<br>
逃逸分析必须在 -server 模式下进行, 可以使用 <code>-XX:+DoEscapeAnalysis</code> 参数打开逃逸分析;<br>
然后使用 <code>-XX:+EliminateLocks</code> 参数打开锁消除.</p>
<h1 id="resource">3.  Resource</h1>
<ul>
<li>Java 高并发程序设计</li>
<li>深入了解 Java 虚拟机</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JDK</title>
    <url>/posts/uncategorized/61f08197/</url>
    <content><![CDATA[<p>// todo 2020-07-21 各个jdk版本的比较</p>
<h1 id="jdk-8">1.  JDK 8</h1>
<ul>
<li>Lambda 表达式</li>
<li>方法引用<br>
通过 <code>::</code> 引用方法</li>
<li>Stream API</li>
<li>接口默认方法</li>
<li>Metaspace 替换 PermGen<br>
Metaspace 与 PermGen 最大的区别在于: Metaspace 不再虚拟机中, 而是使用本地内存.<br>
替换的目的一方面提升堆元数据的管理同时提升 GC 效率; 另一方面是方便后续 HotSpot 与 JRockt 合并.</li>
</ul>
<h1 id="jdk-9-10">2.  JDK 9-10</h1>
<ul>
<li>模块系统</li>
<li>默认 G1 回收器</li>
<li>接口私有方法</li>
<li>局部变量推断</li>
<li>Graal 编译器</li>
</ul>
<h1 id="jdk-11">3.  JDK 11</h1>
<ul>
<li>ZGC</li>
<li>字符串 API 增强</li>
<li>内建 HTTP Client</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>object</title>
    <url>/posts/uncategorized/a8adabec/</url>
    <content><![CDATA[<h1 id="对象头">1.  对象头</h1>
<ul>
<li>
<p>Mark Word 32</p>
<ul>
<li>hashcode 25</li>
<li>分代年龄 4</li>
<li>锁标志位 2</li>
<li>固定0 1</li>
</ul>
<p>锁标志位含义如下:</p>
<table>
<thead>
<tr>
<th>biased_lock</th>
<th>lock</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>00</td>
<td>01</td>
<td>无锁</td>
</tr>
<tr>
<td>01</td>
<td>01</td>
<td>偏向锁</td>
</tr>
<tr>
<td>00</td>
<td>00</td>
<td>轻量级锁</td>
</tr>
<tr>
<td>00</td>
<td>10</td>
<td>重量级锁</td>
</tr>
<tr>
<td>00</td>
<td>11</td>
<td>GC 标记</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Klass Word</p>
</li>
<li>
<p>Array Length</p>
</li>
</ul>
<p>上述 3 部分都占用 32 位(bits).<br>
普通对象头只有前 2 个部分, 所以总共 64 位; 数组对象会多出一个数组的长度, 所以总共 96 位.</p>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>Java 高并发程序设计</li>
<li>深入了解 Java 虚拟机</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>reference</title>
    <url>/posts/java/aea34913/</url>
    <content><![CDATA[<h1 id="引用">1.  引用</h1>
<ol>
<li>强引用 Strong Reference</li>
</ol>
<p>强引用就是指在程序代码之中普遍存在的, 类似 <code>Object obj = new Object()</code> 这类的引用.<br>
只要强引用还存在, 垃圾收集器永远不会回收掉被引用的对象.</p>
<ol start="2">
<li>软引用 Soft Reference</li>
</ol>
<p>软引用是用来描述一些还有用但并非必须的对象.<br>
对于软引用关联着的对象, 在系统将要发生内存溢出异常之前, 将会把这些对象列进回收范围之中进行第二次回收.<br>
如果这次回收还没有足够的内存, 才会抛出内存溢出异常.</p>
<ol start="3">
<li>弱引用 Weak Reference</li>
</ol>
<p>弱引用也是用来描述非常必需对象的, 但是它的强度比软引用更弱一些, 被弱引用关联的对象只能生存到下一次垃圾收集发生之前.<br>
当垃圾收集器工作时, 无论当前内存是否足够, 都会回收掉只被弱引用关联的对象.</p>
<ol start="4">
<li>虚引用 Phantom Reference</li>
</ol>
<p>虚引用也称为幽灵引用或者幻影引用, 它是最弱的一种引用关系.<br>
一个对象是否有虚引用的存在, 完全不会对其生存时间构成影响, 也无法通过虚引用来取得一个对象实例.<br>
为一个对象设置虚引用关联的唯一目的就是能在这个对象受收集器回收时收到一个系统通知, 也就是跟踪一个对象被垃圾回收的过程.</p>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>深入理解 Java 虚拟机</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java-faq</title>
    <url>/posts/uncategorized/35074f57/</url>
    <content><![CDATA[<h1 id="如何在不改变代码的情况下-改变类中方法的行为">1.  如何在不改变代码的情况下, 改变类中方法的行为?</h1>
<ol>
<li>组合, 继承, 模板方法</li>
</ol>
<p>如果开发时就能知道有这样的需求, 就可以通过这些方法实现可扩展的类</p>
<ol start="2">
<li>动态代理</li>
</ol>
<p>通过 AOP 技术, 在运行期间动态代理对象</p>
<ol start="3">
<li>ClassLoader</li>
</ol>
<ul>
<li>利用 ClassLoader 加载顺序的特性, 让别的实现类在原来的类加载前加载</li>
<li>加载时, 让他指向别的实现类</li>
</ul>
<ol start="4">
<li>Instrumentation</li>
</ol>
<p>JTI 的 Instrumentation, 通过独立于程序的 agent, 修改和替换类的实现</p>
]]></content>
  </entry>
  <entry>
    <title>jmm</title>
    <url>/posts/java/59519feb/</url>
    <content><![CDATA[<ul>
<li>原子性<br>
原子性是指一个操作是不可中断的. 即使在多线程环境下, 一个操作一旦开始, 不会被其他线程干扰.</li>
<li>可见性<br>
可见性是指当一个线程修改某个共享变量时,  其他线程是否能立即知道这个修改.</li>
<li>有序性<br>
在并发时, 程序的执行可能出现乱序. 给人的直观感觉就是: 写在前面的代码, 会在后面执行.<br>
原因是程序执行时, 可能会进行指令重排, 重排后的指令与原指令顺序未必一致.</li>
</ul>
<h2 id="哪些指令不能重排-happen-before-规则">0.1.  哪些指令不能重排: Happen-Before 规则</h2>
<ul>
<li>程序顺序原则: 一个线程内保证语义的串行性.</li>
<li>volatile 规则: volatile 变量的写, 先发生于读, 这保证了 volatile 变量的可见性</li>
<li>锁规则: 解锁 (unlock) 必然发生在随后的加锁 (lock) 前</li>
<li>传递性: A 先于 B, B 先于 C, 那么 A 必然先于 C</li>
<li>线程的 start() 方法先于它的每一个动作</li>
<li>线程的所有操作先于线程的终结 (Thread.join())</li>
<li>线程的中断 (interrupt()) 先于被中断线程的代码</li>
<li>对象的构造函数执行, 结束先于 finalize() 方法</li>
</ul>
<h1 id="volatile">1.  volatile</h1>
<p>volatile 保证被申明的变量的可见性, 读写的有序性, 但不能保证变量操作的原子性.</p>
<p>每次读取变量, 都要从共享内存中复制到工作内存中; 同样, 每次修改变量, 都要从工作内存复制到共享内存中.</p>
<p>Happen-Before 规则保证 volatile 修饰的变量, 写必定发生在读之前.</p>
<h1 id="volatile-vs-static">2.  volatile vs static</h1>
<p>volatile 修饰的变量在多线程情况下的可见性和有序性, 但不能保证原子性.</p>
<p>static 修饰的变量在多个实例中只有一份, 即多实例共享变量.</p>
<p>volatile 和 static 能同时修饰变量, 他们没有冲突.</p>
<h1 id="volatile-vs-final">3.  volatile vs final</h1>
<p>volatile 和 final 不能能同时修饰变量.</p>
<p>final 修饰的变量不可改变, 所以能保证线程安全, 但 volatile 不能.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>life/cloth</title>
    <url>/posts/uncategorized/5b25a49/</url>
    <content><![CDATA[<h1 id="属性">1.  属性</h1>
<p>上衣 180/104A</p>
<p>尺码  43<br>
肩宽  49.1<br>
胸围  113<br>
下摆  113<br>
后中长 77<br>
袖长  66</p>
<h1 id="免烫材料有">2.  免烫材料有</h1>
<p>京东可以选择免烫工艺的衣服</p>
<ul>
<li>牛津纺<br>
偏休闲</li>
<li>府绸<br>
偏正式</li>
</ul>
<h1 id="速干">3.  速干</h1>
<p>聚酯纤维<br>
聚氨酯弹性纤维(氨纶)</p>
<h1 id="品牌">4.  品牌</h1>
<ul>
<li>花花公子</li>
<li>南极人</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>reflect</title>
    <url>/posts/uncategorized/8e84ce49/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>life/industry</title>
    <url>/posts/uncategorized/54f91e4a/</url>
    <content><![CDATA[<p>电商,金融,物流,云计算,物联网,游戏,人工智能,餐饮,服务,教育</p>
<ul>
<li>互联网/IT/电子/通信
<ul>
<li>电子商务</li>
<li>游戏</li>
<li>媒体</li>
<li>广告营销</li>
<li>数据服务</li>
<li>医疗健康</li>
<li>生活服务</li>
<li>O2O</li>
<li>旅游</li>
<li>分类信息</li>
<li>音乐/视频/阅读</li>
<li>在线教育</li>
<li>社交网络</li>
<li>人力资源服务</li>
<li>企业服务</li>
<li>信息安全</li>
<li>新零售</li>
<li>智能硬件</li>
<li>移动互联网</li>
<li>互联网</li>
<li>计算机软件</li>
<li>计算机硬件</li>
<li>计算机服务</li>
<li>通信/网络设备</li>
<li>运营商/增值服务</li>
<li>电子/半导体/集成电路</li>
</ul>
</li>
<li>广告/传媒/文化/体育
<ul>
<li>广告/公关/会展</li>
<li>新闻/出版</li>
<li>广播/影视</li>
<li>文化/体育/娱乐</li>
</ul>
</li>
<li>金融
<ul>
<li>银行</li>
<li>保险</li>
<li>证券/期货</li>
<li>基金</li>
<li>信托</li>
<li>互联网金融</li>
<li>投资/融资</li>
<li>租赁/拍卖/典当/担保</li>
</ul>
</li>
<li>教育培训
<ul>
<li>学前教育</li>
<li>院校</li>
<li>培训机构</li>
<li>学术/科研</li>
</ul>
</li>
<li>制药/医疗
<ul>
<li>制药</li>
<li>医疗/护理/卫生</li>
<li>医疗设备/器械</li>
</ul>
</li>
<li>交通/物流/贸易/零售
<ul>
<li>交通/运输</li>
<li>物流/仓储</li>
<li>批发/零售</li>
<li>贸易/进出口</li>
</ul>
</li>
<li>专业服务
<ul>
<li>咨询</li>
<li>法律</li>
<li>翻译</li>
<li>人力资源服务</li>
<li>财务/审计/税务</li>
<li>检测/认证</li>
<li>专利/商标/知识产权</li>
<li>其他专业服务</li>
</ul>
</li>
<li>房地产/建筑
<ul>
<li>房地产开发</li>
<li>工程施工</li>
<li>建筑设计</li>
<li>装修装饰</li>
<li>建材</li>
<li>地产经纪/中介</li>
<li>物业服务</li>
</ul>
</li>
<li>汽车
<ul>
<li>汽车生产</li>
<li>汽车零部件</li>
<li>4S店/后市场</li>
</ul>
</li>
<li>机械/制造
<ul>
<li>机械设备/机电/重工</li>
<li>仪器仪表/工业自动化</li>
<li>原材料及加工/模具</li>
<li>印刷/包装/造纸</li>
<li>船舶/航空/航天</li>
</ul>
</li>
<li>消费品
<ul>
<li>食品/饮料/烟酒</li>
<li>日化</li>
<li>服装/纺织/皮革</li>
<li>家具/家电/家居</li>
<li>玩具/礼品</li>
<li>珠宝/首饰</li>
<li>工艺品/收藏品</li>
<li>办公用品及设备</li>
</ul>
</li>
<li>服务业
<ul>
<li>餐饮</li>
<li>酒店</li>
<li>旅游</li>
<li>美容/美发</li>
<li>婚庆/摄影</li>
<li>其他服务业</li>
</ul>
</li>
<li>能源/化工/环保
<ul>
<li>石油/石化</li>
<li>化工</li>
<li>矿产/地质</li>
<li>采掘/冶炼</li>
<li>电力/热力/燃气/水利</li>
<li>新能源</li>
<li>环保</li>
</ul>
</li>
<li>政府/非盈利机构/其他
<ul>
<li>政府/公共事业</li>
<li>非盈利机构</li>
<li>农/林/牧/渔</li>
<li>其他行业</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>life/joke</title>
    <url>/posts/uncategorized/1d13d5c0/</url>
    <content><![CDATA[<p>僵尸打开了你的天灵盖, 失望的走了; 路过的屎壳郎却突然眼前一亮.</p>
]]></content>
  </entry>
  <entry>
    <title>gvm</title>
    <url>/posts/uncategorized/f8bfc722/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖安装</span></span><br><span class="line"><span class="comment"># sudo apt install curl git</span></span><br><span class="line">sudo apt install curl git mercurial make binutils bison gcc build-essential</span><br><span class="line"></span><br><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有可安装的版本</span></span><br><span class="line">gvm listall</span><br><span class="line"><span class="comment"># 显示所有已安装的版本</span></span><br><span class="line">gvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其他版本前 必须先安装 go1.4</span></span><br><span class="line">gvm install go1.4 -B</span><br><span class="line">gvm use go1.4</span><br><span class="line"><span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line">gvm install go1.15rc2</span><br><span class="line">gvm use go1.15rc2</span><br></pre></td></tr></table></figure>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://github.com/moovweb/gvm" target="_blank" rel="noopener">https://github.com/moovweb/gvm</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>life/national-site</title>
    <url>/posts/uncategorized/92edd842/</url>
    <content><![CDATA[<p>中国政府网 <a href="http://www.gov.cn/" target="_blank" rel="noopener">http://www.gov.cn/</a></p>
<h1 id="地方统计网站">1.  地方统计网站</h1>
<p>上海 <a href="http://www.stats-sh.gov.cn/" target="_blank" rel="noopener">http://www.stats-sh.gov.cn/</a><br>
云南 <a href="http://www.stats.yn.gov.cn/" target="_blank" rel="noopener">http://www.stats.yn.gov.cn/</a><br>
内蒙古 <a href="http://tj.nmg.gov.cn/" target="_blank" rel="noopener">http://tj.nmg.gov.cn/</a><br>
北京 <a href="http://tjj.beijing.gov.cn/" target="_blank" rel="noopener">http://tjj.beijing.gov.cn/</a><br>
吉林 <a href="http://tjj.jl.gov.cn/" target="_blank" rel="noopener">http://tjj.jl.gov.cn/</a><br>
四川 <a href="http://tjj.sc.gov.cn/" target="_blank" rel="noopener">http://tjj.sc.gov.cn/</a><br>
天津 <a href="http://stats.tj.gov.cn" target="_blank" rel="noopener">http://stats.tj.gov.cn</a><br>
宁夏 <a href="http://tj.nx.gov.cn/" target="_blank" rel="noopener">http://tj.nx.gov.cn/</a><br>
安徽 <a href="http://tjj.ah.gov.cn/" target="_blank" rel="noopener">http://tjj.ah.gov.cn/</a><br>
山东 <a href="http://tjj.shandong.gov.cn/" target="_blank" rel="noopener">http://tjj.shandong.gov.cn/</a><br>
山西 <a href="http://tjj.shanxi.gov.cn/" target="_blank" rel="noopener">http://tjj.shanxi.gov.cn/</a><br>
广东 <a href="http://stats.gd.gov.cn/" target="_blank" rel="noopener">http://stats.gd.gov.cn/</a><br>
广西 <a href="http://tjj.gxzf.gov.cn/" target="_blank" rel="noopener">http://tjj.gxzf.gov.cn/</a><br>
新疆 <a href="http://www.xjtj.gov.cn/" target="_blank" rel="noopener">http://www.xjtj.gov.cn/</a><br>
江苏 <a href="http://tj.jiangsu.gov.cn/index.html" target="_blank" rel="noopener">http://tj.jiangsu.gov.cn/index.html</a><br>
江西 <a href="http://www.jxstj.gov.cn/Index.shtml" target="_blank" rel="noopener">http://www.jxstj.gov.cn/Index.shtml</a><br>
河北 <a href="http://tjj.hebei.gov.cn/" target="_blank" rel="noopener">http://tjj.hebei.gov.cn/</a><br>
河南 <a href="http://www.ha.stats.gov.cn" target="_blank" rel="noopener">http://www.ha.stats.gov.cn</a><br>
浙江 <a href="http://tjj.zj.gov.cn/" target="_blank" rel="noopener">http://tjj.zj.gov.cn/</a><br>
海南 <a href="http://stats.hainan.gov.cn" target="_blank" rel="noopener">http://stats.hainan.gov.cn</a><br>
湖北 <a href="http://www.stats-hb.gov.cn/" target="_blank" rel="noopener">http://www.stats-hb.gov.cn/</a><br>
湖南 <a href="http://tjj.hunan.gov.cn/" target="_blank" rel="noopener">http://tjj.hunan.gov.cn/</a><br>
甘肃 <a href="http://www.gstj.gov.cn/" target="_blank" rel="noopener">http://www.gstj.gov.cn/</a><br>
福建 <a href="http://tjj.fujian.gov.cn/" target="_blank" rel="noopener">http://tjj.fujian.gov.cn/</a><br>
贵州 <a href="http://www.gzstjj.gov.cn/" target="_blank" rel="noopener">http://www.gzstjj.gov.cn/</a><br>
辽宁 <a href="http://tjj.ln.gov.cn/" target="_blank" rel="noopener">http://tjj.ln.gov.cn/</a><br>
重庆 <a href="http://tjj.cq.gov.cn/" target="_blank" rel="noopener">http://tjj.cq.gov.cn/</a><br>
陕西 <a href="http://tjj.shaanxi.gov.cn/" target="_blank" rel="noopener">http://tjj.shaanxi.gov.cn/</a><br>
青海 <a href="http://tjj.qinghai.gov.cn/" target="_blank" rel="noopener">http://tjj.qinghai.gov.cn/</a><br>
黑龙江 <a href="http://www.hlj.stats.gov.cn/" target="_blank" rel="noopener">http://www.hlj.stats.gov.cn/</a></p>
<h1 id="地方政府网站">2.  地方政府网站</h1>
<p>北京 <a href="http://www.beijing.gov.cn/" target="_blank" rel="noopener">http://www.beijing.gov.cn/</a><br>
天津 <a href="http://www.tj.gov.cn/" target="_blank" rel="noopener">http://www.tj.gov.cn/</a><br>
河北 <a href="http://www.hebei.gov.cn/" target="_blank" rel="noopener">http://www.hebei.gov.cn/</a><br>
山西 <a href="http://www.shanxi.gov.cn/" target="_blank" rel="noopener">http://www.shanxi.gov.cn/</a><br>
内蒙古 <a href="http://www.nmg.gov.cn/" target="_blank" rel="noopener">http://www.nmg.gov.cn/</a><br>
辽宁 <a href="http://www.ln.gov.cn" target="_blank" rel="noopener">http://www.ln.gov.cn</a><br>
吉林 <a href="http://www.jl.gov.cn" target="_blank" rel="noopener">http://www.jl.gov.cn</a><br>
黑龙江 <a href="http://www.hlj.gov.cn" target="_blank" rel="noopener">http://www.hlj.gov.cn</a><br>
上海 <a href="http://www.shanghai.gov.cn/" target="_blank" rel="noopener">http://www.shanghai.gov.cn/</a><br>
江苏 <a href="http://www.jiangsu.gov.cn/" target="_blank" rel="noopener">http://www.jiangsu.gov.cn/</a><br>
浙江 <a href="http://www.zhejiang.gov.cn" target="_blank" rel="noopener">http://www.zhejiang.gov.cn</a><br>
安徽 <a href="http://www.ah.gov.cn/" target="_blank" rel="noopener">http://www.ah.gov.cn/</a><br>
福建 <a href="http://www.fujian.gov.cn" target="_blank" rel="noopener">http://www.fujian.gov.cn</a><br>
江西 <a href="http://www.jiangxi.gov.cn" target="_blank" rel="noopener">http://www.jiangxi.gov.cn</a><br>
山东 <a href="http://www.shandong.gov.cn/" target="_blank" rel="noopener">http://www.shandong.gov.cn/</a><br>
河南 <a href="http://www.henan.gov.cn/" target="_blank" rel="noopener">http://www.henan.gov.cn/</a><br>
湖北 <a href="http://www.hubei.gov.cn/" target="_blank" rel="noopener">http://www.hubei.gov.cn/</a><br>
湖南 <a href="http://www.hunan.gov.cn/" target="_blank" rel="noopener">http://www.hunan.gov.cn/</a><br>
广东 <a href="http://www.gd.gov.cn/" target="_blank" rel="noopener">http://www.gd.gov.cn/</a><br>
广西 <a href="http://www.gxzf.gov.cn/" target="_blank" rel="noopener">http://www.gxzf.gov.cn/</a><br>
海南 <a href="http://www.hainan.gov.cn/" target="_blank" rel="noopener">http://www.hainan.gov.cn/</a><br>
重庆 <a href="http://www.cq.gov.cn/" target="_blank" rel="noopener">http://www.cq.gov.cn/</a><br>
四川 <a href="http://www.sc.gov.cn" target="_blank" rel="noopener">http://www.sc.gov.cn</a><br>
贵州 <a href="http://www.guizhou.gov.cn/" target="_blank" rel="noopener">http://www.guizhou.gov.cn/</a><br>
云南 <a href="http://www.yn.gov.cn/" target="_blank" rel="noopener">http://www.yn.gov.cn/</a><br>
西藏 <a href="http://www.xizang.gov.cn/" target="_blank" rel="noopener">http://www.xizang.gov.cn/</a><br>
陕西 <a href="http://www.shaanxi.gov.cn/" target="_blank" rel="noopener">http://www.shaanxi.gov.cn/</a><br>
甘肃 <a href="http://www.gansu.gov.cn/" target="_blank" rel="noopener">http://www.gansu.gov.cn/</a><br>
青海 <a href="http://www.qh.gov.cn/" target="_blank" rel="noopener">http://www.qh.gov.cn/</a><br>
宁夏 <a href="http://www.nx.gov.cn/" target="_blank" rel="noopener">http://www.nx.gov.cn/</a><br>
新疆 <a href="http://www.xinjiang.gov.cn/" target="_blank" rel="noopener">http://www.xinjiang.gov.cn/</a><br>
香港 <a href="http://www.gov.hk/" target="_blank" rel="noopener">http://www.gov.hk/</a><br>
澳门 <a href="http://www.gov.mo/" target="_blank" rel="noopener">http://www.gov.mo/</a><br>
台湾<br>
新疆生产建设兵团 <a href="http://www.xjbt.gov.cn/" target="_blank" rel="noopener">http://www.xjbt.gov.cn/</a></p>
<h1 id="国务院部门网站">3.  国务院部门网站</h1>
<p>外交部 <a href="http://www.fmprc.gov.cn/web/" target="_blank" rel="noopener">http://www.fmprc.gov.cn/web/</a><br>
国防部 <a href="http://www.mod.gov.cn/" target="_blank" rel="noopener">http://www.mod.gov.cn/</a><br>
国家发展和改革委员会 <a href="http://www.ndrc.gov.cn/" target="_blank" rel="noopener">http://www.ndrc.gov.cn/</a><br>
教育部 <a href="http://www.moe.gov.cn/" target="_blank" rel="noopener">http://www.moe.gov.cn/</a><br>
科学技术部 <a href="http://www.most.gov.cn/" target="_blank" rel="noopener">http://www.most.gov.cn/</a><br>
工业和信息化部 <a href="http://www.miit.gov.cn/" target="_blank" rel="noopener">http://www.miit.gov.cn/</a><br>
国家民族事务委员会 <a href="http://www.seac.gov.cn/" target="_blank" rel="noopener">http://www.seac.gov.cn/</a><br>
公安部 <a href="http://www.mps.gov.cn/" target="_blank" rel="noopener">http://www.mps.gov.cn/</a><br>
国家安全部<br>
民政部 <a href="http://www.mca.gov.cn/" target="_blank" rel="noopener">http://www.mca.gov.cn/</a><br>
司法部 <a href="http://www.moj.gov.cn/" target="_blank" rel="noopener">http://www.moj.gov.cn/</a><br>
财政部 <a href="http://www.mof.gov.cn/index.htm" target="_blank" rel="noopener">http://www.mof.gov.cn/index.htm</a><br>
人力资源和社会保障部 <a href="http://www.mohrss.gov.cn/" target="_blank" rel="noopener">http://www.mohrss.gov.cn/</a><br>
自然资源部 <a href="http://www.mnr.gov.cn/" target="_blank" rel="noopener">http://www.mnr.gov.cn/</a><br>
生态环境部 <a href="http://www.mee.gov.cn/" target="_blank" rel="noopener">http://www.mee.gov.cn/</a><br>
住房和城乡建设部 <a href="http://www.mohurd.gov.cn/" target="_blank" rel="noopener">http://www.mohurd.gov.cn/</a><br>
交通运输部 <a href="http://www.mot.gov.cn/" target="_blank" rel="noopener">http://www.mot.gov.cn/</a><br>
水利部 <a href="http://www.mwr.gov.cn/" target="_blank" rel="noopener">http://www.mwr.gov.cn/</a><br>
农业农村部 <a href="http://www.moa.gov.cn/" target="_blank" rel="noopener">http://www.moa.gov.cn/</a><br>
商务部 <a href="http://www.mofcom.gov.cn/" target="_blank" rel="noopener">http://www.mofcom.gov.cn/</a><br>
文化和旅游部 <a href="http://www.mct.gov.cn/" target="_blank" rel="noopener">http://www.mct.gov.cn/</a><br>
国家卫生健康委员会 <a href="http://www.nhc.gov.cn/" target="_blank" rel="noopener">http://www.nhc.gov.cn/</a><br>
退役军人事务部 <a href="http://www.mva.gov.cn/" target="_blank" rel="noopener">http://www.mva.gov.cn/</a><br>
应急管理部 <a href="http://www.mem.gov.cn" target="_blank" rel="noopener">http://www.mem.gov.cn</a><br>
人民银行 <a href="http://www.pbc.gov.cn/" target="_blank" rel="noopener">http://www.pbc.gov.cn/</a><br>
审计署 <a href="http://www.audit.gov.cn/" target="_blank" rel="noopener">http://www.audit.gov.cn/</a><br>
国家语言文字工作委员会 <a href="http://www.moe.gov.cn/jyb_sy/China_Language/" target="_blank" rel="noopener">http://www.moe.gov.cn/jyb_sy/China_Language/</a><br>
国家外国专家局<br>
国家航天局 <a href="http://www.cnsa.gov.cn/" target="_blank" rel="noopener">http://www.cnsa.gov.cn/</a><br>
国家原子能机构 <a href="http://www.caea.gov.cn/" target="_blank" rel="noopener">http://www.caea.gov.cn/</a><br>
国家海洋局style=&quot;text-decoration:none; cursor:default;<br>
国家核安全局 <a href="http://nnsa.mee.gov.cn/" target="_blank" rel="noopener">http://nnsa.mee.gov.cn/</a><br>
国务院国有资产监督管理委员会 <a href="http://www.sasac.gov.cn/" target="_blank" rel="noopener">http://www.sasac.gov.cn/</a><br>
海关总署 <a href="http://www.customs.gov.cn/" target="_blank" rel="noopener">http://www.customs.gov.cn/</a><br>
国家税务总局 <a href="http://www.chinatax.gov.cn/" target="_blank" rel="noopener">http://www.chinatax.gov.cn/</a><br>
国家市场监督管理总局 <a href="http://www.samr.gov.cn/" target="_blank" rel="noopener">http://www.samr.gov.cn/</a><br>
国家广播电视总局 <a href="http://www.nrta.gov.cn/" target="_blank" rel="noopener">http://www.nrta.gov.cn/</a><br>
国家体育总局 <a href="http://www.sport.gov.cn/" target="_blank" rel="noopener">http://www.sport.gov.cn/</a><br>
国家统计局 <a href="http://www.stats.gov.cn/" target="_blank" rel="noopener">http://www.stats.gov.cn/</a><br>
国家国际发展合作署 <a href="http://www.cidca.gov.cn/" target="_blank" rel="noopener">http://www.cidca.gov.cn/</a><br>
国家医疗保障局 <a href="http://www.nhsa.gov.cn/" target="_blank" rel="noopener">http://www.nhsa.gov.cn/</a><br>
国务院参事室 <a href="http://www.counsellor.gov.cn/" target="_blank" rel="noopener">http://www.counsellor.gov.cn/</a><br>
国家机关事务管理局 <a href="http://www.ggj.gov.cn/" target="_blank" rel="noopener">http://www.ggj.gov.cn/</a><br>
国家认证认可监督管理委员会 <a href="http://www.cnca.gov.cn/" target="_blank" rel="noopener">http://www.cnca.gov.cn/</a><br>
国家标准化管理委员会 <a href="http://www.sac.gov.cn/" target="_blank" rel="noopener">http://www.sac.gov.cn/</a><br>
国家新闻出版署 (国家版权局)  <a href="http://www.ncac.gov.cn/" target="_blank" rel="noopener">http://www.ncac.gov.cn/</a><br>
国家宗教事务局<br>
国务院港澳事务办公室 <a href="http://www.hmo.gov.cn/" target="_blank" rel="noopener">http://www.hmo.gov.cn/</a><br>
国务院研究室 <a href="http://www.gov.cn/guoqing/2018-06/22/content_5300522.htm" target="_blank" rel="noopener">http://www.gov.cn/guoqing/2018-06/22/content_5300522.htm</a><br>
国务院侨务办公室 <a href="http://www.gqb.gov.cn/" target="_blank" rel="noopener">http://www.gqb.gov.cn/</a><br>
国务院台湾事务办公室 <a href="http://www.gwytb.gov.cn/" target="_blank" rel="noopener">http://www.gwytb.gov.cn/</a><br>
国家互联网信息办公室 <a href="http://www.cac.gov.cn/" target="_blank" rel="noopener">http://www.cac.gov.cn/</a><br>
国务院新闻办公室 <a href="http://www.scio.gov.cn/index.htm" target="_blank" rel="noopener">http://www.scio.gov.cn/index.htm</a><br>
新华通讯社 <a href="http://203.192.6.89/xhs/" target="_blank" rel="noopener">http://203.192.6.89/xhs/</a><br>
中国科学院 <a href="http://www.cas.ac.cn/" target="_blank" rel="noopener">http://www.cas.ac.cn/</a><br>
中国社会科学院 <a href="http://cass.cssn.cn/" target="_blank" rel="noopener">http://cass.cssn.cn/</a><br>
中国工程院 <a href="http://www.cae.cn/" target="_blank" rel="noopener">http://www.cae.cn/</a><br>
国务院发展研究中心 <a href="http://www.drc.gov.cn/" target="_blank" rel="noopener">http://www.drc.gov.cn/</a><br>
中央广播电视总台<br>
中国气象局 <a href="http://www.cma.gov.cn/" target="_blank" rel="noopener">http://www.cma.gov.cn/</a><br>
中国银行保险监督管理委员会 <a href="http://www.cbrc.gov.cn/" target="_blank" rel="noopener">http://www.cbrc.gov.cn/</a><br>
中国证券监督管理委员会 <a href="http://www.csrc.gov.cn/pub/newsite/" target="_blank" rel="noopener">http://www.csrc.gov.cn/pub/newsite/</a><br>
国家行政学院 <a href="http://www.ccps.gov.cn/" target="_blank" rel="noopener">http://www.ccps.gov.cn/</a><br>
国家信访局 <a href="http://www.gjxfj.gov.cn/" target="_blank" rel="noopener">http://www.gjxfj.gov.cn/</a><br>
国家粮食和物资储备局 <a href="http://www.chinagrain.gov.cn/index.html" target="_blank" rel="noopener">http://www.chinagrain.gov.cn/index.html</a><br>
国家能源局 <a href="http://www.nea.gov.cn/" target="_blank" rel="noopener">http://www.nea.gov.cn/</a><br>
国家国防科技工业局 <a href="http://www.sastind.gov.cn/" target="_blank" rel="noopener">http://www.sastind.gov.cn/</a><br>
国家烟草专卖局 <a href="http://www.tobacco.gov.cn/html/" target="_blank" rel="noopener">http://www.tobacco.gov.cn/html/</a><br>
国家移民管理局 <a href="http://www.mps.gov.cn/n2254996/" target="_blank" rel="noopener">http://www.mps.gov.cn/n2254996/</a><br>
国家林业和草原局 <a href="http://www.forestry.gov.cn/" target="_blank" rel="noopener">http://www.forestry.gov.cn/</a><br>
国家铁路局 <a href="http://www.nra.gov.cn/" target="_blank" rel="noopener">http://www.nra.gov.cn/</a><br>
中国民用航空局 <a href="http://www.caac.gov.cn/index.html" target="_blank" rel="noopener">http://www.caac.gov.cn/index.html</a><br>
国家邮政局 <a href="http://www.spb.gov.cn/" target="_blank" rel="noopener">http://www.spb.gov.cn/</a><br>
国家文物局 <a href="http://www.sach.gov.cn/" target="_blank" rel="noopener">http://www.sach.gov.cn/</a><br>
国家中医药管理局 <a href="http://www.satcm.gov.cn/" target="_blank" rel="noopener">http://www.satcm.gov.cn/</a><br>
国家煤矿安全监察局 <a href="http://www.chinacoal-safety.gov.cn/" target="_blank" rel="noopener">http://www.chinacoal-safety.gov.cn/</a><br>
国家外汇管理局 <a href="http://www.safe.gov.cn/" target="_blank" rel="noopener">http://www.safe.gov.cn/</a><br>
国家药品监督管理局 <a href="http://www.nmpa.gov.cn/WS04/CL2042/" target="_blank" rel="noopener">http://www.nmpa.gov.cn/WS04/CL2042/</a><br>
国家知识产权局 <a href="http://www.cnipa.gov.cn" target="_blank" rel="noopener">http://www.cnipa.gov.cn</a><br>
出入境管理局<br>
国家公园管理局 <a href="http://www.forestry.gov.cn/" target="_blank" rel="noopener">http://www.forestry.gov.cn/</a><br>
国家公务员局 <a href="http://www.scs.gov.cn/" target="_blank" rel="noopener">http://www.scs.gov.cn/</a><br>
国家档案局 <a href="http://www.saac.gov.cn/" target="_blank" rel="noopener">http://www.saac.gov.cn/</a><br>
国家保密局 <a href="http://www.gjbmj.gov.cn" target="_blank" rel="noopener">http://www.gjbmj.gov.cn</a><br>
国家密码管理局 <a href="http://www.oscca.gov.cn/" target="_blank" rel="noopener">http://www.oscca.gov.cn/</a></p>
<h1 id="媒体">4.  媒体</h1>
<p>人民日报 <a href="http://www.people.com.cn" target="_blank" rel="noopener">http://www.people.com.cn</a><br>
新华社 <a href="http://www.xinhuanet.com" target="_blank" rel="noopener">http://www.xinhuanet.com</a><br>
光明日报 <a href="http://epaper.gmw.cn" target="_blank" rel="noopener">http://epaper.gmw.cn</a><br>
经济日报 <a href="http://paper.ce.cn" target="_blank" rel="noopener">http://paper.ce.cn</a><br>
中央人民广播电台 <a href="http://www.cnr.cn" target="_blank" rel="noopener">http://www.cnr.cn</a><br>
中央电视台 <a href="http://www.cctv.com" target="_blank" rel="noopener">http://www.cctv.com</a><br>
中国国际广播电台  <a href="http://www.cri.cn/index.html" target="_blank" rel="noopener">http://www.cri.cn/index.html</a><br>
中国日报 <a href="http://www.chinadaily.com.cn" target="_blank" rel="noopener">http://www.chinadaily.com.cn</a><br>
中国青年报 <a href="http://zqb.cyol.com" target="_blank" rel="noopener">http://zqb.cyol.com</a><br>
人民网 <a href="http://www.people.com.cn" target="_blank" rel="noopener">http://www.people.com.cn</a><br>
新华网 <a href="http://www.news.cn" target="_blank" rel="noopener">http://www.news.cn</a><br>
中国网 <a href="http://www.china.com.cn" target="_blank" rel="noopener">http://www.china.com.cn</a><br>
央视网 <a href="http://www.cctv.com" target="_blank" rel="noopener">http://www.cctv.com</a><br>
中国日报网 <a href="http://www.chinadaily.com.cn" target="_blank" rel="noopener">http://www.chinadaily.com.cn</a><br>
国际在线 <a href="http://www.cri.cn/index.html" target="_blank" rel="noopener">http://www.cri.cn/index.html</a><br>
中国青年网 <a href="http://www.youth.cn" target="_blank" rel="noopener">http://www.youth.cn</a><br>
中国经济网 <a href="http://www.ce.cn" target="_blank" rel="noopener">http://www.ce.cn</a><br>
中国新闻网 <a href="http://www.chinanews.com" target="_blank" rel="noopener">http://www.chinanews.com</a><br>
百度 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>
腾讯网 <a href="http://www.qq.com" target="_blank" rel="noopener">http://www.qq.com</a><br>
搜狐网 <a href="http://www.sohu.com" target="_blank" rel="noopener">http://www.sohu.com</a><br>
新浪网 <a href="http://www.sina.com.cn" target="_blank" rel="noopener">http://www.sina.com.cn</a><br>
网易网 <a href="http://www.163.com" target="_blank" rel="noopener">http://www.163.com</a><br>
凤凰网 <a href="http://www.ifeng.com" target="_blank" rel="noopener">http://www.ifeng.com</a></p>
<h1 id="中央企业网站">5.  中央企业网站</h1>
<p>中国核工业集团有限公司 <a href="http://www.cnnc.com.cn" target="_blank" rel="noopener">http://www.cnnc.com.cn</a><br>
中国航天科技集团有限公司 <a href="http://www.spacechina.com" target="_blank" rel="noopener">http://www.spacechina.com</a><br>
中国航天科工集团有限公司 <a href="http://www.casic.com.cn" target="_blank" rel="noopener">http://www.casic.com.cn</a><br>
中国航空工业集团有限公司 <a href="http://www.avic.com.cn" target="_blank" rel="noopener">http://www.avic.com.cn</a><br>
中国船舶工业集团有限公司 <a href="http://www.cssc.net.cn" target="_blank" rel="noopener">http://www.cssc.net.cn</a><br>
中国船舶重工集团有限公司 <a href="http://www.csic.com.cn" target="_blank" rel="noopener">http://www.csic.com.cn</a><br>
中国兵器工业集团有限公司 <a href="http://www.norincogroup.com.cn" target="_blank" rel="noopener">http://www.norincogroup.com.cn</a><br>
中国兵器装备集团有限公司 <a href="http://www.csgc.com.cn" target="_blank" rel="noopener">http://www.csgc.com.cn</a><br>
中国电子科技集团有限公司 <a href="http://www.cetc.com.cn" target="_blank" rel="noopener">http://www.cetc.com.cn</a><br>
中国航空发动机集团有限公司 <a href="http://www.aecc.cn" target="_blank" rel="noopener">http://www.aecc.cn</a><br>
中国石油天然气集团有限公司 <a href="http://www.cnpc.com.cn" target="_blank" rel="noopener">http://www.cnpc.com.cn</a><br>
中国石油化工集团公司 <a href="http://www.sinopecgroup.com" target="_blank" rel="noopener">http://www.sinopecgroup.com</a><br>
中国海洋石油集团有限公司 <a href="http://www.cnooc.com.cn" target="_blank" rel="noopener">http://www.cnooc.com.cn</a><br>
国家电网有限公司 <a href="http://www.sgcc.com.cn" target="_blank" rel="noopener">http://www.sgcc.com.cn</a><br>
中国南方电网有限责任公司 <a href="http://www.csg.cn" target="_blank" rel="noopener">http://www.csg.cn</a><br>
中国华能集团有限公司 <a href="http://www.chng.com.cn" target="_blank" rel="noopener">http://www.chng.com.cn</a><br>
中国大唐集团有限公司 <a href="http://www.china-cdt.com" target="_blank" rel="noopener">http://www.china-cdt.com</a><br>
中国华电集团有限公司     <a href="http://www.chd.com.cn" target="_blank" rel="noopener">http://www.chd.com.cn</a><br>
国家电力投资集团有限公司  <a href="http://www.spic.com.cn" target="_blank" rel="noopener">http://www.spic.com.cn</a><br>
中国长江三峡集团公司 <a href="http://www.ctg.com.cn" target="_blank" rel="noopener">http://www.ctg.com.cn</a><br>
国家能源投资集团有限责任公司<br>
中国电信集团有限公司 <a href="http://www.chinatelecom.com.cn" target="_blank" rel="noopener">http://www.chinatelecom.com.cn</a><br>
中国联合网络通信集团有限公司 <a href="http://www.chinaunicom.com.cn" target="_blank" rel="noopener">http://www.chinaunicom.com.cn</a><br>
中国移动通信集团有限公司 <a href="http://www.chinamobile.com" target="_blank" rel="noopener">http://www.chinamobile.com</a><br>
中国电子信息产业集团有限公司 <a href="http://www.cec.com.cn" target="_blank" rel="noopener">http://www.cec.com.cn</a><br>
中国第一汽车集团有限公司 <a href="http://www.faw.com.cn" target="_blank" rel="noopener">http://www.faw.com.cn</a><br>
东风汽车集团有限公司 <a href="http://www.dfmc.com.cn" target="_blank" rel="noopener">http://www.dfmc.com.cn</a><br>
中国一重集团有限公司  <a href="http://www.cfhi.com/yzjt/index.html" target="_blank" rel="noopener">http://www.cfhi.com/yzjt/index.html</a><br>
中国机械工业集团有限公司 <a href="http://www.sinomach.com.cn" target="_blank" rel="noopener">http://www.sinomach.com.cn</a><br>
哈尔滨电气集团有限公司 <a href="http://www.harbin-electric.com" target="_blank" rel="noopener">http://www.harbin-electric.com</a><br>
中国东方电气集团有限公司 <a href="http://www.dongfang.com" target="_blank" rel="noopener">http://www.dongfang.com</a><br>
鞍钢集团有限公司 <a href="http://www.ansteel.cn" target="_blank" rel="noopener">http://www.ansteel.cn</a><br>
中国宝武钢铁集团有限公司 <a href="http://www.baowugroup.com" target="_blank" rel="noopener">http://www.baowugroup.com</a><br>
中国铝业集团有限公司 <a href="http://www.chalco.com.cn" target="_blank" rel="noopener">http://www.chalco.com.cn</a><br>
中国远洋海运集团有限公司 <a href="http://www.coscoshipping.com" target="_blank" rel="noopener">http://www.coscoshipping.com</a><br>
中国航空集团公司 <a href="http://www.airchinagroup.com" target="_blank" rel="noopener">http://www.airchinagroup.com</a><br>
中国东方航空集团公司 <a href="http://www.ceairgroup.com" target="_blank" rel="noopener">http://www.ceairgroup.com</a><br>
中国南方航空集团有限公司 <a href="http://www.csair.cn" target="_blank" rel="noopener">http://www.csair.cn</a><br>
中国中化集团有限公司 <a href="http://www.sinochem.com" target="_blank" rel="noopener">http://www.sinochem.com</a><br>
中粮集团有限公司  <a href="http://www.cofco.com" target="_blank" rel="noopener">http://www.cofco.com</a><br>
中国五矿集团有限公司 <a href="http://www.minmetals.com.cn" target="_blank" rel="noopener">http://www.minmetals.com.cn</a><br>
中国通用技术 (集团) 控股有限责任公司 <a href="http://www.genertec.com.cn" target="_blank" rel="noopener">http://www.genertec.com.cn</a><br>
中国建筑集团有限公司 <a href="http://www.cscec.com" target="_blank" rel="noopener">http://www.cscec.com</a><br>
中国储备粮管理集团有限公司 <a href="http://www.sinograin.com.cn" target="_blank" rel="noopener">http://www.sinograin.com.cn</a><br>
国家开发投资集团有限公司 <a href="http://www.sdic.com.cn" target="_blank" rel="noopener">http://www.sdic.com.cn</a><br>
招商局集团有限公司 <a href="http://www.cmhk.com" target="_blank" rel="noopener">http://www.cmhk.com</a><br>
华润 (集团) 有限公司 <a href="http://www.crc.com.hk" target="_blank" rel="noopener">http://www.crc.com.hk</a><br>
中国旅游集团有限公司[香港中旅 (集团) 有限公司] <a href="http://www.hkcts.com" target="_blank" rel="noopener">http://www.hkcts.com</a><br>
中国商用飞机有限责任公司 <a href="http://www.comac.cc" target="_blank" rel="noopener">http://www.comac.cc</a><br>
中国节能环保集团有限公司 <a href="http://www.cecic.com.cn" target="_blank" rel="noopener">http://www.cecic.com.cn</a><br>
中国国际工程咨询有限公司 <a href="http://www.ciecc.com.cn" target="_blank" rel="noopener">http://www.ciecc.com.cn</a><br>
中国诚通控股集团有限公司 <a href="http://www.cctgroup.com.cn" target="_blank" rel="noopener">http://www.cctgroup.com.cn</a><br>
中国中煤能源集团有限公司 <a href="http://www.chinacoal.com" target="_blank" rel="noopener">http://www.chinacoal.com</a><br>
中国煤炭科工集团有限公司 <a href="http://www.ccteg.cn" target="_blank" rel="noopener">http://www.ccteg.cn</a><br>
机械科学研究总院集团有限公司 <a href="http://www.cam.com.cn" target="_blank" rel="noopener">http://www.cam.com.cn</a><br>
中国中钢集团有限公司 <a href="http://www.sinosteel.com" target="_blank" rel="noopener">http://www.sinosteel.com</a><br>
中国钢研科技集团有限公司 <a href="http://www.cisri.com.cn" target="_blank" rel="noopener">http://www.cisri.com.cn</a><br>
中国化工集团有限公司 <a href="http://www.chemchina.com.cn" target="_blank" rel="noopener">http://www.chemchina.com.cn</a><br>
中国化学工程集团有限公司  <a href="http://www.cncec.cn" target="_blank" rel="noopener">http://www.cncec.cn</a><br>
中国盐业集团有限公司 <a href="http://www.chinasalt.com.cn" target="_blank" rel="noopener">http://www.chinasalt.com.cn</a><br>
中国建材集团有限公司 <a href="http://www.cnbm.com.cn" target="_blank" rel="noopener">http://www.cnbm.com.cn</a><br>
中国有色矿业集团有限公司 <a href="http://www.cnmc.com.cn" target="_blank" rel="noopener">http://www.cnmc.com.cn</a><br>
有研科技集团有限公司  <a href="http://www.grinm.com" target="_blank" rel="noopener">http://www.grinm.com</a><br>
北京矿冶科技集团有限公司 <a href="http://www.bgrimm.com" target="_blank" rel="noopener">http://www.bgrimm.com</a><br>
中国国际技术智力合作有限公司 <a href="http://www.ciic.com.cn" target="_blank" rel="noopener">http://www.ciic.com.cn</a><br>
中国建筑科学研究院有限公司 <a href="http://www.cabr.com.cn" target="_blank" rel="noopener">http://www.cabr.com.cn</a><br>
中国中车集团有限公司 <a href="http://www.crrcgc.cc" target="_blank" rel="noopener">http://www.crrcgc.cc</a><br>
中国铁路通信信号集团有限公司 <a href="http://www.crsc.cn" target="_blank" rel="noopener">http://www.crsc.cn</a><br>
中国铁路工程集团有限公司 <a href="http://www.crecg.com" target="_blank" rel="noopener">http://www.crecg.com</a><br>
中国铁道建筑集团有限公司 <a href="http://www.crcc.cn" target="_blank" rel="noopener">http://www.crcc.cn</a><br>
中国交通建设集团有限公司 <a href="http://www.ccccltd.cn" target="_blank" rel="noopener">http://www.ccccltd.cn</a><br>
中国普天信息产业集团有限公司 <a href="http://www.potevio.com" target="_blank" rel="noopener">http://www.potevio.com</a><br>
中国信息通信科技集团有限公司<br>
中国农业发展集团有限公司 <a href="http://www.cnadc.com.cn" target="_blank" rel="noopener">http://www.cnadc.com.cn</a><br>
中国林业集团有限公司 <a href="http://www.cfgc.cn" target="_blank" rel="noopener">http://www.cfgc.cn</a><br>
中国医药集团有限公司 <a href="http://www.sinopharm.com" target="_blank" rel="noopener">http://www.sinopharm.com</a><br>
中国保利集团有限公司 <a href="http://www.poly.com.cn" target="_blank" rel="noopener">http://www.poly.com.cn</a><br>
中国建设科技有限公司 <a href="http://www.cadreg.com.cn" target="_blank" rel="noopener">http://www.cadreg.com.cn</a><br>
中国冶金地质总局 <a href="http://www.cmgb.com.cn" target="_blank" rel="noopener">http://www.cmgb.com.cn</a><br>
中国煤炭地质总局 <a href="http://www.ccgc.cn" target="_blank" rel="noopener">http://www.ccgc.cn</a><br>
新兴际华集团有限公司 <a href="http://www.xxcig.com" target="_blank" rel="noopener">http://www.xxcig.com</a><br>
中国民航信息集团有限公司 <a href="http://www.travelsky.net" target="_blank" rel="noopener">http://www.travelsky.net</a><br>
中国航空油料集团有限公司 <a href="http://www.cnaf.com" target="_blank" rel="noopener">http://www.cnaf.com</a><br>
中国航空器材集团有限公司 <a href="http://www.casc.com.cn" target="_blank" rel="noopener">http://www.casc.com.cn</a><br>
中国电力建设集团有限公司 <a href="http://www.powerchina.cn" target="_blank" rel="noopener">http://www.powerchina.cn</a><br>
中国能源建设集团有限公司 <a href="http://www.ceec.net.cn" target="_blank" rel="noopener">http://www.ceec.net.cn</a><br>
中国安能建设集团有限公司<br>
中国黄金集团有限公司 <a href="http://www.chinagoldgroup.com" target="_blank" rel="noopener">http://www.chinagoldgroup.com</a><br>
中国广核集团有限公司 <a href="http://www.cgnpc.com.cn" target="_blank" rel="noopener">http://www.cgnpc.com.cn</a><br>
中国华录集团有限公司 <a href="http://www.hualu.com.cn" target="_blank" rel="noopener">http://www.hualu.com.cn</a><br>
上海诺基亚贝尔股份有限公司 <a href="http://www.alcatel-sbell.com.cn" target="_blank" rel="noopener">http://www.alcatel-sbell.com.cn</a><br>
华侨城集团公司 <a href="http://www.chinaoct.com" target="_blank" rel="noopener">http://www.chinaoct.com</a><br>
南光 (集团) 有限公司[中国南光集团有限公司] <a href="http://www.namkwong.com.mo" target="_blank" rel="noopener">http://www.namkwong.com.mo</a><br>
中国西电集团有限公司 <a href="http://www.xd.com.cn/structure/zgxdjt.htm" target="_blank" rel="noopener">http://www.xd.com.cn/structure/zgxdjt.htm</a><br>
中国铁路物资集团有限公司 <a href="http://www.crmsc.com.cn" target="_blank" rel="noopener">http://www.crmsc.com.cn</a><br>
中国国新控股有限责任公司 <a href="http://www.crhc.cn" target="_blank" rel="noopener">http://www.crhc.cn</a></p>
<h1 id="证券网站">6.  证券网站</h1>
<p>上海证券交易所 <a href="http://www.sse.com.cn/" target="_blank" rel="noopener">http://www.sse.com.cn/</a><br>
深圳证券交易所 <a href="http://www.szse.cn/" target="_blank" rel="noopener">http://www.szse.cn/</a><br>
香港交易所 <a href="https://www.hkex.com.hk" target="_blank" rel="noopener">https://www.hkex.com.hk</a></p>
<h1 id="券商网站">7.  券商网站</h1>
<p>广发证券易淘金 <a href="https://store.gf.com.cn/super/#/index" target="_blank" rel="noopener">https://store.gf.com.cn/super/#/index</a></p>
]]></content>
  </entry>
  <entry>
    <title>life/眼镜选择</title>
    <url>/posts/uncategorized/5f2525b7/</url>
    <content><![CDATA[<h1 id="球面镜-非球面镜与双非球面镜">1.  球面镜, 非球面镜与双非球面镜</h1>
<pre><code>非球面镜镜片薄, 物象扭曲小, 视野更大, 价格和球面镜差不多
</code></pre>
<h1 id="镜片材料">2.  镜片材料</h1>
<pre><code>树脂不耐磨
</code></pre>
<h1 id="折射率">3.  折射率</h1>
<pre><code>视觉感受上折射率越低越好, 但折射率越高, 镜片越薄
</code></pre>
<h1 id="阿贝数">4.  阿贝数</h1>
<pre><code>阿贝数越高, 越清晰
</code></pre>
<h1 id="膜层">5.  膜层</h1>
<pre><code>膜层能给眼镜添加额外的性能, 知名的有 A6膜.
强化膜, 防水膜, 防静电膜</code></pre>
]]></content>
  </entry>
  <entry>
    <title>term-for-bank</title>
    <url>/posts/term/d9c4f8a7/</url>
    <content><![CDATA[<p>银行卡类型 Card Type<br>
银行卡号 Card No<br>
借记卡 Debit Card<br>
贷记卡 Credit Card<br>
电话银行 IVR (Interactive Voice Response:交互语音应答系统)<br>
证件号码 I.D. No<br>
注册 Enrollment<br>
证件 I.D.<br>
新密码 New Password<br>
确认密码 Confirm Password<br>
密码重置 Ret Password<br>
账户管理 Account management<br>
账户查询 Account enquiry<br>
账户概览 Account summary<br>
账户详情 Account detail <br>
交易明细查询 Transaction detail enquiry<br>
转账 Transfer <br>
定期存款 Time deposit <br>
定期账户 Time deposit <br>
活期账户 Savings Account<br>
活期一本通 Passbook of Current Savings<br>
普通活期存折 Regular Passbook saving<br>
定期一本通 Passbook of Time Deposit<br>
零存整取 Installment Time Deposit<br>
教育储蓄 Education Saving<br>
存本取息 Interest Withdraw Time Deposit<br>
准贷记卡 Quasi Credit Card<br>
账号 Account No./Acc. No.<br>
别名 Nickname<br>
账号状态 Acc. Status<br>
开户网点 Acc. Open<br>
网点 Branch<br>
开户日期 Open Date<br>
卡号 Card No.<br>
卡状态 Card Status<br>
起始日期 Start Date<br>
结束日期 End Date<br>
交易日期 Transaction Date<br>
币种 Currency<br>
钞/汇 Cash/Remit<br>
当前余额 Current Balance<br>
可用余额 Available Balance<br>
余额 Balance<br>
余额查询 Balance Enquiry <br>
存单序号 CD No.<br>
收入金额 credit<br>
支出金额 Debit<br>
业务摘要 Memo<br>
人民币 RMB<br>
美元 USD<br>
乙钞 B Cash<br>
转账明细 Transfer details <br>
预约转账管理 Scheduled transfer management <br>
转出账号 Transfer Out Acc.<br>
转出账号地区 Transfer Out Region<br>
转入账号 Transfer In Acc.<br>
转入账号地区 Transfer In Region<br>
钞汇标志 Cash/Remit<br>
转账金额 Transfer Amount<br>
即时转账 Immediate (Transfer)<br>
指定日期转账 Sehedule (Transfer)<br>
转账日期 Transfer Date<br>
备注 Memo<br>
港币 HKD<br>
英镑 GBP<br>
欧元 EUR<br>
日元 JPY<br>
加拿大元 CAD<br>
澳大利亚元 AUD<br>
瑞士法郎 CHF<br>
新加坡元 SGD<br>
现钞 Cash<br>
现汇 Remit<br>
手续费 Service Charge<br>
转账类型 Transfer Type<br>
转账状态 Transfer Status<br>
定期存款支取 Time deposit withdraw <br>
整存整取 Lump-sum Time Deposit<br>
通知存款 Call Deposit<br>
零存整取续存 Renew Time Deposit<br>
教育储蓄续存 Renew Education Saving<br>
定活两便 Consolidated Time&amp;Savings<br>
转存 Repeating <br>
转存方式 Transfer Type<br>
储种 Type<br>
存期 Period<br>
自动转存 Repeating <br>
业务品种 Class<br>
续存金额 Renew Amount<br>
信用额度 Credit Limit<br>
可用额度 Available Credit<br>
预约日期 Submit Date<br>
指定转账日期 Schedule Date<br>
提交 Submit<br>
整存整取支取 Lump Sum Time Deposit Withdraw<br>
通知存款支取 Call Deposit Transfer<br>
存折 Passbook<br>
存单 CD<br>
存本取息(利息)支取 Transfer interest from interest withdraw time deposit<br>
定活两便支取 Consolidated time&amp;Savings transfer<br>
信用卡查询 Credit card enquiry<br>
信用卡概览  Credit Card Summary<br>
信用卡详细信息 Credit Card Detail<br>
信用卡未出账单明细  Credit Card unsettled bills<br>
信用卡交易明细  Credit Card Transaction Detail<br>
信用卡月结单查询 Credit Card Monthly Statement Enquiry<br>
查询月份 Equiry month<br>
结单日期  Statement Date<br>
贷记利息 Interest Rate<br>
本币上月余额 RMB Previous month balance<br>
本币本月余额 RMB Current month balance<br>
美元上月余额 USD Previous month balance<br>
美元本月余额 USD Current month balance<br>
本币最低还款额 RMB Minimal Payment<br>
本币全额金额 RMB Total amount due<br>
外币最低还款额 Foreign Currency Minimal Payment<br>
外币全额金额 Foreign Currency Total Payment<br>
账户信用额度 Credit limit<br>
可用额度 Available Credit<br>
原交易金额 Original Amount<br>
交易地点 Transact at<br>
本币存入合计 RMB total Credit<br>
外币存入合计 Foreign Currency total Credit<br>
本币支出合计 RMB total Debit<br>
外币支出合计 Foreign Currency total Debit<br>
上一结单日 Previous Settlement Date<br>
还款到期日 Next Payment Date<br>
信用积分 Credit Point<br>
上次未还金额 Previous Period unpaid amount<br>
上次还款金额 Previous Period paid amount<br>
需立即缴交的过期款项/超额款项 Overdue/Overlimit amount<br>
全额还款总额 Total due amount<br>
最低还款总额 Minimum Payment Amount<br>
全额购汇还款总额 Total foreign currency due amount<br>
最低购汇还款总额 Mini foreign currency payment amount<br>
购汇牌价(人民币/美元) Exchange Rate (RMB/USD)<br>
人民币还款 RMB  Payment<br>
美元还款 USD Payment<br>
还款方式 Payment method<br>
记账日期 Booked Date<br>
上次结算日 Previous settlement Date<br>
信用卡还款 Credit card payment<br>
自助还款服务 Self Service Payment<br>
到期还款日 Due Date<br>
全额还款金额 Total Due<br>
最低还款金额 Minimal Payment Amount<br>
还款种类 Payment Type<br>
付款账号 Payment acc no.<br>
付款金额 Payment amount<br>
申请信用卡 Credit card application<br>
美元, 人民币双币种卡 USD, RMB dual currency card<br>
称谓 Title<br>
姓名拼音 Name(Pingyin)<br>
出生日期 Date of Birth<br>
证件类别 I.D. Type<br>
证件号码 I.D. NO.<br>
国籍 Nationality<br>
婚姻状况 Marital Status<br>
教育状况 Education<br>
住宅性质 Resident Type<br>
住宅地址 Address<br>
居住年限 Period of Resident<br>
住宅邮编 Zip Code<br>
住宅电话 Resident Phone<br>
区号 Region<br>
电话号码 Phone no.<br>
分机号 ext<br>
手机号码 Mobile Phone<br>
电子邮箱 Email<br>
供养人数 House hold<br>
父亲姓名 Father’s name<br>
母亲姓名 Mather’s name<br>
公司名称 Company name<br>
公司地址 Company add.<br>
公司邮编 Company Zip Code<br>
公司电话 Company phone<br>
行业性质 Industry<br>
经济类型 Organization<br>
职位 Position<br>
现职年限 Years employed<br>
现职固定月收入 Monthly Salary<br>
年收入总额 Year Income<br>
储蓄账户 saving account<br>
个人资产信息 Personal asset data<br>
账单缴付 Bill Payment<br>
缴费地区 payment region<br>
缴费类型 payment type<br>
缴费日期 payment Date<br>
缴费详细信息 payment detail<br>
截止日期 Due Date<br>
交费日期 Transfer Date<br>
机主姓名 owner name<br>
手机正常话费 basic fee<br>
信息费 Information fee<br>
交费总额 Total amount<br>
缴费账号 Payment acc. No.<br>
财经资讯 Financial Information<br>
浏览金融信息 browse financial information<br>
金融信息设置  financial information setting<br>
个人设定 Personal Setting<br>
账户维护 Account maintenance<br>
会话超时设置 Session timed setting<br>
更新个人资料 Update personal data<br>
更改密码 Change password<br>
个性化session超时时间 Customizing session inactivity time limit<br>
超时时间 Limit<br>
原密码 original password<br>
网上客服 Customer sevices<br>
安全电子邮件 security email<br>
收件箱 Inbox<br>
发邮件 Send mail<br>
发件箱  Outbox<br>
标题 subject<br>
发信人 sender<br>
接收日期 receive date<br>
删除 delete<br>
邮件详细内容 mail content<br>
发送日期 send date<br>
网上挂失 online Suspend account<br>
账户挂失 Suspend account<br>
挂失多个账户 Suspend multiple accounts<br>
退出 Logout</p>
<p>SAVING ACCOUNT 和 CURRENT ACCOUNT 有什么不同？<br>
SAVING ACCOUNT 是指储蓄账户, CURRENT ACCOUNT 是指结算户(境外银行也指往来户口或支票户口), 在国内, 早期的账户有储蓄户和结算户之分, 储蓄户只允许现金的收付, 不得转账; 而结算户两者都可以, 最近人民银行出了指引, 不再区分储蓄户和结算户, 以前开立的储蓄户也会自动转换成结算户了.两者连在一起称为CASA.<br>
活期历史明细清单:  Current Detailed List of History   帐号: Account Number 户名: Customer Name <br>
操作地区: Operation Region 操作网点: Operation Branches 操作柜员: Operation Teller 工作日期: Date of Work 入账日期: Date Recorded 币种: Currency Type <br>
交易代码: Transaction Code 注释: Remark <br>
借贷: Lend or Loan 金额 Money 余额 Balance 地区 Region 网点 Branches 操作员 Operator 界面 Interface 息 Interest 税 Tax 工资  Wage 存deposit <br>
支取Expenditure 汇款remittance 收费fee <br>
批量业务 Batch Business <br>
柜面交易 Counter transaction 开户: Account 摘要: Abstract <br>
地点: location <br>
打印机构: Print Agencies 现存: Cash deposit 转存: Transfer into 现支: Cash expenses <br>
扣年税: Annual tax deduction 包月费: Monthly fee <br>
中心入账: Center recorded 银行对账单: Bank Reconciliatio     <br>
打印柜员号printed teller sequence number</p>
]]></content>
      <categories>
        <category>term</category>
      </categories>
  </entry>
  <entry>
    <title>coroutine</title>
    <url>/posts/uncategorized/5cb61c70/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://www.cnblogs.com/tohxyblog/p/10712798.html" target="_blank" rel="noopener">https://www.cnblogs.com/tohxyblog/p/10712798.html</a></li>
<li>
<a href="https://www.kotlincn.net/docs/tutorials/coroutines/async-programming.html" title target>异步程序设计</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/posts/uncategorized/a1ede006/</url>
    <content><![CDATA[<h1 id="http-code">1.  HTTP CODE</h1>
<p>403 Forbidden<br>
415 Unsupported Media Type<br>
502 Bad Gateway<br>
504 Gateway Timeout</p>
]]></content>
  </entry>
  <entry>
    <title>HTTPS</title>
    <url>/posts/uncategorized/c9a2a716/</url>
    <content><![CDATA[<h1 id="ssl-建立连接过程">1.  SSL 建立连接过程</h1>
<ol>
<li>在 Client 端和 Server 端建立 TCP 连接后, Client 端以下信息发送给 发送给 Server 端:
<ul>
<li>version: 当前支持的最后TLS协议版本</li>
<li>cipher suites: 客户端支持的加密套件列表<br>
每个加密条件对应4个功能组合:</li>
<li>Au, 认证算法, 用于身份认证</li>
<li>Key Exchange, 密钥交换算法, 用于密钥协商</li>
<li>Enc, 对称加密算法, 用于信息加密</li>
<li>Mac, 信息摘要算法, 用于完整性效验</li>
<li>compression methods: 支持的压缩算法列表, 用于后续的信息压缩传输</li>
<li>random_client: 用于后续的密钥生成</li>
<li>extensions: 扩展字段, 支持协议与算法的相关参数及其他辅助信息等, 如常见的SNI</li>
</ul>
</li>
<li>Server 端将以下信息发送给 Client 端:
<ul>
<li>version: 使用的协议版本</li>
<li>cipher suite: 选择的加密套件</li>
<li>compression method: 选择的压缩算法</li>
<li>random_server: 用于后续的密钥生成</li>
</ul>
</li>
<li>Server 端将证书连接发送给客户端, 用于身份认证和秘钥交换.<br>
如果 Server 端将需要验证客户端, 则还会发送 client_certificate_request 标识, 请求验证客户端证书. 验证过程和 Client 端验证服务端类似.</li>
<li>Client 端验证证书合法性
<ul>
<li>证书链的可信性 trusted certificate path</li>
<li>证书是否被吊销 revocation</li>
<li>有效期 expiry date</li>
<li>域名 domain</li>
</ul>
</li>
<li>如果检验合格, Client 端计算产生前主密钥 (是一个随机数,  Pre-Master Secret, PMS), 并用证书公钥加密, 并通过摘要算法算出信息摘要, 发送给 Server 端. 信息摘要是为了防止被篡改.<br>
此时客户端已经获得计算协商密钥的全部信息:两个明文随机数 random_client 与 random_server, 以及自己计算产生的 pre_master_secret<br>
计算得到协商密钥: session_secret = encrypt(random_client, random_server, pre_master_secret)</li>
<li>Server 端接收到加密信息后, 通过私钥解密获得前主秘钥, 并计算得出协商密钥.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>kotlin</title>
    <url>/posts/uncategorized/73362798/</url>
    <content><![CDATA[<h1 id="常用技巧">1.  常用技巧</h1>
<ul>
<li>
<p>声明 class 时, 把非空参数都放在默认构造器中, 可空字段放在属性中<br>
但如果是 web 应用中的 接收参数对象, 则不能这样做, 必须是先把参数置为可空, 然后再加上验证注解 @NotNull. 因为 json 解析在 注解验证之前</p>
</li>
<li>
<p>组装参数类型的代码可以使用 DSL, 看起来更直观</p>
</li>
<li>
<p>对于 jackson 处理 json, 需要引入 jackson-module-kotlin 来支持 kotlin 的 class 与 data class 的序列化与反序列化.</p>
</li>
<li>
<p>如果 lambda 函数有嵌套, 外层函数应该指定函数签名</p>
</li>
<li>
<p>对于尾递归函数, 使用 tailrec 修饰, 会对递归函数做优化, 避免栈溢出</p>
</li>
</ul>
<h1 id="官方文档比较重要的章节">2.  官方文档比较重要的章节</h1>
<ul>
<li>
<a href="https://www.kotlincn.net/docs/reference/evolution/components-stability.html" title target>不同组件的稳定性</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/keyword-reference.html" title target>关键字与操作符</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/classes.html" title target>类</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/properties.html" title target>属性</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/delegation.html" title target>委托</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/delegated-properties.html" title target>委托属性</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/extensions.html" title target>扩展</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/generics.html" title target>泛型</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/functions.html#%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95" title target>中缀函数</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/inline-functions.html" title target>内联函数</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/functions.html#%E5%8F%AF%E5%8F%98%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0varargs" title target>可变数量参数</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/lambdas.html" title target>高阶函数与 lambda 表达式</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/scope-functions.html#%E5%87%BD%E6%95%B0%E9%80%89%E6%8B%A9" title target>作用域函数</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/multi-declarations.html" title target>解构</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/annotations.html" title target>注解</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/type-safe-builders.html" title target>类型安全的构建器</a>
</li>
<li>
<a href="https://www.kotlincn.net/docs/reference/coroutines-overview.html" title target>协程</a>
</li>
</ul>
<h1 id="实用方法">3.  实用方法</h1>
<ul>
<li>
<p>measureTimeMillis(block: () -&gt; Unit): Long<br>
返回代码块执行所需时间</p>
</li>
<li>
<p>check | checkNotNull<br>
throw IllegalStateException</p>
</li>
<li>
<p>require | requireNotNull<br>
throw IllegalArgumentException</p>
</li>
<li>
<p>error<br>
IllegalStateException</p>
</li>
</ul>
<h1 id="其他">4.  其他</h1>
<h2 id="协程调试">4.1.  协程调试</h2>
<p>-Dkotlinx.coroutines.debug=on</p>
<h1 id="resources">5.  Resources</h1>
<ul>
<li>
<a href="https://www.kotlincn.net/docs/reference" title target>Kotlin 中文文档</a>
</li>
<li>
<a href="https://play.kotlinlang.org/byExample/overview" title target>Learn Kotlin By Example</a>
</li>
<li>
<a href="https://play.kotlinlang.org/koans/overview" title target>Kotlin Koans</a>
</li>
<li>
<a href="https://play.kotlinlang.org/hands-on/overview" title target>Kotlin hands-On</a>
</li>
<li>
<a href="https://www.jianshu.com/p/d23c688feae7" title target>Kotlin 协程实现原理</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>QUIC</title>
    <url>/posts/uncategorized/f6ecbfe6/</url>
    <content><![CDATA[<p>// todo 2020-07-19</p>
]]></content>
  </entry>
  <entry>
    <title>network-model</title>
    <url>/posts/uncategorized/5f65674f/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>No</th>
<th>名称</th>
<th>作用</th>
<th>相关协议</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>应用层</td>
<td>为应用程序提供服务</td>
<td>HTTP, SMTP, SNMP, FTP, Telnet, SIP, SSH, NFS, RTSP, XMPP, Whois, ENRP</td>
</tr>
<tr>
<td>6</td>
<td>表示层</td>
<td>数据格式转化, 数据加密</td>
<td>XDR, ASN.1, SMB, AFP, NCP</td>
</tr>
<tr>
<td>5</td>
<td>会话层</td>
<td>建立, 管理和维护会话</td>
<td>ASAP, TLS, SSH, ISO 8327/CCITT X.225, RPC, NetBIOS, ASP, Winsock, BSD sockets</td>
</tr>
<tr>
<td>4</td>
<td>传输层</td>
<td>建立, 管理和维护端到端的连接</td>
<td>TCP, UDP, RTP, SCTP, SPX, ATP, IL</td>
</tr>
<tr>
<td>3</td>
<td>网络层</td>
<td>IP选址及路由选择</td>
<td>IP, ICMP, IGMP, IPX, BGP, OSPF, RIP, IGRP, EIGRP, ARP, RARP, X.25</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层</td>
<td>提供介质访问和链路管理</td>
<td>以太网, 令牌环, HDLC, 帧中继, ISDN, ATM, IEEE 802.11, FDDI, PPP</td>
</tr>
<tr>
<td>1</td>
<td>物理层</td>
<td>物理层</td>
<td>线路, 无线电, 光纤, 信鸽</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/posts/uncategorized/b26c50c6/</url>
    <content><![CDATA[<h1 id="连接步骤">1.  连接步骤</h1>
<h2 id="建立连接">1.1.  建立连接</h2>
<p>3 次握手</p>
<ol>
<li>Server 端建立连接前需要监听端口, 处于 LISTEN 状态.</li>
<li>Client 端准备建立连接, 先发送一个 SYN 同步包给 Server 端, Client 端进入 SYN_SENT 状态.</li>
<li>Server 端收到 SYN 后, 同意建立连接, 向 Client 端回复一个 ACK. 由于 TCP 是双工传输, Server 端也会同时向 Client 端发送一个 SYN, 申请 Server 向 Client 方向建立连接. 发送完 ACK 和 SYN 后, Server 端进入 SYN_RCVD 状态.</li>
<li>Client 端收到 Server 端的 ACK 后, Client 端进入 ESTABLISHED 状态; 同时 Client 端 向 Server 端发送 ACK, 回复 Server 端的 SYN 请求.</li>
<li>Server 端收到 Client 端的 ACK 后, Server 端也进入 ESTABLISHED 状态. 此时建连完成, 双方随时可以进行数据传输.</li>
</ol>
<h3 id="为什么需要-3-次握手">1.1.1.  为什么需要 3 次握手?</h3>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端导致错误.</p>
<p>在双方的 SYN 包中都会包含一个 <code>随机序号</code>, 在 ACK 应答时必须返回 <code>随机序号 + 1</code>.</p>
<h3 id="如何防御-syn-洪水攻击">1.1.2.  如何防御 SYN 洪水攻击?</h3>
<p>SYN 洪水攻击的原因是 Server 端收到 Client 端的 SYN 请求后, 发送 ACK 和 SYN, 但是 Client 端不进行回复, 导致 Server 端大量的连接处于 SYN_RCVD 状态, 进而影响其他aggie请求的建连.</p>
<p>可以设置 <code>tcp_synack_retries = 0</code> 加快半连接的回收速度, 或者调大 <code>tcp_max_syn_backlog</code> 来应对大量的 SYN 洪水攻击.</p>
<h2 id="关闭连接">1.2.  关闭连接</h2>
<p>4 次挥手</p>
<ol>
<li>Client 端和 Server 端都是 ESTABLISHED 状态. 此时双方都可以发起关闭连接, 暂且把先发起的一方看做 Client 端.</li>
<li>Client 端向 Server 端发送 FIN 包, 表示 Client 端已经没有数据要发送了, 然后 Client 端进入 FIN_WAIT_1 状态.</li>
<li>Server 端收到 FIN 后, 返回 ACK, 然后进入 CLOSE_WAIT 状态, 而 Client 端接收到 ACK 后进入 FIN_WAIT_2 状态. 此时 Server 端属于半关闭状态, 因为此时 Client 端向 Server 端方向已经不会发送数据了, 可是 Server 端可能还有数据要发送.</li>
<li>当 Server 端发送完毕后, 向 Client 端发送 FIN, 表示 Server 端也没有数据发送了, 此时 Server 端进入 LAST_ACK 状态, 就等待 Client 端的应答就可以关闭连接了.</li>
<li>Client 端收到 Server 端的 FIN 包后, 回复 ACK, 然后进入 TIME_WAIT 状态. Server 端接收到 ACK 后直接进入 CLOSED 状态. 而 Client 端在 TIME_WAIT 状态下需要等待 2 倍的最大报文段生存时间, 来保证连接的可靠关闭, 之后才会进入 CLOSED 状态.</li>
</ol>
<h3 id="为什么-client-端需要等待-2-倍的最大报文段生存时间之后才关闭连接">1.2.1.  为什么 Client 端需要等待 2 倍的最大报文段生存时间之后才关闭连接?</h3>
<ol>
<li>保证 TCP 协议的全双工连接能够可靠关闭.</li>
<li>保证这次连接的重复数据段从网络中消失, 防止端口被重用时可能产生数据混淆.</li>
</ol>
<h3 id="为什么需要-4-次挥手">1.2.2.  为什么需要 4 次挥手?</h3>
<p>为了确认双方都没有数据发送.</p>
<h1 id="滑动窗口">2.  滑动窗口</h1>
<p>// todo 2020-07-19</p>
<h1 id="拥塞控制">3.  拥塞控制</h1>
<p>// todo 2020-07-19</p>
<h1 id="nagel-算法和-ack-延迟">4.  Nagel 算法和 ACK 延迟</h1>
<p>// todo 2020-07-19</p>
]]></content>
  </entry>
  <entry>
    <title>management/6顶思考帽</title>
    <url>/posts/uncategorized/791c13c2/</url>
    <content><![CDATA[<p>6 顶思考帽是指引注意力思考工具之一.</p>
<p>如果有个盒子, 每个面的颜色都不同, 每个人只能看到盒子的一个面, 那么当问及盒子是什么颜色时, 就会产生矛盾与争论.<br>
而这种情况下, 其实每个人的观点都是对的, 只是视角不一致或者没有全面的看到盒子的各个面.</p>
<p>如果每个人同一时间, 看到的面都是相同的, 就减少了矛盾与争论. 这就是 6 顶思考帽的由来, 它让讨论中的每个人同一时间思考的方向都是一致的.<br>
随后只要全面的分析问题的每个角度, 就能迅速的得出分析问题的结论.</p>
<h1 id="白色">1.  白色</h1>
<p>事实与数据<br>
罗列与甄别大量信息的可信度</p>
<h1 id="红色">2.  红色</h1>
<p>情绪与感觉<br>
通过个人经验对事情做主观推断</p>
<h1 id="黑色">3.  黑色</h1>
<p>谨慎与小心<br>
以批判的心态考虑事情可能的漏洞, 或不利的一面</p>
<h1 id="黄色">4.  黄色</h1>
<p>乐观与信心<br>
挖掘事情有利的一面</p>
<h1 id="绿色">5.  绿色</h1>
<p>创新<br>
从不同角度出发, 寻找更有效处理方式</p>
<h1 id="蓝色">6.  蓝色</h1>
<p>控制思考<br>
组织思考的逻辑</p>
<h1 id="核销思想">7.  核销思想</h1>
<h2 id="1-降低思考复杂度">7.1.  1. 降低思考复杂度</h2>
<p>人们无法短时间内面面俱到, 而思考的最大障碍就是混乱.<br>
如果我们同一时间只思考事情的一个方面, 之后我们再一步一步把事情的方方面面都考虑一遍, 起承转合之后就很容易把事情的脉络理清.</p>
<h2 id="2-给思维绘制地图">7.2.  2. 给思维绘制地图</h2>
<p>思维混乱, 逻辑不清就无法准确应对事情.<br>
把事情的每一方面都罗列出来, 就像地图一样, 就很容易找到事情的处理办法.</p>
<h2 id="3-消除自我">7.3.  3. 消除自我</h2>
<p>在讨论过程中, 大家各抒己见, 容易引发争论, 容易浪费时间. 而大家同一时间往一处想, 群力群策, 更能发挥集体的智慧.</p>
]]></content>
  </entry>
  <entry>
    <title>开发管理</title>
    <url>/posts/management/43c4670f/</url>
    <content><![CDATA[<p>需求分析</p>
<p>系统设计</p>
<ul>
<li>架构</li>
<li>流程<br>
数据结构设计</li>
</ul>
<p>成本</p>
<ul>
<li>物力资源</li>
<li>人力资源
<ul>
<li>开发计划
<ul>
<li>功能开发人天</li>
<li>持续迭代</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>bug/需求管理</p>
<p>测试用例</p>
<p>软件开发</p>
<ul>
<li>需求
<ul>
<li>业务场景</li>
<li>业务模型及关系</li>
</ul>
</li>
<li>系统设计
<ul>
<li>数据库设计</li>
<li>架构设计</li>
</ul>
</li>
<li>测试
<ul>
<li>流程测试</li>
<li>压力测试</li>
</ul>
</li>
</ul>
<p>任何一个环节的变动, 都会向下影响之后的环节.<br>
在完全保证逻辑正确的, 安全的前提下, 追求完美的解决方案, 更有好, 便捷的交互, 更快的性能.</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
  </entry>
  <entry>
    <title>management/life-experience</title>
    <url>/posts/uncategorized/11c6e32f/</url>
    <content><![CDATA[<ol>
<li>你有责任把真话说的好听一点<br>
如果事情本身已经不能令人满意, 那么就把理由说的合情合理, 充满人情, 会令人好接受一点.</li>
</ol>
<p>你含蓄, 你斟酌, 你审慎的说出每一句话, 你尽可能的把真话说的好听一点, 那是一种善良, 修养, 和慈悲.</p>
<ol start="2">
<li>他人为何对你说话用心机？<br>
生活中别人有时对我们说话用心机, 如果是想了解更多的情况, 建立更深的关系, 我们大可不必斤斤计较, 反而应该宽容对待.</li>
</ol>
<p>别人由于种种原因有些话不能对我们明说, 因此费劲心机转弯抹角, 不管你当时有没有领悟, 我们都应该记着对方对你的好.<br>
如果时候指责对方拐弯抹角, 是不是有点不知好歹呢</p>
]]></content>
  </entry>
  <entry>
    <title>mind-walk</title>
    <url>/posts/logic/59e9fdc5/</url>
    <content><![CDATA[<p>思维漫步</p>
<p>语言</p>
<ul>
<li>抒情
<ul>
<li>基本情感</li>
<li>形容</li>
<li>修饰</li>
</ul>
</li>
<li>逻辑
<ul>
<li>推理</li>
<li>总结归并</li>
<li>联想</li>
</ul>
</li>
<li>陈述</li>
</ul>
<p>做事</p>
<ul>
<li>时间
<ul>
<li>持续时间
<ul>
<li>开始时间</li>
<li>结束时间</li>
</ul>
</li>
</ul>
</li>
<li>问题域
<ul>
<li>分解</li>
</ul>
</li>
<li>解题域
<ul>
<li>枚举</li>
<li>推理</li>
<li>实验/实践</li>
<li>归并统一解决方案</li>
<li>对比解决方案</li>
</ul>
</li>
<li>请求帮助
<ul>
<li>拒绝别人
<ul>
<li>了无痕迹的拒绝</li>
</ul>
</li>
<li>被别人拒绝
<ul>
<li>给别人无法拒绝的理由</li>
</ul>
</li>
</ul>
</li>
<li>总结
<ul>
<li>结果
<ul>
<li>成功</li>
<li>失败</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>logic</category>
      </categories>
  </entry>
  <entry>
    <title>deveoper-and-manager</title>
    <url>/posts/uncategorized/c41ae65f/</url>
    <content><![CDATA[<p>管理员与程序员也有相似的地方. 程序员管理对象, 指挥他们相互通信, 完成系统功能; 管理员管理手下, 指挥他们相互合作, 完成公司目标. 不同的是手下思想和能力可能不是管理员能决定的, 他们可能有自己不同意见, 解决问题的能力也有强有弱, 面向对象设计的思想是站在对象的角度思考问题, 所以同样管理手下也需要以人为本的思想. 公司的目标也是需要管理员自己发现, 挖掘. 怎样做, 怎么做, 成本如何都是需要考虑的.</p>
]]></content>
  </entry>
  <entry>
    <title>management/maxim</title>
    <url>/posts/uncategorized/e8a8110f/</url>
    <content><![CDATA[<p>Just do IT.<br>
态度决定一切, 细节决定成败, 目标决定方向, 行动决定未来.<br>
失败的方式千千万, 成功的方式只有一条. 试错再多次不如找到那条成功的路.<br>
把信息和情报放在第一位, 金钱就会滚滚而来.<br>
墨菲定理: 越害怕的事情越会发生.<br>
把难题清清楚楚地写出来, 便已经解决了一半.<br>
穷的原因, 表面上最缺的是金钱,本质上缺的是野心, 脑袋里最缺的是观念, 机会最缺的是了解, 命运最缺的是选择, 骨子里最缺的是勇气, 改变最缺的是行动,事业上最缺的是毅力, 内存里最缺的是胆色, 脑子里最缺的是知识;<br>
一贯的思维和行为, 只会得到一贯的结果.<br>
大多数人的想法很简单, 就是不想犯错, 因为犯错会让别人感觉自己是蠢货. 要想变得与众不同, 就必须要承担被大多数人认为是傻子的这种风险.</p>
]]></content>
  </entry>
  <entry>
    <title>person-faq</title>
    <url>/posts/uncategorized/aa84dac0/</url>
    <content><![CDATA[<h1 id="反应迟钝">1.  反应迟钝</h1>
<p>一直在自己的思维空间中, 对外界的反应就变得迟钝; 思考的问题上下文太复杂, 无法立刻切换出来.</p>
<p>解决方式:</p>
<ul>
<li>尽量保持对外界的敏感度, 不要长时间的待在思维空间中. 可以尝试番茄法, 45 分钟一个任务, 5 分钟休息</li>
<li>尽量单任务处理, 防止多任务并行处理时, 记忆不过来, 出现遗漏问题</li>
<li>多和环境互动, 多和人交流, 这样随时保持在一个和对接交流的状态</li>
</ul>
<h1 id="容易暴躁">2.  容易暴躁</h1>
<p>对他人的怒气是由于心灵的屏障造成的, 如:</p>
<p>怎么那么菜?!, 怎么还不明白?!, 怎么那么烦?!</p>
<p>这是对他人的一种蔑视, 无形中树立一道交流屏障, 感觉自己比对方厉害, 然后失去耐心.</p>
<p>解决方式:</p>
<ul>
<li>从消除屏障的角度出发, 降低对他人的期望值, 降低自己的优越感</li>
</ul>
<h1 id>3.  </h1>
]]></content>
  </entry>
  <entry>
    <title>project-management</title>
    <url>/posts/uncategorized/b5a6054f/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>project</title>
    <url>/posts/uncategorized/2fb3d0ee/</url>
    <content><![CDATA[<p>一个项目代码中有以下几个部分</p>
<ul>
<li>依赖管理<br>
maven, gradle</li>
<li>项目管理<br>
日志, 事务等</li>
<li>公共组件<br>
constant, util, 统一异常</li>
<li>业务逻辑<br>
对业务逻辑发封装</li>
<li>持久<br>
rdb, nosql 等依赖</li>
</ul>
<p>一个项目的开发文档有</p>
<ul>
<li>需求文档</li>
<li>前端, 后端设计文档</li>
<li>开发计划</li>
<li>测试用例</li>
<li>bug管理</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>reasoning</title>
    <url>/posts/uncategorized/af154bcd/</url>
    <content><![CDATA[<p>推理是形式.</p>
<p>需要注意的是: 推理必须掌握事物的所有对象.<br>
如果不能考察某类事物的全部对象, 而只根据部分对象作出的推理, 不一定完全可靠.</p>
<p>思维形式是人们进行思维活动时对特定对象进行反映的基本方式, 即概念, 判断, 推理.思维的基本规律是指思维形式自身的各个组成部分的相互关系的规律, 即用概念组成判断, 用判断组成推理的规律.它有4条: 即同一律, 矛盾律, 排中律和充足理由律.简单的逻辑方法是指, 在认识事物的简单性质和关系的过程中, 运用思维形式有关的一些逻辑方法, 通过这些方法去形成明确的概念, 作出恰当的判断和进行合乎逻辑的推理.</p>
<p>学习形式逻辑知识, 可以指导我们正确进行思维, 准确, 有条理地表达思想; 可以帮助我们运用语言, 提高听, 说, 读, 写的能力; 可以用来检查和发现逻辑错误, 辨别是非.同时, 学习形式逻辑还有利于掌握各科知识, 有助于将来从事各项工作.</p>
<h1 id="resource">1.  Resource</h1>
<p><a href="https://baike.baidu.com/item/%E6%8E%A8%E7%90%86/1905524" target="_blank" rel="noopener">https://baike.baidu.com/item/推理/1905524</a></p>
]]></content>
  </entry>
  <entry>
    <title>management/strategy</title>
    <url>/posts/uncategorized/d29d4bfc/</url>
    <content><![CDATA[<h1 id="性格">1.  性格</h1>
<h2 id="坦荡">1.1.  坦荡</h2>
<p>一切谋略都如同下棋一般,摆在台面上进行.<br>
心中光明磊落,充满阳光,满满正能量.<br>
即使是小心机,也是应变的需要,合情合理的对症下药.</p>
<h2 id="从容">1.2.  从容</h2>
<p>无论遇到什么样的处境,都保持从容镇定.<br>
以悠闲,逍遥的心态享受生活.<br>
不拘于形式,套路多变.</p>
<h2 id="清醒">1.3.  清醒</h2>
<p>以一种第三者的视角,观察自己的言行举止,时刻保持清醒.<br>
自己正在做什么,要怎么做.<br>
而不是凭本能与感觉做事,明确事情的重点.</p>
<h2 id="预判">1.4.  预判</h2>
<p>对自己的行为所带来的后果有一个预判.<br>
这么做会有什么结果?<br>
如果结果出人意料,应该如何应对?<br>
需要为自己的行为负责.</p>
<h2 id="严谨">1.5.  严谨</h2>
<p>对于任何事物都有准确全面的认识.<br>
深度挖掘事物的本质;如果时间不允许,至少对整体的把控没有任何问题.<br>
把事情处理稳妥.</p>
<h2 id="宽容">1.6.  宽容</h2>
<p>对于他人要包容,至少对事不对人.<br>
不能页不要强制别人变成自己需要的.</p>
<h2 id="大局">1.7.  大局</h2>
<p>平衡各方利益, 看清形势.</p>
<h2 id="节奏">1.8.  节奏</h2>
<p>做事情把握好节奏. 期望是那种流线型的感觉.</p>
<h1 id="改进">2.  改进</h1>
<h2 id="放松后没有状态">2.1.  放松后没有状态</h2>
<p>什么都不管了, 导致完全凭着本能行事<br>
要注意休息, 不用熬夜</p>
<h2 id="不断挑战自己底线">2.2.  不断挑战自己底线</h2>
<p>使自己遇到事情, 临危不乱, 面不改色</p>
<h2 id="细致程度">2.3.  细致程度</h2>
<h2 id="气质">2.4.  气质</h2>
<h2 id="二阶思维">2.5.  二阶思维</h2>
<p>所谓二阶思维 (Second-Order Thinking) 就是一位置要考虑结果背后的结果.<br>
举个例子, 一阶思维会说这是一家好公司, 让我们买进它的股票.<br>
二阶思维则需要考虑这是一家好公司, 但是人人都知道它是一家好公司, 所以这股票的价格自然就高了, 因此对于投资者来讲, 这家公司就不是足够好的公司了, 我们可以卖出它的股票.</p>
<p>所以说, 二阶思维就是迫使我们在采取行动时考虑长期影响.<br>
在此过程中, 我们最需要问自己的问题是, <code>如果我做了这件事, 那么接下来会发生什么</code>.</p>
<h2 id="注重与人沟通">2.6.  注重与人沟通</h2>
<p>比起处理事情, 更应该注重与人交流上.<br>
人和事, 人更重要. 应该有条不紊的处理人和事情, 一味的拼命干活是不对的, 有不是机器.<br>
再忙, 也不能没了章法.</p>
<h2 id="城府">2.7.  城府</h2>
<p>真正有城府的人是不会表现出来的, 他会更表现不是用脑的, 让人忽略你, 一副和蔼可亲的样子, 让人不会产生警惕感甚至敌意. 最终在别人死在他手里的时候, 才回过味来.</p>
<h2 id="记忆力">2.8.  记忆力</h2>
<p>如果记不住东西, 也很可能是对这些东西不感兴趣, 也有可能是事物没有思维方式去记忆它.</p>
<h2 id="善用工具">2.9.  善用工具</h2>
<p>假舆马者, 非利足也, 而致千里; 假舟楫者, 非能水也, 而绝江河. 君子生非异也, 善假于物也.</p>
<h2 id="要接纳别人的观点">2.10.  要接纳别人的观点</h2>
<p>在别人发表自己观点的时候要先接纳, 理解他们说的是什么, 然后在思辨; 而不是主观片面的认为别人就是错的.</p>
]]></content>
  </entry>
  <entry>
    <title>时间管理法</title>
    <url>/posts/management/259a5290/</url>
    <content><![CDATA[<p>将事情按 <code>重要</code> 与 <code>紧急</code> 程度划分到四个象限中</p>
<p>紧急程度的判断就是看时间的紧迫性, 很容易区分;<br>
重要程度则必须按照自己的人生目标和人生规划来衡量这件事的重要性.</p>
<ul>
<li>T0: 重要且紧急<br>
必须优先处理</li>
<li>T1: 重要但不紧急<br>
有计划的处理该类事件, 避免拖延, 将事件升级至 T0</li>
<li>T2: 紧急但不重要<br>
条件允许的情况下, 授权给他人处理</li>
<li>T3: 不紧急也不重要<br>
尽量不做, 或者少做</li>
</ul>
<img src="/posts/management/259a5290/time-management.jpg" class title="时间管理四象限法则">
<table>
<thead>
<tr>
<th>Level</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>T0</td>
<td>跟切身利益有关的事</td>
</tr>
<tr>
<td>T1</td>
<td>休息</td>
</tr>
<tr>
<td>T2</td>
<td>生活琐事</td>
</tr>
<tr>
<td>T3</td>
<td>游戏</td>
</tr>
</tbody>
</table>
<h1 id="时间分配">1.  时间分配</h1>
<p>黄金时间: 9~12 比较难, 需要深度思考的工作<br>
次黄金时间: 14~16 不需要特别思考, 偏执行的工作<br>
常规时间: 16~18 处理比较琐碎的事情<br>
碎片时间: 无规律, 一直坚持在做的事情</p>
<p>一件事情需要多久才能完成, 取决于分配给这件事的时间</p>
<p>崔西定律: 任何事情的复杂程度与其执行的步骤数目的平方成正比</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>四象限法则</tag>
      </tags>
  </entry>
  <entry>
    <title>management/work-strategy</title>
    <url>/posts/uncategorized/be8547fa/</url>
    <content><![CDATA[<ol>
<li>做事情要果断</li>
</ol>
<p>凡事一切要反复确认, 不明确的都是拖泥带水</p>
<ol start="2">
<li>尊重他人</li>
</ol>
<p>不看不该看的<br>
不强制他人做与工作无关的</p>
]]></content>
  </entry>
  <entry>
    <title>management/反格式化思考</title>
    <url>/posts/uncategorized/f687c6bd/</url>
    <content><![CDATA[<p>多思辨</p>
<p>遇到问题可以经常问问自己:</p>
<ol>
<li>为什么要这样做?</li>
<li>不这样行么?</li>
<li>那样行么?</li>
</ol>
<p>灵活应对各种问题, 可能在不同时间, 场景下的不同.</p>
]]></content>
  </entry>
  <entry>
    <title>management/开关</title>
    <url>/posts/uncategorized/aee1302e/</url>
    <content><![CDATA[<p>给自己设定开关, 方便管理自己的情绪, 思维方向, 交流方式.</p>
<p>思维方向:<br>
学习自六顶思考帽</p>
<ul>
<li>白色 客观</li>
<li>红色 感性</li>
<li>黑色 谨慎</li>
<li>黄色 乐观</li>
<li>绿色 创新</li>
<li>蓝色 推理</li>
</ul>
<p>情绪</p>
<ul>
<li>冷静</li>
<li>热情</li>
<li>幽默</li>
</ul>
<p>交流</p>
<ul>
<li>聆听</li>
<li>合作</li>
<li>不合作</li>
<li>赞成</li>
<li>反驳</li>
<li>赞美</li>
<li>贬低</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>xp</title>
    <url>/posts/uncategorized/f63a903d/</url>
    <content><![CDATA[<p>XP, Extreme Programing, 极限编程.<br>
极限编程是一种轻量级的软件开发过程, 其关键价值是<code>反馈</code>, <code>交流</code>, <code>简单</code>和<code>勇气.</code></p>
]]></content>
  </entry>
  <entry>
    <title>http</title>
    <url>/posts/network/97780db2/</url>
    <content><![CDATA[<h1 id="cookie">1.  Cookie</h1>
<p>Cookie的重要字段如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[name][value][domain][path][expires][httponly][secure]</span><br></pre></td></tr></table></figure>
<ul>
<li>domain<br>
若不指定, 则默认为本域.<br>
可设置为父级域, 但不能设置为下一级子域或其他外域.</li>
<li>path<br>
若不指定, 则为当前目标页面的路径.<br>
例如http://www.foo.com/admin/index.php, 若不指定<code>path</code>, 则path默认为<code>/admin/</code></li>
<li>httponly<br>
设置该标识后, 客户端脚本就无法读取该Cookie.<br>
0为关闭, 1为开启, 默认为0.</li>
<li>secure<br>
设置了该标识后, 该Cookie仅在HTTPS层上安全传输, 如果是HTTP请求, 就不会带上这个Cookie了.</li>
</ul>
<h2 id="重要特性">1.1.  重要特性</h2>
<ul>
<li>请求会自动带上域上Cookie</li>
<li>一般大小为4k, 超出可以服务器会异常</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/kingov/article/details/77155671" target="_blank" rel="noopener">https://blog.csdn.net/kingov/article/details/77155671</a></li>
<li><a href="https://www.jianshu.com/p/a1ebc61ce141" target="_blank" rel="noopener">https://www.jianshu.com/p/a1ebc61ce141</a></li>
<li><a href="https://www.cnblogs.com/Jessy/p/3535612.html" target="_blank" rel="noopener">https://www.cnblogs.com/Jessy/p/3535612.html</a></li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>protocal</tag>
      </tags>
  </entry>
  <entry>
    <title>dns</title>
    <url>/posts/network/82eddc41/</url>
    <content><![CDATA[<ul>
<li>
<p>Public<br>
119.29.29.29<br>
182.254.116.116</p>
</li>
<li>
<p>纯净 无劫持   无需再忍受被强扭去看广告或粗俗网站之痛苦<br>
114.114.114.114<br>
114.114.115.115</p>
</li>
<li>
<p>拦截 钓鱼病毒木马网站  增强网银, 证券, 购物, 游戏, 隐私信息安全<br>
114.114.114.119<br>
114.114.115.119</p>
</li>
<li>
<p>学校或家长可选拦截 色情网站  保护少年儿童免受网络色情内容的毒害<br>
114.114.114.110<br>
114.114.115.110</p>
</li>
<li>
<p>阿里DNS<br>
223.5.5.5<br>
223.6.6.6</p>
</li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>npm</title>
    <url>/posts/nodejs/a1345b2b/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nvm 安装</span></span><br><span class="line"><span class="comment"># https://github.com/nvm-sh/nvm</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于 nvm 启动比较慢, 所以使用手工方式加载</span></span><br><span class="line"><span class="comment"># 先清理 .bashrc .zshrc 中的 nvm 环境信息</span></span><br><span class="line"><span class="comment"># 在环境配置中添加:</span></span><br><span class="line"><span class="function"><span class="title">snvm</span></span>()&#123;</span><br><span class="line">    <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">    [ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">    [ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装 nodejs</span></span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install [lastest-version]</span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 配置 taobao registry</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br><span class="line">npm install cnpm -g --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<a href="https://github.com/nvm-sh/nvm/blob/master/README.md" title target>NVM Guides</a>
<a href="https://cnpmjs.org/" title target>CNPM</a>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>network</title>
    <url>/posts/uncategorized/608487bc/</url>
    <content><![CDATA[<h3 id="osi-参考模型">0.0.1.  OSI 参考模型</h3>
<p>OSI(Open System Interconnect), 即开放式系统互联. 一般都叫OSI参考模型, 是ISO(国际标准化组织)组织在1985年研究的网络互连模型.</p>
<p>No|名称|作用|相关协议<br>
—|---|—<br>
7|应用层|为应用程序提供服务|HTTP, SMTP, SNMP, FTP, Telnet, SIP, SSH, NFS, RTSP, XMPP, Whois, ENRP<br>
6|表示层|数据格式转化, 数据加密|XDR, ASN.1, SMB, AFP, NCP<br>
5|会话层|建立, 管理和维护会话|ASAP, TLS, SSH, ISO 8327/CCITT X.225, RPC, NetBIOS, ASP, Winsock, BSD sockets<br>
4|传输层|建立, 管理和维护端到端的连接|TCP, UDP, RTP, SCTP, SPX, ATP, IL<br>
3|网络层|IP选址及路由选择|IP, ICMP, IGMP, IPX, BGP, OSPF, RIP, IGRP, EIGRP, ARP, RARP, X.25<br>
2|数据链路层|提供介质访问和链路管理|以太网, 令牌环, HDLC, 帧中继, ISDN, ATM, IEEE 802.11, FDDI, PPP<br>
1|物理层|物理层|线路, 无线电, 光纤, 信鸽</p>
<h3 id="faq">0.0.2.  FAQ</h3>
<h5 id="http与tcpip区别">0.0.2.0.1.  HTTP与TCP/IP区别？</h5>
<p>TPC/IP协议是传输层协议, 主要解决数据如何在网络中传输, 而HTTP是应用层协议, 主要解决如何包装数据.WEB使用HTTP协议作应用层协议, 以HTTP封装文本信息, 然后使用TCP/IP做传输层协议将它发到网络上.</p>
<h5 id="查看-dns">0.0.2.0.2.  查看 DNS</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<h3 id="resource">0.0.3.  Resource</h3>
<ul>
<li><a href="https://www.cnblogs.com/lovesong/p/5186200.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovesong/p/5186200.html</a></li>
<li><a href="https://www.cnblogs.com/qishui/p/5428938.html" target="_blank" rel="noopener">https://www.cnblogs.com/qishui/p/5428938.html</a></li>
<li><a href="http://www.cnblogs.com/qishui/p/5437301.html" target="_blank" rel="noopener">http://www.cnblogs.com/qishui/p/5437301.html</a></li>
<li><a href="http://www.cnblogs.com/qishui/p/5449783.html" target="_blank" rel="noopener">http://www.cnblogs.com/qishui/p/5449783.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>http-request</title>
    <url>/posts/uncategorized/d0f93cb9/</url>
    <content><![CDATA[<p>Retrofit</p>
<p>volley</p>
<p>okhttp</p>
<p><a href="https://www.jianshu.com/p/77d418e7b5d6" target="_blank" rel="noopener">https://www.jianshu.com/p/77d418e7b5d6</a></p>
]]></content>
  </entry>
  <entry>
    <title>netowrk-index</title>
    <url>/posts/uncategorized/2be253e2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>https</title>
    <url>/posts/network/3ef665a6/</url>
    <content><![CDATA[<h1 id="https">1.  HTTPS</h1>
<p>Secure Hypertext Transfer Protocol, 安全超文本传输协议.<br>
是使用 TLS/SSL 加密的 HTTP 协议, 是 HTTP 的安全版.</p>
<h1 id="tlsssl">2.  TLS/SSL</h1>
<p>TLS/SSL 协议, 即安全传输层协议, 是介于 TCP 和 HTTP 之间的一层安全协议, 不影响原有的 TCP 协议和 HTTP 协议.</p>
<img src="/posts/network/3ef665a6/tls-ssl%E7%9A%84%E4%BD%9C%E7%94%A8.gif" class title="TLS&#x2F;SSL的作用">
<p>TLS/SSL 协议提供服务的主要有:</p>
<ul>
<li>身份验证, 防止劫持</li>
<li>信息加密, 防止窃听</li>
<li>完整性效验, 防止篡改</li>
</ul>
<p>TLS/SSL 可分为2层:</p>
<ul>
<li>Record Protocol, 记录协议<br>
它建立在可靠的传输协议之上, 如 TCP 协议, 为高层协议提供数据封装, 压缩, 加密等基本功能的支持.<br>
主要用来定义传输的格式.</li>
<li>Handshake Protocol, 握手协议<br>
它建立在SSL记录协议之上, 用于在实际的传输开始前, 通信双方进行身份认证, 协商加密算法, 交换加密密钥等.<br>
主要用来协商出一份密钥.</li>
</ul>
<h2 id="tlsssl-工作原理">2.1.  TLS/SSL 工作原理</h2>
<p>TLS/SSL的功能实现主要依赖于三类基本算法: 散列函数 Hash, 对称加密和非对称加密, 其利用非对称加密实现身份认证和密钥协商, 对称加密算法采用协商的密钥对数据加密, 基于散列函数验证信息的完整性.</p>
<img src="/posts/network/3ef665a6/tls-ssl%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.gif" class title="TLS&#x2F;SSL工作原理">
<h3 id="非对称加密">2.1.1.  非对称加密</h3>
<p>即常见的 RSA 算法, 还包括 ECC, DH 等算法.<br>
算法特点是, 密钥成对出现, 一般称为公钥(公开)和私钥(保密), 公钥加密的信息只能私钥解开, 私钥加密的信息只能公钥解开.<br>
因此掌握公钥的不同客户端之间不能互相解密信息, 只能和掌握私钥的服务器进行加密通信, 服务器可以实现1对多的通信, 客户端也可以用来验证掌握私钥的服务器身份.<br>
非对称加密的特点是信息传输1对多, 服务器只需要维持一个私钥就能够和多个客户端进行加密通信, 但服务器发出的信息能够被所有的客户端解密, 且该算法的计算复杂, 加密速度慢.</p>
<h3 id="对称加密">2.1.2.  对称加密</h3>
<p>常见的有 AES-CBC, DES, 3DES, AES-GCM等, 相同的密钥可以用于信息的加密和解密, 掌握密钥才能获取信息, 能够防止信息窃听, 通信方式是1对1.<br>
对称加密的优势是信息传输1对1, 需要共享相同的密码, 密码的安全是保证信息安全的基础, 服务器和 N 个客户端通信, 需要维持 N 个密码记录, 且缺少修改密码的机制.</p>
<h3 id="散列函数-hash">2.1.3.  散列函数 Hash</h3>
<p>常见的有 MD5, SHA1, SHA256, 该类函数特点是函数单向不可逆, 对输入非常敏感, 输出长度固定, 针对数据的任何修改都会改变散列函数的结果, 用于防止信息篡改并验证数据的完整性.<br>
在信息传输过程中, 散列函数不能单独实现信息防篡改, 因为明文传输, 中间人可以修改信息之后重新计算信息摘要, 因此需要对传输的信息以及信息摘要进行加密.</p>
<p>结合三类算法的特点, TLS的基本工作方式是, 客户端使用非对称加密与服务器进行通信, 实现身份验证并协商对称加密使用的密钥, 然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信, 不同的节点之间采用的对称密钥不同, 从而可以保证信息只能通信双方获取.</p>
<h2 id="tlsssl-握手过程">2.2.  TLS/SSL 握手过程</h2>
<img src="/posts/network/3ef665a6/tls-ssl%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" class title="TLS&#x2F;SSL握手过程">
<h3 id="客户端发起请求">2.2.1.  客户端发起请求</h3>
<p>Client Hello<br>
客户端发起请求, 以明文传输请求信息, 包含信息有:</p>
<ul>
<li>version: 当前支持的最后TLS协议版本</li>
<li>cipher suites: 客户端支持的加密套件列表<br>
每个加密条件对应4个功能组合:
<ul>
<li>Au, 认证算法, 用于身份认证</li>
<li>Key Exchange, 密钥交换算法, 用于密钥协商</li>
<li>Enc, 对称加密算法, 用于信息加密</li>
<li>Mac, 信息摘要算法, 用于完整性效验</li>
</ul>
</li>
<li>compression methods: 支持的压缩算法列表, 用于后续的信息压缩传输</li>
<li>random_client: 用于后续的密钥生成</li>
<li>extensions: 扩展字段, 支持协议与算法的相关参数及其他辅助信息等, 如常见的SNI</li>
</ul>
<h3 id="服务器端回应">2.2.2.  服务器端回应</h3>
<h4 id="server-hello">2.2.2.1.  Server Hello</h4>
<p>服务端返回协商的结果, 包含信息有:</p>
<ul>
<li>version: 使用的协议版本</li>
<li>cipher suite: 选择的加密套件</li>
<li>compression method: 选择的压缩算法</li>
<li>random_server: 用于后续的密钥生成</li>
</ul>
<h4 id="server-certificate">2.2.2.2.  Server Certificate</h4>
<p>服务端配置对应的证书链发送给客户端, 用于身份效验与密钥交换.</p>
<h4 id="server-hello-done">2.2.2.3.  Server Hello Done</h4>
<p>服务端通知客户端 Server Hello 发送结束.</p>
<h4 id="client-certificate-request">2.2.2.4.  Client Certificate Request</h4>
<p>对于非常重要的信息, 服务端需要对客户端进行验证, 保证数据传送给了安全合法的客户端.<br>
服务端发送 client_certificate_request 标识, 请求验证客户端证书.</p>
<h3 id="客户端验证证书">2.2.3.  客户端验证证书</h3>
<p>Certificate Verify<br>
客户端验证证书合法性.<br>
如果验证通过才会进行后续通信, 否则根据错误情况不同做出提示和操作.</p>
<ul>
<li>证书链的可信性 trusted certificate path</li>
<li>证书是否被吊销 revocation</li>
<li>有效期 expiry date</li>
<li>域名 domain</li>
</ul>
<h3 id="客户端回应">2.2.4.  客户端回应</h3>
<h4 id="client-certificate">2.2.4.1.  Client Certificate</h4>
<p>如果服务端需要验证客户端证书, 即双向认证.<br>
认证方式基本相同, 客户端发送 client_certificate 与 certificate_verify_message.<br>
certificate_verify_message 是采用client的私钥加密以及协商的通信信息得到数据, 服务端采用对应的公钥解密并验证.</p>
<h4 id="client-key-exchange">2.2.4.2.  Client Key Exchange</h4>
<p>客户端计算产生随机数 pre_master_secret, 并用证书公钥加密, 发送给服务端.<br>
此时客户端已经获得计算协商密钥的全部信息:两个明文随机数 random_client 与 random_server, 以及自己计算产生的 pre_master_secret<br>
计算得到协商密钥: session_secret = encrypt(random_client, random_server, pre_master_secret)</p>
<h4 id="change-cipher-spec">2.2.4.3.  Change Cipher Spec</h4>
<p>发送 change_cipher_spec 标识, 用于通知服务端后续的通信采用协商的通信密钥和加密算法进行.</p>
<h4 id="encrypt-handshake-message">2.2.4.4.  Encrypt Handshake Message</h4>
<p>客户端结合之前所有通信参数的 hash 值与其他相关信息生成一段数据, 采用协商密钥 session_secret 与算法进行加密, 然后发送给服务器用于数据与握手验证.</p>
<h3 id="服务端最后回应">2.2.5.  服务端最后回应</h3>
<p>服务端用证书私钥解密加密的 pre_master_secret, 并计算出 session_secret.</p>
<p>服务端计算之前所有接收信息的hash值, 然后解密客户端发送的 encrypt_handshake_message, 验证数据和密钥正确性.</p>
<h4 id="change-cipher-spec-2">2.2.5.1.  Change Cipher Spec</h4>
<p>服务端验证通过后, 统一发送 change_cipher_spec, 通知客户端后续的通信采用协商的通信密钥和加密算法进行.</p>
<h4 id="encrypt-handshake-message-2">2.2.5.2.  Encrypt Handshake Message</h4>
<p>服务端也结合之前所有通信参数的 hash 值与其他相关信息生成一段数据, 采用协商密钥 session_secret 与算法进行加密, 然后发送给客户端.</p>
<h3 id="握手结束">2.2.6.  握手结束</h3>
<p>客户端同样计算并验证 encrypt_handshake_message, 验证通过则握手完成.</p>
<h3 id="加密通信">2.2.7.  加密通信</h3>
<p>开始使用协商密钥和算法进行通信.</p>
<h2 id="密钥">2.3.  密钥</h2>
<h3 id="密钥计算">2.3.1.  密钥计算</h3>
<p>密钥计算流程如下:</p>

<ul>
<li>客户端使用 RSA 或 DH 等加密算法生成 pre_master_secret</li>
<li>pre_master_secret 结合 random_client 和 random_server 两个随机数通过 PseudeRandomFunction (PRF)计算得到 master_secret</li>
<li>master_secret 结合 random_client 和 random_server 两个随机数通过迭代计算得到 Key-Material</li>
</ul>
<h3 id="密钥使用">2.3.2.  密钥使用</h3>
<p>密钥经过12轮迭代计算会获得12个hash值, 分组成为6个元素, 列表如下:</p>
<ul>
<li>Client Mac Key</li>
<li>Server Mac Key</li>
<li>Client Encryption Key</li>
<li>Server Encryption Key</li>
<li>Client IV</li>
<li>Server IV</li>
</ul>
<p>其中, Mac Key 用于完整性效验, Encryption Key 用于对称加密, IV 作为加密算法的初始化向量.<br>
用法如下:</p>
<ul>
<li>Mac Key, Encryption Key和IV是一组加密元素, 分别被客户端和服务端使用, 但是则两组元素都被两边同时获取.</li>
<li>客户端使用 client 组元素加密数据, 服务端使用 client 组元素解密; 服务端使用 server 组元素加密数据, 客户使用 server 组元素解密.</li>
<li>双向通信的不同方向使用的密钥不同, 破解通信至少需要破解2次.</li>
<li>MAC 值的计算包括2个 Hash 值: Mac Key 和 Hash(编号, 包类型, 长度, 压缩数据)</li>
</ul>
<h2 id="其他要点">2.4.  其他要点</h2>
<ul>
<li>
<p>pre_master_secret 前2个字节是TLS版本号<br>
这是一个比较重要的用来核对握手数据的版本号.<br>
因为在 Client Hello 阶段, 客户端会发送一份加密套件列表和定钱支持的 TLS/SSL 的版本号给服务端, 而且是使用明文传送的, 如果握手的数据包被破解后, 攻击者恒可能串改数据包, 选择一个安全性较低的加密太监和版本给服务端, 从而对数据进行破坏.<br>
所以, 服务端需要对密文中解密出来的 pre_master_secret 版本号跟之前 Client Hello 阶段的版本号进行比对, 如果版本号变低, 则立即停止发送任何消息.</p>
</li>
<li>
<p>不管客户端还是服务端, 都需要随机数, 这样生成的密钥才不会每次都一样.<br>
由于 TLS/SSL 协议中证书是静态的, 因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性.</p>
<p>对于 RSA 密钥交换算法来说, pre_master_secret 本身就是一个随机数, 再加上 hello 消息中的随机, 三个随机数通过一个密钥导出器最终导出一个对称密钥.</p>
<p>pre_master_secret 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数, 如果随机数不随机, 那么 pre_master_secret 就有可能被猜出来, 那么仅适用 pre_master_secret 作为密钥就不合适了, 因此必须引入新的随机因素, 那么客户端和服务器加上 pre_master_secret 三个随机数一同生成的密钥就不容易被猜出了, 一个伪随机可能完全不随机, 可是三个伪随机就十分接近随机了, 每增加一个自由度, 随机性增加的可不是一.</p>
</li>
<li>
<p>对应用层数据进行分片成合适的block<br>
为分片数据编号, 防止重放攻击</p>
</li>
</ul>
<h1 id="https-性能与优化">3.  HTTPS 性能与优化</h1>
<p>HTTPS的优点在于:</p>
<ul>
<li>身份认证, 信息加密和完整性效验, 提高了通信安全性</li>
<li>未对 TCP 和 HTTP 协议做任何改动</li>
</ul>
<p>HTTPS付出代价便是增加了性能损耗, 主要体现在:</p>
<ul>
<li>
<p>增加延时<br>
一次完整的握手至少需要两端来回2次通信, 即至少增加延时 2 * RTT; 即使利用会话缓存从而复用连接, 延时也至少增加 1 * RTT.</p>
</li>
<li>
<p>CPU资源消耗更多<br>
非对称算法 RSA 解密能力是当前困扰HTTPS接入的主要难题.</p>
</li>
</ul>
<h2 id="https-接入优化">3.1.  HTTPS 接入优化</h2>
<ul>
<li>
<p>CDN接入<br>
HTTPS 增加的延时主要是传输延时 RTT, RTT 的特点是节点越近延时越小, CDN 天然离用户最近, 因此选择使用 CDN 作为 HTTPS 接入的入口, 将能够极大减少接入延时.<br>
CDN 节点通过和业务服务器维持长连接, 会话复用和链路质量优化等可控方法, 极大减少 HTTPS 带来的延时.</p>
</li>
<li>
<p>会话缓存<br>
虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时, 但是至少延时已经减少为原来的一半, 明显的延时优化;<br>
同时, 基于会话缓存建立的 HTTPS 连接不需要服务器使用 RSA 私钥解密获取 pre_master_secret 信息, 可以省去 CPU 的消耗.<br>
如果业务访问连接集中, 缓存命中率高, 则HTTPS的接入能力讲明显提升.<br>
当前 TRP 平台的缓存命中率高峰时期大于 30%, 10k/s 的接入资源实际可以承载13k/s 的接入, 收效非常可观.</p>
</li>
<li>
<p>硬件加速<br>
为接入服务器安装专用的SSL硬件加速卡, 作用类似 GPU, 释放 CPU, 能够具有更高的 HTTPS 接入能力且不影响业务程序的.<br>
测试某硬件加速卡单卡可以提供35k的解密能力, 相当于175核 CPU, 至少相当于7台24核的服务器, 考虑到接入服务器其它程序的开销, 一张硬件卡可以实现接近10台服务器的接入能力.</p>
</li>
<li>
<p>远程解密<br>
本地接入消耗过多的 CPU 资源, 浪费了网卡和硬盘等资源, 考虑将最消耗 CPU 资源的 RSA 解密计算任务转移到其它服务器, 如此则可以充分发挥服务器的接入能力, 充分利用带宽与网卡资源.<br>
远程解密服务器可以选择 CPU 负载较低的机器充当, 实现机器资源复用, 也可以是专门优化的高计算性能的服务器.<br>
当前也是 CDN 用于大规模HTTPS接入的解决方案之一.</p>
</li>
<li>
<p>SPDY/HTTP2<br>
前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能, 但是方法都基于不改变 HTTP 协议的基础上提出的优化方法, SPDY/HTTP2 利用 TLS/SSL 带来的优势, 通过修改协议的方法来提升 HTTPS 的性能, 提高下载速度等.</p>
</li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="https://www.wosign.com/faq/faq2016-0309-01.htm" target="_blank" rel="noopener">https://www.wosign.com/faq/faq2016-0309-01.htm</a></li>
<li><a href="https://segmentfault.com/a/1190000002554673" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002554673</a></li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>protocal</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp-faq</title>
    <url>/posts/uncategorized/b71f6d40/</url>
    <content><![CDATA[<p>TCP 是传输层协议, 对应 OSI 网络模型的第四层传输层, 特点如下.</p>
<p>TCP 协议是基于链接的, 也就是传输数据前需要先建立好链接, 然后再进行传输.</p>
<p>TCP 链接一旦建立, 就可以在链接上进行双向的通信.</p>
<p>TCP 的传输是基于字节流而不是报文, 将数据按字节大小进行编号, 接收端通过 ACK 来确认收到的数据编号, 通过这种机制, TCP 协议能够保证接收数据的有序性和完整性, 因此 TCP 能够提供可靠性传输.</p>
<p>TCP 还能提供流量控制能力, 通过滑动窗口来控制数据的发送速率. 滑动窗口的本质是动态缓冲区, 接收端根据自己的处理能力, 在 TCP 的 Header 中动态调整窗口大小, 通过 ACK 应答包通知给发送端, 发送端根据窗口大小调整发送的的速度.</p>
<p>仅仅有了流量控制能力还不够, TCP 协议还考虑到了网络问题可能会导致大量重传, 进而导致网络情况进一步恶化, 因此 TCP 协议还提供拥塞控制. TCP 处理拥塞控制主要用到了慢启动, 拥塞避免, 拥塞发生, 快速恢复四个算法, 感兴趣的同学可以进一步了解.</p>
<h1 id="tcp-协议问题-例如特定场景下-nagel-和-ack-延迟机制配合使用可能会出现-delay40ms-超时后才回复-ack-包的问题">1.  TCP 协议问题, 例如特定场景下 Nagel 和 ACK 延迟机制配合使用可能会出现 delay40ms 超时后才回复 ACK 包的问题.</h1>
<h1 id="3-次握手">2.  3 次握手</h1>
<h1 id="4-次挥手">3.  4 次挥手</h1>
<h1 id="syn-洪水攻击">4.  SYN 洪水攻击</h1>
<p>SYN 洪水攻击发生的原因, 就是 Server 端收到 Client 端的 SYN 请求后, 发送了 ACK 和 SYN, 但是 Client 端不进行回复, 导致 Server 端大量的链接处在 SYN_RCVD 状态, 进而影响其他正常请求的建连. 可以设置 tcp_synack_retries = 0 加快半链接的回收速度, 或者调大 tcp_max_syn_backlog 来应对少量的 SYN 洪水攻击</p>
]]></content>
  </entry>
  <entry>
    <title>Socks v5</title>
    <url>/posts/uncategorized/18a6ac6a/</url>
    <content><![CDATA[<h1 id="基于-tcp-客户端的处理过程">1.  基于 TCP 客户端的处理过程</h1>
<p>客户端和服务端建立连接后, 客户端将发送请求来协商版本和认证方法:</p>
<table>
<thead>
<tr>
<th>VER</th>
<th>NMETHODS</th>
<th>METHODS</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1 ~ 255</td>
</tr>
</tbody>
</table>
<ul>
<li><code>VER</code> 协议版本. Socks5 协议中, VER 被置为 X’05’</li>
<li><code>NMETHODS</code> METHODS 中出现的认证方法的个数. 客户端提供多种认证方法供服务端选择.</li>
<li><code>METHOD</code> 验证方法
<ul>
<li><code>X'00'</code> 无验证需求</li>
<li><code>X'01'</code> 通用安全服务应用程序接口(GSSAPI)</li>
<li><code>X'02'</code> 用户名/密码(USERNAME/PASSWORD)</li>
<li><code>X'03' ~ X'7F'</code> IANA 分配(IANA ASSIGNED)</li>
<li><code>X'80' ~ X'FE'</code> 私人方法保留(RESERVED FOR PRIVATE METHODS)</li>
</ul>
</li>
</ul>
<p>服务端选择其中一种认证方法并返回:</p>
<table>
<thead>
<tr>
<th>VER</th>
<th>METHOD</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>如果选择的认证方法值为 <code>X'FF'</code>, 则表示没有接受任何一种由客户端给出的认证方法, 客户端必须关闭连接.</p>
<p>协商过程结束后, 客户端将发送详细的请求信息.<br>
如果协商的方法中有以完整性检查和/或安全性为目的的封装, 这些请求必须按照该方法所定义的方式进行封装.</p>
<table>
<thead>
<tr>
<th>VER</th>
<th>CMD</th>
<th>RSV</th>
<th>ATYP</th>
<th>DST.ADDR</th>
<th>DST.PROT</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>X’00’</td>
<td>1</td>
<td>Variable</td>
<td>2</td>
</tr>
</tbody>
</table>
<ul>
<li><code>VER</code> 协议版本: X’05’</li>
<li><code>CMD</code>
<ul>
<li><code>CONNECT</code> X’01’</li>
<li><code>BIND</code> X’02’</li>
<li><code>UDP</code> ASSOCIATE X’03’</li>
</ul>
</li>
<li><code>RSV</code> 保留 (RESERVED)</li>
<li><code>ATYP</code> DST.ADDR 的地址类型 address type of following address
<ul>
<li><code>IP V4 address</code>: X’01’, 4个字节</li>
<li><code>DOMAINNAME</code>: X’03’, 字段的第一个字节是以字节为单位的该域名的长度, 之后是域名, 中间没有结束符 NUL (X’00’)</li>
<li><code>IP V6 address</code>: X’04’, 16字节</li>
</ul>
</li>
<li><code>DST.ADDR</code> 目标地址 desired destination address</li>
<li><code>DST.PORT</code> 目标端口 desired destination port in network octet order</li>
</ul>
<p>服务端将根据请求, 以如下格式返回:</p>
<table>
<thead>
<tr>
<th>VER</th>
<th>REP</th>
<th>RSV</th>
<th>ATYP</th>
<th>BND.ADDR</th>
<th>BND.PORT</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>X’00’</td>
<td>1</td>
<td>Variable</td>
<td>2</td>
</tr>
</tbody>
</table>
<ul>
<li><code>VER</code> 协议版本: X’05’</li>
<li><code>REP</code> Reply field:
<ul>
<li><code>X'00'</code> succeeded</li>
<li><code>X'01'</code> general SOCKS server failure</li>
<li><code>X'02'</code> connection not allowed by ruleset</li>
<li><code>X'03'</code> Network unreachable</li>
<li><code>X'04'</code> Host unreachable</li>
<li><code>X'05'</code> Connection refused</li>
<li><code>X'06'</code> TTL expired</li>
<li><code>X'07'</code> Command not supported</li>
<li><code>X'08'</code> Address type not supported</li>
<li><code>X'09' ~ X'FF'</code> unassigned</li>
</ul>
</li>
<li><code>RSV</code> RESERVED 必须被置为 X’00’</li>
<li><code>ATYP</code> address type of following address
<ul>
<li><code>IP V4 address</code>: <code>X'01'</code></li>
<li><code>DOMAINNAME</code>: <code>X'03'</code></li>
<li><code>IP V6 address</code>: <code>X'04'</code></li>
</ul>
</li>
<li><code>BND.ADDR</code> server bound address</li>
<li><code>BND.PORT</code> server bound port in network octet order</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>
<a href="https://tools.ietf.org/pdf/rfc1928.txt" title target>SOCKS Protocol Version 5</a>
</li>
<li>
<a href="https://tools.ietf.org/pdf/rfc1929.txt" title target>Username&#x2F;Password Authentication for SOCKS V5</a>
</li>
<li>
<a href="https://tools.ietf.org/pdf/rfc1961.txt" title target>GSS-API Authentication Method for SOCKS Version 5</a>
</li>
<li>
<a href="https://tools.ietf.org/pdf/rfc3089.txt" title target>A SOCKS-based IPv6&#x2F;IPv4 Gateway Mechanism</a>
</li>
<li><a href="https://www.cnblogs.com/happyhotty/articles/2181522.html" target="_blank" rel="noopener">https://www.cnblogs.com/happyhotty/articles/2181522.html</a></li>
<li><a href="https://blog.csdn.net/cszhouwei/article/details/74362427" target="_blank" rel="noopener">https://blog.csdn.net/cszhouwei/article/details/74362427</a></li>
<li><a href="href=http://www.cppblog.com/noflybird/archive/2009/12/26/104149.html%3Ehttp://www.cppblog.com/noflybird/archive/2009/12/26/104149.html%3C/a%3E" title="}&lt;&#x2F;li&gt; &lt;li&gt;{% link SOCKS5代理原理探索 &lt;a href&#x3D;https:&#x2F;&#x2F;blog.csdn.net&#x2F;cszhouwei&#x2F;article&#x2F;details&#x2F;74362427&gt;https:&#x2F;&#x2F;blog.csdn.net&#x2F;cszhouwei&#x2F;article&#x2F;details&#x2F;74362427&lt;&#x2F;a&gt; }&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;https:&#x2F;&#x2F;blog.csdn.net&#x2F;sjailjq&#x2F;article&#x2F;details&#x2F;81637196&gt;https:&#x2F;&#x2F;blog.csdn.net&#x2F;sjailjq&#x2F;article&#x2F;details&#x2F;81637196&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;" target>SOCKS5协议的原理和应用 &lt;a</a></li></ul>]]></content>
  </entry>
  <entry>
    <title>url</title>
    <url>/posts/network/f47645ae/</url>
    <content><![CDATA[<h1 id="url">1.  URL</h1>
<p>一般格式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scheme&gt;:&#x2F;&#x2F;&lt;netloc&gt;&#x2F;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</span><br></pre></td></tr></table></figure>
<p>比如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.foo.com&#x2F;path&#x2F;f.php?id&#x3D;1&amp;type&#x3D;cool#new</span><br></pre></td></tr></table></figure>
<p>对应的关系是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scheme&gt; - http</span><br><span class="line">&lt;netloc&gt; - www.foo.com</span><br><span class="line">&lt;path&gt; - &#x2F;path&#x2F;f.php</span><br><span class="line">&lt;query&gt; - id&#x3D;1&amp;type&#x3D;cool</span><br><span class="line">&lt;fragment&gt; - new</span><br></pre></td></tr></table></figure>
<p>URL的编码方式有3类:escape, encodeURI, encodeURIComponent, 对应的解码函数是:unescape, decodeURI, decodeURIComponent.<br>
这3中编码函数是有差异的, 甚至在自动URL编码中也存在差异.</p>
<h1 id="同源策略">2.  同源策略</h1>
<p>同源策略是众多安全策略中的一个, 是web层面上的策略.<br>
同源策略规定:<code>不同域</code>的<code>客户端脚本</code>在没有明确<code>授权</code>的情况下, 不能<code>读写</code>对方的<code>资源</code>.</p>
<h2 id="同域">2.1.  同域</h2>
<p>同域是指URL的协议, 域名, 端口都相同.<br>
例如, 以下URL是否与http://www.foo.com同域:</p>
<table>
<thead>
<tr>
<th>url</th>
<th>是否同域</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.foo.com" target="_blank" rel="noopener">https://www.foo.com</a></td>
<td>No</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://abc.foo.com" target="_blank" rel="noopener">http://abc.foo.com</a></td>
<td>No</td>
<td>子域名不同</td>
</tr>
<tr>
<td><a href="http://foo.com" target="_blank" rel="noopener">http://foo.com</a></td>
<td>No</td>
<td>域名不同</td>
</tr>
<tr>
<td><a href="http://www.foo.com:8080" target="_blank" rel="noopener">http://www.foo.com:8080</a></td>
<td>No</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://www.foo.com/a/" target="_blank" rel="noopener">http://www.foo.com/a/</a></td>
<td>Yes</td>
<td>协议, 域名, 端口都相同, 只是多了一个目录</td>
</tr>
</tbody>
</table>
<h2 id="客户端脚本">2.2.  客户端脚本</h2>
<p>主要是指:JavaScript, ActionScript.</p>
<h2 id="授权">2.3.  授权</h2>
<p>例如HTML5新标准中提到关于AJAX跨域访问的情况, 默认情况下是不允许跨域访问的, 只有目标站点(假如是http://www.foo.com)明确返回HTTP响应头:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;www.evil.com</span><br></pre></td></tr></table></figure>
<p>那么www.evil.com站点上的客户端脚本就有权通过AJAX技术对www.foo.com上的数据进行读写操作.</p>
<h2 id="读写权限">2.4.  读写权限</h2>
<p>Web上的资源有很多.<br>
有的只有读权限, 比如HTTP请求头里的Referer(表示请求来源).<br>
有的具备读写权限, 比如document.cookie.<br>
这样区分是出于安全上的考虑.</p>
<h2 id="资源">2.5.  资源</h2>
<p>资源是一个很广泛的概念, 只要是数据, 都可以认为是资源.<br>
同源策略里的资源是指:Web客户端的资源.<br>
一般来说, 包括:HTTP消息头, 整个DOM树, 浏览器存储(Cookie, FlashCookie, localStorage等)</p>
<h1 id="resource">3.  Resource</h1>
<ul>
<li>Web前端–黑客技术揭秘</li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>同源策略</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp</title>
    <url>/posts/protocal/b26c50c6/</url>
    <content><![CDATA[<h1 id="窗口">1.  窗口</h1>
<p>TCP使用窗口机制进行流量控制</p>
<h2 id="什么是窗口">1.1.  什么是窗口?</h2>
<p>连接建立时, 各端分配一块缓冲区用来存储接收的数据, 并将缓冲区的尺寸发送给另一端<br>
接收方发送的确认信息中包含了自己剩余的缓冲区尺寸<br>
剩余缓冲区空间的数量叫做窗口</p>
<h1 id="tcp的流控过程">2.  TCP的流控过程</h1>
<p>![](tcp/window, png)</p>
<h1 id="tcp连接">3.  TCP连接</h1>
<p>建立TCP连接需要三次握手, 而断开连接则需要四次挥手.</p>
<p>位码即tcp标志位, 有6种标示:</p>
<ul>
<li>SYN synchronous, 建立联机</li>
<li>ACK acknowledgement, 确认</li>
<li>PSH push, 传送</li>
<li>FIN finish, 结束</li>
<li>RST reset, 重置</li>
<li>URG urgent, 紧急</li>
</ul>
<p>其他参数:</p>
<ul>
<li>Sequence number 顺序号码)</li>
<li>Acknowledge number 确认号码)</li>
</ul>
<p>整个过程如下:</p>
<p><img src="tcp/tcp.gif" alt></p>
<h2 id="3次握手">3.1.  3次握手</h2>
<p>TCP 在传输上是双工传输, 不区分 Client 端与 Server 端, 为了便于理解, 我们把主动发起建连请求的一端称作 Client 端, 把被动建立链接的一端称作 Server 端.</p>
<p>首先建立链接前需要 Server 端先监听端口, 因此 Server 端建立链接前的初始状态就是 LISTEN 状态</p>
<ol>
<li>Client 发送 SYN 请求, 进入<code>SYN_SENT</code>状态.</li>
<li>Server 收到后, 发送 SYN+ACK 应答, 进入<code>SYN_RECV</code> 状态.</li>
<li>Client收到后, 发送ACK应答, 双方进入<code>ESTABLISHED</code>状态.双方成功建立连接, 开始传输数据.</li>
</ol>
<p>三次握手是为了建立双向的链接</p>
<h2 id="4次挥手">3.2.  4次挥手</h2>
<ol>
<li>Client发送FIN请求, 进入<code>FIN_WAIT_1</code>状态.</li>
<li>Server收到后, 发送ACK应答, 进入<code>CLOSE_WAIT</code>状态;Client收到后, 进入<code>FIN_WAIT_2</code>状态.</li>
<li>Server在完成数据传输后, 发送FIN请求, 进入<code>LAST_ACK</code>状态.</li>
<li>Client收到后, 发送ACK应答, 进入<code>TIME_WAIT</code>状态, 等待一段时间后关闭连接;服务端收到后, 进入<code>CLOSED</code>状态, 关闭连接.请求结束.</li>
</ol>
<p>客户端TCP状态变化:</p>
<p>SYN_SEND -&gt; ESTABLISHED -&gt; FIN_WAIT_1 -&gt; FIN_WAIT_2 -&gt; TIME_WAIT -&gt; CLOSED</p>
<p>服务端TCP状态变化:</p>
<p>LISTEN -&gt; SYN_RECV -&gt; ESTABLISHED -&gt; CLOSE_WAIT -&gt; LAST_ACK -&gt; CLOSED</p>
<p>各个状态的意义如下:<br>
LISTEN - 侦听来自远方TCP端口的连接请求<br>
SYN-SENT -在发送连接请求后等待匹配的连接请求<br>
SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认<br>
ESTABLISHED- 代表一个打开的连接, 数据可以传送给用户<br>
FIN-WAIT-1 - 等待远程TCP的连接中断请求, 或先前的连接中断请求的确认<br>
FIN-WAIT-2 - 从远程TCP等待连接中断请求<br>
CLOSE-WAIT - 等待从本地用户发来的连接中断请求<br>
CLOSING -等待远程TCP对连接中断的确认<br>
LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认<br>
TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>
CLOSED - 没有任何连接状态</p>
<h2 id="为什么建立连接是3次握手-而关闭连接却是4次挥手">3.3.  为什么建立连接是3次握手, 而关闭连接却是4次挥手?</h2>
<p>建立连接时, 服务器端在收到SYN请求后, 会把SYN+ACK放在一个报文里发给客户端.<br>
而关闭连接时, FIN表示发送方已经完成数据传输, 但仍能接收数据;接收方在传输完所有数据后, 需要再次发起一个FIN表示同意关闭连接.<br>
因此, FIN和ACK一般分开发送.</p>
<h2 id="为什么time_wait状态需要经过2msl最大报文段生存时间才能返回到close状态">3.4.  为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态?</h2>
<p>考虑到网络的不稳定性.假设最后一个ACK对方没有收到, 那么对方在超时后将重发FIN, 主动关闭端接收到重发的FIN后可以再次发送ACK应答.</p>
<h1 id="syn攻击">4.  SYN攻击</h1>
<p>在三次握手过程中, Server发送SYN-ACK之后, 收到Client的ACK之前的TCP连接称为半连接(half-open connect), 此时Server处于SYN_RCVD状态, 当收到ACK后, Server转入ESTABLISHED状态.SYN攻击就是Client在短时间内伪造大量不存在的IP地址, 并向Server不断地发送SYN包, Server回复确认包, 并等待Client的确认, 由于源地址是不存在的, 因此, Server需要不断重发直至超时, 这些伪造的SYN包将产时间占用未连接队列, 导致正常的SYN请求因为队列满而被丢弃, 从而引起网络堵塞甚至系统瘫痪.SYN攻击时一种典型的DDOS攻击, 检测SYN攻击的方式非常简单, 即当Server上有大量半连接状态且源IP地址是随机的, 则可以断定遭到SYN攻击了, 使用如下命令可以让之现行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -nap | grep SYN_RECV</span><br></pre></td></tr></table></figure>
<h1 id="如何解决-tcp-粘包问题">5.  如何解决 TCP 粘包问题</h1>
<ol>
<li>使用定长的packet</li>
<li>使用特定的分隔符</li>
<li>在消息头声明消息长度</li>
</ol>
<h1 id="resource">6.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/gvinaxu/article/details/51793861" target="_blank" rel="noopener">https://blog.csdn.net/gvinaxu/article/details/51793861</a></li>
<li><a href="https://blog.csdn.net/kingov/article/details/77155671" target="_blank" rel="noopener">https://blog.csdn.net/kingov/article/details/77155671</a></li>
<li><a href="https://www.jianshu.com/p/a1ebc61ce141" target="_blank" rel="noopener">https://www.jianshu.com/p/a1ebc61ce141</a></li>
<li><a href="https://www.cnblogs.com/Jessy/p/3535612.html" target="_blank" rel="noopener">https://www.cnblogs.com/Jessy/p/3535612.html</a></li>
</ul>
]]></content>
      <categories>
        <category>protocal</category>
      </categories>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/posts/network/9f59301e/</url>
    <content><![CDATA[<p>CORS, Cross-Origin Resources Sharing, 跨域资源共享.<br>
允许浏览器向跨域服务器请求资源, 从而让AJAX克服同源策略.<br>
CORS需要浏览器和服务器同时支持.<br>
随着W3C标准的推动, 目前所有浏览器都支持CORS.</p>
<p>CORS请求与同源的AJAX请求代码没有差别.<br>
但当浏览器发现AJAX请求跨域资源时, 会自动添加一些附加的头信息, 有时还会多出一次附加的请求.<br>
整个过程有浏览器自动完成, 不需要用户参与.</p>
<h1 id="2种请求模式">1.  2种请求模式</h1>
<h2 id="简单模式">1.1.  简单模式</h2>
<p>简单模式, 浏览器直接向服务器发起简单类型跨域请求, 浏览器与服务器之间请求只进行一次.</p>
<p>需要满足以下2个条件:</p>
<ol>
<li>使用下列方法之一:</li>
</ol>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
<ol start="2">
<li>HTTP的头信息不超过以下几种:</li>
</ol>
<ul>
<li>Accept</li>
<li>Accept-Languagebkk</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type, 该字段值必须是application/x-www-form-urlencoded, multipart/form-data, 或text/plain.</li>
</ul>
<p>不满足简单模式的条件, 则需要使用预检模式.</p>
<h3 id="简单模式流程">1.1.1.  简单模式流程</h3>
<p>浏览器发现AJAX请求为跨域请求, 且是简单模式, 就会自动在头信息中添加<code>Origin</code>字段.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;cors HTTP&#x2F;1.1</span><br><span class="line">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure>
<p><code>Origin</code>字段说明了本次请求来自哪个域(协议, 域名及端口).<br>
服务器根据该字段, 决定是否同一这是请求.</p>
<p>如果<code>Origin</code>指定的域不在许可返回内, 服务器就会返回一个正常的HTTP响应, 且响应头中不包含<code>Access-Control-Allow-Origin</code>字段.<br>
浏览器发现没有<code>Access-Control-Allow-Origin</code>字段, 就知道出错了.<br>
跨域请求失败无法通过状态码来识别, 因为状态码有可能是200.</p>
<p>如果<code>Origin</code>指定的域在许可返回内, 那服务器返回的响应, 会多出几个头信息字段.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure>
<h3 id="access-control-allow-origin">1.1.2.  Access-Control-Allow-Origin</h3>
<p>该字段在响应头中必定存在, 标识哪些域允许跨域.<br>
可以是域列表;也可以是<code>*</code>, 表示允许任意域.</p>
<h3 id="access-control-allow-credentials">1.1.3.  Access-Control-Allow-Credentials</h3>
<p>CORS请求默认不发送Cookie.<br>
如果服务器不需要Cookie, 则删除该自动即可.<br>
<code>Access-Control-Allow-Credentials</code>若为true, 则<code>Access-Control-Allow-Origin</code>不能为<code>*</code>, 这也是出于安全考虑.</p>
<p>若需要发送Cookie, 则需要:</p>
<ol>
<li>客户端设置AJAX请求打开<code>withCredentials</code>属性:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr &#x3D; new XMLHttpRequest();bkk</span><br><span class="line">xhr.withCredentials &#x3D; true;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>服务器明确同意接收Cookie</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>
<h3 id="access-control-expose-headers">1.1.4.  Access-Control-Expose-Headers</h3>
<p>XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段:Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma.<br>
如果需要获取其他字段, 就必须在<code>Access-Control-Expose-Headers</code>中指定.</p>
<h2 id="预检模式-preflight">1.2.  预检模式 preflight</h2>
<p>预检模式, 会在正式请求之前, 先发起一次预检请求.<br>
先询问服务器, 当前域是否在许可范围内, 允许哪些请求方法以及需要哪些头信息字段.<br>
只有得到服务器肯定答复后, 才会发起正式的请求, 否则报错.</p>
<h3 id="预检请求">1.2.1.  预检请求</h3>
<p>当浏览器发现, 这是一个非简单模式的请求, 就会自动发起一个<code>预检请求</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS &#x2F;cors HTTP&#x2F;1.1</span><br><span class="line">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure>
<p><code>预检请求</code>使用<code>OPTIONS</code>方法, 表示用来询问的.<br>
同样也有<code>Origin</code>关键字段.</p>
<h3 id="access-control-request-method">1.2.2.  Access-Control-Request-Method</h3>
<p>该字段用来列出CORS请求会用到哪些HTTP方法, 如上面的<code>PUT</code>.</p>
<h3 id="access-control-request-headers">1.2.3.  Access-Control-Request-Headers</h3>
<p>该字段值是一个以逗号分隔的字符串, 用来指定浏览器CORS请求会额外发送的头信息字段, 如上面的<code>X-Custom-Header</code>.</p>
<h3 id="预检请求响应">1.2.4.  预检请求响应</h3>
<p>服务器收到<code>预检请求</code>, 检查<code>Origin</code>, <code>Access-Control-Request-Method</code>, <code>Access-Control-Request-Headers</code>.</p>
<p>如果服务器否定了<code>预检请求</code>, 会返回一个正常的HTTP响应, 但其中不包括<code>Access-Control-*</code>.<br>
浏览器会认定为不同意<code>预检请求</code>, 触发错误.<br>
控制台会打印如下报错信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http:&#x2F;&#x2F;api.alice.com.</span><br><span class="line">Origin http:&#x2F;&#x2F;api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>
<p>如果确认允许跨域, 给出回应.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache&#x2F;2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;plain</span><br></pre></td></tr></table></figure>
<p>确认通过预检请求之后, 才会发起正常CORS请求, 流程与简单模式一样.</p>
<h3 id="access-control-allow-methods">1.2.5.  Access-Control-Allow-Methods</h3>
<p>该字段必须, 为了避免多次预检, 返回的是服务器支持的所有跨域请求方法.</p>
<h3 id="access-control-allow-headers">1.2.6.  Access-Control-Allow-Headers</h3>
<p>如果浏览器请求包括<code>Access-Control-Allow-Headers</code>, 则响应中也必须有该字段.<br>
同样包含了所有服务器支持的头信息字段, 防止多次预检.</p>
<h3 id="access-control-max-age">1.2.7.  Access-Control-Max-Age</h3>
<p>可选字段, 表示预检请求有效期, 单位为秒．<br>
如上面的1728000, 则表示20天内不用发起另一条预检．</p>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>
<li><a href="https://www.w3.org/TR/cors/" target="_blank" rel="noopener">https://www.w3.org/TR/cors/</a></li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
  </entry>
  <entry>
    <title>暴力攻击</title>
    <url>/posts/security/b3cd10ec/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>cipher</title>
    <url>/posts/security/20fa7c9d/</url>
    <content><![CDATA[<p>加密算法可分:  可逆算法和不可逆算法, 其中可逆算法又可分: 对称加密和非对称加密.</p>
<p>对称加密<br>
指加密和解密使用相同密钥的加密算法.对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性.假设两个用户需要使用对称加密方法加密然后交换数据, 则用户最少需要2个密钥并交换使用, 如果企业内用户有n个, 则整个企业共需要n×(n-1) 个密钥, 密钥的生成和分发将成为企业信息部门的恶梦.对称加密算法的安全性取决于加密密钥的保存情况, 但要求企业中每一个持有密钥的人都保守秘密是不可能的, 他们通常会有意无意的把密钥泄漏出去——如果一个用户使用的密钥被入侵者所获得, 入侵者便可以读取该用户密钥加密的所有文档, 如果整个企业共用一个加密密钥, 那整个企业文档的保密性便无从谈起.<br>
常见的对称加密算法: DES, 3DES, DESX, Blowfish, IDEA, RC4, RC5, RC6和AES</p>
<p>非对称加密<br>
指加密和解密使用不同密钥的加密算法, 也称为公私钥加密.假设两个用户要加密交换数据, 双方交换公钥, 使用时一方用对方的公钥加密, 另一方即可用自己的私钥解密.如果企业中有n个用户, 企业需要生成n对密钥, 并分发n个公钥.由于公钥是可以公开的, 用户只要保管好自己的私钥即可, 因此加密密钥的分发将变得十分简单.同时, 由于每个用户的私钥是唯一的, 其他用户除了可以可以通过信息发送者的公钥来验证信息的来源是否真实, 还可以确保发送者无法否认曾发送过该信息.非对称加密的缺点是加解密速度要远远慢于对称加密, 在某些极端情况下, 甚至能比非对称加密慢上1000倍.<br>
常见的非对称加密算法: RSA, ECC(移动设备用), Diffie-Hellman, El Gamal, DSA(数字签名用)</p>
<p>Hash算法<br>
Hash算法特别的地方在于它是一种单向算法, 用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值, 却不能通过这个Hash值重新获得目标信息.因此Hash算法常用在不可还原的密码存储, 信息完整性校验等.<br>
常见的Hash算法: MD2, MD4, MD5, HAVAL, SHA, SHA-1, HMAC, HMAC-MD5, HMAC-SHA1</p>
<pre><code>加密算法的效能通常可以按照算法本身的复杂程度, 密钥长度(密钥越长越安全), 加解密速度等来衡量.上述的算法中, 除了DES密钥长度不够, MD2速度较慢已逐渐被淘汰外, 其他算法仍在目前的加密系统产品中使用.
</code></pre>
<p>加密算法的选择<br>
前面的章节已经介绍了对称解密算法和非对称加密算法, 有很多人疑惑: 那我们在实际使用的过程中究竟该使用哪一种比较好呢？<br>
我们应该根据自己的使用特点来确定, 由于非对称加密算法的运行速度比对称加密算法的速度慢很多, 当我们需要加密大量的数据时, 建议采用对称加密算法, 提高加解密速度.<br>
对称加密算法不能实现签名, 因此签名只能非对称算法.<br>
由于对称加密算法的密钥管理是一个复杂的过程, 密钥的管理直接决定着他的安全性, 因此当数据量很小时, 我们可以考虑采用非对称加密算法.<br>
在实际的操作过程中, 我们通常采用的方式是: 采用非对称加密算法管理对称算法的密钥, 然后用对称加密算法加密数据, 这样我们就集成了两类加密算法的优点, 既实现了加密速度快的优点, 又实现了安全方便管理密钥的优点.<br>
如果在选定了加密算法后, 那采用多少位的密钥呢？一般来说, 密钥越长, 运行的速度就越慢, 应该根据的我们实际需要的安全级别来选择, 一般来说, RSA建议采用1024位的数字, ECC建议采用160位, AES采用128为即可.</p>
<p>算法选择(从性能和安全性综合)<br>
对称加密: AES(128位),<br>
非对称加密: ECC(160位)或RSA(1024),<br>
消息摘要: MD5<br>
数字签名:DSA</p>
<h1 id="常见加密算法">1.  常见加密算法</h1>
<p>// todo<br>
crc16 crc32</p>
<h3 id="resource">1.0.1.  Resource</h3>
<ul>
<li>常见加密算法的分类与比较<br>
<a href="http://blog.csdn.net/dragon_ton/article/details/46651489" target="_blank" rel="noopener">http://blog.csdn.net/dragon_ton/article/details/46651489</a></li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>CSRF</title>
    <url>/posts/security/e7b88ee1/</url>
    <content><![CDATA[<p>CSRF, Cross-Site Request Forgerr, 跨站请求伪造.<br>
一般我们认为:如果请求的发出不是用户的意愿, 那么这个请求就是伪造的.</p>
<h1 id="攻击原理">1.  攻击原理</h1>
<ol>
<li>用户访问正常网站A, 并获得授权</li>
<li>用户未退出网站A, 并且访问了恶意网站B</li>
<li>浏览器自动触发恶意网站B中的恶意请求–跨站访问网站A</li>
<li>网站A收到请求, 认为用户以获得授权, 请求合法并执行.</li>
</ol>
<h1 id="攻击类型">2.  攻击类型</h1>
<ul>
<li>HTML CSRF<br>
使用HTML元素发起攻击.<br>
是最普遍的CSRF攻击方式.</li>
<li>JSON HiJacking</li>
<li>Flash CSRF</li>
</ul>
<h1 id="危害">3.  危害</h1>
<ul>
<li>篡改目标网站上的用户数据</li>
<li>盗取用户隐私数据</li>
<li>作为其他攻击向量的辅助攻击手法</li>
<li>传播CSRF蠕虫</li>
<li>…</li>
</ul>
<h1 id="csrf防御">4.  CSRF防御</h1>
<ul>
<li>验证码<br>
会影响用户体验.</li>
<li>验证请求头中的referer<br>
浏览器中有防止信息追踪策略, 请求不会带上referer, 导致误判.</li>
<li>token凭证<br>
token为服务器端提供的随机秘钥, 攻击者无法伪造.<br>
服务器先给浏览器提供token, 用户提交请求后, 验证token有效性, 在处理请求;若没有token或token不正确, 则判定为CSRF攻击, 拒绝请求.</li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>拒绝服务攻击</title>
    <url>/posts/security/a5fe8968/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>中间人攻击</title>
    <url>/posts/security/5bfdbff/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>metasploit</title>
    <url>/posts/uncategorized/71f4c5ab/</url>
    <content><![CDATA[<h1 id="相关术语">1.  相关术语</h1>
<p>Metasploit Framework: 这是一个免费的, 开源的渗透测试框架, 由H.D.Moore在 2003 年发布, 后来被Rapid7收购. 当前稳定版本是使用Ruby 语言编写的. 它拥有世界上最大的渗透测试攻击数据库, 每年超过100万次的下载. 它也是迄今为止使用Ruby构建的最复杂的项目之一.</p>
<p>Vulnerability: 允许攻击者入侵或危害系统安全性的弱点称为漏洞, 漏洞可能存在于操作系统, 应用软件甚至网络协议中.</p>
<p>Exploit: 攻击代码或程序, 它允许攻击者利用易受攻击的系统并危害其安全性. 每个漏洞都有对应的漏洞利用程序. Metasploit有超过 1700 个漏洞利用程序.</p>
<p>Payload: 攻击载荷. 它主要用于建立攻击者和受害者机器直接的连接, Metasploit有超过 500个有效攻击载荷.</p>
<p>Module: 模块是一个完整的构件, 每个模块执行特定的任务, 并通过几个模块组成一个单元运行. 这种架构的好处是可以很容易的将自己写的利用程序和工具集成到框架中.</p>
<h1 id="版本">2.  版本</h1>
<p>Metasploit的四个版本:</p>
<p>Pro: 适用于渗透测试人员和IT安全团队</p>
<p>Express: 适用于一般IT人员</p>
<p>Community: 适用于小公司和学生</p>
<p>Framework: 适用于开发人员和安全研究人员</p>
<h1 id="msfconsole">3.  msfconsole</h1>
<p><a href="https://localhost:5443/api/v1/login" target="_blank" rel="noopener">https://localhost:5443/api/v1/login</a></p>
]]></content>
  </entry>
  <entry>
    <title>owasp</title>
    <url>/posts/security/36aa75ba/</url>
    <content><![CDATA[<p>Open Web Application Security Project</p>


	<div class="row">
    <embed src="OWASP_Top_10_2017_chinesev1.1.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p><a href="https://wenku.baidu.com/view/ac06092af18583d049645968.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ac06092af18583d049645968.html</a><br>
安全测试<br>
安全测试更有说服力, 有些问题是无法通过代码审查发现的, 尤其是应用程序架构方面的问题.安全测试通过展示一个可实现的攻击来证明应用程序是不安全的.目前安全测试主要是通过漏洞扫描工具来进行的, 比如Netsparker, ZAP等</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<p>中文文档地址<br>
<a href="http://www.owasp.org.cn/owasp-project/OWASPTop102017v1.3.pdf" target="_blank" rel="noopener">http://www.owasp.org.cn/owasp-project/OWASPTop102017v1.3.pdf</a></p>
</li>
<li>
<p><a href="http://www.owasp.org.cn/" target="_blank" rel="noopener">www.owasp.org.cn/</a></p>
</li>
<li>
<p><img src="https://www.cnblogs.com/7089fy/p/9966834.html" alt="owasp 靶机介绍"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>owasp</tag>
      </tags>
  </entry>
  <entry>
    <title>请求伪造</title>
    <url>/posts/security/17d658a6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>固定Session攻击</title>
    <url>/posts/security/9066d95a/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<p><a href="https://en.wikipedia.org/wiki/Session_fixation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Session_fixation</a></p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/posts/security/68bdea49/</url>
    <content><![CDATA[<p>XSS, Cross Site Scripting, 跨站脚本攻击.</p>
<h1 id="攻击类型">1.  攻击类型</h1>
<p>有3种攻击类型:</p>
<h2 id="反射型-xss">1.1.  反射型 XSS</h2>
<p>发出请求时, XSS代码出现在URL中, 作为输出提交到服务器端, 服务器端解析后响应, XSS代码随响应内容一期传给浏览器, 最后浏览器解析XSS代码.<br>
这个过程像一次反射, 故叫做反射型XSS.</p>
<h2 id="存储型-xss">1.2.  存储型 XSS</h2>
<p>存储型XSS和反射型的差别仅在于:提交的代码会存储在服务器端(数据库, 内存, 文件系统等), 下次请求目标页面时不用再提交XSS代码.</p>
<h2 id="dom-xss">1.3.  DOM XSS</h2>
<p>DOM XSS和反射型 XSS, 存储型 XSS的差别在于:DOM XSS的XSS代码并不需要服务器解析响应的直接参与, 触发XSS靠的就是浏览器短的DOM解析, 可以认为完全是客户端的事情.</p>
<h1 id="危害">2.  危害</h1>
<ul>
<li>挂马</li>
<li>盗取用户Cookie</li>
<li>Dos客户端浏览器</li>
<li>钓鱼攻击, 高级钓鱼技巧</li>
<li>编写正对性的XSS病毒, 删除目标文章, 恶意篡改数据, 嫁祸</li>
<li>劫持用户Web行为, 甚至进一步参透内网</li>
<li>爆发Web2.0蠕虫</li>
<li>蠕虫式DDos攻击</li>
<li>蠕虫式挂马攻击, 刷广告, 刷流量, 破坏网上数据</li>
<li>…</li>
</ul>
<h1 id="xss-防御">3.  XSS 防御</h1>
<ul>
<li>编码<br>
对用户输入的数据进行HTML Entity编码.</li>
</ul>
<table>
<thead>
<tr>
<th>字符</th>
<th>转义字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
</tr>
<tr>
<td>&quot;</td>
<td>&quot;</td>
</tr>
<tr>
<td>‘</td>
<td>'</td>
</tr>
<tr>
<td>/</td>
<td>/</td>
</tr>
<tr>
<td>空格</td>
<td> </td>
</tr>
</tbody>
</table>
<ul>
<li>过滤<br>
对用户上传的不安全的内容进行过滤, 比如:
<ul>
<li>移除用户上传的DOM属性, 如onerror, onclick等.</li>
<li>移除用户上传的style, script, img, iframe等节点.</li>
</ul>
</li>
<li>校正
<ul>
<li>避免直接对HTML Entity解码.</li>
<li>使用DOM Parse转换, 校正不配对的DOM标签.</li>
</ul>
</li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
<a href="https://www.imooc.com/learn/812" title target>慕课网--Web安全-XSS</a>
</li>
<li>
<a href="https://www.imooc.com/learn/467" title target>慕课网--与《Yii框架》不得不说的故事—安全篇</a>
</li>
<li>
<a href="http://www.freebuf.com/articles/web/9977.html" title target>防御XSS的七条原则</a>
</li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>会话劫持</title>
    <url>/posts/security/ce3d6c9b/</url>
    <content><![CDATA[<p>Session Hijacking, 会话劫持</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>web-security</title>
    <url>/posts/security/c912f7f/</url>
    <content><![CDATA[<h1 id="web安全漏洞">1.  Web安全漏洞</h1>
<p><code></code>提到的10大Web应用安全问题:</p>
<ul>
<li><strong>注入</strong></li>
<li>失效的身份认证</li>
<li>敏感信息泄露</li>
<li>XML外部实体(XXE)</li>
<li>失效的访问控制</li>
<li>安全配置错误</li>
<li><strong></strong></li>
<li>不安全的反序列化</li>
<li>含有已知漏洞的组件</li>
<li>不足的日志记录和监控</li>
</ul>
<p>其他还有:</p>
<ul>
<li>

</li>
<li>界面劫持</li>
</ul>
<h1 id="安全策略">2.  安全策略</h1>
<ul>
<li>绝对不信任任何客户端提交的数据.</li>
</ul>
<p><a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#getting-started" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#getting-started</a></p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>anyconnect</title>
    <url>/posts/uncategorized/13b2f1d4/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<p>可以安装 openconnect 替代.<br>
文档: <a href="http://www.infradead.org/openconnect/manual.html" target="_blank" rel="noopener">http://www.infradead.org/openconnect/manual.html</a></p>
<p>命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># servercert 会在第一次连接的时候提示</span></span><br><span class="line">sudo openconnect --servercert sha256:<span class="variable">$servercert</span> --authgroup VPN -u <span class="variable">$useranme</span> --no-dtls -b <span class="variable">$ip</span>:<span class="variable">$port</span></span><br></pre></td></tr></table></figure>
<h1 id="卸载">2.  卸载</h1>
<ol>
<li>通过 alfred 执行卸载程序<br>
或者执行卸载命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /opt/cisco/vpn/bin/vpn_uninstall.sh</span><br><span class="line">sudo /opt/cisco/anyconnect/bin/websecurity_uninstall.sh</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>清理环境配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkgutil --pkgs|grep com.cisco</span><br><span class="line"><span class="comment"># 会输出如: com.cisco.pkg.anyconnect.dart</span></span><br><span class="line"><span class="comment"># 执行 sudo pkgutil --forget com.cisco.pkg.anyconnect.dart</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>删除 <code>/opt/cisco</code></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>arthas</title>
    <url>/posts/tool/e60b19c0/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://alibaba.github.io/arthas/install.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line"><span class="comment">## 相关 jar 包放在 ` ~/.arthas/` 下</span></span><br><span class="line">rm -rf ~/.arthas/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment">## 当前版本 3.0.4, 服务启动需要 JDK-8 | JDK-9 , 暂不支持 JDK-10</span></span><br><span class="line"><span class="comment">## ./as.sh -h 可以查看帮助文档</span></span><br><span class="line"><span class="comment">## 启动日志在 ~/logs/arthas/arthas.log</span></span><br><span class="line"><span class="comment">## 本地连接可直接输入命令</span></span><br><span class="line">./as.sh</span><br><span class="line"><span class="comment">## 远程连接可使用</span></span><br><span class="line"><span class="comment"># PID: 目标 Java 进程 ID(请确保执行当前执行命令的用户必须有足够的权限操作对应的 Java 进程)</span></span><br><span class="line"><span class="comment"># IP: Arthas Server 侦听的地址, 默认值是 127.0.0.1. Arthas允许多个用户同时访问, 并且各自的命令不会相互干扰执行</span></span><br><span class="line"><span class="comment"># PORT: 目标服务器 Arthas Server 的端口号, 默认的端口号是 3658</span></span><br><span class="line">./as.sh &lt;PID&gt;@[IP:PORT]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊搜索类</span></span><br><span class="line">sc *<span class="variable">$class_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类中有哪些方法</span></span><br><span class="line">sm <span class="variable">$full_class_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看方法被调用的情况</span></span><br><span class="line"><span class="comment"># -x n 输出的对象结构深度</span></span><br><span class="line"><span class="comment"># -b 在方法调用之前观察</span></span><br><span class="line"><span class="comment"># -s 在方法返回之后观察</span></span><br><span class="line"><span class="comment"># -e 在方法异常之后观察</span></span><br><span class="line"><span class="comment"># -f 在方法结束之后(正常返回和异常返回)观察, 默认打开</span></span><br><span class="line">watch <span class="variable">$full_class_name</span> <span class="variable">$method_name</span> <span class="string">"&#123;params,target,returnObj&#125;"</span> -x 2 -b -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追踪调用链路, 并统计执行时间</span></span><br><span class="line"><span class="comment"># -j 过滤掉jdk的函数</span></span><br><span class="line"><span class="comment"># '#cost &gt; 10' 根据调用耗时过滤</span></span><br><span class="line">trace -j <span class="variable">$full_class_name</span> <span class="variable">$method_name</span> <span class="string">'#cost &gt; 10'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="comment">## Attach到目标进程上的arthas还会继续运行, 端口会保持开放, 下次连接时可以直接连接上.</span></span><br><span class="line"><span class="comment">## exit 效果同 quit</span></span><br><span class="line">quit </span><br><span class="line"><span class="comment">## 完全退出</span></span><br><span class="line"><span class="comment">## **如果没有完全退出, 下次登录会重新进入之前的进程, 而参数的&lt;PID&gt;不起作用**</span></span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure>
<h1 id="faq">2.  FAQ</h1>
<h2 id="error-during-processing-the-command-null">2.1.  Error during processing the command: null</h2>
<p>出现该提示, 表示 java-agent 冲突了<br>
已经存在其他使用 java-agent 配置了, 导致 arthas 无法 trace, watch.</p>
<p>如果要 arthas 正常使用, 必须禁止其他 java-agent 存在</p>
<h1 id="resource">3.  Resource</h1>
<ul>
<li>

</li>
<li><a href="https://alibaba.github.io/arthas/start-arthas.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/start-arthas.html</a></li>
<li><a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></li>
<li>
<a href="https://www.cnblogs.com/goodAndyxublog/p/11880314.html" title target>热替换过程及原理</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>atom</title>
    <url>/posts/tool/2040e57b/</url>
    <content><![CDATA[<h1 id="快捷键配置">1.  快捷键配置</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;atom-text-editor&#39;:</span><br><span class="line">    &#39;ctrl-shift-l&#39;: &#39;editor:split-selections-into-lines&#39;</span><br><span class="line"></span><br><span class="line">&#39;.platform-linux atom-text-editor&#39;:</span><br><span class="line">    &#39;ctrl-shift-g&#39;: &#39;grammar-selector:show&#39;</span><br></pre></td></tr></table></figure>
<h1 id="修改源">2.  修改源</h1>
<p>为了加快包安装速度, 添加<code>~/.apmrc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;  </span><br><span class="line">strict-ssl&#x3D;false</span><br></pre></td></tr></table></figure>
<h1 id="插件">3.  插件</h1>
<ul>
<li>advanced-open-file</li>
<li>atom-beautify</li>
<li>last-cursor-position</li>
<li>markdown-preview-enhanced</li>
<li>markdown-writer</li>
<li>minimap</li>
<li>open-in-browser</li>
<li>pdf-view</li>
<li>platformio-ide-terminal</li>
<li>sort-lines 行排序</li>
<li>tree-view-git-status</li>
<li>atom-ide-ui</li>
<li>file-icons</li>
<li>todo-show</li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
<a href="https://flight-manual.atom.io/using-atom/" title target>Atom Document</a>
</li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>Axure RP</title>
    <url>/posts/tool/f787617/</url>
    <content><![CDATA[<h1 id="激活码">1.  激活码</h1>
<p>Axure RP 9.0.0.3687 正式版（目前最新版）<br>
Licensee :Freecrackdownload.com<br>
KEY:5vYpJgQZ431X/G5kp6jpOO8Vi3TySCBnAslTcNcKkszfPH7jaM4eKM8CrALBcEC1</p>
<p>Axure RP 9.0.0.3686 正式版<br>
Licensee : yygg329405<br>
KEY: QmNyZyXeMrJU+1yw6XiXZGenOs9R3wV7S+KS7K90yTk=</p>
<p>Axure RP 9.0.0.3680可用秘钥Pro Edition<br>
Licensee : yygg329405<br>
KEY: QmNyZyXeMrJU+1yw6XiXZGenOs9R3wV7S+KS7K90yTk=</p>
<h1 id="安装">2.  安装</h1>
<p>下载: <a href="https://www.axureshop.com/a/246637.html" target="_blank" rel="noopener">https://www.axureshop.com/a/246637.html</a></p>
<h1 id="素材">3.  素材</h1>
<h2 id="字体图标">3.1.  字体图标</h2>
<ul>
<li>
<a href="https://www.iconfont.cn/" title target>Iconfont-阿里巴巴矢量图标库</a>
</li>
</ul>
<h2 id="图表">3.2.  图表</h2>
<ul>
<li>
<a href="https://chartcube.alipay.com/" title target>ChartCube 图表魔方</a>
</li>
</ul>
<h2 id="原型模板">3.3.  原型模板</h2>
<ul>
<li>
<a href="https://www.axureshop.com/" title target>Axure Shop</a>
</li>
</ul>
<h1 id="原型托管">4.  原型托管</h1>
<ul>
<li>
<a href="https://lanhuapp.com/" title target>蓝湖</a>
</li>
<li>Axhu</li>
<li>Wulihu</li>
<li>产品大牛</li>
</ul>
<h1 id="resource">5.  Resource</h1>
<ul>
<li>
<a href="https://www.axure.com.cn/" title target>Axure 中文官网</a>
</li>
<li>
<a href="https://www.axureshop.com/" title target>Axure Shop</a>
</li>
<li>
<a href="https://www.axure.com.cn/1979/" title target></a>
</li>
<li>
<a href="https://ant.design/docs/resources-cn" title target>Ant Design Resource</a>
</li>
<li>
<a href="https://element.eleme.io/#/zh-CN/resource" title target>ElementUI Resource</a>
</li>
<li>
<a href="https://github.com/ElementUI/Resources" title target>ElementUI Library</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>chrome</title>
    <url>/posts/tool/f9d684ec/</url>
    <content><![CDATA[<h1 id="快捷键">1.  快捷键</h1>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift + esc</td>
<td>打开任务管理器</td>
</tr>
</tbody>
</table>
<h1 id="常见问题">2.  常见问题</h1>
<h2 id="devtools-打开-network-部分请求的-response-显示-failed-to-load-response-data">2.1.  DevTools 打开 Network, 部分请求的 Response 显示 failed to load response data</h2>
<p>不要勾选 Network 页面上的 Preserve log, 就能正常显示了.<br>
其他浏览器没有这种情况.</p>
<h2 id="如何保存保存网页正文">2.2.  如何保存保存网页正文?</h2>
<p>我是想保存成 markdown 文件格式的, 但是试了几款插件后, 发现保存完的图片都是链接, 不是 base64, 会有图片没有权限或找不到的风险<br>
最后现在的方式是 先选中网页内容, 然后右击选择, 将选中内容导出成　pdf.<br>
注意右击时鼠标也不能在图片上; 如果使用快捷键 <code>ctrl + p</code> 打印, 设置时选择仅限选定内容.</p>
<p>网上找了以下方式:</p>
<p>MaoXian Web Clipper: 能裁剪保存网页成多文件, 但是有bug: 图片有的保存成了txt, 需要手动修改文件后缀才能显示正常<br>
diigo: 没试过<br>
滚动截屏: 没试过<br>
Save Page WE: 要开启某些 chrome 选项<br>
wiz, evernote 剪藏: 需要对应账号<br>
mhtml: 保存完排版不正确了<br>
简悦: 操作太复杂</p>
<p><a href="https://www.v2ex.com/t/468089" target="_blank" rel="noopener">https://www.v2ex.com/t/468089</a></p>
<h2 id="switchyomega-安装">2.3.  SwitchyOmega 安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">axel -a -n 10 https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx</span><br><span class="line"></span><br><span class="line">mv SwitchyOmega_Chromium.crx SwitchyOmega_Chromium.zip</span><br><span class="line">unzip SwitchyOmega_Chromium.zip -d SwitchyOmega_Chromium</span><br><span class="line"><span class="comment"># 之后将 SwitchyOmega_Chromium 目录拖拽到扩展程序</span></span><br></pre></td></tr></table></figure>
<h1 id="常用插件">3.  常用插件</h1>
<p>SwitchyOmega<br>
Vimium<br>
Chrome 同步助手<br>
AdBlock<br>
Axure RP<br>
Flashcontrol<br>
Postman Interceptor</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>electron</title>
    <url>/posts/nodejs/ccd37491/</url>
    <content><![CDATA[<h3 id="resource">0.0.1.  Resource</h3>
<ul>
<li>Electron 官网<br>
<a href="https://electron.atom.io/" target="_blank" rel="noopener">https://electron.atom.io/</a></li>
<li>Electron 原理<br>
<a href="http://cnodejs.org/topic/572c6ee4afd3b34a17ff409d" target="_blank" rel="noopener">http://cnodejs.org/topic/572c6ee4afd3b34a17ff409d</a></li>
<li>electron wechat<br>
<a href="https://github.com/geeeeeeeeek/electronic-wechat" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/electronic-wechat</a></li>
<li>electron 的一些APP, 其中 Friends 比较奇特.<br>
<a href="http://blog.csdn.net/u011483206/article/details/74327939" target="_blank" rel="noopener">http://blog.csdn.net/u011483206/article/details/74327939</a></li>
<li>awesome electron<br>
<a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-electron</a></li>
</ul>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>firefox</title>
    <url>/posts/uncategorized/25fa7559/</url>
    <content><![CDATA[<h1 id="关闭右侧标签页时候不会出现提示对话框">1.  关闭右侧标签页时候不会出现提示对话框</h1>
<p>about:config<br>
browser.tabs.warnOnCloseOtherTabs false</p>
]]></content>
  </entry>
  <entry>
    <title>excel</title>
    <url>/posts/uncategorized/2f6440bb/</url>
    <content><![CDATA[<h1 id="比对-2-列">1.  比对 2 列</h1>
<p>V2 -&gt; V1<br>
=IFERROR(VLOOKUP(A4,$J<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">4:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>J$19,1,FALSE),&quot;&quot;)</p>
<p>V1 -&gt; V2<br>
=IFERROR(VLOOKUP(J4,$A<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">4:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>A$19,1,FALSE),&quot;&quot;)</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/posts/tool/ab21860c/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">cd your-blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h1 id="常用命令选项">2.  常用命令选项</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d, deploy    Deploy your website.</span><br><span class="line">g, generate  Generate static files.</span><br><span class="line">n, new       Create a new post.</span><br><span class="line">s, server    Start the server.</span><br><span class="line">clean     Remove generated files and cache.</span><br><span class="line">config    Get or set configurations.</span><br><span class="line">help      Get help on a command.</span><br><span class="line">init      Create a new Hexo folder.</span><br><span class="line">list      List the information of the site</span><br><span class="line">migrate   Migrate your site from other system to Hexo.</span><br><span class="line">publish   Moves a draft post from \_drafts to \_posts folder.</span><br><span class="line">render    Render files with renderer plugins.</span><br><span class="line">version   Display version information.</span><br></pre></td></tr></table></figure>
<h1 id="常用插件">3.  常用插件</h1>
<ul>
<li>hexo-abbrlink 链接地址优化</li>
<li>hexo-pdf 支持pdf</li>
<li>hexo-deployer-git 用git发布</li>
<li>hexo-generator-searchdb 支持本地搜索</li>
<li>hexo-footnotes 支持脚注 (脚注非 markdown 原生语法, 需要插件支持)</li>
<li>hexo-tag-plantuml 画UML图</li>
<li>hexo-tag-echarts3 支持EChart</li>
<li>hexo-heading-index 标题自动添加序号</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i -S hexo-abbrlink hexo-pdf hexo-deployer-git hexo-generator-searchdb hexo-footnotes hexo-tag-plantuml hexo-tag-echarts3 hexo-heading-index</span><br></pre></td></tr></table></figure>
<h1 id="最好用的主题">4.  最好用的主题</h1>
<p>next-Pisces 主题简洁大方, 功能丰富, 翻了多个主题, 就这个最方便了.<br>
自带 mathjax.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $blog_dir</span><br><span class="line">git clone -b master --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git clone -b master --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next next</span><br><span class="line">ln -sf next $blog_dir&#x2F;themes&#x2F;next</span><br><span class="line">ln -sf $DOCS_DIR&#x2F;next $DOCS_DIR&#x2F;blog&#x2F;themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>之后添加 ${your-blog}/source/_posts/_data/next.yml, 用于覆盖 theme/next/_config.yml</p>
<h1 id="常见问题">5.  常见问题</h1>
<h2 id="数据表达式支持">5.1.  数据表达式支持</h2>
<ol>
<li>${your-blog}/source/_posts/_data/next.yml 文件中打开数据表达式支持</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>把 hexo-renderer-marked 卸载</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm un -S hexo-renderer-marked</span><br><span class="line">cnpm i -S hexo-renderer-markdown-it-plus</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在博客文件头中添加标识 <code>mathjax: true</code></li>
</ol>
<p>之后在博客文件正文就可以写数学表达式了, 如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行数学表达式:</span><br><span class="line">$a \ne 0$</span><br><span class="line"></span><br><span class="line">多行数学表达式:</span><br><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;&#x3D; b + c \\</span><br><span class="line">  &amp;&#x3D; d + e + f + g \\</span><br><span class="line">  &amp;&#x3D; h + i</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<h2 id="特殊字符转义">5.2.  特殊字符转义</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! &amp;#33; — 惊叹号 Exclamation mark</span><br><span class="line">” &amp;#34; &quot; 双引号 Quotation mark</span><br><span class="line"># &amp;#35; — 数字标志 Number sign</span><br><span class="line">$ &amp;#36; — 美元标志 Dollar sign</span><br><span class="line">% &amp;#37; — 百分号 Percent sign</span><br><span class="line">&amp; &amp;#38; &amp; Ampersand</span><br><span class="line">‘ &#39; — 单引号 Apostrophe</span><br><span class="line">( &amp;#40; — 小括号左边部分 Left parenthesis</span><br><span class="line">) &amp;#41; — 小括号右边部分 Right parenthesis</span><br><span class="line">* &amp;#42; — 星号 Asterisk</span><br><span class="line">+ &amp;#43; — 加号 Plus sign</span><br><span class="line">&lt; &amp;#60; &lt; 小于号 Less than</span><br><span class="line">&#x3D; &amp;#61; — 等于符号 Equals sign</span><br><span class="line">- &amp;#45; &amp;minus; — 减号</span><br><span class="line">&gt; &amp;#62; &gt; 大于号 Greater than</span><br><span class="line">? &amp;#63; — 问号 Question mark</span><br><span class="line">@ &amp;#64; — Commercial at</span><br><span class="line">[ &amp;#91; --- 中括号左边部分 Left square bracket</span><br><span class="line">\ &amp;#92; --- 反斜杠 Reverse solidus (backslash)</span><br><span class="line">] &amp;#93; — 中括号右边部分 Right square bracket</span><br><span class="line">&#123; &amp;#123; — 大括号左边部分 Left curly brace</span><br><span class="line">| &amp;#124; — 竖线Vertical bar</span><br><span class="line">&#125; &amp;#125; — 大括号右边部分 Right curly brace</span><br></pre></td></tr></table></figure>
<h1 id="resource">6.  Resource</h1>
<ul>
<li>
<a href="https://hexo.io/zh-cn/" title target>hexo 官网</a>
</li>
<li>
<a href="https://github.com/hexojs/hexo" title target>hexo 源码</a>
</li>
<li>
<a href="https://github.com/theme-next/hexo-theme-next" title target>Next</a>
</li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>gradle</title>
    <url>/posts/uncategorized/1ff56f08/</url>
    <content><![CDATA[<h1 id="配置-aliyun-仓库">1.  配置 aliyun 仓库</h1>
<h2 id="1-对当前项目起作用">1.1.  1. 对当前项目起作用</h2>
<p>在 build.gradle 中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span> &#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span> &#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-对所有项目起作用">1.2.  2. 对所有项目起作用</h2>
<p><code>$HOME/.gradle/init.d</code> 下创建 <code>init.gradle</code> 文件<br>
(初始化文件相关见: <a href="https://docs.gradle.org/current/userguide/init_scripts.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/init_scripts.html</a>)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="keyword">def</span> ALIYUN_REPOSITORY_URL = <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_JCENTER_URL = <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://repo1.maven.org/maven2'</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://jcenter.bintray.com/'</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="buildscript-块的作用">2.  buildScript 块的作用</h1>
<p>buildScript 中配置的是给 build 脚本使用, 比如 task 中可以引用第三方的包; 而它之外的配置是给项目使用的.<br>
buildScript 中也可以配置 repositories, plugin, dependency<br>
gradle 执行脚本时, 优先执行 buildScript 中的内容, 然后才会执行剩余的脚本内容.</p>
<h1 id="dependencies">3.  dependencies</h1>
<p>api<br>
implementation<br>
compile<br>
compileOnly<br>
annotationProcessor<br>
testCompile<br>
testImplementation<br>
testRuntimeOnly<br>
testAnnotationProcessor<br>
runtime</p>
<p>implementation(platform(“mavenBom”))<br>
implementation(project(&quot;:module&quot;))</p>
<h1 id="使用-gradle-测试-而不是-junit-或-testng">4.  使用 Gradle 测试, 而不是 Junit 或 testNG</h1>
<p>Settings / Build, Execution, Deployment / Build Tool / Gradle<br>
Running test using -&gt; Gradle</p>
<h1 id="命令">5.  命令</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 查看命令帮助文档</span><br><span class="line">gradle -q help --task $task_name</span><br><span class="line"></span><br><span class="line"># 将 maven 项目转化为 gradle</span><br><span class="line"># --dsl&#x3D;kotlin 表示转化成 kotlin-script 语法文件, 但是目前 **不支持**</span><br><span class="line">gradle init --type pom --dsl&#x3D;kotlin</span><br></pre></td></tr></table></figure>
<h1 id="应用脚本插件">6.  应用脚本插件</h1>
<p>//脚本插件<br>
apply from: ‘other.gradle’</p>
<h1 id="常见问题">7.  常见问题</h1>
<h2 id="1-下载依赖源码">7.1.  1. 下载依赖源码</h2>
<p><a href="https://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle" target="_blank" rel="noopener">https://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle</a><br>
<a href="https://docs.gradle.org/6.0/userguide/plugin_reference.html" target="_blank" rel="noopener">https://docs.gradle.org/6.0/userguide/plugin_reference.html</a></p>
<h2 id="2-deprecated-gradle-features-were-used-in-this-build-making-it-incompatible-with-gradle">7.2.  2. Deprecated Gradle features were used in this build, making it incompatible with Gradle</h2>
<p>本地 gradle 版本过低, 调高默认版本<br>
在 gradle/wrapper/gradle-wrapper.properties 设置 gradle 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distributionBase&#x3D;GRADLE_USER_HOME</span><br><span class="line">distributionPath&#x3D;wrapper&#x2F;dists</span><br><span class="line">distributionUrl&#x3D;https\:&#x2F;&#x2F;services.gradle.org&#x2F;distributions&#x2F;gradle-6.0.1-bin.zip</span><br><span class="line">zipStoreBase&#x3D;GRADLE_USER_HOME</span><br><span class="line">zipStorePath&#x3D;wrapper&#x2F;dists</span><br></pre></td></tr></table></figure>
<h2 id="2-脚本插件报找不到-sourcesets">7.3.  2. 脚本插件报找不到 sourceSets</h2>
<p><a href="https://stackoverflow.com/questions/52975515/unresolved-reference-sourcesets-for-gradle-kotlin-dsl" target="_blank" rel="noopener">https://stackoverflow.com/questions/52975515/unresolved-reference-sourcesets-for-gradle-kotlin-dsl</a></p>
<p>用  project.the<sourcesetcontainer>() 替代脚本插件中的 sourceSets</sourcesetcontainer></p>
<h1 id="resource">8.  Resource</h1>
<p><a href="https://docs.gradle.org/current/userguide/what_is_gradle.html#five_things" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/what_is_gradle.html#five_things</a><br>
<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation</a></p>
<a href="https://docs.gradle.org/current/userguide/build_environment.html" title target>Gradle 编译环境参数</a>
<a href="https://docs.gradle.org/current/userguide/plugin_reference.html" title target>Gradle 核心插件</a>
<a href="https://plugins.gradle.org/" title target>插件查询</a>
<a href="https://docs.gradle.org/current/userguide/plugins.html" title target>Gradle **插件使用**</a>
<a href="https://www.cnblogs.com/skymxc/p/gradle-plugin.html" title target>Gradle 插件介绍</a>
<a href="https://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/" title target>Gradle 中文文档</a>
<a href="https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html" title target>Maven Publish</a>
<a href="https://docs.gradle.org/current/userguide/publishing_maven.html" title target>Maven Publish 使用</a>
<a href="git@github.com:gradle/kotlin-dsl-samples.git" title target>kotlin-dsl-samples</a>
<a href="git@github.com:Kotlin/kotlin-examples.git" title target>kotlin-examples</a>
<a href="https://s0docs0gradle0org.icopy.site/current/userguide/userguide.html" title target>Gradle 中文文档</a>]]></content>
  </entry>
  <entry>
    <title>mathjax</title>
    <url>/posts/uncategorized/e4ba64d7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行数学表达式:</span><br><span class="line">$a \ne 0$</span><br><span class="line"></span><br><span class="line">多行数学表达式:</span><br><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;&#x3D; b + c \\</span><br><span class="line">  &amp;&#x3D; d + e + f + g \\</span><br><span class="line">  &amp;&#x3D; h + i</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^\infty i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.113818em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://blog.csdn.net/ajacker/article/details/80301378" title target>mathjax 语法</a>
</li>
<li>
<a href="https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch" title target>mathjax 语法</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>jira</title>
    <url>/posts/ci/1565726e/</url>
    <content><![CDATA[<h1 id="常用过滤器">1.  常用过滤器</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 由我解决的问题</span><br><span class="line">status WAS &quot;Resolved&quot; by currentUser()</span><br><span class="line"></span><br><span class="line"># 我处理过的问题</span><br><span class="line">status changed by currentUser() and project !&#x3D; 非采购类流程</span><br><span class="line"></span><br><span class="line"># 分配给我未解决的问题</span><br><span class="line">assignee &#x3D; currentUser() AND resolution &#x3D; Unresolved and status !&#x3D; closed ORDER BY updatedDate DESC</span><br><span class="line"></span><br><span class="line"># 我提交的还在处理中的</span><br><span class="line">status in (open, &quot;In Progress&quot;, Reopened, &quot;开发审批通过,等待测试审批&quot;, 等待申请人直属主管审批) AND reporter in (currentUser()) ORDER BY createdDate DESC</span><br><span class="line"># 或者</span><br><span class="line">reporter&#x3D;currentUser() OR assignee &#x3D;currentUser() ORDER BY priority DESC</span><br><span class="line"></span><br><span class="line"># CRMEP 项目 1.6.0 版本 处理中的问题</span><br><span class="line">project &#x3D; CRMEP AND fixVersion &#x3D; 1.6.0 AND status in (open, &quot;In Progress&quot;, Reopened)</span><br><span class="line"></span><br><span class="line"># CRMEP 未封版的问题</span><br><span class="line">project &#x3D; CRMEP AND fixVersion not in releasedVersions()</span><br><span class="line"></span><br><span class="line"># CRMEP 未封版 处理中的的问题</span><br><span class="line">project &#x3D; CRMEP AND fixVersion not in releasedVersions() AND resolution &#x3D; Unresolved AND status !&#x3D; closed</span><br><span class="line"></span><br><span class="line"># CRMEP 未封版 开发一组处理中的的问题</span><br><span class="line">project &#x3D; CRMEP AND fixVersion not in releasedVersions() AND resolution &#x3D; Unresolved AND status !&#x3D; closed AND assignee in membersOf(shuyun_prj_rd1_se.list)</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>
<a href="https://confluence.atlassian.com/jira062/advanced-searching-588581766.html" title target>Advanced Searching</a>
</li>
</ul>
]]></content>
      <categories>
        <category>ci</category>
      </categories>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/posts/uncategorized/96be88e3/</url>
    <content><![CDATA[<p>画图库支持 mermaid, viz, echarts, plantuml, sequence, flow</p>
<h1 id="将-markdown-文件转化为-confluence-文件格式">1.  将 Markdown 文件转化为 Confluence 文件格式</h1>
<p>安装工具: markdown2confluence</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i markdown2confluence -g</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<p><a href="http://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">http://mermaid-js.github.io/mermaid/#/</a><br>
<a href="https://www.jianshu.com/p/8c1b2b39deb0" target="_blank" rel="noopener">https://www.jianshu.com/p/8c1b2b39deb0</a><br>
<a href="http://flowchart.js.org/" target="_blank" rel="noopener">http://flowchart.js.org/</a></p>
<a href="https://www.appinn.com/markdown/" title target>Markdown 语法</a>]]></content>
  </entry>
  <entry>
    <title>mycli</title>
    <url>/posts/database/60023d9/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<p>参见 <a href="https://www.mycli.net/install" title target>Mycli 安装</a></p>
<p>直接通过 apt 安装, 版本较老, 有bug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 用 pyenv 安装 python 3.7+</span></span><br><span class="line"><span class="comment"># 2. 安装 libffi-dev</span></span><br><span class="line"><span class="comment"># 不安装这个, 执行第 3 步时, 会报: "ModuleNotFoundError: No module named '_ctypes'"</span></span><br><span class="line">sudo apt install -y libffi-dev</span><br><span class="line"><span class="comment"># 3. 安装 mycli</span></span><br><span class="line">pip install mycli</span><br></pre></td></tr></table></figure>
<h1 id="shortcut">2.  shortcut</h1>
<p>help    查看帮助命令<br>
\n      关闭 pager, 直接把结果输出到控制台, 而不是输出到 less<br>
F3      多行编辑模式<br>
&lt;C-r&gt; 进入历史命令搜索</p>
<h1 id="resource">3.  Resource</h1>
<a href="https://www.mycli.net/" title target>Mycli 官网</a>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/posts/tool/c6e613d8/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<p>wget <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz</a></p>
<h1 id="pom结构">2.  pom结构</h1>
<ul>
<li>groupId</li>
<li>artifactId</li>
<li>version</li>
<li>package<br>
jar | war | pom</li>
<li>dependencies
<ul>
<li>groupId</li>
<li>artifactId</li>
<li>version</li>
<li>scope
<ul>
<li>compile: 编译,测试,运行都有效, 默认范围</li>
<li>provided: 在编译和测试时有效</li>
<li>runtime: 在测试和运行时有效</li>
<li>test: 只在测试时有效</li>
<li>system: 在编译和测试时有效, 与本机系统关联, 可移植性差</li>
</ul>
</li>
<li>optional<br>
true | <code>false</code> , 是否排除依赖.<br>
例如, 如果ProjectA中配置依赖ProjectB, 并且optional:true, 那当ProjectX依赖ProjectA时, 如果没有显示的引入ProjectB, 则ProjectX不会引入ProjectB, 即ProjectX可以自己选择是否依赖ProjectB.</li>
</ul>
</li>
<li>…</li>
</ul>
<h1 id="添加maven镜像">3.  添加maven镜像</h1>
<p>在settings.xml的mirrors节点下添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>
<p>或者在pom.xml的profiles/profile节点添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repository&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;snapshots&gt;</span><br><span class="line">        &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">    &lt;&#x2F;snapshots&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">        &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">    &lt;&#x2F;releases&gt;</span><br><span class="line">&lt;&#x2F;repository&gt;</span><br></pre></td></tr></table></figure>
<h1 id="上传jar文件到私服">4.  上传jar文件到私服</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.google.code.kaptcha -DartifactId&#x3D;kaptcha -Dversion&#x3D;2.3 -Dpackaging&#x3D;jar -Dfile&#x3D;&#x2F;home&#x2F;raven&#x2F;Workspace&#x2F;TomatoDocs&#x2F;kaptcha-2.3.jar -Durl&#x3D;http:&#x2F;&#x2F;10.18.75.202:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;snapshots&#x2F; -DrepositoryId&#x3D;snapshots</span><br></pre></td></tr></table></figure>
<p>– DgroupId和DartifactId构成了该jar包在pom.xml的坐标, 对应依赖的DgroupId和DartifactId<br>
– Dfile表示需要上传的jar包的绝对路径<br>
– Durl私服上仓库的url精确地址(打开nexus左侧repositories菜单, 可以看到该路径)<br>
– DrepositoryId服务器的表示id, 在nexus的configuration可以看到</p>
<h1 id="常用插件">5.  常用插件</h1>
<h2 id="project-build-plugins">5.1.  Project Build Plugins</h2>
<table>
<thead>
<tr>
<th>GroupId</th>
<th>ArtifactId</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.mycila</td>
<td>license-maven-plugin</td>
<td>3.0</td>
</tr>
<tr>
<td>net.revelc.code.formatter</td>
<td>formatter-maven-plugin</td>
<td>2.0.1</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-antrun-plugin</td>
<td>1.8</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-assembly-plugin</td>
<td>3.0.0</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-clean-plugin</td>
<td>3.0.0</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-compiler-plugin</td>
<td>3.6.1</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-dependency-plugin</td>
<td>3.0.1</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-deploy-plugin</td>
<td>2.8.2</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-install-plugin</td>
<td>2.5.2</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-javadoc-plugin</td>
<td>2.10.4</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-pdf-plugin</td>
<td>1.3</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-release-plugin</td>
<td>2.5.3</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-resources-plugin</td>
<td>3.0.2</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-shade-plugin</td>
<td>3.0.0</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-site-plugin</td>
<td>3.6</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-surefire-plugin</td>
<td>2.20</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>versions-maven-plugin</td>
<td>2.4</td>
</tr>
<tr>
<td>org.eluder.coveralls</td>
<td>coveralls-maven-plugin</td>
<td>4.3.0</td>
</tr>
<tr>
<td>org.jacoco</td>
<td><a href="http://jacoco-maven-plugin" target="_blank" rel="noopener">http://jacoco-maven-plugin</a></td>
<td>0.7.9</td>
</tr>
</tbody>
</table>
<h2 id="project-report-plugins">5.2.  Project Report Plugins</h2>
<table>
<thead>
<tr>
<th>GroupId</th>
<th>ArtifactId</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-changes-plugin</td>
<td>2.12.1</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-checkstyle-plugin</td>
<td>2.17</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-javadoc-plugin</td>
<td>2.10.4</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-jxr-plugin</td>
<td>2.5</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-pmd-plugin</td>
<td>3.8</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-project-info-reports-plugin</td>
<td>2.9</td>
</tr>
<tr>
<td>org.apache.maven.plugins</td>
<td>maven-surefire-report-plugin</td>
<td>2.20</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>clirr-maven-plugin</td>
<td>2.8</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>findbugs-maven-plugin</td>
<td>3.0.4</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>jdepend-maven-plugin</td>
<td>2.0</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>taglist-maven-plugin</td>
<td>2.4</td>
</tr>
<tr>
<td>org.codehaus.mojo</td>
<td>versions-maven-plugin</td>
<td>2.4</td>
</tr>
<tr>
<td>org.jacoco</td>
<td><a href="http://jacoco-maven-plugin" target="_blank" rel="noopener">http://jacoco-maven-plugin</a></td>
<td>0.7.9</td>
</tr>
</tbody>
</table>
<h1 id="常用命令">6.  常用命令</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -f 指定 mvn 命令工作目录, 在该目录下必须要有 pom.xml 文件</span><br><span class="line">mvn clean install -f &lt;pom-dir&gt;</span><br><span class="line"></span><br><span class="line"># -pl  单独编译哪些模块, 可以用逗号隔开</span><br><span class="line"># -am  同时编译 &#96;-pl 列举的模块依赖的模块&#96;</span><br><span class="line"># -amd 同时编译&#96;依赖 -pl 列举的模块&#96;</span><br><span class="line"># -N   不递归, 常用在只构建父 pom</span><br><span class="line">mvn clean install -pl .,&lt;sub-project&gt; -am</span><br><span class="line"></span><br><span class="line"># 查看依赖树</span><br><span class="line">mvn dependency:tree</span><br><span class="line"></span><br><span class="line"># 依赖分析, 删除无用的依赖</span><br><span class="line"># http:&#x2F;&#x2F;maven.apache.org&#x2F;components&#x2F;plugins&#x2F;maven-dependency-plugin&#x2F;</span><br><span class="line">mvn dependency:analyze</span><br></pre></td></tr></table></figure>
<h1 id="常用配置">7.  常用配置</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>project.build.sourceEncoding<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="常见问题">8.  常见问题</h1>
<h2 id="带-springapplication-的模块打包后-在别的项目中引入时-无法找到模块中的类">8.1.  带 @SpringApplication 的模块打包后, 在别的项目中引入时, 无法找到模块中的类</h2>
<p>在jar包中看到, 编译文件在 <code>BOOT-INF</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;classifier&gt;exec&lt;&#x2F;classifier&gt; &lt;!--加上这个就可以, 但是会变成无法执行--&gt;</span><br><span class="line">        &lt;mainClass&gt;$&#123;mainClass&#125;&lt;&#x2F;mainClass&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;repackage&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>netcat</title>
    <url>/posts/tool/57ac9ac5/</url>
    <content><![CDATA[<p>反弹shell<br>
端口转发</p>
<p><a href="https://www.oschina.net/translate/linux-netcat-command/" target="_blank" rel="noopener">https://www.oschina.net/translate/linux-netcat-command/</a></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok</title>
    <url>/posts/uncategorized/29a1820d/</url>
    <content><![CDATA[<p>内网转发工具</p>
]]></content>
  </entry>
  <entry>
    <title>ohmyzsh</title>
    <url>/posts/tool/8cf9cd77/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">chsh -s $(which zsh)</span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line">echo &#39;source ~&#x2F;.zshrc_local&#39; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>
<h1 id="修改配置">2.  修改配置</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&#39;gnzh&#39;</span><br><span class="line">plugins&#x3D;&#39;autojump&#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn</title>
    <url>/posts/tool/b4d2b7f5/</url>
    <content><![CDATA[<p>可使用以下命令连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo openvpn --config &#x2F;path&#x2F;to&#x2F;xxx.ovpn</span><br><span class="line">sudo openvpn --config &#x2F;path&#x2F;to&#x2F;xxx.ovpn --ca ca.crt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>rap</title>
    <url>/posts/tool/84d74ef6/</url>
    <content><![CDATA[<h3 id="intro">0.0.1.  Intro</h3>
<ol>
<li>接口文档<br>
不需要格式转换, 变更标注, 文档分发</li>
<li>接口用例<br>
可直接生成查看</li>
<li>前端Mock测试<br>
在前后端分离的架构下, 前端使用mock测试, 促使前后端可以</li>
</ol>
<h3 id="set-up">0.0.2.  Set up</h3>
<h5 id="rap-war">0.0.2.0.1.  RAP war</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;rapapi.org&#x2F;release&#x2F;RAP-0.14.16-SNAPSHOT.war</span><br></pre></td></tr></table></figure>
<h5 id="tomcat">0.0.2.0.2.  tomcat</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.23&#x2F;bin&#x2F;apache-tomcat-8.5.23.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="redis">0.0.2.0.3.  redis</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install redis-server</span><br></pre></td></tr></table></figure>
<h3 id="resource">0.0.3.  Resource</h3>
<ul>
<li>github source<br>
<a href="https://github.com/thx/RAP" target="_blank" rel="noopener">https://github.com/thx/RAP</a></li>
<li>github wiki<br>
<a href="https://github.com/thx/RAP/wiki/deploy_manual_cn" target="_blank" rel="noopener">https://github.com/thx/RAP/wiki/deploy_manual_cn</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>pinyin</title>
    <url>/posts/uncategorized/b02ef600/</url>
    <content><![CDATA[<h1 id="智能-abc-双拼方案">1.  智能 ABC 双拼方案</h1>
<table>
<thead>
<tr>
<th>Key</th>
<th>Vowel</th>
<th>Consonant</th>
</tr>
</thead>
<tbody>
<tr>
<td>Q</td>
<td>q</td>
<td>ei</td>
</tr>
<tr>
<td>W</td>
<td>w</td>
<td>ian</td>
</tr>
<tr>
<td>E</td>
<td>ch</td>
<td>e</td>
</tr>
<tr>
<td>R</td>
<td>r</td>
<td>er,iu</td>
</tr>
<tr>
<td>T</td>
<td>t</td>
<td>iang,uang</td>
</tr>
<tr>
<td>Y</td>
<td>y</td>
<td>ing</td>
</tr>
<tr>
<td>U</td>
<td>-</td>
<td>u</td>
</tr>
<tr>
<td>I</td>
<td>-</td>
<td>i</td>
</tr>
<tr>
<td>O</td>
<td>-</td>
<td>o,uo</td>
</tr>
<tr>
<td>P</td>
<td>p</td>
<td>uan</td>
</tr>
<tr>
<td>A</td>
<td>zh</td>
<td>a</td>
</tr>
<tr>
<td>S</td>
<td>s</td>
<td>iong,ong</td>
</tr>
<tr>
<td>D</td>
<td>d</td>
<td>ia,ua</td>
</tr>
<tr>
<td>F</td>
<td>f</td>
<td>en</td>
</tr>
<tr>
<td>G</td>
<td>g</td>
<td>eng</td>
</tr>
<tr>
<td>H</td>
<td>h</td>
<td>ang</td>
</tr>
<tr>
<td>J</td>
<td>j</td>
<td>an</td>
</tr>
<tr>
<td>K</td>
<td>k</td>
<td>ao</td>
</tr>
<tr>
<td>L</td>
<td>l</td>
<td>ai</td>
</tr>
<tr>
<td>Z</td>
<td>z</td>
<td>iao</td>
</tr>
<tr>
<td>X</td>
<td>x</td>
<td>ie</td>
</tr>
<tr>
<td>C</td>
<td>c</td>
<td>in,uai</td>
</tr>
<tr>
<td>V</td>
<td>sh</td>
<td>v,ve</td>
</tr>
<tr>
<td>B</td>
<td>b</td>
<td>ou</td>
</tr>
<tr>
<td>N</td>
<td>n</td>
<td>un</td>
</tr>
<tr>
<td>M</td>
<td>m</td>
<td>ue,ui</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>sdkman</title>
    <url>/posts/uncategorized/2a023189/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载并执行安装</span><br><span class="line">curl -s &quot;https:&#x2F;&#x2F;get.sdkman.io&quot; | bash</span><br><span class="line"># 初始化</span><br><span class="line">source &quot;&#x2F;home&#x2F;raven&#x2F;.sdkman&#x2F;bin&#x2F;sdkman-init.sh&quot;</span><br><span class="line"># 查看是否安装成功</span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="http://sdkman.io/usage.html" target="_blank" rel="noopener">http://sdkman.io/usage.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>plantuml</title>
    <url>/posts/uncategorized/42fed852/</url>
    <content><![CDATA[<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLWZApy_bWZ23IqfJKlDAe3pdZCJC8YukaBo2hguTN1OYO0UJ1m00">
<img src="http://www.plantuml.com/plantuml/svg/uxBoICt9oLSepo_AIR7ciWh9o2nM0AByF8MKrBJClDGK89EhEBKijIWnHq5BAmSeLAobPSq50000">
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLiXFol9Bp4rLiB5Hq0ZHoIzApiXCqLImirEevb80WimK80Apya2gdaxeVRvy0vXVbbfKd9cVf_2yi-FPd3LSjG00">
<h1 id="vscode-安装-plantuml">1.  VSCode 安装 PlantUML</h1>
<ol>
<li>
<p>安装 Java 环境</p>
</li>
<li>
<p>安装 Graphviz</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install graphviz</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装 VSCode 插件 plantuml</li>
</ol>
<p>支持文件格式 <code>*.wsd, *.pu, *.puml, *.plantuml, *.iuml</code></p>
<p>快捷键:</p>
<p><code>Alt + D</code> 预览 UML<br>
<code>Alt + Shift + F</code> 格式化 plantuml 文件</p>
<ol start="4">
<li>配置修改</li>
</ol>
<p>plantuml.exportOutDir: .<br>
plantuml.exportSubFolder: false</p>
<h1 id="与-mermaid-yuml-比较">2.  与 mermaid, yuml 比较</h1>
<ul>
<li>yuml 功能简单, 收费</li>
<li>mermaid 功能简单, 没有类图</li>
</ul>
<h1 id="常见问题">3.  常见问题</h1>
<h2 id="导出的图片中文乱码">3.1.  导出的图片中文乱码</h2>
<p>通过命令行执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -DPLANTUML_LIMIT_SIZE=8192 -jar plantuml.jar -charset UTF-8 E:\doc\index.puml</span><br></pre></td></tr></table></figure>
<p>vscode 配置中修改, 但是貌似没起作用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"plantuml.commandArgs"</span>: [<span class="string">"-Dfile.encoding=UTF-8"</span>],</span><br><span class="line">    <span class="attr">"plantuml.jarArgs"</span>: [<span class="string">"-charset"</span>, <span class="string">"UTF-8"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>selenium</title>
    <url>/posts/uncategorized/4d23fd8d/</url>
    <content><![CDATA[<h1 id="浏览器配置">1.  浏览器配置</h1>
<p>连接方式有 2 种:</p>
<ol>
<li>使用本地驱动, 浏览器位于本机, 本机需要安装浏览器驱动 <code>chromium-driver</code> 或者 <code>chrome-driver</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; For use with ChromeDriver:</span><br><span class="line">ChromeDriver driver &#x3D; new ChromeDriver(options);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>调用远程浏览器, 浏览器位于其他服务器上</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; For use with RemoteWebDriver:</span><br><span class="line">RemoteWebDriver driver &#x3D; new RemoteWebDriver(</span><br><span class="line">    new URL(&quot;http:&#x2F;&#x2F;localhost:4444&#x2F;wd&#x2F;hub&quot;),</span><br><span class="line">    new ChromeOptions());</span><br></pre></td></tr></table></figure>
<h2 id="chromoptions">1.1.  ChromOptions</h2>
<ol>
<li>addArguments<br>
通过 String 形式添加参数,如:</li>
</ol>
<ul>
<li><code>--no-sandbox</code> 以root权限运行</li>
<li><code>--start-maximized</code> 窗口最大化</li>
<li><code>--disable-extensions</code> 禁止使用插件</li>
<li><code>--incognito</code> 隐身模式 在浏览结束后, 会清除浏览记录(包括一些缓存文件)</li>
<li><code>--disable-plugins-discover</code> 禁止发现扩展程序.<br>
在某些情况下, 网站通过检测扩展能够判断出是否为非法访问</li>
</ul>
<ol start="2">
<li>addEncodedExtensions<br>
添加编码插件</li>
<li>addExtensions<br>
添加 crx 插件</li>
<li>getExperimentalOption</li>
<li>setAcceptInsecureCerts<br>
是否接受不安全的证书</li>
<li>setBinary<br>
设置浏览器位置</li>
<li>setExperimentalOption<br>
配置实验性参数, 如:<br>
禁止加载图片的配置:</li>
</ol>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; prefs &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">&#x2F;&#x2F; 1: 允许 2: 不允许</span><br><span class="line">prefs.put(&quot;profile.managed_default_content_settings.images&quot;, 2);</span><br><span class="line">options.setExperimentalOption(&quot;prefs&quot;, prefs);</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>setHeadless<br>
无界面运行</li>
<li>setPageLoadStrategy</li>
<li>setProxy</li>
<li>setUnhandledPromptBehaviour</li>
</ol>
<h1 id="测试样例">2.  测试样例</h1>
<figure class="highlight java"><figcaption><span>Selenium 测试</span><a href="/code/java/SeleniumTest.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedCondition;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> raven</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-07-02 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// Create a new instance of the Firefox driver</span></span><br><span class="line">        <span class="comment">// Notice that the remainder of the code relies on the interface,</span></span><br><span class="line">        <span class="comment">// not the implementation.</span></span><br><span class="line">        WebDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line"><span class="comment">//        WebDriver driver = new HtmlUnitDriver(true);</span></span><br><span class="line"><span class="comment">//        WebDriver driver = new FirefoxDriver();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// And now use this to visit Google</span></span><br><span class="line">        driver.get(<span class="string">"https://www.baidu.com/"</span>);</span><br><span class="line">        <span class="comment">// Alternatively the same thing can be done like this</span></span><br><span class="line">        <span class="comment">// driver.navigate().to("http://www.google.com");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the text input element by its name</span></span><br><span class="line">        WebElement element = driver.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enter something to search for</span></span><br><span class="line">        element.sendKeys(<span class="string">"Cheese!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now submit the form. WebDriver will find the form for us from the element</span></span><br><span class="line">        element.submit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check the title of the page</span></span><br><span class="line">        System.out.println(<span class="string">"Page title is: "</span> + driver.getTitle());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Google's search is rendered dynamically with JavaScript.</span></span><br><span class="line">        <span class="comment">// Wait for the page to load, timeout after 10 seconds</span></span><br><span class="line">        (<span class="keyword">new</span> WebDriverWait(driver, <span class="number">10</span>)).until(<span class="keyword">new</span> ExpectedCondition&lt;Boolean&gt;() {</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(WebDriver d)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> d.getTitle().toLowerCase().startsWith(<span class="string">"cheese!"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Should see: "cheese! - Google Search"</span></span><br><span class="line">        System.out.println(<span class="string">"Page title is: "</span> + driver.getTitle());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Close the browser</span></span><br><span class="line">        driver.quit();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>space-vim</title>
    <url>/posts/uncategorized/f41c16bc/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sLf https://spacevim.org/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装字体</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git ~/Package/fonts</span><br><span class="line">~/Package/fonts/install.sh</span><br><span class="line"><span class="comment"># 之后将 iterm2 的字体改为 DejaVu Sans Mono for Powerline</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">curl -sLf https://spacevim.org/install.sh | bash -s -- --uninstall</span><br></pre></td></tr></table></figure>
<h1 id="快捷键">2.  快捷键</h1>
<p>SPC f v d   打开配置文件<br>
F2          语法树<br>
F3          文件树</p>
]]></content>
  </entry>
  <entry>
    <title>shadowsocks</title>
    <url>/posts/tool/62b46190/</url>
    <content><![CDATA[<h3 id="通过命令来启动">0.0.1.  通过命令来启动</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start</span><br></pre></td></tr></table></figure>
<h3 id="查看日志">0.0.2.  查看日志</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo less &#x2F;var&#x2F;log&#x2F;shadowsocks.log</span><br></pre></td></tr></table></figure>
<h3 id="通过配置文件来启动">0.0.3.  通过配置文件来启动</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class="line">    &quot;server_port&quot;:8388,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start</span><br><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>sublime</title>
    <url>/posts/tool/238c95be/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/stable/"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line">sudo apt install sublime-text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决 linux 下无法输入中文的问题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lyfeyaj/sublime-text-imfix.git</span><br><span class="line"><span class="built_in">cd</span> sublime-text-imfix &amp;&amp; ./sublime-imfix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line"><span class="comment"># "http_proxy": "http://127.0.0.1:8087",</span></span><br><span class="line"><span class="comment"># "https_proxy": "http://127.0.0.1:8087"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决 package control 安装失败</span></span><br><span class="line"><span class="comment"># 在 hosts 文件添加</span></span><br><span class="line"><span class="comment"># 50.116.34.243 sublime.wbond.net</span></span><br><span class="line"><span class="comment"># 50.116.34.243 packagecontrol.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令 add channel</span></span><br><span class="line"><span class="comment"># http://www.feyon.net/channel_v3.json</span></span><br></pre></td></tr></table></figure>
<h1 id="配置">2.  配置</h1>
<h2 id="快捷键">2.1.  快捷键</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; &quot;keys&quot;: [&quot;ctrl+shift+r&quot;], &quot;command&quot;: &quot;reveal_in_side_bar&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="常用插件">3.  常用插件</h1>
<ul>
<li>ConvertToUTF8</li>
<li>HTML-CSS-JS Prettify</li>
<li>OmniMarkupPreviewer</li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="https://www.jianshu.com/p/bf05fb3a4709" target="_blank" rel="noopener">https://www.jianshu.com/p/bf05fb3a4709</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>vagex</title>
    <url>/posts/uncategorized/38e6c95d/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>vscode</title>
    <url>/posts/uncategorized/849a3ae4/</url>
    <content><![CDATA[<h1 id="代码段-snippets">1.  代码段 Snippets</h1>
<p>见 <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" title target>VSCode 文档</a></p>
<p>需要设置 <code>&quot;editor.tabCompletion&quot;: &quot;on&quot;</code></p>
<h1 id="常用插件">2.  常用插件</h1>
<ul>
<li>
<p>Sort lines</p>
</li>
<li>
<p>Selected Lines Count</p>
</li>
<li>
<p>Sublime Text Keymap and Settings Importer</p>
</li>
<li>
<p>Todo+</p>
</li>
<li>
<p>Local History</p>
</li>
<li>
<p>Markdown PDF</p>
</li>
<li>
<p>Markdown Preview Enhanced</p>
</li>
<li>
<p>PlantUML</p>
</li>
<li>
<p>SQL Formatter</p>
</li>
<li>
<p>Visual Studio Code Format</p>
</li>
<li>
<p>vscode-pdf</p>
</li>
<li>
<p>XML Tools</p>
</li>
<li>
<p>Selected Character Count</p>
</li>
<li>
<p>Paste Image</p>
</li>
<li>
<p>Git Graph</p>
</li>
<li>
<p>Paste URL</p>
</li>
<li>
<p>Language support for Java</p>
</li>
</ul>
<h1 id="markdown-preview-enhanced-支持-hexo-语法">3.  Markdown Preview Enhanced 支持 hexo 语法</h1>
<p><code>ctrl + shift + P</code> 找到 Markdown Preview Enhanced: Extend Parser, 打开 parser.js<br>
修改其中 onWillParseMarkdown 方法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onWillParseMarkdown: <span class="function"><span class="keyword">function</span>(<span class="params">markdown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    markdown = markdown.replace(</span><br><span class="line">      /&#123;%s*asset_imgs*(.*)s*%&#125;/g,</span><br><span class="line">      (whole, content) =&gt; (<span class="string">`![](<span class="subst">$&#123;content&#125;</span>)`</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> resolve(markdown)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="paste-url-插件插入格式改成-hexo的">4.  Paste Url 插件插入格式改成 hexo的</h1>
<p>修改 <code>~/.vscode/extensions/kukushi.pasteurl-0.4.4/out/src/extension.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarkdownLinkFormatter</span> </span>&#123;</span><br><span class="line">    formatLink(text, url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;% link '</span> + text + <span class="string">' '</span> + url + <span class="string">'%&#125;'</span>;</span><br><span class="line">        <span class="comment">// return '[' + text + ']' + '(' + url + ')';</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义代码段字段提示完成">5.  自定义代码段字段提示完成</h1>
<p>editor.tabCompletion: on</p>
<h1 id="resource">6.  Resource</h1>
<a href="https://code.visualstudio.com/docs" title target>VSCode 文档</a>
]]></content>
  </entry>
  <entry>
    <title>vim-setup</title>
    <url>/posts/tool/18788f81/</url>
    <content><![CDATA[<h1 id="vim配置">1.  vim配置</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set encoding&#x3D;utf-8</span><br><span class="line">set autoindent   &quot; 继承前一行的缩进方式, 特别适用于多行注释</span><br><span class="line">set smarttab   &quot; 为c程序员提供自动缩进</span><br><span class="line">set tabstop&#x3D;4   &quot; 设置制表符(tab键)的宽度</span><br><span class="line">set softtabstop&#x3D;4  &quot; 设置软制表符的宽度</span><br><span class="line">set shiftwidth&#x3D;4  &quot; (自动) 缩进使用的4个空格</span><br><span class="line">set noexpandtab   &quot; 不要用空格代替制表符</span><br><span class="line">set nowrap    &quot; 不要换行</span><br><span class="line">set cindent    &quot; 使用 C&#x2F;C++ 语言的自动缩进方式</span><br><span class="line">set linebreak   &quot; 整词换行</span><br><span class="line">set mouse&#x3D;a    &quot; 使用鼠标</span><br><span class="line">set history&#x3D;256   &quot; 历史记录256条</span><br><span class="line">set cursorline   &quot; 高亮指针所在行</span><br><span class="line">set backspace&#x3D;2   &quot; 退格键可用</span><br><span class="line">set cmdheight&#x3D;2   &quot; 设置命令行高亮</span><br><span class="line">set nowrap    &quot; 不要换行</span><br><span class="line">set linebreak   &quot; 整词换行</span><br><span class="line">set clipboard&#x3D;unnamed &quot; 支持访问系统剪贴板</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map &lt;F8&gt; :set nu!&lt;CR&gt; &quot; toggle 行号</span><br><span class="line">set pastetoggle&#x3D;&lt;F9&gt; &quot; 粘贴模式</span><br><span class="line">map &lt;F10&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line">map &lt;F10&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">if has(&quot;syntax&quot;)</span><br><span class="line"> syntax on   &quot; 语法高亮</span><br><span class="line">endif</span><br><span class="line">&quot; colo murphy   &quot; 配色方案 desert darkblue delek evening murphy</span><br><span class="line">set background&#x3D;dark</span><br><span class="line"></span><br><span class="line">&quot; 状态行设置</span><br><span class="line">set nu     &quot; 显示行号</span><br><span class="line">set laststatus&#x3D;2  &quot; 总显示最后一个窗口的状态行; 设为1则窗口数多于一个的时候显示最后一个窗口的状态行; 0不显示最后一个窗口的状态行</span><br><span class="line">set ruler    &quot; 标尺, 用于显示光标位置的行号和列号, 逗号分隔.每个窗口都有自己的标尺.如果窗口有状态行, 标尺在那里显示.否则, 它显示在屏幕的最后一行上.</span><br><span class="line">set showcmd    &quot; 命令行显示输入的命令</span><br><span class="line">set showmode   &quot; 命令行显示vim当前模式</span><br><span class="line">set statusline&#x3D;%F%m%r%h%w\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\ [TYPE&#x3D;%Y]\ [POS&#x3D;%l, %v][%p%%]\ %&#123;strftime(\&quot;%d&#x2F;%m&#x2F;%y\ -\ %H:%M\&quot;)&#125; &quot;状态行显示的内容</span><br><span class="line">autocmd InsertLeave * se cul &quot; 用浅色高亮当前行</span><br><span class="line"></span><br><span class="line">&quot; 搜索和匹配</span><br><span class="line">set showmatch   &quot; 插入括号时, 短暂地跳转到匹配的对应括号</span><br><span class="line">set smartcase   &quot; 只包含小写字母时才忽略大小写</span><br><span class="line">set incsearch   &quot; 输入字符串就显示匹配点</span><br><span class="line">set hlsearch   &quot; 搜索结果高亮显示</span><br><span class="line">set scrolloff&#x3D;3   &quot; 光标移动到buffer的顶部和底部时保持3行距离</span><br><span class="line">set wildmenu   &quot; 增强模式中的命令行自动完成操作</span><br><span class="line"></span><br><span class="line">&quot; 分割窗口</span><br><span class="line">nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;</span><br><span class="line">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;</span><br><span class="line">nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;</span><br><span class="line">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;</span><br><span class="line"></span><br><span class="line">&quot; 设置 leader 键, 例子为空号键, 也可以设置为其他的</span><br><span class="line">let mapleader&#x3D;&quot; &quot;</span><br><span class="line">&quot; 设置快捷键, 关闭一个窗口</span><br><span class="line">map &lt;leader&gt;wq :wq&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;w :w&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;q :q&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;c :tabc&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;o :tabo&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;s :tabs&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;p :tabp&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;n :tabn&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">highlight WhitespaceEOL ctermbg&#x3D;red guibg&#x3D;red</span><br><span class="line">match WhitespaceEOL &#x2F;\s\+$&#x2F;</span><br><span class="line"></span><br><span class="line">autocmd FileType sh source ~&#x2F;.vim&#x2F;sh.vim</span><br><span class="line">autocmd FileType md source ~&#x2F;.vim&#x2F;md.vim</span><br><span class="line">autocmd FileType java source ~&#x2F;.vim&#x2F;java.vim</span><br><span class="line"></span><br><span class="line">set nocompatible  &quot; be iMproved, required 不使用vi的键盘模式, 而是vim自己的</span><br><span class="line">filetype off   &quot; required    不侦测文件类型</span><br><span class="line"></span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line"></span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;</span><br><span class="line">&quot; python风格代码自动缩进</span><br><span class="line">Plugin &#39;vim-scripts&#x2F;indentpython.vim&#39;</span><br><span class="line">&quot; 自动补全</span><br><span class="line">&quot; Plugin &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br><span class="line">&quot; 语法高亮</span><br><span class="line">Plugin &#39;scrooloose&#x2F;syntastic&#39;</span><br><span class="line">&quot; 树形目录</span><br><span class="line">Plugin &#39;scrooloose&#x2F;nerdtree&#39;</span><br><span class="line">&quot; 超级搜索</span><br><span class="line">Plugin &#39;kien&#x2F;ctrlp.vim&#39;</span><br><span class="line">&quot; git集成</span><br><span class="line">Plugin &#39;tpope&#x2F;vim-fugitive&#39;</span><br><span class="line">&quot; 多行编辑</span><br><span class="line">Plugin &#39;terryma&#x2F;vim-multiple-cursors&#39;</span><br><span class="line">&quot; markdown 支持</span><br><span class="line">Plugin &#39;kannokanno&#x2F;previm&#39;</span><br><span class="line">&quot; 代码折叠</span><br><span class="line">&quot; Plugin &#39;tmhedberg&#x2F;SimpylFold&#39;</span><br><span class="line">Plugin &#39;auto-pairs&#39;</span><br><span class="line"></span><br><span class="line">call vundle#end()  &quot; required</span><br><span class="line">filetype plugin on &quot; required   载入文件类型插件, 为特定文件类型载入香港缩进文件</span><br><span class="line">filetype indent on &quot; required   载入文件类型插件, 为特定文件类型载入香港缩进文件</span><br><span class="line"></span><br><span class="line">&quot; :PluginList       - lists configured plugins</span><br><span class="line">&quot; :PluginInstall    - installs plugins; append &#96;!&#96; to update or just</span><br><span class="line">&quot; :PluginUpdate</span><br><span class="line">&quot; :PluginSearch foo - searches for foo; append &#96;!&#96; to refresh local cache</span><br><span class="line">&quot; :PluginClean      - confirms removal of unused plugins; append &#96;!&#96; to auto-approve removal</span><br><span class="line">&quot;</span><br><span class="line">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class="line">&quot; Put your non-Plugin stuff after this line</span><br><span class="line">&quot;</span><br><span class="line">&quot; Install Plugins:</span><br><span class="line">&quot;</span><br><span class="line">&quot; Launch vim and run :PluginInstall</span><br><span class="line">&quot; To install from command line: vim +PluginInstall +qall</span><br><span class="line"></span><br><span class="line">&quot; &lt;CR&gt;回车 &lt;C&gt;Ctrl &lt;M&gt;Alt &lt;S&gt;Shift &lt;ESC&gt; &lt;TAB&gt; &lt;LEADER&gt;转义符号\\ &lt;BAR&gt;管道符号|</span><br><span class="line"></span><br><span class="line">&quot; NerdTree</span><br><span class="line">let NERDTreeIgnore&#x3D;[&#39;\.pyc$&#39;, &#39;\~$&#39;] &quot;ignore files in NERDTree</span><br><span class="line">let NERDTreeWinPos&#x3D;&#39;right&#39;</span><br><span class="line">let NERDTreeWinSize&#x3D;30</span><br><span class="line">let NERDTreeChDirMode&#x3D;1</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">&quot; 当只有nerdtree时, 自动关闭vim</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) &#x3D;&#x3D; 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>wps</title>
    <url>/posts/uncategorized/48ccfeb7/</url>
    <content><![CDATA[<h1 id="系统缺失字体">1.  系统缺失字体</h1>
<p>linux上第一次安装会提示 <code>系统缺失字体: symbol, wingdings, wingdings 2, wingdings 3, Webdings, MT Extra...</code></p>
<p>可以先试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ttf-mscorefonts-installer</span><br></pre></td></tr></table></figure>
<p>可在一下地址下载字体:</p>
<p><a href="http://www.8dlive.com/post/179.html" target="_blank" rel="noopener">http://www.8dlive.com/post/179.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制字体</span></span><br><span class="line">sudo cp * /usr/share/fonts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成索引</span></span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新字体缓存</span></span><br><span class="line">sudo <span class="built_in">fc</span>-cache</span><br></pre></td></tr></table></figure>
<p>之后重新打开wps即可</p>
<h1 id="resources">2.  Resources</h1>
<ul>
<li>
<a href="http://linux.wps.cn/" title target>WPS For Linux</a>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mysql-cmd-ddl</title>
    <url>/posts/uncategorized/63b2941a/</url>
    <content><![CDATA[<p>DDL, Data Definition Language, 数据定义语言<br>
用于对数据库中的表, 视图的操作</p>
<ul>
<li>Create</li>
<li>Drop</li>
<li>Alter</li>
</ul>
<h1 id="查看表结构">1.  查看表结构</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> $table_name;</span><br><span class="line">desc $table_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> <span class="keyword">columns</span> <span class="keyword">from</span> $table_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> $table_name;</span><br></pre></td></tr></table></figure>
<h1 id="查看表大小">2.  查看表大小</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'$table_name'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> vcash <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'$table_name'</span>;</span><br><span class="line"><span class="keyword">select</span> table_name, data_length, <span class="keyword">rows</span> <span class="keyword">from</span> information_schema.<span class="string">`tables`</span> <span class="keyword">where</span> table_name=<span class="string">'$table_name'</span>;</span><br></pre></td></tr></table></figure>
<h1 id="添加库">3.  添加库</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> $database_name <span class="keyword">default</span> <span class="keyword">charset</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h1 id="删除列">4.  删除列</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">drop</span> $column_name;</span><br></pre></td></tr></table></figure>
<h1 id="增加列">5.  增加列</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">add</span> $column_name <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> $<span class="keyword">comment</span>;</span><br></pre></td></tr></table></figure>
<h1 id="增加列-2">6.  增加列</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">add</span> $column_name <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">comment</span> $<span class="keyword">comment</span>;</span><br></pre></td></tr></table></figure>
<h1 id="修改列的类型信息">7.  修改列的类型信息</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">change</span> $column_name $new_column_name <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> $<span class="keyword">comment</span>;</span><br></pre></td></tr></table></figure>
<h1 id="重命名表">8.  重命名表</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">rename</span> $new_table_name;</span><br></pre></td></tr></table></figure>
<h1 id="删除表中主键">9.  删除表中主键</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>
<h1 id="添加主键">10.  添加主键</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">add</span> <span class="keyword">constraint</span> $pk_name primary <span class="keyword">key</span> (resid, resfromid);</span><br></pre></td></tr></table></figure>
<h1 id="添加索引">11.  添加索引</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">add</span> <span class="keyword">index</span> $idx_name ($column_name);</span><br></pre></td></tr></table></figure>
<h1 id="添加唯一限制条件索引">12.  添加唯一限制条件索引</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">add</span> <span class="keyword">unique</span> $uk_name($column_name);</span><br></pre></td></tr></table></figure>
<h1 id="删除索引">13.  删除索引</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name <span class="keyword">drop</span> <span class="keyword">index</span> $idx_name;</span><br></pre></td></tr></table></figure>
<h1 id="修改-auto_increment">14.  修改 auto_increment</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> $table_name auto_increment=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h1 id="改变字段顺序">15.  改变字段顺序</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> auto_increment <span class="keyword">first</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">after</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>
<h1 id="创建表">16.  创建表</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) auto_increment,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">8</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'加盐'</span>,</span><br><span class="line">    <span class="string">`gender`</span> <span class="built_in">tinyint</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'性别 1:男 2:女'</span>,</span><br><span class="line">    <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_time`</span> datetime <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`disable`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span> <span class="keyword">comment</span> <span class="string">'记录是否失效 0:否, 1:是'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> = utf8;</span><br></pre></td></tr></table></figure>
<h1 id="修改字符集">17.  修改字符集</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> @<span class="keyword">database</span> <span class="keyword">like</span> <span class="string">'@table'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> @<span class="keyword">database</span> <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> @<span class="keyword">table</span> <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> @<span class="keyword">table</span> <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>
<h1 id="查看有哪些自定义的函数">18.  查看有哪些自定义的函数</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SPECIFIC_NAME <span class="keyword">from</span> ROUTINES <span class="keyword">where</span> ROUTINE_TYPE = <span class="string">'FUNCTION'</span> <span class="keyword">and</span> DEFINER = <span class="string">'root@%'</span> ;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql-cmd-dml</title>
    <url>/posts/uncategorized/b2702f53/</url>
    <content><![CDATA[<p>DML, Data Manipulation Language, 数据操作语言<br>
用于对数据的操作</p>
<ul>
<li>Insert</li>
<li>Delete</li>
<li>Update</li>
<li>Select</li>
</ul>
<h1 id="算时间差">1.  算时间差</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">timestampdiff</span>(<span class="keyword">second</span>, <span class="keyword">now</span>(), <span class="string">'2011-01-27 15:52:11'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="横向排列">2.  横向排列</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">date_format</span>(idi.<span class="string">`callin_time`</span>, <span class="string">'%y-%m-%d'</span>) <span class="keyword">as</span> <span class="string">`day`</span>,</span><br><span class="line"><span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">`total`</span>,</span><br><span class="line"><span class="keyword">coalesce</span>(<span class="keyword">sum</span>((<span class="keyword">case</span> idi.<span class="string">`ivr_selectedoption`</span> <span class="keyword">when</span> <span class="string">'1'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)), <span class="number">0</span>) <span class="keyword">as</span> <span class="string">`line1`</span>,</span><br><span class="line"><span class="keyword">coalesce</span>(<span class="keyword">sum</span>((<span class="keyword">case</span> idi.<span class="string">`ivr_selectedoption`</span> <span class="keyword">when</span> <span class="string">'2'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)), <span class="number">0</span>) <span class="keyword">as</span> <span class="string">`line2`</span>,</span><br><span class="line"><span class="keyword">coalesce</span>(<span class="keyword">sum</span>((<span class="keyword">case</span> idi.<span class="string">`ivr_selectedoption`</span> <span class="keyword">when</span> <span class="string">'3'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)), <span class="number">0</span>) <span class="keyword">as</span> <span class="string">`line3`</span>,</span><br><span class="line"><span class="keyword">coalesce</span>(<span class="keyword">sum</span>((<span class="keyword">case</span> idi.<span class="string">`ivr_selectedoption`</span> <span class="keyword">when</span> <span class="string">'4'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)), <span class="number">0</span>) <span class="keyword">as</span> <span class="string">`line4`</span></span><br><span class="line"><span class="keyword">from</span> vcc.<span class="string">`tcc_ivrdetailinfo`</span> idi</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> idi.<span class="string">`callin_time`</span> <span class="keyword">between</span> <span class="string">'2015-1-1'</span> <span class="keyword">and</span> <span class="string">'2015-1-29'</span></span><br><span class="line"><span class="keyword">and</span> idi.<span class="string">`ivr_selectedoption`</span> != <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">date_format</span>(idi.<span class="string">`callin_time`</span>, <span class="string">'%y-%m-%d'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="join">3.  join</h1>
<p>假如 A 表 join B 表</p>
<ul>
<li>inner join<br>
A B 交集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br></pre></td></tr></table></figure>
<ul>
<li>full outer join<br>
A B 并集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br></pre></td></tr></table></figure>
<ul>
<li>left outer join<br>
产生表 A 的完全集, 而 B 表中匹配的则有值, 没匹配的以 null 值取代.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br></pre></td></tr></table></figure>
<ul>
<li>left outer join on where<br>
产生在 A 表中有而在 B 表中没有的集合.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br><span class="line"><span class="keyword">where</span> b.name <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>right outer join<br>
产生表 B 的完全集, 而 A 表中匹配的则有值, 没匹配的以null值取代.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br></pre></td></tr></table></figure>
<ul>
<li>right outer join on where<br>
产生在 B 表中有而在 A 表中没有的集合.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br><span class="line"><span class="keyword">where</span> a.name <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>full outer join on where<br>
产生 ( A 表中有但 B 表没有) 和 ( B 表中有但 A 表中没有) 的数据集.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a </span><br><span class="line"><span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> b </span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br><span class="line"><span class="keyword">where</span> a.name <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">or</span> b.name <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>cross join<br>
交差集, A * B, 性能较差, 不建议使用</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>延迟关联</title>
    <url>/posts/uncategorized/815a7aeb/</url>
    <content><![CDATA[<p>延迟关联, 通过优先使用索引定位数据范围, 之后再关联完整数据的方式, 加快查询<br>
通常用来优化分页查询</p>
<p>如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &lt;cols&gt; <span class="keyword">from</span> <span class="keyword">profiles</span> <span class="keyword">where</span> sex = <span class="string">'M'</span> <span class="keyword">order</span> rating <span class="keyword">limit</span> <span class="number">100000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>随着偏移量的增加, MySQL 需要花费大量的时间来扫描需要丢弃的数据.<br>
通过延迟关联的思想可优化为:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &lt;cols&gt; <span class="keyword">from</span> <span class="keyword">profiles</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span> &lt;primary <span class="keyword">key</span> cols&gt; <span class="keyword">from</span> <span class="keyword">profiles</span></span><br><span class="line">    <span class="keyword">where</span> sex = <span class="string">'M'</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">limit</span> <span class="number">100000</span>, <span class="number">10</span></span><br><span class="line">) <span class="keyword">as</span> x <span class="keyword">using</span>(primary <span class="keyword">key</span> cols)</span><br></pre></td></tr></table></figure>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://www.cnblogs.com/wang-meng/p/ae6d1c4a7b553e9a5c8f46b67fb3e3aa.html" target="_blank" rel="noopener">https://www.cnblogs.com/wang-meng/p/ae6d1c4a7b553e9a5c8f46b67fb3e3aa.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mysql-cmd-dcl</title>
    <url>/posts/uncategorized/2cf302dd/</url>
    <content><![CDATA[<p>DCL, Data Control Language, 数据控制语言<br>
用于控制数据权限</p>
<ul>
<li>Grant</li>
<li>Revoke</li>
</ul>
<h1 id="创建新用户">1.  创建新用户</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'raven'</span>@localhost <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'raven'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
<h1 id="修改用户">2.  修改用户</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'root'</span> <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="keyword">NEVER</span>; <span class="comment">#修改加密规则</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'password'</span>; <span class="comment">#更新一下用户的密码</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'password'</span>; <span class="comment">#更新一下用户的密码</span></span><br></pre></td></tr></table></figure>
<p>或者使用 mysqladmin:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password new-password</span><br></pre></td></tr></table></figure>
<h1 id="查看支持的引擎">3.  查看支持的引擎</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engine</span>;</span><br></pre></td></tr></table></figure>
<h1 id="查看-mysql-参数">4.  查看 MySQL 参数</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 是否支持分区</span></span><br><span class="line"><span class="comment">-- have_partintioning 的值为YES, 表示支持分区. </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%partition%'</span>;</span><br><span class="line"><span class="comment">-- 查看最大连接数</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%max_connections%'</span>;</span><br><span class="line"><span class="comment">-- 查看字符集</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'collation_%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character_set_%'</span>;</span><br><span class="line"><span class="comment">--  查看缓存信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%cache%'</span>;</span><br><span class="line"><span class="comment">-- 清除缓存</span></span><br><span class="line"><span class="keyword">reset</span> <span class="keyword">query</span> <span class="keyword">cache</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看状态变量</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- com_select: 查询次数</span></span><br><span class="line"><span class="comment">-- com_insert: 插入次数</span></span><br><span class="line"><span class="comment">-- com_update: 更新次数</span></span><br><span class="line"><span class="comment">-- com_delete: 删除次数</span></span><br><span class="line"><span class="comment">-- connections: 登录次数</span></span><br><span class="line"><span class="comment">-- uptime: 运行时长</span></span><br><span class="line"><span class="comment">-- slow_queries: 慢查询次数 </span></span><br><span class="line"><span class="comment">-- handler_read%: 索引使用情况. handler_read_key: 这个值越高越好, 越高表示使用索引查询到的次数. handler_read_rnd_next: 这个值越高, 说明查询低效.</span></span><br><span class="line"><span class="comment">-- Created_tmp%: 统计临时文件和表</span></span><br><span class="line"><span class="comment">-- Handler_%: 统计句柄操作</span></span><br><span class="line"><span class="comment">-- Key_%: 统计键缓存</span></span><br><span class="line"><span class="comment">-- Qcache_%: 检查查询缓存</span></span><br><span class="line"><span class="comment">-- Select_%: 统计各种查询计划</span></span><br><span class="line"><span class="comment">-- Sort_%: 统计各种排序</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Created_tmp%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看事务隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- @isolation_level 可以是 read uncommitted | read committed | repeatable read | serializable</span></span><br><span class="line"><span class="comment">-- 设置当前回话的事务隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> @isolation_level;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置全局事务隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span>;</span><br></pre></td></tr></table></figure>
<h1 id="查看连接列表">5.  查看连接列表</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span>;</span><br><span class="line"><span class="comment">-- 通过 kill pid 杀死连接</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -e <span class="string">'show processlist\G'</span> | grep <span class="string">'State:'</span> | sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure>
<h1 id="explain">6.  explain</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="comment">-- 查询要用到的分区</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">partitions</span> @<span class="keyword">sql</span>;</span><br></pre></td></tr></table></figure>
<h1 id="查看表状态">7.  查看表状态</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表状态</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'table_name'</span></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">session</span>|<span class="keyword">global</span>] <span class="keyword">status</span> <span class="keyword">like</span> @status_name;</span><br></pre></td></tr></table></figure>
<h1 id="查看实时-sql-记录">8.  查看实时 sql 记录</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 日志开启</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">'ON'</span>;</span><br><span class="line"><span class="comment">-- 日志关闭  </span></span><br><span class="line"><span class="comment">-- set global general_log = 'OFF';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将查询输出到文件中</span></span><br><span class="line"><span class="comment">-- 这个文件会随着访问的增加而不断变大, 所以生产环境建议临时开启, 用完及时关闭. </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file = <span class="string">'/var/log/mysql/general_log.log'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将查询输出到表中</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output = <span class="string">'TABLE'</span>;</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.general_log <span class="keyword">order</span> <span class="keyword">by</span> event_time <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用完后关闭日志</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">'OFF'</span>;</span><br><span class="line"><span class="comment">-- 清空表 (delete 对于这个表, 不允许使用, 只能用 truncate) </span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> mysql.general_log;</span><br></pre></td></tr></table></figure>
<h1 id="查看慢查询">9.  查看慢查询</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看慢查询是否开始, 存储文件位置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'slow_query%'</span>;</span><br><span class="line"><span class="comment">-- 查询超过多少秒才记录</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'long_query_time'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启慢查询</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="string">'ON'</span>; </span><br><span class="line"><span class="comment">-- 设置慢查询时间, 默认为 10 秒</span></span><br><span class="line"><span class="keyword">set</span> long_query_time = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试慢查询, 之后可以在慢查询日志文件中找到</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h1 id="分析-sql-执行时间">10.  分析 SQL 执行时间</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'PROFILING'</span>;</span><br><span class="line"><span class="keyword">set</span> profiling =<span class="string">'ON'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;</span><br><span class="line"><span class="keyword">set</span> profiling =<span class="string">'OFF'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @query_id=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    state,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">duration</span>) <span class="keyword">as</span> total_r,</span><br><span class="line">    <span class="keyword">ROUND</span>(</span><br><span class="line">        <span class="number">100</span> * <span class="keyword">sum</span>(<span class="keyword">duration</span>) / (</span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">duration</span>)</span><br><span class="line">            <span class="keyword">from</span> information_schema.profiling</span><br><span class="line">            <span class="keyword">where</span> query_id = @quer_id</span><br><span class="line">        ), <span class="number">2</span></span><br><span class="line">    ) <span class="keyword">as</span> pct_r,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> calls,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">duration</span>) / <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">"r/call"</span></span><br><span class="line"><span class="keyword">from</span> information_schema.profiling</span><br><span class="line"><span class="keyword">where</span> query_id = @query_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> state</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total_r <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h1 id="表结构优化建议">11.  表结构优化建议</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会给出每一列的优化建议.</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">procedure</span> analyse();</span><br></pre></td></tr></table></figure>
<h1 id="定期回收闲置的数据库空间">12.  定期回收闲置的数据库空间</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">optimize</span> <span class="keyword">table</span> table_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">engine</span> = <span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">force</span>;</span><br></pre></td></tr></table></figure>
<h1 id="导入文件">13.  导入文件</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source /file/to/source.sql</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql &lt; /file/to/source.sql</span><br></pre></td></tr></table></figure>
<h1 id="导出">14.  导出</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出查询结果</span></span><br><span class="line"><span class="comment"># -N 不显示列名</span></span><br><span class="line"><span class="comment"># -e 后跟要执行的sql</span></span><br><span class="line">mysql -N -e <span class="string">"select * from dual"</span> &gt; /file/to/result.txt</span><br><span class="line"></span><br><span class="line">mysqldump <span class="variable">$database</span> <span class="variable">$table_name</span> &gt; /file/to/dump.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 没有数据</span></span><br><span class="line"><span class="comment"># --add-drop-table 在每个create语句之前增加一个drop table</span></span><br><span class="line"><span class="comment"># --skip-lock-tables 导出时不锁表</span></span><br><span class="line">mysqldump -d --add-drop-table <span class="variable">$database</span> <span class="variable">$table_name</span> &gt; /file/to/dump.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 导出insert语句</span></span><br><span class="line"><span class="comment"># -t 没有表结构</span></span><br><span class="line">mysqldump -t -c <span class="variable">$database</span> <span class="variable">$table_name</span> &gt; /file/to/dump.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 没有数据</span></span><br><span class="line"><span class="comment"># -y 不导出任何表空间信息</span></span><br><span class="line"><span class="comment"># --skip-comments 去除注释</span></span><br><span class="line"><span class="comment"># --skip-quote-names 不用 ``` 引起表和列名</span></span><br><span class="line"><span class="comment"># --compress 服务器与客户端压缩传输</span></span><br><span class="line">mysqldump -d -y --skip-comments --skip-quote-names --compress <span class="variable">$database</span> &gt; /file/to/dump.sql</span><br></pre></td></tr></table></figure>
<h1 id="查看-bin-log">15.  查看 bin log</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看 bin log 状态</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'log_%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="comment">-- 查看 bin log 文件名称</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="built_in">binary</span> <span class="keyword">logs</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysql-bin.000004 | tail;</span><br><span class="line">mysqlbinlog mysql-bin.000004 &gt; file.txt</span><br></pre></td></tr></table></figure>
<h1 id="resource">16.  Resource</h1>
<ul>
<li>
<a href="https://blog.csdn.net/haoge7777/article/details/50605552" title target>mysqldump 参数说明</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MySQL 引擎</title>
    <url>/posts/database/32d03f19/</url>
    <content><![CDATA[<p>使用以下命令可以查看MySQL支持的引擎</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engine</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>InnoDB</li>
</ol>
<p>具有提交, 回滚和崩溃恢复能力的事务安全 (ACID兼容) 存储引擎.<br>
基于聚簇索引建立, 聚簇索引对主键查询有很高的性能.<br>
不过它的二级索引(secondary index, 非主键索引)中必须包含主键列, 所以如果主键列很大的话, 其他的所有索引都会很大.<br>
因此表上的索引较多的话, 主键应当尽可能的小.<br>
支持事务和外键.行级锁.<br>
适合在以下几种情况下使用:<br>
1.更新和查询都相当的频繁, 多重并发<br>
2.要求事务, 或者可靠性要求比较高<br>
3.外键约束, MySQL支持外键的存储引擎只有InnoDB<br>
一般来说, 如果需要事务支持, 并且有较高的并发读取频率, InnoDB是不错的选择.</p>
<p>Percona 的 XtraDB 存储引擎是基于 InnoDB 引擎的一个改进版本.<br>
它主要改进集中在性能, 可测量性和操作灵活行方面.</p>
<ol start="2">
<li>MyISAM</li>
</ol>
<p>提供高速存储和检索, 以及全文搜索能力.<br>
不支持事务.表级锁.不能在表损坏后安全恢复数据.<br>
适合只读数据, 或者表比较小, 可以忍受修复操作的情况.</p>
<p>适合在以下几种情况下使用:<br>
1.做很多count的计算<br>
2.查询非常频繁</p>
<ol start="3">
<li>Memory (Heap)</li>
</ol>
<p>数据保存在内存中, 拥有极高的插入, 更新和查询效率.但是不稳定, 重启以后数据都会丢失.<br>
不支持事务.支持表级锁, 因此并发写入的性能较低.<br>
支持长度不变的数据类型, 不支持BLOB或TEXT长度可变的数据类型. VARCHAR是一种长度可变的类型, 但因为它在MySQL内部当做长度固定不变的CHAR类型, 所以可以使用.<br>
每个表会生成一个.frm文件, 该文件只存储表的结构.<br>
支持HASH索引和B-Tree索引, 擎默认使用HASH索引.<br>
在内存中存放数据, 所以会造成内存的使用, 可以通过参数max_heap_table_size控制MEMORY表的大小.</p>
<ol start="4">
<li>Archive</li>
</ol>
<p>拥有很好的压缩机制, 它使用zlib压缩库, 在记录被请求时会实时压缩.<br>
支持最基本的插入和查询两种功能.在MySQL 5.5开始支持索引.<br>
不支持事务.支持行级锁和专用的缓存区, 所以可以实现高并发的插入.<br>
适合存储大量日志, 历史数据.</p>
<ol start="5">
<li>Blackhole</li>
</ol>
<p>接受但不存储数据, 但是如果MySQL启用了二进制日志, SQL语句被写入日志 (并被复制到从服务器) .<br>
用于做日志记录或同步归档的中继存储.但这种应用方式会碰到很多问题, 因此并不推荐.<br>
支持事务, 而且支持mvcc的行级锁.</p>
<ol start="6">
<li>CSV</li>
</ol>
<p>每个表会生成一个.CSV文件, 将CSV类型的文件当做表进行处理.<br>
把数据以逗号分隔的格式存储在文本文件中, 这种文件是一种普通文本文件, 每个数据行占用一个文本行.<br>
不支持索引, 即使用该种类型的表没有主键列, 也不允许表中的字段为null.</p>
<ol start="7">
<li>NDB Cluster</li>
</ol>
<p>NDB 集群存储引擎<br>
分布式, 自动分片, share-nothing, 容灾, 高可用.</p>
<ol start="8">
<li>Infobright</li>
</ol>
<p>面向列的存储引擎</p>
<ol start="9">
<li>Sphinx</li>
</ol>
<p>高效全文搜索引擎</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-index</title>
    <url>/posts/database/e23a0afa/</url>
    <content><![CDATA[<h1 id="索引类型">1.  索引类型</h1>
<ul>
<li>B+Tree<br>
适合全键值, 键值范围或键前缀查询. 其中键前缀只适合最左前缀查询.</li>
<li>Hash<br>
只支持等值比较查询.<br>
不支持匹配查询, 范围查询, 排序<br>
列的选择性越高, 哈希索引的性能越好; 反之, 列的选择性越低, 哈希索引的性能越差.<br>
只有 Memory 存储引擎支持哈希索引</li>
<li>FULLTEXT 全文索引<br>
仅可用于 MyISAM 和 InnoDB 存储引擎</li>
</ul>
<h1 id="索引的使用">2.  索引的使用</h1>
<ul>
<li>聚簇索引</li>
<li>覆盖索引</li>
<li>联合索引<br>
两个或更多个列上的索引</li>
</ul>
<h1 id="索引的特点">3.  索引的特点</h1>
<h2 id="优点">3.1.  优点</h2>
<ul>
<li>大大减少服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机I/O变为顺序I/O</li>
</ul>
<h2 id="缺点">3.2.  缺点</h2>
<ul>
<li>索引本身也是表, 因此会占用存储空间</li>
<li>数据表做增删改操作时, 需要同时维护索引表</li>
</ul>
<h1 id="索引的使用-2">4.  索引的使用</h1>
<p>// TODO 待验证整理</p>
<h2 id="什么时候使用索引">4.1.  什么时候使用索引?</h2>
<ul>
<li>经常作为查询条件的列要建立索引</li>
<li>用作排序的列要建立索引</li>
<li>与其他表关联的字段, 外键关系要建立索引</li>
<li>用于聚合函数的列可以建立索引</li>
</ul>
<h2 id="什么时候应不建或少建索引">4.2.  什么时候应不建或少建索引?</h2>
<ul>
<li>经常增删改的列不要建立索引</li>
<li>选择性低的列不建立索引</li>
<li>表记录太少</li>
</ul>
<h2 id="索引失效的情况">4.3.  索引失效的情况</h2>
<ul>
<li>在一个 SELECT 语句中, 索引只能使用一次, 如果在WHERE中使用了, 那么在ORDER BY中就不会失效.</li>
<li>LIKE 操作中, ‘%aaa%’ 不会使用索引, 也就是索引会失效, 但是 ‘aaa%’ 可以使用索引.</li>
<li>在索引的列上使用表达式或者函数会使索引失效</li>
<li>在组合索引中不能有列的值为NULL, 如果有, 那么这一列对组合索引就是无效的.</li>
<li>在查询条件中使用IS NULL或者IS NOT NULL会导致索引失效.</li>
<li>在查询条件中使用不等于, 包括&lt;符号, &gt;符号和！=会导致索引失效. 特别的是如果对主键索引使用！=则不会使索引失效, 如果对主键索引或者整数类型的索引使用&lt;符号或者&gt;符号不会使索引失效.  (经erwkjrfhjwkdb同学提醒, 不等于, 包括&lt;符号, &gt;符号和！, 如果占总记录的比例很小的话, 也不会失效)</li>
<li>类型不一致会导致</li>
<li>尽量不要包括多列排序, 如果一定要, 最好为这队列构建组合索引</li>
</ul>
<p>在一个SELECT语句中, 索引只能使用一次, 如果在WHERE中使用了, 那么在ORDER BY中就不要用了.<br>
LIKE操作中, '%aaa%'不会使用索引, 也就是索引会失效, 但是‘aaa%’可以使用索引.<br>
在索引的列上使用表达式或者函数会使索引失效, 例如: select * from users where YEAR(adddate)&lt;2007, 将在每个行上进行运算, 这将导致索引失效而进行全表扫描, 因此我们可以改成: select * from users where adddate&lt;’2007-01-01′. 其它通配符同样, 也就是说, 在查询条件中使用正则表达式时, 只有在搜索模板的第一个字符不是通配符的情况下才能使用索引.<br>
在查询条件中使用不等于, 包括&lt;符号, &gt;符号和！=会导致索引失效. 特别的是如果对主键索引使用！=则不会使索引失效, 如果对主键索引或者整数类型的索引使用&lt;符号或者&gt;符号不会使索引失效.  (经erwkjrfhjwkdb同学提醒, 不等于, 包括&lt;符号, &gt;符号和！, 如果占总记录的比例很小的话, 也不会失效)<br>
在查询条件中使用IS NULL或者IS NOT NULL会导致索引失效.<br>
字符串不加单引号会导致索引失效. 更准确的说是类型不一致会导致失效, 比如字段email是字符串类型的, 使用WHERE email=99999 则会导致失败, 应该改为WHERE email=‘99999’.<br>
在查询条件中使用OR连接多个条件会导致索引失效, 除非OR链接的每个条件都加上索引, 这时应该改为两次查询, 然后用UNION ALL连接起来.<br>
如果排序的字段使用了索引, 那么select的字段也要是索引字段, 否则索引失效. 特别的是如果排序的是主键索引则select * 也不会导致索引失效.<br>
尽量不要包括多列排序, 如果一定要, 最好为这队列构建组合索引;</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql-index</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-faq</title>
    <url>/posts/database/fce0ad45/</url>
    <content><![CDATA[<h3 id="主键自增-并按特定格式的">0.0.1.  主键自增, 并按特定格式的</h3>
<p>主键不支持varchar自增, 所以需要拼接英文字符串的只能在程序里控制.</p>
<p>假如主键仍是数字, 比如需要一个定长4为的ID, 可以使用以下方式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;auto&#96; (                                     </span><br><span class="line"> &#96;id&#96; int(4) unsigned zerofill NOT NULL auto_increment,</span><br><span class="line"> PRIMARY KEY  (&#96;id&#96;)                                     </span><br><span class="line">) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into auto select NULL;</span><br></pre></td></tr></table></figure>
<p>主键步长和偏移量可以根据需要更改.</p>
<h1 id="innodb-下为什么用自增列作为主键">1.  InnoDb 下为什么用自增列作为主键</h1>
<p>InnoDB 无法自定义选择哪一列作为聚簇索引, 而是默认选择主键作为聚簇索引.<br>
如果表中没有定义了主键, 则会选择没有 NULL 值的唯一索引在作为聚簇索引; 如果没有符合条件的唯一索引, 则会选择内置的 6 字节长度的 ROWID 作为聚簇索引. ROWID 是随行写入而逐渐递增的.</p>
<p>在聚簇索引中, 数据记录存放在主索引 (B+Tree) 的叶子节点上. 所有叶子节点会根据 KEY 值按顺序存放.</p>
<p>更新聚簇索引可能面临 <code>页分裂</code> 的问题.<br>
如果主键非自增, 当插入新的记录时, 加入新记录的 KEY 需要插入某个已满的页中, 存储引擎就会将该页分裂成两个页面来容纳这条记录.<br>
如果更新主键列, 存储引擎就需要将该行移动到新的位置, 同样可能面临这个问题.<br>
这就会导致磁盘碎片的产生.<br>
可以使用 <code>OPTIMIZE TABLE</code> 命令重新组织表结构.</p>
<p>那么如果是自增主键, 则每次插入新的记录时, 就可以顺序添加到当前索引节点的后续位置. 所以按主键顺序插入是加载数据到 InnoDB 表中速度最快的方式.<br>
至少保证了插入的速度. 而一般不会有更新主键的情况, 最多出现更新唯一索引的情况.</p>
<h1 id="既然-varchar-是可变长度的-那么只有存得下内容-如-hello-那-varchar5-比-varchar500-好在哪里">2.  既然 varchar 是可变长度的, 那么只有存得下内容, 如 ‘hello’ , 那 varchar(5) 比 varchar(500) 好在哪里?</h1>
<p>由于 varchar 是可变长度的, 那他们的存储开销是一样的<br>
但是在内存的中消耗不一样, 随之带来的是排序与操作时的消耗更大.</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>faq</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/posts/database/9520183a/</url>
    <content><![CDATA[<h1 id="索引">1.  索引</h1>
<ol>
<li>BTree</li>
</ol>
<p>B-Tree是最常见的索引类型, 所有值(被索引的列)都是排过序的, 每个叶节点到跟节点距离相等.<br>
所以B-Tree适合用来查找某一范围内的数据, 而且可以直接支持数据排序(ORDER BY)<br>
B-Tree在MyISAM里的形式和Innodb稍有不同:<br>
MyISAM表数据文件和索引文件是分离的, 索引文件仅保存数据记录的磁盘地址<br>
InnoDB表数据文件本身就是主索引, 叶节点data域保存了完整的数据记录</p>
<ol start="2">
<li>Hash</li>
</ol>
<p>1.仅支持&quot;=&quot;,“IN&quot;和”&lt;=&gt;&quot;精确查询, 不能使用范围查询:<br>
由于Hash索引比较的是进行Hash运算之后的Hash值, 所以它只能用于等值的过滤, 不能用于基于范围的过滤, 因为经过相应的Hash算法处理之后的Hash<br>
2.不支持排序:<br>
由于Hash索引中存放的是经过Hash计算之后的Hash值, 而且Hash值的大小关系并不一定和Hash运算前的键值完全一样, 所以数据库无法利用索引的数据来避免任何排序运算<br>
3.在任何时候都不能避免表扫描:<br>
由于Hash索引比较的是进行Hash运算之后的Hash值, 所以即使取满足某个Hash键值的数据的记录条数, 也无法从Hash索引中直接完成查询, 还是要通过访问表中的实际数据进行相应的比较, 并得到相应的结果<br>
4.检索效率高, 索引的检索可以一次定位, 不像B-Tree索引需要从根节点到枝节点, 最后才能访问到页节点这样多次的IO访问, 所以Hash索引的查询效率要远高于B-Tree索引<br>
5.只有Memory引擎支持显式的Hash索引, 但是它的Hash是nonunique的, 冲突太多时也会影响查找性能.<br>
Memory引擎默认的索引类型即是Hash索引, 虽然它也支持B-Tree索引</p>
<ol start="3">
<li>FullText</li>
</ol>
<p>即为全文索引, 目前只有MyISAM引擎支持.<br>
其可以在CREATE TABLE , ALTER TABLE , CREATE INDEX 使用, 不过目前只有 CHAR, VARCHAR , TEXT 列上可以创建全文索引.<br>
值得一提的是, 在数据量较大时候, 现将数据放入一个没有全局索引的表中, 然后再用CREATE INDEX创建FULLTEXT索引, 要比先为一张表建立FULLTEXT然后再将数据写入的速度快很多.</p>
<p>全文索引并不是和MyISAM一起诞生的, 它的出现是为了解决WHERE name LIKE  *%word%&quot;这类针对文本的模糊查询效率较低的问题.<br>
在没有全文索引之前, 这样一个查询语句是要进行遍历数据表操作的, 可见, 在数据量较大时是极其的耗时的, 如果没有异步IO处理, 进程将被挟持, 很浪费时间</p>
<ol start="4">
<li>RTree</li>
</ol>
<p>R-Tree在MySQL很少使用, 仅支持geometry数据类型, 支持该类型的存储引擎只有MyISAM, BDb, InnoDb, NDb, Archive几种.</p>
<h1 id="todo">2.  Todo</h1>
<h3 id="逻辑架构">2.0.1.  逻辑架构</h3>
<h3 id="问题">2.0.2.  问题</h3>
<h5 id="锁">2.0.2.0.1.  锁</h5>
<h5 id="优化">2.0.2.0.2.  优化</h5>
<h5 id="分表分库对查询的影响">2.0.2.0.3.  分表分库对查询的影响</h5>
<h5 id="inner-left-right-join的区别">2.0.2.0.4.  inner, left, right join的区别</h5>
<p>SQL查询慢 如何处理?</p>
<ul>
<li>表结构有问题<br>
表字段太多, 有很多不太常用的字段, 可以按字段冷热分表<br>
没有建立索引</li>
<li>SQL需要优化<br>
SQL没有用到索引, 使用describe检查<br>
SQL太复杂, 裁剪成多个小查询</li>
<li>排它锁更新数据, 导致查询变慢</li>
<li>数据量太大<br>
分表分库<br>
读写分离</li>
<li>服务器问题<br>
并发连接数过低<br>
云数据库访问慢<br>
内存, CPU等不足</li>
</ul>
<h1 id="常见问题">3.  常见问题</h1>
<h2 id="error-2059-authentication-plugin-caching_sha2_password-cannot-be-loaded">3.1.  error 2059: Authentication plugin ‘caching_sha2_password’ cannot be loaded</h2>
<p>mysql-8 的验证方式变了, 改为了 <code>caching_sha2_password</code><br>
如果不修改配置 会出现这个错误</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-lock</title>
    <url>/posts/database/13ffbf52/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'table%'</span>;</span><br></pre></td></tr></table></figure>
<p>MySQL各存储引擎使用了三种类型 (级别) 的锁定机制: 表级锁定, 行级锁定和页级锁定.<br>
1.表级锁定 (table-level)<br>
表级别的锁定是MySQL各存储引擎中最大颗粒度的锁定机制.该锁定机制最大的特点是实现逻辑非常简单, 带来的系统负面影响最小.所以获取锁和释放锁的速度很快.由于表级锁一次会将整个表锁定, 所以可以很好的避免困扰我们的死锁问题.<br>
当然, 锁定颗粒度大所带来最大的负面影响就是出现锁定资源争用的概率也会最高, 致使并大度大打折扣.<br>
使用表级锁定的主要是MyISAM, MEMORY, CSV等一些非事务性存储引擎.<br>
2.行级锁定 (row-level)<br>
行级锁定最大的特点就是锁定对象的颗粒度很小, 也是目前各大数据库管理软件所实现的锁定颗粒度最小的.由于锁定颗粒度很小, 所以发生锁定资源争用的概率也最小, 能够给予应用程序尽可能大的并发处理能力而提高一些需要高并发应用系统的整体性能.<br>
虽然能够在并发处理能力上面有较大的优势, 但是行级锁定也因此带来了不少弊端.由于锁定资源的颗粒度很小, 所以每次获取锁和释放锁需要做的事情也更多, 带来的消耗自然也就更大了.此外, 行级锁定也最容易发生死锁.<br>
使用行级锁定的主要是InnoDB存储引擎.<br>
3.页级锁定 (page-level)<br>
页级锁定是MySQL中比较独特的一种锁定级别, 在其他数据库管理软件中也并不是太常见.页级锁定的特点是锁定颗粒度介于行级锁定与表级锁之间, 所以获取锁定所需要的资源开销, 以及所能提供的并发处理能力也同样是介于上面二者之间.另外, 页级锁定和行级锁定一样, 会发生死锁.<br>
在数据库实现资源锁定的过程中, 随着锁定资源颗粒度的减小, 锁定相同数据量的数据所需要消耗的内存数量是越来越多的, 实现算法也会越来越复杂.不过, 随着锁定资源颗粒度的减小, 应用程序的访问请求遇到锁等待的可能性也会随之降低, 系统整体并发度也随之提升.</p>
<p>读锁: 也叫共享锁, S锁, 若事务T对数据对象A加上S锁, 则事务T可以读A但不能修改A, 其他事务只能再对A加S锁, 而不能加X锁, 直到T释放A上的S 锁.这保证了其他事务可以读A, 但在T释放A上的S锁之前不能对A做任何修改.</p>
<p>写锁: 又称排他锁, X锁.若事务T对数据对象A加上X锁, 事务T可以读A也可以修改A, 其他事务不能再对A加任何锁, 直到T释放A上的锁.这保证了其他事务在T释放A上的锁之前不能再读取和修改A.</p>
<p>表锁: 操作对象是数据表.Mysql大多数锁策略都支持(常见mysql innodb), 是系统开销最低但并发性最低的一个锁策略.事务t对整个表加读锁, 则其他事务可读不可写, 若加写锁, 则其他事务增删改都不行.</p>
<p>行级锁: 操作对象是数据表中的一行.是MVCC技术用的比较多的, 但在MYISAM用不了, 行级锁用mysql的储存引擎实现而不是mysql服务器.但行级锁对系统开销较大, 处理高并发较好.</p>
<p>Innodb中基本锁有以下4种:<br>
行级锁<br>
1). 共享锁(S Lock) :  允许事务读一行数据<br>
2). 排它锁(X Lock) :  允许事务删除或更新一行数据<br>
表级锁<br>
3). 意向共享锁(IS Lock): 事务想要获得一张表中某几行的共享锁<br>
4). 意向排它锁(IX Lock): 事务想要获得一张表中某几行的排它锁<br>
由于Innodb引擎支持的均为行锁, 所以意向锁其实不会阻塞除全表扫描之外的任何请求</p>
<p>Innodb中行锁有三种基本的算法:<br>
1). record lock : 单个行记录上的锁<br>
2). gap lock: 锁定一个范围, 但不包含记录本身<br>
3). next-key lock : record lock + gap lock锁定一个范围, 并且锁定记录本身.避免幻读</p>
<h1 id="并发控制">1.  并发控制</h1>
<h2 id="读写锁">1.1.  读写锁</h2>
<p>在处理并发读写时, 可以通过实现一个由 2 种类型组成的锁系统来解决问题.</p>
<ul>
<li>读锁<br>
也称 共享锁.<br>
读锁是共享的, 也就是说相互不阻塞的.<br>
多个客户端在同一时刻可以同时读取同一个资源, 而互不干扰.</li>
<li>写锁<br>
也称 排它锁.<br>
写锁是排他的, 也就是说一个写锁会阻塞其他的写锁和读锁.<br>
只有这样, 才能确保在给定的时间内, 只有一个用户能执行写入, 并防止其他用户读取正在写入的同一资源.</li>
</ul>
<h2 id="锁粒度">1.2.  锁粒度</h2>
<ul>
<li>表锁</li>
<li>行级锁</li>
</ul>
<h2 id="死锁">1.3.  死锁</h2>
<p>死锁是指两个或多个事务在统一资源上相互占用, 并请求锁定对方占用的资源, 从而导致恶性循环的现象.<br>
当多个事务试图以不同的顺序锁定资源时, 就可能产生死锁.<br>
多个事务同时锁定同一个资源时, 也会产生死锁.</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 事务1</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE StockPrice SET close &#x3D; 45.50 WHERE  stock_id &#x3D; 4 and date &#x3D; &#39;2002-05-01&#39;;</span><br><span class="line">UPDATE StockPrice SET close &#x3D; 19.80 WHERE  stock_id &#x3D; 3 and date &#x3D; &#39;2002-05-02&#39;;</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 事务2</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE StockPrice SET close &#x3D; 20.12 WHERE  stock_id &#x3D; 3 and date &#x3D; &#39;2002-05-02&#39;;</span><br><span class="line">UPDATE StockPrice SET close &#x3D; 47.20 WHERE  stock_id &#x3D; 4 and date &#x3D; &#39;2002-05-01&#39;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>
<p>如果凑巧, 两个事务都执行了第一条 UPDATE 语句, 更新了一行数据, 同时也锁定了该行数据, 接着每个书屋都尝试去执行第二条 UPDATE 语句, 却发现该行为已经被对方锁定了, 然后两个事务都等待对方释放锁, 同时又持有对方需要的锁, 则陷入死循环. 除非有外部因素介入才可能解除死锁.</p>
<p>为了解决这个问题, <strong>数据库系统实现了各种死锁检测和死锁超时机制</strong>.<br>
越复杂的系统, 比如 InnoDB 存储引擎, 越能检测到死锁的循环依赖, 并立即返回一个错误.<br>
这种解决方式很有效, 否则死锁会导致出现非常慢的查询.</p>
<p>还有一种解决方式就是, <strong>当查询的时间达到锁等待超时的设定后放弃锁请求</strong>.<br>
这种方式通常来说不太好.</p>
<p><strong>InnoDB 目前处理死锁的方式是, 将持有最少行级排他锁的事务回滚 (这是相对比较简单的死锁回滚算法).</strong></p>
<p>锁的行为和顺序是和存储引擎相关的.<br>
以同样的顺序执行语句, 有些存储引擎会产生死锁, 有些则不会.<br>
<strong>死锁产生的有双重原因:有些是因为真正的数据冲突, 这种请求通常很难避免;但有些则完全是由于存储引擎的实现方式导致的.</strong></p>
<p>死锁发生以后, 只有部分或者完全回滚其中一个事务, 才能打破死锁.<br>
对于事务型的系统, 这是无法避免的, <strong>所以应用程序在设计时必须考虑如何处理死锁, 大多数情况下需要重新执行因死锁回滚的事务即可</strong>,</p>
<h2 id="多版本并发控制-mvcc">1.4.  多版本并发控制 MVCC</h2>
<p><a href="https://blog.csdn.net/zx64881926/article/details/75150421" target="_blank" rel="noopener">https://blog.csdn.net/zx64881926/article/details/75150421</a></p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-partition</title>
    <url>/posts/uncategorized/dd62d09/</url>
    <content><![CDATA[<h1 id="mysql支持的分区类型有哪些">1.  MySQL支持的分区类型有哪些？</h1>
<ol>
<li>
<p>RANGE分区:  这种模式允许将数据划分不同范围. 例如可以将一个表通过年份划分成若干个分区</p>
</li>
<li>
<p>LIST分区:  这种模式允许系统通过预定义的列表的值来对数据进行分割. 按照List中的值分区, 与RANGE的区别是, range分区的区间范围值是连续的.</p>
</li>
<li>
<p>HASH分区 : 这中模式允许通过对表的一个或多个列的Hash Key进行计算, 最后通过这个Hash码不同数值对应的数据区域进行分区. 例如可以建立一个对表主键进行分区的表.</p>
</li>
<li>
<p>KEY分区 : 上面Hash模式的一种延伸, 这里的Hash Key是MySQL系统产生的.</p>
</li>
</ol>
<h1 id="表分区有什么好处">2.  表分区有什么好处？</h1>
<ol>
<li>
<p>存储更多数据. 分区表的数据可以分布在不同的物理设备上, 从而高效地利用多个硬件设备. 和单个磁盘或者文件系统相比, 可以存储更多数据</p>
</li>
<li>
<p>优化查询. 在where语句中包含分区条件时, 可以只扫描一个或多个分区表来提高查询效率; 涉及sum和count语句时, 也可以在多个分区上并行处理, 最后汇总结果.</p>
</li>
<li>
<p>分区表更容易维护. 例如: 想批量删除大量数据可以清除整个分区.</p>
</li>
<li>
<p>避免某些特殊的瓶颈, 例如InnoDB的单个索引的互斥访问.</p>
</li>
</ol>
<h1 id="分区表的限制因素">3.  分区表的限制因素</h1>
<ol>
<li>
<p>一个表最多只能有1024个分区</p>
</li>
<li>
<p>MySQL5.1中, 分区表达式必须是整数, 或者返回整数的表达式. 在MySQL5.5中提供了非整数表达式分区的支持.</p>
</li>
<li>
<p>如果分区字段中有主键或者唯一索引的列, 那么多有主键列和唯一索引列都必须包含进来. 即: 分区字段要么不包含主键或者索引列, 要么包含全部主键和索引列.</p>
</li>
<li>
<p>分区表中无法使用外键约束</p>
</li>
<li>
<p>MySQL的分区适用于一个表的所有数据和索引, 不能只对表数据分区而不对索引分区, 也不能只对索引分区而不对表分区, 也不能只对表的一部分数据分区.</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MySQL 性能优化</title>
    <url>/posts/database/a2aedf2f/</url>
    <content><![CDATA[<h1 id="1-table-结构优化">1.  1. Table 结构优化</h1>
<ol>
<li>
<p>表优化<br>
控制单表的长度, 使用 3 大范式拆分表.</p>
</li>
<li>
<p>字段优化</p>
<ol>
<li>选用合适的字段类型, 如整数类型的处理比字符串处理开销更小</li>
<li>选用何时的字段长度, 固定长度的表会更快</li>
<li>尽可能使用not null定义字段</li>
</ol>
</li>
<li>
<p>索引优化<br>
对于索引而言, 字段长度越小越好, 因为数据库的存储单位是页, 一页中能存下的数据越多越好; 字段离散度越大越好.<br>
离散度可以通过 <code>select count(distinct column_name) from table_name</code> 查询. count 值越大, 离散度也越大.</p>
<ol>
<li>对于频繁查询的列建立索引, 频繁查询的列是指出现在 <code>where</code>, <code>group by</code>, <code>order by</code>, <code>on</code> 中的列</li>
</ol>
</li>
<li>
<p>其他</p>
<ol>
<li>对于会有删除操作的大表, 要定期清理存储空间</li>
</ol>
</li>
</ol>
<h1 id="2-crud-sql-优化">2.  2. CRUD SQL 优化</h1>
<ol>
<li>使用连接 (join) 代替子查询</li>
<li>大的查询可以拆分成多个小的查询, 以便利用查询缓存</li>
<li>通过延迟关联优化分页查询<br>
如: <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> film_id, description <span class="keyword">from</span> sakila.film <span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">limit</span> <span class="number">50</span>, <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 可优化成:</span></span><br><span class="line"><span class="keyword">select</span> film.film_id, film.description <span class="keyword">from</span> sakila.film </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> film_id <span class="keyword">from</span> sakila.film <span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">limit</span> <span class="number">50</span>, <span class="number">5</span>) <span class="keyword">as</span> lim <span class="keyword">using</span>(film_id);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3-命令分析">3.  3. 命令分析</h1>
<ol>
<li>查看数据库状态</li>
</ol>
<p>通过类似于 <code>show [session|global] status like @status_name;</code> 命令查询各种状态.<br>
其中 session 是查询当前会话的状态, 默认值; global 是从 MySQL 启动到现在的状态.</p>
<p><code>status_name</code> 有:</p>
<ul>
<li>com_select: 查询次数</li>
<li>com_insert: 插入次数</li>
<li>com_update: 更新次数</li>
<li>com_delete: 删除次数</li>
<li>connections: 登录次数</li>
<li>uptime: 运行时长</li>
<li>slow_queries: 慢查询次数</li>
<li>handler_read%: 索引使用情况. handler_read_key: 这个值越高越好, 越高表示使用索引查询到的次数. handler_read_rnd_next: 这个值越高, 说明查询低效.</li>
</ul>
<ol start="2">
<li>查看数据库参数</li>
</ol>
<p>通过类似于 <code>show variables like @variables_name;</code> 命令查询各种状态.</p>
<ol start="3">
<li>查看 SQL 执行时间</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'PROFILING'</span>;</span><br><span class="line"><span class="keyword">set</span> profiling =<span class="string">'ON'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;</span><br><span class="line"><span class="keyword">set</span> profiling =<span class="string">'OFF'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @query_id=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    state,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">duration</span>) <span class="keyword">as</span> total_r,</span><br><span class="line">    <span class="keyword">ROUND</span>(</span><br><span class="line">        <span class="number">100</span> * <span class="keyword">sum</span>(<span class="keyword">duration</span>) / (</span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">duration</span>)</span><br><span class="line">            <span class="keyword">from</span> information_schema.profiling</span><br><span class="line">            <span class="keyword">where</span> query_id = @quer_id</span><br><span class="line">        ), <span class="number">2</span></span><br><span class="line">    ) <span class="keyword">as</span> pct_r,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> calls,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">duration</span>) / <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">"r/call"</span></span><br><span class="line"><span class="keyword">from</span> information_schema.profiling</span><br><span class="line"><span class="keyword">where</span> query_id = @query_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> state</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total_r <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>表结构优化建议</li>
</ol>
<p>以下 SQL 语句会给出每一列的优化建议.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">procedure</span> analyse();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>定期回收闲置的数据库空间</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">optimize</span> <span class="keyword">table</span> table_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">engine</span> = <span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">force</span>;</span><br></pre></td></tr></table></figure>
<p>optimize table的支持表类型: innodb,myisam, archive, ndb; 会重组表数据和索引的物理页, 对于减少所占空间和在访问表时优化io有效果.</p>
<p>对于MyISAM表, 当表上的数据行被删除时, 所占据的磁盘空间并没有立即被回收, 使用命令后这些空间将被回收, 并且对磁盘上的数据行进行重排(注意: 是磁盘上, 而非数据库).</p>
<p>在InnoDB表中等价 ALTER TABLE … FORCE, ALTER TABLE ENGINE= INNODB,会重新整理在聚簇索引上的数据和索引;</p>
<p>只需在批量删除数据行之后, 或定期(每周一次或每月一次)进行一次数据表优化操作即可, 只对那些特定的表运行.</p>
<p><strong>需要有足够的空间才能进行OPTIMIZE TABLE.如果没有磁盘空间, MySQL将不能进行优化, 表也无法使用.</strong></p>
<ol start="6">
<li>查看慢查询</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看慢查询是否开始, 存储文件位置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'slow_query%'</span>;</span><br><span class="line"><span class="comment">-- 查询超过多少秒才记录</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'long_query_time'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启慢查询</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="string">'ON'</span>; </span><br><span class="line"><span class="comment">-- 设置慢查询时间, 默认为 10 秒</span></span><br><span class="line"><span class="keyword">set</span> long_query_time = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试慢查询, 之后可以在慢查询日志文件中找到</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>pt-query-digest</code> 工具分析慢查询日志.<br>
pt-query-digest是用于分析mysql慢查询的一个工具, 它可以分析binlog, General log, slowlog, 也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析.<br>
可以把分析结果输出到文件中, 分析过程是先对查询语句的条件进行参数化, 然后对参数化以后的查询进行分组统计, 统计出各查询的执行时间, 次数, 占比等, 可以借助分析结果找出问题进行优化.</p>
<ol start="7">
<li>EXPLAIN 分析查询 SQL</li>
</ol>
<ul>
<li>table: 表名</li>
<li>type: 连接的类型
<ul>
<li>all: 全表扫描</li>
<li>index: 索引的扫描<br>
如果在 Extra 列看到 <code>Using index</code>, 表示正在使用覆盖索引, 只宿醉索引中的数据, 并不按索引扫描整个表.</li>
<li>range: 索引的范围查找</li>
<li>ref: 索引查找<br>
ref_or_null 是 ref 的变体, 表示需要在初次筛选结果中再次查找出 NULL 条目.</li>
<li>eq_ref: 主键或唯一索引的等值查找, 只会返回一条记录</li>
<li>const, system: 主键, 索引</li>
</ul>
</li>
<li>possible_keys: 可能用到的索引</li>
<li>key: 实际使用的索引</li>
<li>key_len: 索引的长度, 越短越好</li>
<li>ref: 索引的哪一列被使用了, 常数较好</li>
<li>rows: mysql认为必须检查的用来返回请求数据的行数</li>
<li>extra:
<ul>
<li>Using index: 使用覆盖索引</li>
<li>Using where: MySQL 服务器将在存储引擎检索后再进行过滤<br>
不是所有 where 条件都会显示该值.<br>
有时候该值表示查询将受益于不同的索引</li>
<li>Using filesort: 需要额外排序<br>
无法按索引次序从表里读出行, 需要在内存或磁盘上进行排序</li>
<li>Using temporary: 需要使用临时表<br>
会使用内存或磁盘上幅度临时表, 通常用于排序</li>
<li>Range checked for each record (index map: N): 没有好的索引</li>
</ul>
</li>
</ul>
<ol start="8">
<li>查看实时 sql 记录</li>
</ol>
<p>这个文件会随着访问的增加而不断变大, 所以生产环境建议临时开启, 用完及时关闭.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log = <span class="string">'ON'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log_file = <span class="string">'/var/log/mysql/general_log.log'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-cmd</title>
    <url>/posts/database/cc624f68/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>CMD</th>
<th>DESC</th>
</tr>
</thead>
<tbody>
<tr>
<td>APPEND key value</td>
<td>追加一个值到key上</td>
</tr>
<tr>
<td>AUTH password</td>
<td>验证服务器命令</td>
</tr>
<tr>
<td>BGREWRITEAOF</td>
<td>异步重写追加文件命令</td>
</tr>
<tr>
<td>BGSAVE</td>
<td>异步保存数据集到磁盘上</td>
</tr>
<tr>
<td>BITCOUNT key [start end]</td>
<td>统计字符串指定起始位置的字节数</td>
</tr>
<tr>
<td>BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP</td>
<td>SAT</td>
</tr>
<tr>
<td>BITOP operation destkey key [key …]</td>
<td>Perform bitwise operations between strings</td>
</tr>
<tr>
<td>BITPOS key bit [start] [end]</td>
<td>Find first bit set or clear in a string</td>
</tr>
<tr>
<td>BLPOP key [key …] timeout</td>
<td>删除, 并获得该列表中的第一元素, 或阻塞, 直到有一个可用</td>
</tr>
<tr>
<td>BRPOP key [key …] timeout</td>
<td>删除, 并获得该列表中的最后一个元素, 或阻塞, 直到有一个可用</td>
</tr>
<tr>
<td>BRPOPLPUSH source destination timeout</td>
<td>弹出一个列表的值, 将它推到另一个列表, 并返回它;或阻塞, 直到有一个可用</td>
</tr>
<tr>
<td>BZPOPMAX key [key …] timeout</td>
<td>Remove and return the member with the highest score from one or more sorted sets, or block until one is available</td>
</tr>
<tr>
<td>BZPOPMIN key [key …] timeout</td>
<td>Remove and return the member with the lowest score from one or more sorted sets, or block until one is available</td>
</tr>
<tr>
<td>CLIENT KILL [ip:port] [ID client-id] [TYPE normal</td>
<td>slave</td>
</tr>
<tr>
<td>CLIENT LIST</td>
<td>获得客户端连接列表</td>
</tr>
<tr>
<td>CLIENT GETNAME</td>
<td>获得当前连接名称</td>
</tr>
<tr>
<td>CLIENT ID</td>
<td>Returns the client ID for the current connection</td>
</tr>
<tr>
<td>CLIENT PAUSE timeout</td>
<td>暂停处理客户端命令</td>
</tr>
<tr>
<td>CLIENT REPLY ON</td>
<td>OFF</td>
</tr>
<tr>
<td>CLIENT SETNAME connection-name</td>
<td>设置当前连接的名字</td>
</tr>
<tr>
<td>CLIENT UNBLOCK client-id [TIMEOUT</td>
<td>ERROR]</td>
</tr>
<tr>
<td>CLUSTER ADDSLOTS slot [slot …]</td>
<td>Assign new hash slots to receiving node</td>
</tr>
<tr>
<td>CLUSTER COUNT-FAILURE-REPORTS node-id</td>
<td>Return the number of failure reports active for a given node</td>
</tr>
<tr>
<td>CLUSTER COUNTKEYSINSLOT slot</td>
<td>Return the number of local keys in the specified hash slot</td>
</tr>
<tr>
<td>CLUSTER DELSLOTS slot [slot …]</td>
<td>Set hash slots as unbound in receiving node</td>
</tr>
<tr>
<td>CLUSTER FAILOVER [FORCE</td>
<td>TAKEOVER]</td>
</tr>
<tr>
<td>CLUSTER FORGET node-id</td>
<td>Remove a node from the nodes table</td>
</tr>
<tr>
<td>CLUSTER GETKEYSINSLOT slot count</td>
<td>Return local key names in the specified hash slot</td>
</tr>
<tr>
<td>CLUSTER INFO</td>
<td>Provides info about Redis Cluster node state</td>
</tr>
<tr>
<td>CLUSTER KEYSLOT key</td>
<td>Returns the hash slot of the specified key</td>
</tr>
<tr>
<td>CLUSTER MEET ip port</td>
<td>Force a node cluster to handshake with another node</td>
</tr>
<tr>
<td>CLUSTER NODES</td>
<td>Get Cluster config for the node</td>
</tr>
<tr>
<td>CLUSTER REPLICAS node-id</td>
<td>List replica nodes of the specified master node</td>
</tr>
<tr>
<td>CLUSTER REPLICATE node-id</td>
<td>Reconfigure a node as a slave of the specified master node</td>
</tr>
<tr>
<td>CLUSTER RESET [HARD</td>
<td>SOFT]</td>
</tr>
<tr>
<td>CLUSTER SAVECONFIG</td>
<td>Forces the node to save cluster state on disk</td>
</tr>
<tr>
<td>CLUSTER SET-CONFIG-EPOCH config-epoch</td>
<td>Set the configuration epoch in a new node</td>
</tr>
<tr>
<td>CLUSTER SETSLOT slot IMPORTING</td>
<td>MIGRATING</td>
</tr>
<tr>
<td>CLUSTER SLAVES node-id</td>
<td>List slave nodes of the specified master node</td>
</tr>
<tr>
<td>CLUSTER SLOTS</td>
<td>Get array of Cluster slot to node mappings</td>
</tr>
<tr>
<td>COMMAND</td>
<td>Get array of Redis command details</td>
</tr>
<tr>
<td>COMMAND COUNT</td>
<td>Get total number of Redis commands</td>
</tr>
<tr>
<td>COMMAND GETKEYS</td>
<td>Extract keys given a full Redis command</td>
</tr>
<tr>
<td>COMMAND INFO command-name [command-name …]</td>
<td>Get array of specific Redis command details</td>
</tr>
<tr>
<td>CONFIG GET parameter</td>
<td>获取配置参数的值</td>
</tr>
<tr>
<td>CONFIG REWRITE</td>
<td>从写内存中的配置文件</td>
</tr>
<tr>
<td>CONFIG SET parameter value</td>
<td>设置配置文件</td>
</tr>
<tr>
<td>CONFIG RESETSTAT</td>
<td>复位再分配使用info命令报告的统计</td>
</tr>
<tr>
<td>DBSIZE</td>
<td>返回当前数据库里面的keys数量</td>
</tr>
<tr>
<td>DEBUG OBJECT key</td>
<td>获取一个key的debug信息</td>
</tr>
<tr>
<td>DEBUG SEGFAULT</td>
<td>使服务器崩溃命令</td>
</tr>
<tr>
<td>DECR key</td>
<td>整数原子减1</td>
</tr>
<tr>
<td>DECRBY key decrement</td>
<td>原子减指定的整数</td>
</tr>
<tr>
<td>DEL key [key …]</td>
<td>删除指定的key (一个或多个)</td>
</tr>
<tr>
<td>DISCARD</td>
<td>丢弃所有 MULTI 之后发的命令</td>
</tr>
<tr>
<td>DUMP key</td>
<td>导出key的值</td>
</tr>
<tr>
<td>ECHO message</td>
<td>回显输入的字符串</td>
</tr>
<tr>
<td>EVAL script numkeys key [key …] arg [arg …]</td>
<td>在服务器端执行 LUA 脚本</td>
</tr>
<tr>
<td>EVALSHA sha1 numkeys key [key …] arg [arg …]</td>
<td>在服务器端执行 LUA 脚本</td>
</tr>
<tr>
<td>EXEC</td>
<td>执行所有 MULTI 之后发的命令</td>
</tr>
<tr>
<td>EXISTS key [key …]</td>
<td>查询一个key是否存在</td>
</tr>
<tr>
<td>EXPIRE key seconds</td>
<td>设置一个key的过期的秒数</td>
</tr>
<tr>
<td>EXPIREAT key timestamp</td>
<td>设置一个UNIX时间戳的过期时间</td>
</tr>
<tr>
<td>FLUSHALL</td>
<td>清空所有数据库命令</td>
</tr>
<tr>
<td>FLUSHDB</td>
<td>清空当前的数据库命令</td>
</tr>
<tr>
<td>GEOADD key longitude latitude member [longitude latitude member …]</td>
<td>添加一个或多个地理空间位置到sorted set</td>
</tr>
<tr>
<td>GEOHASH key member [member …]</td>
<td>返回一个标准的地理空间的Geohash字符串</td>
</tr>
<tr>
<td>GEOPOS key member [member …]</td>
<td>返回地理空间的经纬度</td>
</tr>
<tr>
<td>GEODIST key member1 member2 [unit]</td>
<td>返回两个地理空间之间的距离</td>
</tr>
<tr>
<td>GEORADIUS key longitude latitude radius m</td>
<td>km</td>
</tr>
<tr>
<td>GEORADIUSBYMEMBER key member radius m</td>
<td>km</td>
</tr>
<tr>
<td>GET key</td>
<td>返回key的value</td>
</tr>
<tr>
<td>GETBIT key offset</td>
<td>返回位的值存储在关键的字符串值的偏移量.</td>
</tr>
<tr>
<td>GETRANGE key start end</td>
<td>获取存储在key上的值的一个子字符串</td>
</tr>
<tr>
<td>GETSET key value</td>
<td>设置一个key的value, 并获取设置前的值</td>
</tr>
<tr>
<td>HDEL key field [field …]</td>
<td>删除一个或多个Hash的field</td>
</tr>
<tr>
<td>HEXISTS key field</td>
<td>判断field是否存在于hash中</td>
</tr>
<tr>
<td>HGET key field</td>
<td>获取hash中field的值</td>
</tr>
<tr>
<td>HGETALL key</td>
<td>从hash中读取全部的域和值</td>
</tr>
<tr>
<td>HINCRBY key field increment</td>
<td>将hash中指定域的值增加给定的数字</td>
</tr>
<tr>
<td>HINCRBYFLOAT key field increment</td>
<td>将hash中指定域的值增加给定的浮点数</td>
</tr>
<tr>
<td>HKEYS key</td>
<td>获取hash的所有字段</td>
</tr>
<tr>
<td>HLEN key</td>
<td>获取hash里所有字段的数量</td>
</tr>
<tr>
<td>HMGET key field [field …]</td>
<td>获取hash里面指定字段的值</td>
</tr>
<tr>
<td>HMSET key field value [field value …]</td>
<td>设置hash字段值</td>
</tr>
<tr>
<td>HSET key field value</td>
<td>设置hash里面一个字段的值</td>
</tr>
<tr>
<td>HSETNX key field value</td>
<td>设置hash的一个字段, 只有当这个字段不存在时有效</td>
</tr>
<tr>
<td>HSTRLEN key field</td>
<td>获取hash里面指定field的长度</td>
</tr>
<tr>
<td>HVALS key</td>
<td>获得hash的所有值</td>
</tr>
<tr>
<td>INCR key</td>
<td>执行原子加1操作</td>
</tr>
<tr>
<td>INCRBY key increment</td>
<td>执行原子增加一个整数</td>
</tr>
<tr>
<td>INCRBYFLOAT key increment</td>
<td>执行原子增加一个浮点数</td>
</tr>
<tr>
<td>INFO [section]</td>
<td>获得服务器的详细信息</td>
</tr>
<tr>
<td>KEYS pattern</td>
<td>查找所有匹配给定的模式的键</td>
</tr>
<tr>
<td>LASTSAVE</td>
<td>获得最后一次同步磁盘的时间</td>
</tr>
<tr>
<td>LINDEX key index</td>
<td>获取一个元素, 通过其索引列表</td>
</tr>
<tr>
<td>LINSERT key BEFORE</td>
<td>AFTER pivot value</td>
</tr>
<tr>
<td>LLEN key</td>
<td>获得队列(List)的长度</td>
</tr>
<tr>
<td>LPOP key</td>
<td>从队列的左边出队一个元素</td>
</tr>
<tr>
<td>LPUSH key value [value …]</td>
<td>从队列的左边入队一个或多个元素</td>
</tr>
<tr>
<td>LPUSHX key value</td>
<td>当队列存在时, 从队到左边入队一个元素</td>
</tr>
<tr>
<td>LRANGE key start stop</td>
<td>从列表中获取指定返回的元素</td>
</tr>
<tr>
<td>LREM key count value</td>
<td>从列表中删除元素</td>
</tr>
<tr>
<td>LSET key index value</td>
<td>设置队列里面一个元素的值</td>
</tr>
<tr>
<td>LTRIM key start stop</td>
<td>修剪到指定范围内的清单</td>
</tr>
<tr>
<td>MEMORY DOCTOR</td>
<td>Outputs memory problems report</td>
</tr>
<tr>
<td>MEMORY HELP</td>
<td>Show helpful text about the different subcommands</td>
</tr>
<tr>
<td>MEMORY-MALLOC-STATS</td>
<td>Show allocator internal stats</td>
</tr>
<tr>
<td>MEMORY-PURGE</td>
<td>Ask the allocator to release memory</td>
</tr>
<tr>
<td>MEMORY-STATS</td>
<td>Show memory usage details</td>
</tr>
<tr>
<td>MEMORY-USAGE key [SAMPLES count]</td>
<td>Estimate the memory usage of a key</td>
</tr>
<tr>
<td>MGET key [key …]</td>
<td>获得所有key的值</td>
</tr>
<tr>
<td>MIGRATE host port key destination-db timeout [COPY] [REPLACE]</td>
<td>原子性的将key从redis的一个实例移到另一个实例</td>
</tr>
<tr>
<td>MONITOR</td>
<td>实时监控服务器</td>
</tr>
<tr>
<td>MOVE key db</td>
<td>移动一个key到另一个数据库</td>
</tr>
<tr>
<td>MSET key value [key value …]</td>
<td>设置多个key value</td>
</tr>
<tr>
<td>MSETNX key value [key value …]</td>
<td>设置多个key value,仅当key存在时</td>
</tr>
<tr>
<td>MULTI</td>
<td>标记一个事务块开始</td>
</tr>
<tr>
<td>OBJECT subcommand [arguments [arguments …]]</td>
<td>检查内部的再分配对象</td>
</tr>
<tr>
<td>PERSIST key</td>
<td>移除key的过期时间</td>
</tr>
<tr>
<td>PEXPIRE key milliseconds</td>
<td>设置key的有效时间以毫秒为单位</td>
</tr>
<tr>
<td>PEXPIREAT key milliseconds-timestamp</td>
<td>设置key的到期UNIX时间戳以毫秒为单位</td>
</tr>
<tr>
<td>PFADD key element [element …]</td>
<td>将指定元素添加到HyperLogLog</td>
</tr>
<tr>
<td>PFCOUNT key [key …]</td>
<td>Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).</td>
</tr>
<tr>
<td>PFMERGE destkey sourcekey [sourcekey …]</td>
<td>Merge N different HyperLogLogs into a single one.</td>
</tr>
<tr>
<td>PING</td>
<td>Ping 服务器</td>
</tr>
<tr>
<td>PSETEX key milliseconds value</td>
<td>Set the value and expiration in milliseconds of a key</td>
</tr>
<tr>
<td>PSUBSCRIBE pattern [pattern …]</td>
<td>Listen for messages published to channels matching the given patterns</td>
</tr>
<tr>
<td>PUBSUB subcommand [argument [argument …]]</td>
<td>Inspect the state of the Pub/Sub subsystem</td>
</tr>
<tr>
<td>PTTL key</td>
<td>获取key的有效毫秒数</td>
</tr>
<tr>
<td>PUBLISH channel message</td>
<td>发布一条消息到频道</td>
</tr>
<tr>
<td>PUNSUBSCRIBE [pattern [pattern …]]</td>
<td>停止发布到匹配给定模式的渠道的消息听</td>
</tr>
<tr>
<td>QUIT</td>
<td>关闭连接, 退出</td>
</tr>
<tr>
<td>RANDOMKEY</td>
<td>返回一个随机的key</td>
</tr>
<tr>
<td>READONLY</td>
<td>Enables read queries for a connection to a cluster slave node</td>
</tr>
<tr>
<td>READWRITE</td>
<td>Disables read queries for a connection to a cluster slave node</td>
</tr>
<tr>
<td>RENAME key newkey</td>
<td>将一个key重命名</td>
</tr>
<tr>
<td>RENAMENX key newkey</td>
<td>重命名一个key,新的key必须是不存在的key</td>
</tr>
<tr>
<td>REPLICAOF host port</td>
<td>Make the server a replica of another instance, or promote it as master.</td>
</tr>
<tr>
<td>RESTORE key ttl serialized-value [REPLACE]</td>
<td>Create a key using the provided serialized value, previously obtained using DUMP.</td>
</tr>
<tr>
<td>ROLE</td>
<td>Return the role of the instance in the context of replication</td>
</tr>
<tr>
<td>RPOP key</td>
<td>从队列的右边出队一个元</td>
</tr>
<tr>
<td>RPOPLPUSH source destination</td>
<td>删除列表中的最后一个元素, 将其追加到另一个列表</td>
</tr>
<tr>
<td>RPUSH key value [value …]</td>
<td>从队列的右边入队一个元素</td>
</tr>
<tr>
<td>RPUSHX key value</td>
<td>从队列的右边入队一个元素, 仅队列存在时有效</td>
</tr>
<tr>
<td>SADD key member [member …]</td>
<td>添加一个或者多个元素到集合(set)里</td>
</tr>
<tr>
<td>SAVE</td>
<td>同步数据到磁盘上</td>
</tr>
<tr>
<td>SCARD key</td>
<td>获取集合里面的元素数量</td>
</tr>
<tr>
<td>SCRIPT DEBUG YES</td>
<td>SYNC</td>
</tr>
<tr>
<td>SCRIPT EXISTS script [script …]</td>
<td>Check existence of scripts in the script cache.</td>
</tr>
<tr>
<td>SCRIPT FLUSH</td>
<td>删除服务器缓存中所有Lua脚本.</td>
</tr>
<tr>
<td>SCRIPT KILL</td>
<td>杀死当前正在运行的 Lua 脚本.</td>
</tr>
<tr>
<td>SCRIPT LOAD script</td>
<td>从服务器缓存中装载一个Lua脚本.</td>
</tr>
<tr>
<td>SDIFF key [key …]</td>
<td>获得队列不存在的元素</td>
</tr>
<tr>
<td>SDIFFSTORE destination key [key …]</td>
<td>获得队列不存在的元素, 并存储在一个关键的结果集</td>
</tr>
<tr>
<td>SELECT index</td>
<td>选择新数据库</td>
</tr>
<tr>
<td>SET key value [EX seconds] [PX milliseconds] [NX</td>
<td>XX]</td>
</tr>
<tr>
<td>SETBIT key offset value</td>
<td>Sets or clears the bit at offset in the string value stored at key</td>
</tr>
<tr>
<td>SETEX key seconds value</td>
<td>设置key-value并设置过期时间 (单位: 秒)</td>
</tr>
<tr>
<td>SETNX key value</td>
<td>设置的一个关键的价值, 只有当该键不存在</td>
</tr>
<tr>
<td>SETRANGE key offset value</td>
<td>Overwrite part of a string at key starting at the specified offset</td>
</tr>
<tr>
<td>SHUTDOWN [NOSAVE] [SAVE]</td>
<td>关闭服务</td>
</tr>
<tr>
<td>SINTER key [key …]</td>
<td>获得两个集合的交集</td>
</tr>
<tr>
<td>SINTERSTORE destination key [key …]</td>
<td>获得两个集合的交集, 并存储在一个关键的结果集</td>
</tr>
<tr>
<td>SISMEMBER key member</td>
<td>确定一个给定的值是一个集合的成员</td>
</tr>
<tr>
<td>SLAVEOF host port</td>
<td>指定当前服务器的主服务器</td>
</tr>
<tr>
<td>SLOWLOG subcommand [argument]</td>
<td>管理再分配的慢查询日志</td>
</tr>
<tr>
<td>SMEMBERS key</td>
<td>获取集合里面的所有元素</td>
</tr>
<tr>
<td>SMOVE source destination member</td>
<td>移动集合里面的一个元素到另一个集合</td>
</tr>
<tr>
<td>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC</td>
<td>DESC] [ALPHA] [STORE destination]</td>
</tr>
<tr>
<td>SPOP key [count]</td>
<td>删除并获取一个集合里面的元素</td>
</tr>
<tr>
<td>SRANDMEMBER key [count]</td>
<td>从集合里面随机获取一个元素</td>
</tr>
<tr>
<td>SREM key member [member …]</td>
<td>从集合里删除一个或多个元素</td>
</tr>
<tr>
<td>STRLEN key</td>
<td>获取指定key值的长度</td>
</tr>
<tr>
<td>SUBSCRIBE channel [channel …]</td>
<td>监听频道发布的消息</td>
</tr>
<tr>
<td>SUNION key [key …]</td>
<td>添加多个set元素</td>
</tr>
<tr>
<td>SUNIONSTORE destination key [key …]</td>
<td>合并set元素, 并将结果存入新的set里面</td>
</tr>
<tr>
<td>SWAPDB index index</td>
<td>Swaps two Redis databases</td>
</tr>
<tr>
<td>SYNC</td>
<td>用于复制的内部命令</td>
</tr>
<tr>
<td>TIME</td>
<td>返回当前服务器时间</td>
</tr>
<tr>
<td>TOUCH key [key …]</td>
<td>Alters the last access time of a key(s). Returns the number of existing keys specified.</td>
</tr>
<tr>
<td>TTL key</td>
<td>获取key的有效时间 (单位: 秒)</td>
</tr>
<tr>
<td>TYPE key</td>
<td>获取key的存储类型</td>
</tr>
<tr>
<td>UNLINK key [key …]</td>
<td>Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.</td>
</tr>
<tr>
<td>UNSUBSCRIBE [channel [channel …]]</td>
<td>停止频道监听</td>
</tr>
<tr>
<td>UNWATCH</td>
<td>取消事务命令</td>
</tr>
<tr>
<td>WAIT numslaves timeout</td>
<td>Wait for the synchronous replication of all the write commands sent in the context of the current connection</td>
</tr>
<tr>
<td>WATCH key [key …]</td>
<td>锁定key直到执行了 MULTI/EXEC 命令</td>
</tr>
<tr>
<td>XACK key group ID [ID …]</td>
<td>Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.</td>
</tr>
<tr>
<td>XADD key ID field string [field string …]</td>
<td>Appends a new entry to a stream</td>
</tr>
<tr>
<td>XCLAIM key group consumer min-idle-time ID [ID …] [IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count] [FORCE] [JUSTID]</td>
<td>Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.</td>
</tr>
<tr>
<td>XDEL key ID [ID …]</td>
<td>Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.</td>
</tr>
<tr>
<td>XGROUP [CREATE key groupname id-or-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>S</mi><mi>E</mi><mi>T</mi><mi>I</mi><mi>D</mi><mi>k</mi><mi>e</mi><mi>y</mi><mi>i</mi><mi>d</mi><mo>−</mo><mi>o</mi><mi>r</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">] [SETID key id-or-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">−</span></span></span></span>] [DESTROY key groupname] [DELCONSUMER key groupname consumername]</td>
<td>Create, destroy, and manage consumer groups.</td>
</tr>
<tr>
<td>XINFO [CONSUMERS key groupname] [GROUPS key] [STREAM key] [HELP]</td>
<td>Get information on streams and consumer groups</td>
</tr>
<tr>
<td>XLEN key</td>
<td>Return the number of entires in a stream</td>
</tr>
<tr>
<td>XPENDING key group [start end count] [consumer]</td>
<td>Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.</td>
</tr>
<tr>
<td>XRANGE key start end [COUNT count]</td>
<td>Return a range of elements in a stream, with IDs matching the specified IDs interval</td>
</tr>
<tr>
<td>XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key …] ID [ID …]</td>
<td>Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.</td>
</tr>
<tr>
<td>XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] STREAMS key [key …] ID [ID …]</td>
<td>Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.</td>
</tr>
<tr>
<td>XREVRANGE key end start [COUNT count]</td>
<td>Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE</td>
</tr>
<tr>
<td>XTRIM key MAXLEN [~] count</td>
<td>Trims the stream to (approximately if ‘~’ is passed) a certain size</td>
</tr>
<tr>
<td>ZADD key [NX</td>
<td>XX] [CH] [INCR] score member [score member …]</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>获取一个排序的集合中的成员数量</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>返回分数范围内的成员数量</td>
</tr>
<tr>
<td>ZINCRBY key increment member</td>
<td>增量的一名成员在排序设置的评分</td>
</tr>
<tr>
<td>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM</td>
<td>MIN</td>
</tr>
<tr>
<td>ZLEXCOUNT key min max</td>
<td>返回成员之间的成员数量</td>
</tr>
<tr>
<td>ZPOPMAX key [count]</td>
<td>Remove and return members with the highest scores in a sorted set</td>
</tr>
<tr>
<td>ZPOPMIN key [count]</td>
<td>Remove and return members with the lowest scores in a sorted set</td>
</tr>
<tr>
<td>ZRANGE key start stop [WITHSCORES]</td>
<td>根据指定的index返回, 返回sorted set的成员列表</td>
</tr>
<tr>
<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>
<td>返回指定成员区间内的成员, 按字典正序排列, 分数必须相同.</td>
</tr>
<tr>
<td>ZREVRANGEBYLEX key max min [LIMIT offset count]</td>
<td>返回指定成员区间内的成员, 按字典倒序排列, 分数必须相同</td>
</tr>
<tr>
<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td>
<td>返回有序集合中指定分数区间内的成员, 分数由低到高排序.</td>
</tr>
<tr>
<td>ZRANK key member</td>
<td>确定在排序集合成员的索引</td>
</tr>
<tr>
<td>ZREM key member [member …]</td>
<td>从排序的集合中删除一个或多个成员</td>
</tr>
<tr>
<td>ZREMRANGEBYLEX key min max</td>
<td>删除名称按字典由低到高排序成员之间所有成员.</td>
</tr>
<tr>
<td>ZREMRANGEBYRANK key start stop</td>
<td>在排序设置的所有成员在给定的索引中删除</td>
</tr>
<tr>
<td>ZREMRANGEBYSCORE key min max</td>
<td>删除一个排序的设置在给定的分数所有成员</td>
</tr>
<tr>
<td>ZREVRANGE key start stop [WITHSCORES]</td>
<td>在排序的设置返回的成员范围, 通过索引, 下令从分数高到低</td>
</tr>
<tr>
<td>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</td>
<td>返回有序集合中指定分数区间内的成员, 分数由高到低排序.</td>
</tr>
<tr>
<td>ZREVRANK key member</td>
<td>确定指数在排序集的成员, 下令从分数高到低</td>
</tr>
<tr>
<td>ZSCORE key member</td>
<td>获取成员在排序设置相关的比分</td>
</tr>
<tr>
<td>ZUNIONSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM</td>
<td>MIN</td>
</tr>
<tr>
<td>SCAN cursor [MATCH pattern] [COUNT count]</td>
<td>增量迭代key</td>
</tr>
<tr>
<td>SSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>迭代set里面的元素</td>
</tr>
<tr>
<td>HSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>迭代hash里面的元素</td>
</tr>
<tr>
<td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>迭代sorted sets里面的元素</td>
</tr>
</tbody>
</table>
<h1 id="常见操作">1.  常见操作</h1>
<h2 id="获取所有-key">1.1.  获取所有 key</h2>
<p>keys 命令会会造成服务停顿, 不建议在生产上使用.<br>
建议使用 scan 命令, 该命令在 redis 2.8 之后才有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计个数</span></span><br><span class="line">redis-cli --scan --pattern <span class="string">'*'</span> | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量删除</span></span><br><span class="line">redis-cli --scan --pattern <span class="string">'*'</span> | xargs -L 5000 redis-cli del</span><br><span class="line">redis-cli EVAL <span class="string">"return redis.call('del', unpack(redis.call('keys', ARGV[1])))"</span> 0 <span class="variable">$pattern</span>*</span><br></pre></td></tr></table></figure>
<h2 id="批量导入">1.2.  批量导入</h2>
<ol>
<li>
<a href="http://www.redis.cn/topics/batch-insert.html" title target>从文件中批量插入数据</a>
</li>
<li>
<a href="http://www.redis.cn/topics/mass-insert.html" title target>大量数据插入</a>
</li>
</ol>
<p>第二种比第一种多了一步数据格式的转化, 转化成了 AOF 命令的格式.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cache.txt 中放的是批量操作, 如:</span></span><br><span class="line"><span class="comment"># SET count 1</span></span><br><span class="line"><span class="comment"># 将 cache.txt 转换成 AOF 格式</span></span><br><span class="line">origin_redis_cmd_file=<span class="variable">$1</span></span><br><span class="line">delimiter=<span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    redis_cmd=(<span class="variable">$line</span>)</span><br><span class="line">    <span class="comment"># each command begins with *&#123;number arguments in command&#125;\r\n</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"*<span class="variable">$&#123;#redis_cmd[@]&#125;</span><span class="variable">$&#123;delimiter&#125;</span>"</span></span><br><span class="line">    <span class="comment"># for each argument, we append $&#123;length&#125;\r\n&#123;argument&#125;\r\n</span></span><br><span class="line">    <span class="keyword">for</span> cmd_part <span class="keyword">in</span> <span class="variable">$line</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"\$<span class="variable">$&#123;#cmd_part&#125;</span><span class="variable">$&#123;delimiter&#125;</span><span class="variable">$&#123;cmd_part&#125;</span><span class="variable">$&#123;delimiter&#125;</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$origin_redis_cmd_file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用管道批量导入</span></span><br><span class="line">cat cache.txt | redis-cli --pipe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/posts/database/7b25d017/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line">tar xzf redis-5.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-5.0.7</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h1 id="redis-部署方式">2.  Redis 部署方式</h1>
<a href="https://blog.csdn.net/java_zyq/article/details/83818341" title target>Redis 部署方式</a>
<a href="https://www.cnblogs.com/guapiwangxi/p/10556812.html" title target>redis 部署方式及常见特性</a>
<ul>
<li>singleton 单点</li>
<li>master-slave 主从<br>
1 个 master, 多个 slaves<br>
master 可以读和写, slaves 只能读不能写<br>
master 挂掉之后, redis 不能提供写服务, 不影响从 slaves 上读取; slave 挂掉之后, 不影响 redis 服务, 可以重启 slave 节点, 之后会从 master 上同步数据过来<br>
master 挂掉之后, slave 无法自动推举 master 节点. 如果 master 没有备份数据, 直接重启 master 将丢失所有 slaves 上的数据</li>
<li>sentinel 哨兵<br>
sentinel 模式建立在主从模式之上, 如果是单点 redis, sentinel 就没有意义<br>
当 master 挂掉之后, 由 sentinel 选择一个 slave 作为 master, 并修改其他 slaves 的配置, 让他们指向新的 master. 挂掉的 master 重启后将作为 slave, 同步新的 master 上的数据<br>
sentinel 是一个高可用的方案, 防止主从模式中 master 挂掉之后, 无法自动恢复的问题. sentinel 作为方案的一部分, 本身也需要集群, 防止单点故障.<br>
一个 sentinel 或 sentinel 集群可以管理多个主从 redis.<br>
客户端不直接连 redis, 而是由 sentinel 提供可用 master 的连接地址.<br>
由于数据的保存还是依靠 master, 无法突破单台服务器内存大小的限制.</li>
<li>cluster 集群<br>
cluster 多主多从, 多个 master 通过分片共同管理数据, 解决单台服务器容量问题.<br>
master 挂掉后, 自动选择其 slave 节点作为 master.<br>
容易增加或减少节点.</li>
</ul>
<h2 id="redis-集群">2.1.  Redis 集群</h2>
<a href="http://www.redis.cn/topics/cluster-tutorial.html" title target>Redis 集群教程</a>
<h3 id="redis-集群中的数据分片">2.1.1.  Redis 集群中的数据分片</h3>
<p>Redis 集群共有 16384 (2^14) 个哈希槽, 每个 key 通过 CRC16 校验后与 16384 取模来决定放在哪个槽.<br>
集群中的每个节点负责一部分哈希槽.<br>
这种结构很容易添加和删除节点.<br>
比如如果我想新添加个节点D, 我需要从节点 A, B, C中得部分槽到D上. 如果我想移除节点A,需要将A中的槽移到B和C节点上,然后将没有任何槽的A节点从集群中移除即可. 由于从一个节点将哈希槽移动到另一个节点并不会停止服务,所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态.</p>
<h3 id="主从复制方式">2.1.2.  主从复制方式</h3>
<a href="http://www.redis.cn/topics/replication.html" title target>复制</a>
<ul>
<li>完整同步</li>
<li>部分同步</li>
<li>命令传播</li>
</ul>
<p>当 slave 连接 master 时, 发送 <code>PSYNC $runId $offset</code> 请求同步.<br>
master 根据情况判断是完整同步还是部分同步.</p>
<p><code>$runId</code> 是 slave 记录的 master 节点的 runId, 如果没有则说明 slave 是首次连接 master; 如果与 master 自己的 runId 不一致, 则说明 slave 断开后重新连接的不是之前的 master. 以上 2 中情况都需要完整同步.<br>
<code>$offset</code> 是 slave 当前的命令偏移量. master 接收到的命令会在内存中保存到 replica backlog 中. 如果 slave 传过来的 offset 还在 backlog 范围内, 且 runId 一致, 则可以使用部分同步, 否则可能 slave 断开时间过长, 需要使用完整同步.</p>
<h2 id="主从复制方式-2">2.2.  主从复制方式</h2>
<a href="https://www.jianshu.com/p/0e1ff8ea22bc" title target>Redis的全量复制和部分复制</a>
<h1 id="redis-持久化">3.  Redis 持久化</h1>
<a href="http://www.redis.cn/topics/persistence.html" title target>持久化</a>
<ul>
<li>
<p>RDB<br>
保存的是数据库的状态</p>
</li>
<li>
<p>AOF<br>
Append Only File, 保存的是数据库执行过的命令</p>
<p>同步(fsync)策略:<br>
- always 每次都将 aof_buf 缓冲区同步到 AOF 文件<br>
- everysec 每隔 1 秒将 aof_buf 缓冲区同步到 AOF 文件<br>
- no 何时同步交由操作系统决定</p>
<p>如果 AOF 文件过大, 会自动通过 REWRITEAOF 命令重写 AOF 文件</p>
</li>
</ul>
<p>RDB 文件一般比 AOF 文件小, 所以一般执行速度会快于 AOF 文件<br>
系统出现异常时, AOF 比 RDB 丢失数据更少<br>
如果 Redis 同时配置了这两中备份方式, 启动时会优先选择加载 AOF 文件.</p>
<h1 id="redis-事务">4.  Redis 事务</h1>
<p>关键字:</p>
<ul>
<li>WATCH 通过 CAS 监听多个 key 值是否变化, 如果变化则取消事务</li>
<li>MULTI</li>
<li>EXEC</li>
<li>DISCARD</li>
</ul>
<p>如果一个事务在入队过程中发生错误, 如命令不正确, 找不到等语法错误, Redis 将拒绝执行该事务.<br>
如果一个事务在执行过程中发生错误, 事务将继续执行, 且不影响已经执行的命令, 即 Redis 不支持回滚.</p>
<h1 id="redis-内存清理">5.  Redis 内存清理</h1>
<h2 id="redis-过期键删除策略">5.1.  Redis 过期键删除策略</h2>
<ul>
<li>惰性删除<br>
放任键过期不管, 但是每次从键空间中获取键时, 都检查取得的键是否过期, 如果过期就删除该键, 如果没有过期就返回该键.</li>
<li>定期删除<br>
每隔一段时间, 程序就对数据库进行一次检查, 删除里面的过期键.<br>
Redis 会在规定时间内多次随机检查一部分键的过期时间, 如果过期则删除.</li>
</ul>
<h2 id="最大内存策略">5.2.  最大内存策略</h2>
<a href="http://www.redis.cn/topics/lru-cache.html" title target>lru-cache</a>
<p>maxmemory 设置最大可用内存, 0 表示没有内存限制, redis就会一直向OS申请内存, 直到OS的所有内存都被使用完. 所以通常建议设置上redis的内存限制.<br>
设置了maxmemory后, 当redis的内存达到内存限制后, 再向redis发送写指令, 会返回一个内存耗尽的错误. 错误通常会触发一个应用程序错误, 但是不会导致整台机器宕掉.</p>
<p>maxmemory-policy 设置内存回收策略</p>
<ul>
<li>noeviction: 返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令 (大部分的写入指令, 但DEL和几个例外)</li>
<li>allkeys-lru: 尝试回收最少使用的键 (LRU) , 使得新添加的数据有空间存放.</li>
<li>allkeys-random: 回收随机的键使得新添加的数据有空间存放.</li>
<li>volatile-lru: 尝试回收最少使用的键 (LRU) , 但仅限于在过期集合的键,使得新添加的数据有空间存放.</li>
<li>volatile-random: 回收随机的键使得新添加的数据有空间存放, 但仅限于在过期集合的键.</li>
<li>volatile-ttl: 回收在过期集合的键, 并且优先回收存活时间 (TTL) 较短的键,使得新添加的数据有空间存放.</li>
</ul>
<p>如果键分布比较均匀, 则使用 random 策略<br>
如果需要保留热点访问数据, 则使用 lru 策略<br>
如果需要根据键的过期时长回收, 则使用 ttl 策略</p>
<p>Redis 接收到写操作后, 先检查内存是否足够, 如果不够, 则执行回收策略释放内存.<br>
随机从键空间中获取 maxmemory-samples 个键, 根据策略淘汰.</p>
<h3 id="近似-lru">5.2.1.  近似 LRU</h3>
<p>Redis的LRU算法并非完整的实现. 这意味着Redis并没办法选择最佳候选来进行回收, 也就是最久未被访问的键.<br>
相反它会尝试运行一个近似LRU的算法, 通过对少量keys进行取样, 然后回收其中一个最好的key (被访问时间较早的) .</p>
<p>maxmemory-samples 设置随机采样的精度, 默认是 5, 值越大越接近真是的 LRU 算法, 但 CPU 消耗也越大, 执行效率越低.</p>
<h2 id="redis-一致性保证">5.3.  Redis 一致性保证</h2>
<p>什么时候 Redis 会出现丢失数据的情况?</p>
<ol>
<li>Redis 为了保证性能, 主从节点之间是异步复制, 当主节点异常挂掉之后切换从节点时可能会有部分数据丢失</li>
<li>集群模式中, 如果碰到网络分区的情况, 由于会同时存在 2 个 master 节点, 之后其中一个会被降为 slave, 从脑裂到恢复正常一段时间内的数据会丢失 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">min-replicas-to-write 3 # 最少连接到 master 的 slave 数量</span><br><span class="line">min-replicas-max-lag 10 # master 和 slaves 之间同步的最大延迟</span><br></pre></td></tr></table></figure>
通过以上配置, master 的副本数量不能少于 3 个, 且同步副本的延时不能超过 10 秒, 否则 master 将会拒绝写入请求, 减少数据同步后的数据丢失.</li>
</ol>
<h1 id="resource">6.  Resource</h1>
<ul>
<li>
<a href="https://baijiahao.baidu.com/s?id=1606949562222634865&wfr=spider&for=pc" title target>Redis 性能参数</a>
</li>
<li><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></li>
</ul>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/posts/database/93ac284c/</url>
    <content><![CDATA[<h1 id="事务的-4-个基本要素">1.  事务的 4 个基本要素</h1>
<p>ACID 是数据库事务处理的 4 个基本要素.</p>
<ol>
<li>
<p>原子性 Atomicity<br>
原子性是指数据库的事务是一个不可分割的工作单位, 只有数据库事务都成功才算成功,任何一个SQL的失败, 数据库状态都必须回退到事务开始前的状态</p>
</li>
<li>
<p>一致性 Consistency<br>
一致性是指事务将数据库的状态从一种状态转变为下一个一致的状态. 在事务的开始和结束后, 数据库的完整性约束都没有被破坏.</p>
</li>
<li>
<p>隔离性 Isolation<br>
隔离性是指事务之间对数据对象的读写是相互隔离的, 具体是提交后可见还是提交后也不可见取决于隔离等级, 前面两种情况分别为提交读(RC)和可重复读(RR).</p>
</li>
<li>
<p>持久性 Durability<br>
持久性是指事务一旦提交, 其修改是永久性的, 即使还未写入磁盘时发生宕机, 也能恢复数据.</p>
</li>
</ol>
<p>一个支持事务的数据库, 必须具有这 4 个特性, 否则在事务过程中无法保证事务的正确性.</p>
<p>事务的隔离性是通过数据库锁的机制实现的, 持久性通过 Redo Log 来实现, 原子性和一致性通过 Undo Log 来实现.</p>
<p>Undo Log 的原理很简单, 为了满足事务的原子性, 在操作任何数据之前, 首先将数据备份到一个地方, 这个存储数据备份的地方称为 Undo Log, 然后进行数据的修改. 如果出现了错误或者用户执行了 Rollback 语句, 系统可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态.<br>
和 Undo Log 相反, Redo Log 记录的是新数据的备份. 在事务提交前, 只要将 Redo Log 持久化即可, 不需要将数据持久化. 当系统崩溃时, 虽然数据没有持久化, 但是 Redo Log 已经持久化. 系统可以根据 Redo Log 的内容, 将所有数据恢复到最新的状态.</p>
<h1 id="事务的隔离级别">2.  事务的隔离级别</h1>
<p>事务有以下 4 个隔离级别:</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读　｜ 幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交 Read Uncommitted</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>读已提交 Read committed</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>可重复读 Repeatable</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>可串行化 Serializable</td>
<td>N</td>
<td>N</td>
</tr>
</tbody>
</table>
<p>默认的事务隔离级别是 <code>可重复读</code>.<br>
事务的隔离级别影响系统的并发处理能力, 级别越高, 越能保证事务的一致性, 对性能影响也越大.</p>
<p>之所以这样划分, 是因为并发事务会有以下 3 个问题:</p>
<ol>
<li>脏读</li>
</ol>
<p>即一个事务中还没有提交的数据, 被另外一个事务读到了.<br>
如: 事务 A 开启事务从账户中取走 100 元; 但事务 A 还没提交前, 事务 B 来获取账户中余额, 发现并没有减少.</p>
<ol start="2">
<li>不可重复读</li>
</ol>
<p>即在一个事务里面读取了两次某个数据, 读出来的数据不一致.<br>
如: 事务 A 开启事务查询账户中余额为 1000 元; 同时事务 B 取走账户中 100 元, 并提交; 而事务 A 还没有结束, 又查询了一次账户余额, 发现账户中的余额为 900 元.</p>
<ol start="3">
<li>幻读</li>
</ol>
<p>即在一个事务里面的操作中发现了未被操作的数据.<br>
如: 事务 A 开启事务要更新一批数据; 同时事务 B 往数据库中插入一条记录, 并提交; 之后事务 A 提交事务时发现有一条记录没有更新到.</p>
<p>不可重复读和幻读的区别在于:<br>
不可重复读是在一个事务中记录发生 <code>变更</code>, 需要通过行级锁解决;<br>
幻读是在事务中表中数据发生了 <code>新增</code> 或 <code>删除</code>, 同通过表级锁解决.</p>
<h2 id="事务隔离的实现方式">2.1.  事务隔离的实现方式</h2>
<p>事务隔离的实现方式基本可分为 2 种:</p>
<ol>
<li>
<p>在读取数据前, 对其加锁, 阻止其他事务对数据进行修改.</p>
</li>
<li>
<p>不用加任何锁, 通过一定机制生成一个数据请求时间点的一致性数据快照 (Snapshot), 并用这个快照来提供一定级别(语句级或事务级)的一致性读取. 从用户的角度来看, 好像是数据库可以提供同一数据的多个版本, 因此, 这种技术叫做数据多版本并发控制 (MultiVersion Concurrency Control, 简称MVCC), 也经常称为多版本数据库.</p>
</li>
</ol>
<h3 id="mvcc">2.1.1.  MVCC</h3>
<p>Innodb MVCC主要是为 Repeatable-Read 事务隔离级别做的. 在此隔离级别下, A, B客户端所示的数据相互隔离, 互相更新不可见.</p>
<p>了解 Innodb 的行结构, Read-View 的结构对于理解 Innodb MVCC 的实现由重要意义.</p>
<p>Innodb 存储的最基本 row 中包含一些额外的存储信息 <code>DATA_TRX_ID</code>, <code>DATA_ROLL_PTR</code>, <code>DB_ROW_ID</code>, <code>DELETE_BIT</code>.<br>
6 个字节的 <code>DATA_TRX_ID</code> 标记了最新更新这条行记录的事务 ID, 每处理一个事务, 其值自动 +1.<br>
7 个字节的 <code>DATA_ROLL_PTR</code> 指向当前记录项的 rollback segment 的 undo log 记录, 找之前版本的数据就是通过这个指针.<br>
6 个字节的 <code>DB_ROW_ID</code>, 当由 Innodb 自动产生聚集索引时, 聚集索引包括这个 <code>DB_ROW_ID</code> 的值, 否则聚集索引中不包括这个值.<br>
<code>DELETE BIT</code> 位用于标识该记录是否被删除, 这里的不是真正的删除数据, 而是标志出来的删除.真正意义的删除是在commit的时候</p>
<h1 id="更新丢失问题">3.  更新丢失问题</h1>
<p>当两个或多个事务选择同一行, 然后基于最初选定的值更新该行时, 由于每个事务都不知道其他事务的存在, 就会发生丢失更新问题–最后的更新覆盖了由其他事务所做的更新.<br>
对于这个问题, 需要开发人员在业务层控制, 规避这个问题的发生, 如使用全局锁等, 控制数据, 在同一时间只有一个人能访问同一数据资源.</p>
<p><a href="https://blog.csdn.net/zx64881926/article/details/75150421" target="_blank" rel="noopener">https://blog.csdn.net/zx64881926/article/details/75150421</a></p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-faq</title>
    <url>/posts/uncategorized/bc12664/</url>
    <content><![CDATA[<h1 id="redis-是单线程的-为什么快">1.  Redis 是单线程的, 为什么快?</h1>
<ol>
<li>单线程没有线程上下文切换问题, 没有资源竞争</li>
<li>采用IO多路复用的方式并发处理任务</li>
<li>纯内存操作, 没有磁盘IO限制</li>
<li>CPU 不是 Redis 的使用瓶颈, 一般内存和网络带宽才可能是.</li>
</ol>
<h1 id="redis-和其他-key-value-存储有什么不同">2.  Redis 和其他 key-value 存储有什么不同</h1>
<ul>
<li>所有命令都是原子性操作</li>
<li>数据结构多样, 且对使用者透明</li>
<li>运行在内存中, 可以持久化到磁盘</li>
</ul>
<h1 id="redis-数据结构有哪些">3.  Redis 数据结构有哪些?</h1>
<ul>
<li>string</li>
<li>hash 表, H开头的命令</li>
<li>list</li>
<li>set</li>
<li>zset 有序集合</li>
</ul>
<h1 id="redis-慢怎么办">4.  Redis 慢怎么办?</h1>
<a href="http://www.redis.cn/topics/latency-monitor.html" title target>延迟</a>
<ol>
<li>查看慢日志 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> slowlog-log-slower-than 0 <span class="comment"># 设置慢日志门槛, 到过这个值就会记录到慢日志中, 单位微秒</span></span><br><span class="line">config <span class="built_in">set</span> slowlog-man-len 100 <span class="comment"># 存储的慢日志数量</span></span><br><span class="line"></span><br><span class="line">slowlog show</span><br></pre></td></tr></table></figure>
</li>
<li>检查最大内存策略导致<br>
对大对象进行删除, 过期和淘汰操作 (由于最大内存策略导致) 都属于阻塞操作<br>
如果经常对大对象进行删除, 过期和淘汰操作, 可尝试把大对象拆分成多个小对象. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config get maxmemory-policy</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="redis-分布式锁">5.  Redis 分布式锁</h1>
<ol>
<li>加锁</li>
</ol>
<p><code>SET $resource_id $token EX $expired_time NX</code></p>
<p>resource_id: 锁名称, 用于标识资源的唯一ID<br>
token: 随机值, 如果锁需要重入, 或者手动释放锁, 这个值必须保持一致.<br>
expired_time: 锁自动过期时间</p>
<ol start="2">
<li>解锁</li>
</ol>
<p>不使用 DEL 命令来释放锁, 而是发送一个 Lua 脚本, 这个脚本只在客户端传入的值和键的口令串相匹配时, 才对键进行删除.<br>
比较 token 是否一致, 如果一致则可以解锁, 如果不一致, 说明锁已经被其他客户端获取了, 不能再操作.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1]</span><br><span class="line">then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>这个脚本可以通过 <code>EVAL ...script... 1 resource_id token</code> 命令来调用.</p>
<h1 id="常见问题">6.  常见问题</h1>
<h2 id="缓存穿透">6.1.  缓存穿透</h2>
<p>缓存穿透是指查询一定不存在的数据, 由于缓存没有命中时需要查询数据库, 查不到数据则不写入缓存, 这将导致这个不存在的数据每次请求都需要去数据库查询, 造成缓存穿透.</p>
<p>解决办法:</p>
<ol>
<li>对所有可能查询的参数以hash形式存储, 在控制层先进行校验, 不符合则丢弃.</li>
<li>采用布隆过滤器, 将所有可能存在的数据哈希到一个足够大的bitmap中, 一个一定不存在的数据会被这个bitmap拦截掉, 从而避免了对底层存储系统的查询压力.</li>
<li>也可以采用一个更为简单粗暴的方法, 如果一个查询返回的数据为空 (不管是数 据不存在, 还是系统故障) , 我们仍然把这个空结果进行缓存, 但它的过期时间会很短, 最长不超过五分钟.</li>
</ol>
<h2 id="缓存雪崩">6.2.  缓存雪崩</h2>
<p>如果缓存集中在一段时间内失效, 发生大量的缓存穿透, 所有的查询都落在数据库上, 造成了缓存雪崩.</p>
<p>这个没有完美解决办法, 但可以分析用户行为, 尽量让失效时间点均匀分布.大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程 (进程) 写, 从而避免失效时大量的并发请求落到底层存储系统上.</p>
<p>解决办法:</p>
<ol>
<li>在并发量不高的情况下, 可以使用加锁排队, 但是这样会影响系统吞吐量.</li>
<li>提前更新过期时间, 如果发现缓存即将失效, 则重新reload, 当然需要控制reload的数量</li>
<li>不同的key, 设置不同的过期时间, 让缓存失效的时间点尽量均匀</li>
</ol>
<h2 id="缓存击穿">6.3.  缓存击穿</h2>
<p>缓存击穿是指缓存中没有但数据库中有的数据 (一般是缓存时间到期) , 这时由于并发用户特别多, 同时读缓存没读到数据, 又同时去数据库去取数据, 引起数据库压力瞬间增大, 造成过大压力</p>
<ol>
<li>设置热点数据永远不过期.</li>
<li>查询时加互斥锁, 保证同一时间只有一个线程区查询; 没有获取到锁的线程则轮询等待获取数据</li>
</ol>
<h2 id="缓存一致性">6.4.  缓存一致性</h2>
<p>场景: 在分布式系统中, 有一个频繁更新的数据要做缓存, 该怎么处理?</p>
<p>方案: 先更新数据库, 之后直接淘汰内存. 那么其他线程查询缓存时, 发现没有命中, 则通过查询数据库获取并缓存结果.</p>
<ol>
<li>使用直接淘汰, 而不是更新缓存, 是为了防止高并发下更新缓存的顺序问题; 而如果要保证更新的顺序性, 需要有更新数据的版本, data + version 同时更新, 会有原子性的问题.</li>
<li>查询数据库需要考虑缓存击穿问题. 通过分布式锁保证只有一个线程去查询, 其他线程自旋等待.</li>
<li>如果要考虑数据更新完后, 还没来得及淘汰缓存, 就服务崩溃的问题. 也就是说不能等到下次更新数据时更新缓存. 那么这种依赖事务的数据不要放在缓存中. 如果要保证缓存一致性, 需要保证业务能幂等重试.</li>
</ol>
<h2 id="什么样的数据能放在缓存中">6.5.  什么样的数据能放在缓存中</h2>
<ol>
<li>业务完全依赖缓存中的数据, 如果缓存中没有数据则无法工作, 或者能够通过查询数据库恢复的数据.</li>
<li>缓存数据不一致不会影响业务.</li>
</ol>
<h1 id="resource">7.  Resource</h1>
<ul>
<li>
<a href="http://www.redis.cn/" title target>Redis 中文官网</a>
</li>
<li>
<a href="http://www.redis.cn/documentation.html" title target>Redis 中文文档</a>
</li>
<li>
<a href="http://www.redis.cn/topics/faq.html" title target>Redis FAQ</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/posts/architecture/70e959e7/</url>
    <content><![CDATA[<p>SSO, Single Sign On, 单点登录</p>
<h1 id="应用场景">1.  应用场景</h1>
<p>大型Web项目一般都有这样的开发场景:</p>
<ul>
<li>项目子系统众多, 需要一个统一的登录系统, 用户只需要登录一次就可以访问其他信任的子系统应用.</li>
<li>子系统间依赖复杂, 前端页面间有相互跳转需求.</li>
<li>前后端分离, 各个系统间需要跨域访问.</li>
</ul>
<h1 id="单点登录序列图">2.  单点登录序列图</h1>
<img src="/posts/architecture/70e959e7/sso.png" class title="单点登录序列图">
<ul>
<li><code>ticket</code><br>
SSO系统发放给前端页面的登录凭证, 之后交给子系统判断其有效性.<br>
为了防止被拦截, ticket的存活时间极短, 一般设置为5秒左右.</li>
<li><code>sid</code><br>
即Session ID, 用户登录成功后的会话ID.<br>
同一用户在各个系统间获得的sid应该不同, 以防止某个子系统泄露sid而影响其他子系统.<br>
用户与sid之间是一对多的关系.</li>
</ul>
<ol>
<li>用户在浏览器触发任意请求访问子系统.</li>
<li>子系统验证请求的Cookie中是否有sid.<br>
假设目前为首次登录, Cookie为空, 则返回未登录状态.</li>
<li>子系统页面跳转到SSO系统的登录页面.</li>
<li>用户输入相关登录信息(用户名, 密码, 验证码等), 请求登录验证.</li>
<li>SSO系统验证用户信息, 生成ticket及用户信息;返回结果中将sid写入Cookie, 用于免登, 防止用户重复登录.</li>
<li>浏览器跳转到回调页面, 该页面用于统一验证ticket, 可设计成空白页面.<br>
若不用回调页面, 则需要每个页面都有处理ticket的能力.</li>
<li>浏览器向子系统请求验证ticket.</li>
<li>子系统向SSO系统请求验证ticket.</li>
<li>SSO系统验证完成后销毁ticket, 并为子系统生成sid.<br>
该sid与之前步骤5的sid不同, 原因之前已说明.</li>
<li>子系统缓存用户相关信息, 返回登录状态.</li>
<li>浏览器重新跳转到原url, 触发任意请求.</li>
<li>子系统验证Cookie中是否sid.<br>
若之前步骤都成功, 则此时Cookie一定带有sid.</li>
<li>子系统从本地缓存中获取用户信息.<br>
用户信息缓存时间不宜过长, 避免用户长时间不操作或不友好退出后, 占用缓存空间资源.<br>
若无缓存信息, 则向SSO系统获取.</li>
<li>子系统向SSO系统获取用户权限列表.<br>
此步骤也可做缓存处理, 同样缓存时间也不宜过长.</li>
<li>SSO系统查询并返回用户权限列表.</li>
<li>子系统正常处理请求并返回处理结果.</li>
</ol>
<h1 id="缓存内容">3.  缓存内容</h1>
<p>sid  --n–1--&gt; userid, loginTime, SubModuleID<br>
userid --1–1--&gt; userInfo, permissionList</p>
<h1 id="安全问题">4.  安全问题</h1>
<ol>
<li>ticket与sid应使用uuid类型的字符串, 防止暴力破解</li>
<li>为了防止被拦截, ticket的存活时间极短, 一般设置为5秒左右.</li>
<li>同一用户在各个系统间获得的sid应该不同, 以防止某个子系统泄露sid而影响其他子系统.</li>
<li>缓存设置时间不宜过长, 一方面避免占用空间资源, 另一方面防止回话被劫持.可以用户触发接口后延期, 但到一定时间后必须销毁.</li>
<li>在修改用户重要信息或权限后, 自动登出.</li>
<li>CSRF攻击</li>
<li>XSS攻击</li>
<li>日志记录用户操作, 无论成功还是失败, 防御各种攻击.</li>
</ol>
<h1 id="性能问题">5.  性能问题</h1>
<ol>
<li>缓存时间过不宜过短, 防止接口频繁调用, 缓存频繁写入.</li>
</ol>
<h1 id="迭代开发">6.  迭代开发</h1>
<p>迭代开发BOSS系统, 在统一的系统页面可以管理所有子系统, 不用在不同的系统中跳转, 方便运维.</p>
<h1 id="resource">7.  Resource</h1>
<ul>
<li>sso工具比较<br>
<a href="http://netsecurity.51cto.com/art/201507/482310.htm" target="_blank" rel="noopener">http://netsecurity.51cto.com/art/201507/482310.htm</a></li>
<li>

</li>
</ul>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
  </entry>
  <entry>
    <title>c10k</title>
    <url>/posts/design/28588675/</url>
    <content><![CDATA[<p>网络应用需要处理的无非就是两大类问题, 网络I/O, 数据计算.相对于后者, 网络I/O的延迟, 给应用带来的性能瓶颈大于后者.</p>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>common business</tag>
      </tags>
  </entry>
  <entry>
    <title>大规模数据集处理思路</title>
    <url>/posts/design/1155a/</url>
    <content><![CDATA[<ol>
<li>MapReduce</li>
</ol>
<p>将数据集分割成几个部分, 并行处理, 最终归并结果</p>
<ol start="2">
<li>流式处理</li>
</ol>
<p>通过偏移量流式获取数据, 可以使用小批次读取数据并缓冲, 线性处理获得结果</p>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>common business</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/design/364ea8cc/</url>
    <content><![CDATA[<h1 id="设计模式">1.  设计模式</h1>
<p>使用设计模式的目的是为了解决问题, 致力于找到最能解决问题的简单方案, 不要让模式影响设计的决策.</p>
<p>学习设计模式时需要了解每个设计模块使用的对象的属性与行为.</p>
<p>设计模式可以划分为 3 类:</p>
<h2 id="创建型">1.1.  创建型</h2>
<p>各种创建对象的方式.</p>
<ul>
<li>
<a href="/posts/design-pattern/b7f4ee84/" title="抽象工厂模式">抽象工厂模式</a>
</li>
<li>
<a href="/posts/design-pattern/d627af49/" title="建造者模式">建造者模式</a>
</li>
<li>
<a href="/posts/design-pattern/6ba1dc80/" title="工厂方法模式">工厂方法模式</a>
</li>
<li>
<a href="/posts/design-pattern/b196263a/" title="对象池模式">对象池模式</a>
</li>
<li>
<a href="/posts/design-pattern/a36a5ae4/" title="原型模式">原型模式</a>
</li>
<li>
<a href="/posts/design-pattern/65563eb2/" title="单例模式">单例模式</a>
</li>
</ul>
<h2 id="结构型">1.2.  结构型</h2>
<p>为了保持原有类型结构不变, 或者为了实现特定的类型结构.</p>
<ul>
<li>
<a href="/posts/design-pattern/19dc647c/" title="适配器模式">适配器模式</a>
</li>
<li>
<a href="/posts/design-pattern/6ed40aa9/" title="桥接模式">桥接模式</a>
</li>
<li>
<a href="/posts/design-pattern/380a0d58/" title="复合模式">复合模式</a>
</li>
<li>
<a href="/posts/design-pattern/336f0513/" title="装饰器模式">装饰器模式</a>
</li>
<li>
<a href="/posts/design-pattern/97f2d197/" title="外观模式">外观模式</a>
</li>
<li>
<a href="/posts/design-pattern/81cb386e/" title="蝇量模式">蝇量模式</a>
</li>
<li>
<a href="/posts/design-pattern/311736c6/" title="私有类数据模式">私有类数据模式</a>
</li>
<li>
<a href="/posts/design-pattern/7372c9be/" title="代理模式">代理模式</a>
</li>
</ul>
<h2 id="行为型">1.3.  行为型</h2>
<p>为了实现特定的交互方式.</p>
<ul>
<li>
<a href="/posts/design-pattern/9126ad1f/" title="责任链模式">责任链模式</a>
</li>
<li>
<a href="/posts/design-pattern/8ecaead4/" title="命令模式">命令模式</a>
</li>
<li>
<a href="/posts/design-pattern/b03226b7/" title="解释器模式">解释器模式</a>
</li>
<li>
<a href="/posts/design-pattern/e5868a15/" title="遍历模式">遍历模式</a>
</li>
<li>
<a href="/posts/design-pattern/7c0966a3/" title="中介模式">中介模式</a>
</li>
<li>
<a href="/posts/design-pattern/9679fe6e/" title="备忘录模式">备忘录模式</a>
</li>
<li>
<a href="/posts/design-pattern/f353d759/" title="空值模式">空值模式</a>
</li>
<li>
<a href="/posts/design-pattern/9b6f44e7/" title="监听器模式">监听器模式</a>
</li>
<li>
<a href="/posts/design-pattern/a393d2fb/" title="状态模式">状态模式</a>
</li>
<li>
<a href="/posts/design-pattern/144645ed/" title="策略">策略</a>
</li>
<li>
<a href="/posts/design-pattern/97601f83/" title="模板方法模式">模板方法模式</a>
</li>
<li>
<a href="/posts/design-pattern/cae5e19f/" title="访问者模式">访问者模式</a>
</li>
</ul>
<h1 id="区别">2.  区别</h1>
<h2 id="策略模式-vs-状态模式">2.1.  策略模式 vs 状态模式</h2>
<p>都是行为型设计模式<br>
状态模式用于解决状态转移的问题, 当状态发生转移了, 那么对象就会改变它的行为;<br>
策略模式用于封装一组可以互相替代的算法族, 并且可以根据需要动态地去替换使用的算法.</p>
<h1 id="代理模式-vs-访问者模式-vs-中介模式">3.  代理模式 vs 访问者模式 vs 中介模式</h1>
<p>代理模式是结构型设计模式, 用于需要控制对象访问的情况;<br>
访问者模式是行为型设计模式, 将数据的结构与操作相分离, 用于数据结构文档, 但操作复杂多变的情况.<br>
中介模式也是是行为型设计模式, 通过一个公共对象来维护多个对象之间的关系, 降低系统耦合.</p>
<h1 id="工厂方法模式-vs-抽象工厂模式-vs-享元模式">4.  工厂方法模式 vs 抽象工厂模式 vs 享元模式</h1>
<p>工厂方法模式是创建型设计模式, 用于创建相同抽象类型, 且创建过程比较复杂的情况;<br>
抽象工厂模式也是创建型设计模式, 用于创建对象家族, 模式中使用到了工厂方法模式;<br>
享元模式是结构型设计模式, 通过工厂模式创建对象, 并将他们缓存起来, 防止重复创建.</p>
<h1 id="适配器模式-vs-桥接模式-vs-外观模式">5.  适配器模式 vs 桥接模式 vs 外观模式</h1>
<p>都是结构型设计模式<br>
适配器模式用于将接口转换成另一种需要的接口;<br>
桥接模式将抽象部分与实现部分分离, 使它们可以独立变换, 也就是通过组合代替继承, 防止继承带来类爆炸.<br>
外观模式将多个不同功能的接口再次抽离出需要的功能, 隔离系统内部的复杂性, 让使用更加简单.</p>
<h1 id="责任链模式-vs-观察者模式">6.  责任链模式 vs 观察者模式</h1>
<p>都是行为型设计模式, 都是将发送者与接受者解耦.<br>
责任链模式将请求转发给责任链, 寻找合适的接受对象处理.<br>
观察者模式将请求转发给所有接受者.</p>
<h1 id="resource">7.  Resource</h1>
<ul>
<li>设计模式 – 可复用面向对象软件的基础</li>
<li>
<a href="https://sourcemaking.com/design_patterns" title target>Design Patterns</a>
</li>
<li>
<a href="https://www.oodesign.com/" title target>OODesign</a>
</li>
<li><a href="https://blog.csdn.net/u010144805/article/details/82414945" target="_blank" rel="noopener">https://blog.csdn.net/u010144805/article/details/82414945</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li>
<li><a href="https://www.cnblogs.com/zytrue/p/8484806.html" target="_blank" rel="noopener">https://www.cnblogs.com/zytrue/p/8484806.html</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_573860a90100o4k0.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_573860a90100o4k0.html</a></li>
<li><a href="https://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html" target="_blank" rel="noopener">https://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html</a></li>
</ul>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>design-pattern</tag>
        <tag>idx</tag>
      </tags>
  </entry>
  <entry>
    <title>a-shares</title>
    <url>/posts/uncategorized/f694f7cf/</url>
    <content><![CDATA[<p>A股, 正式名称为人民币普通股票, 也称流通股, 社会公众股, 普通股. 是指那些在中国大陆注册, 在中国大陆上市的普通股票. 以人民币认购和交易.<br>
A股不是实物股票, 以无纸化电子记帐, 实行 <em>T+1</em> 交割制度, 有涨跌幅 (10%) 限制, 参与投资者为中国大陆机构或个人.</p>
<h1 id="交易">1.  交易</h1>
<h2 id="交易时间">1.1.  交易时间</h2>
<p>每个交易日:<br>
9: 15 ~ 9: 25 集合竞价 (9: 15 ～ 9: 20可以申报和撤销; 9: 20 ～ 9: 25可以申报, 不可以撤销)<br>
9: 30 ~ 11: 30 前市, 连续竞价<br>
13: 00 ~ 15: 00 后市, 连续竞价<br>
其它时间交易系统不接受申报单.  (如: 9: 25 ~ 9: 30不接受申报单和撤单)<br>
对于停牌一小时的股票, 在停牌期间 (9: 30 ~ 10: 30) 交易系统不接受该股票的申报单和撤单.<br>
大宗交易的交易时间为本所交易日的15:00 ~ 15:30, 本所在上述时间内受理大宗交易申报.<br>
大宗交易用户可在交易日的14: 30开始登陆本所大宗交易电子系统, 进行开始前的准备工作; 大宗交易用户可在交易日的15: 30 ~ 16: 00通过本所大宗交易电子系统查询当天大宗交易情况或接收当天成交数据 (交易规则的大宗交易从9: 30开始, 但尚未实施) .</p>
<h2 id="交易单位">1.2.  交易单位</h2>
<p>股票的交易单位为 <em>股</em>, 100股=1手, 委托买入数量必须为100股或其整数倍. 当委托数量不能全部成交或分红送股时可能出现零股(不足1手的为零股), 零股只能委托卖出, 不能委托买入零股.</p>
<h2 id="交易费用">1.3.  交易费用</h2>
<table>
<thead>
<tr>
<th>收费项目</th>
<th>收费标准</th>
<th>最终收费对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>经手费</td>
<td>成交金额的 0.00696%  (双向)</td>
<td>会员等交上证所</td>
</tr>
<tr>
<td>证管费</td>
<td>成交金额的 0.002%  (双向)</td>
<td>会员等交中国证监会 (上证所代收)</td>
</tr>
<tr>
<td>印花税</td>
<td>成交金额的 0.1%  (单向, 卖出方)</td>
<td>投资者交税务机关 (上证所代收)</td>
</tr>
<tr>
<td>券商佣金</td>
<td>最高不超过成交金额的3‰, 最低5元起, 单笔交易佣金不满5元按5元收取</td>
<td>投资者交券商机构</td>
</tr>
</tbody>
</table>
<p>过户费<br>
成交金额 (每股一元, 等同于成交股数) 的0.06% (仅上海股票收取)<br>
成交金额的 0.002%  (双向, 仅上海股票收取)<br>
投资者交登记结算公司<br>
一般情况下, 券商对大资金量, 交易量的客户会给予降低佣金率的优惠, 因此, 资金量大, 交易频繁的客户可自己去和证券部申请. 另外, 券商还会依客户是采取电话交易, 网上交易等提供不同的佣金率, 一般来说, 网上交易收取的佣金较低.<br>
另外, 部分地方还收委托费. 这笔费用主要用于支付通讯等方面的开支, 一般按笔计算 (由证券公司营业部决定收不收, 证券公司多的地方, 相互竞争, 大多取消这项, 比如大城市, 证券公司少的地方, 营业部可能收你成交一笔收一元或五元, 比如小城镇)</p>
]]></content>
      <tags>
        <tag>A 股</tag>
      </tags>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/posts/design/a0d43444/</url>
    <content><![CDATA[<h1 id="面向对象设计原则">1.  面向对象设计原则</h1>
<p>对于面向对象软件系统设计而言, 在支持 <code>可维护性</code> 的同时, 提高系统的 <code>可复用性</code> 是一个至关重要的问题.<br>
常见的面向对象设计原则有以下 7 种, 遵循这些设计原则可以有效的提高系统的<code>可维护性</code> 及 <code>可复用性</code>.</p>
<h2 id="开闭原则">1.1.  开闭原则</h2>
<p>Open-Closed Principle</p>
<p>软件实体应对扩展开放, 对修改关闭.</p>
<p>换言之, 软件实体应尽量在不修改原有代码的情况下进行扩展. 此处软件实体可以指一个软件模块, 一个由多个类组成的局部结构或一个独立的类.</p>
<p>应用开闭原则可扩展已有的软件系统, 并为之提供新的行为, 以满足对软件的新需求, 使变化中的软件系统具有一定的 <code>适应性</code> 和 <code>灵活性</code>.<br>
对于已有的软件模块, 特别是最重要的抽象层模块不能再修改, 这就使变化中的软件系统具有一定的 <code>稳定性</code> 和 <code>延续性</code>, 这样的系统同时满足了 <code>可复用性</code> 和 <code>可扩展性</code>.</p>
<p><strong>实现开闭原则的关键就是抽象化, 并且从抽象化导出具体化实现. 在面向对象设计中, 开闭原则一并通过在原有模块中添加抽象层 (如接口或抽象类等) 来实现, 它也是其他面向对象设计原则的基础.</strong></p>
<p><strong>开闭原则是面向对象设计的目标.</strong></p>
<h2 id="里氏替换原则">1.2.  里氏替换原则</h2>
<p>Liskov Substitution Principle</p>
<p>所有引用基类的地方能够透明地使用其子类对象.</p>
<p>其严格描述: 如果对每一个类型为 T1 的对象 O1, 都有类型为 T2 的对象 O2, 使得以 T1 定义的所有程序 P 在所有的对象 O1 都代表为 O2 时, 程序 P 的行为没有变化, 那么类型 T2 是类型 T1 的子类型.<br>
换言之, 一个软件实体如果使用的是一个基类对象的话, 那么一定适用于其子类型对象, 而且觉察不出基类对象和子类对象的区别, 即把基类都替换成它的子类, 程序不会出错. 反过来则不一定成立, 如果一个软件实体使用的是一个子类对象的话, 那么它不一定适用于基类对象.</p>
<p>在运用里氏替换原则时, 尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者接口, 并将其作为基类, <strong>在程序中尽量针对抽象编程</strong>.<br>
由于子类继承基类并覆盖基类的方法, 在程序运行时, 子类对象可以替换基类对象, 如果需要对类的行为进行修改, 可以通过扩展基类, 或增加新的子类, 而无需修改使用该基类对象的代码.</p>
<p><strong>为了确保该原则的应用, 一个具体类应当只实现接口和抽象类中声明过的方法, 而不要给出多余的方法, 否则将无法调用到子类中增加的新方法.</strong></p>
<h2 id="依赖倒转原则">1.3.  依赖倒转原则</h2>
<p>Dependence Inversion Principle</p>
<p>抽象不应该依赖于细节, 细节应该依赖于抽象.</p>
<p>换言之, 要针对抽象编程, 而不是针对实现编程. 在程序代码中, 传递参数时或在关联关系中, 尽量引用层次高的抽象层类, 即使用接口和抽象类进行变量类型声明, 参数类型声明, 方法返回类型声明, 以及数据类型的转换等, 而不是使用具体类来做这类事情.<br>
使用依赖倒转原则, 由类图可以看到一个向上依赖的倒置结构, 故以此命名.</p>
<p>在引入抽象层后, 系统将具有极好的灵活性, 在程序中尽量使用抽象层进行编程, 而将具体一来作为配置. 这样一来, 如果系统行为需要发生变化, 只需对抽象层进行扩展, 并修改相关配置, 而尽可能的减少修改代码, 甚至不修改代码的情况下改变系统的功能.</p>
<p><strong>依赖倒转原则是以开闭原则为目标, 以里氏替换原则作为基础, 更深层次的应用, 是面向对象设计的主要机制.</strong></p>
<h2 id="单一职责原则">1.4.  单一职责原则</h2>
<p>Single Responsibility Principle</p>
<p>一个类只负责一个功能领域中的相应职责.<br>
对于一个类而言, 应该只有一个引起它变化的原因.</p>
<p>在一个软件系统中, 一个类 (或者大到模块, 小到方法) 承担的职责越多, 它被复用的可能性就越小.<br>
而且一个类承担的职责过多, 就相当于将这些职责耦合在一起, 当其中一个职责变化时, 可能影响其他职责的运作.<br>
因此要将这些职责进行分离, 将不同的职责封装在不同的类中, 即将不同的变化原因封装在不同的类中, 如果多个职责总是同时发生改变则可将它们封装在同一个类中.</p>
<p><strong>单一职责原则是实现 <code>高内聚</code>, <code>低耦合</code> 的指导方针.</strong></p>
<h2 id="接口隔离原则">1.5.  接口隔离原则</h2>
<p>Interface Segregation Principle</p>
<p>使用多个专门的接口, 而不使用单一的总接口.</p>
<p>这里的接口往往有 2 种含义, 这 2 种不同的含义, 在 ISP 中的表达方式以及含义都有所不同:</p>
<ol>
<li>是指一个类型所具有的方法特征的集合, 仅仅是一种逻辑上的的抽象.</li>
</ol>
<p>此时可以把接口理解成为角色, 一个接口就只代表一种角色, 此时这个原则可以叫做 <code>角色隔离原则</code>.</p>
<ol start="2">
<li>是指某种语言具体的接口定义, 有严格的定义和结构, 比如 Java 语言里的 Interface.</li>
</ol>
<p>接口仅仅提供客户端需要的行为, 客户端不需要的行为则隐藏起来, 应当为客户端提供尽可能小的单独的接口, 而不要提供大的总接口.<br>
为了使接口的职责单一, 需要将大接口中的方法根据职责不同拆分成不同的小接口, 以降低耦合度, 提高灵活性.</p>
<h2 id="迪米特法则">1.6.  迪米特法则</h2>
<p>Law of Demeter<br>
也称最少知识原则, Least Knowledge Principle</p>
<p>一个软件实体应当尽可能少的与其他实体发生相互作用.</p>
<p>这样在修改时, 就会尽量少地影响其他的模块, 扩展相对容易. 这是对软件实体之间通信的限制, 它要求限制软件实体之间通信的宽度和深度.</p>
<p>迪米特法则可分狭义法则和广义法则.<br>
在狭义的迪米特法则中, 如果两个类之间不必彼此直接通信, 那么这两个类就不应当发生直接的相互作用, 如果其中的一个类需要调用另一个类的某一个方法的话, 可以通过第三方转发这个调用. 狭义的迪米特法则可以降低类之间的耦合度, 但是会在系统中增加大量的小方法并散落在系统的各个角落, 它可以使一个系统的局部设计简化, 因为每一个局部都不会和远距离的对象有直接的关联, 但是也会造成系统的不同模块之间的通信效率降低, 使得系统的不同模块之间不容易协调.<br>
广义的迪米特法则就是指对象之间的信息流量, 流向以及信息的影响的控制, 主要是对信息隐藏的控制. 信息的隐藏可以使各个子系统之间解耦, 从而使它们可以被独立地开发, 优化, 使用和修改, 同时可以促进软件的复用, 由于每一个模块都不依赖于其它模块而存在, 因此每一个模块都可以被独立地在其它地方被使用. 一个系统的规模越大, 信息隐藏的重要性就越明显.</p>
<p>迪米特法则主要用于控制信息的过载. 在迪米特法则运用时到系统设计时, 需要注意以下的几点:<br>
在类的划分上, 应当尽量创建松耦合的类;<br>
在类的结构上, 每一个类应当尽量降低其成员变量和成员函数的访问权限;<br>
在类的设计上, 只要有可能, 一个类应当设计成不变类;<br>
在对其他类的引用上, 一个对象对其他对象的引用应当降到最低.</p>
<h2 id="合成复用原则">1.7.  合成复用原则</h2>
<p>Composite Reuse Principle<br>
也称组合/聚合复用原则, Composition / Aggregate Reuse Principle</p>
<p>复用时, 尽量使用对象组合, 而不使用继承来达到复用的目的.</p>
<p>在一个新的对象里通过关联关系 (包括组合和聚合关系) 来使用一些已有的对象, 使之成为新对象的一部分; 新对象通过委派调用已有对象的方法达到复用已有功能的目的.</p>
<p>在面向对象设计中, 可以通过 2 种基本方法在不同的环境中复用已有的设计和实现, 即通过组合/聚合关系或通过继承. 但首先应该考虑使用组合/聚合, 组合/聚合可以使系统更加灵活, 类之间的耦合度更低; 其次才考虑使用继承, 使用继承时应严格遵循里氏替换原则. 有效的使用继承会有助于对问题的理解, 降低复杂度, 而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度.</p>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性, 因为继承会将基类的实现细节暴露给子类.<br>
由于基类的内部细节对于子类来说是可见的, 所以这种复用有身为 <strong>白箱</strong> 复用.<br>
如果基类发生改变, 那么子类的实现也不得不发生改变; 从基类继承而来的实现是静态的, 不可能在运行时发生改变, 没有足够的灵活性; 而且继承只能在有限的环境中使用, 如类未声明为不能被继承.</p>
<p>由于组合或聚合关系可以将已有的对象 (也称成员对象) 纳入到新对象中, 使之成为新对象的一部分, 因此新对象可以调用已有对象的功能, 这样做可以使得成员对象的内部实现细节对新对象是不可见的, 所以这种复用又称 <strong>黑箱</strong> 复用.<br>
相对继承而言, 其耦合度相对较低; 成员对象的变化对新对象的影响不大, 可以在新对象中根据实际需要有选择性地调用成员对象的操作; 合成复用可以在运行时动态地进行, 新对象可以动态的引用于成员对象类型相同的其他对象.</p>
<h1 id="其他设计原则">2.  其他设计原则</h1>
<h2 id="solid">2.1.  SOLID</h2>
<p>SOLID 是以上其中 5 种设计原则的单词缩写, 比较好记.</p>
<ul>
<li>S 单一职责原则 SRP</li>
<li>O 开闭原则 OCP</li>
<li>L 里氏替换原则 LSP</li>
<li>I 接口分离原则 ISP</li>
<li>D 依赖倒转原则 DIP</li>
</ul>
<h2 id="dry">2.2.  DRY</h2>
<p>Don’t Repeat Yourself<br>
每一个知识或逻辑必须在一个系统中有一个单一的, 明确的表示.</p>
<h2 id="kiss">2.3.  KISS</h2>
<p>Keep It Simple, Stupid<br>
每个方法应该只解决一个小问题, 而不是实现很复杂的功能. 如果你在方法中有很多条件, 把它们分解成更小的单独的方法. 它不仅更易于阅读和维护, 而且可以更快地发现bug.</p>
<h2 id="yagni">2.4.  YAGNI</h2>
<p>You Ain’t Gonna Need It<br>
只需要将应用程序必需的功能包含进来, 而不要试图添加任何其他你认为可能需要的功能.</p>
<p>当你准备列出一个项目清单时, 试着考虑以下问题:</p>
<ul>
<li>通过降低抽象的层级, 来实现低复杂度</li>
<li>根据特性将功能独立出来</li>
<li>适度接受非功能性需求</li>
<li>识别耗时的任务, 并摆脱它们</li>
</ul>
]]></content>
      <categories>
        <category>design</category>
      </categories>
      <tags>
        <tag>design priciple</tag>
      </tags>
  </entry>
  <entry>
    <title>assess-value</title>
    <url>/posts/uncategorized/3b50cd8e/</url>
    <content><![CDATA[<p>股票估值概述<br>
股票估值是一个相对复杂的历程,影响的因素很多,没有全球统一的标准.</p>
<p>影响股票估值的因素<br>
影响股票估值的紧要因素依次是每股收益, 行业市盈率, 流通股本, 每股净资产, 每股净资产增长率等指标.</p>
<p>股票估值的方式<br>
股票估值分为绝对估值, 相对估值和联合估值.</p>
<p>一, 绝对估值<br>
绝对估值是通过对上市企业历史及当前的基本面的解析和对未来反应企业经营状况的财务数据的预测获得上市企业股票的内在价值.</p>
<p>绝对估值的方式: 一是现金流贴现定价模型, 二是B-S期权定价模型(紧要应用于期权定价, 权证定价等). 现金流贴现定价模型目前使用最多的是DDM和DCF, 而DCF估值模型中, 最广泛应用的就是FCFE股权自由现金流模型.</p>
<p>绝对估值的作用: 股票的价格总是围绕着股票的内在价值上下波动, 发现价格被低估的股票, 在股票的价格远远低于内在价值的时候买入股票, 而在股票的价格回归到内在价值甚至高于内在价值的时候卖出以获利.</p>
<p>对上市企业实行研究, 我们经常听到估值这个词, 说的其实是如何来判断一家企业的价值同时与它的当前股价实行对比, 得出股价是否偏离价值的判断, 进而指导我们的投入.</p>
<p>DCF是一套很严谨的估值方式, 是一种绝对定价方式, 想得出准确的DCF值, 需要对企业未来进展状况有清晰的了解. 得出DCF 值的历程就是判断企业未来进展的历程. 所以DCF 估值的历程也很重要. 就准确判断企业的未来进展来说, 判断成熟稳定的企业相对容易一些, 处于扩张期的企业未来进展的不确定性较大, 准确判断较为困难. 再加上DCF 值本身对参数的变动很敏感, 使DCF 值的可变性很大. 但在得出DCF 值的历程中, 会反映研究员对企业未来进展的判断, 并在此基础上假设. 有了DCF 的估值历程和结果, 以后如果假设有变动, 即可通过修改参数得到新的估值.<br>
二, 相对估值<br>
相对估值是使用市盈率, 市净率, 市售率, 市现率等价格指标与其它多只股票 (对比系) 实行对比, 如果低于对比系的相应的指标值的平均值, 股票价格被低估, 股价将很有希望上涨, 使得指标回归对比系的平均值.</p>
<p>相对估值包含PE, PB, PEG, EV/EBITDA等估值法. 通常的做法是对比, 一个是和该企业历史数据实行对比, 二是和国内同行业企业的数据实行对比, 确定它的位置, 三是和国际上的(特别是香港和美国)同行业重点企业数据实行对比.</p>
<p>市盈率PE (股价/每股收益) : PE是简洁有效的估值方式, 其核心在于e 的确定. PE＝p/e, 即价格与每股收益的比值. 从直观上看, 如果企业未来若干年每股收益为恒定值, 那么PE 值代表了企业保持恒定盈利水平的存在年限. 这有点像实业投入中回收期的概念, 只是忽略了资金的时间价值. 而实际上保持恒定的e 几乎是不可能的, e 的变动往往取决于宏观经济和企业的生存周期所决定的波动周期. 所以在运用PE 值的时候, e 的确定显得尤为重要, 由此也衍生出具备区别含义的PE 值. E 有两个方面, 一个是历史的e, 另一个是预测的e. 对于历史的e 来说, 可以用区别e 的时点值, 可以用移动平均值, 也可以用动态年度值, 这取决于想要表达的内容. 对于预测的e 来说, 预测的准确性尤为重要, 在实际市场中, e 的变动趋势对股票投入往往具备决定性的影响.<br>
市净率PB (股价/每股净资) 和净资产收益率ROE: PB &amp;ROE适合于周期的极值判断. 对于股票投入来说, 准确预测e 是非常重要的, e 的变动趋势往往决定了股价是上行还是下行. 但股价上升或下降到多少是合理的呢？ PB&amp;ROE 可以给出一个判断极值的方式. 比如, 对于一个有良好历史ROE 的企业, 在业务前景尚可的状况下, PB 值低于1就有可能是被低估的. 如果企业的盈利前景较稳定, 没有表现出明显的增长性特征, 企业的PB 值显著高于行业 (企业历史) 的最高PB 值, 股价触顶的可能性就比较大. 这里提到的周期有三个概念: 市场的波动周期, 股价的变动周期和周期性行业的变动周期. 这里的PB 值也包含三种: 整个市场的总体PB 值水平, 单一股票的PB 值水平和周期性行业的PB 值变动. 当然, PB 值有效应用的前提是合理评估资产价值.<br>
提高负债比率可以扩大企业创造利润的资源的规模, 扩大负债有提高ROE 的效果. 所以在运用PB &amp;ROE 估值的时候需考虑偿债危机.</p>
<p>PEG估值法是一代宗师彼得·林奇最爱用的一种估值方式. 非常简单实用！方式如下:<br>
个股动态市盈率除以税后利润增长率小于0. 8 的将具备一定的投入价值. 但是这种方式对周期性行业参考意义不大. 所以大家要注意行业选择使用！</p>
<p>通过研究可以发现, 商品价格周期性变动的行业, 其盈利对商品价格的变动最为敏感. 所以, 商品价格上升时是确定的投入时机. 预期商品价格下降时则是卖出时机. 在周期的高点和低点的时候, 可以用其他方式来判断是否高估或者低估. 比如, 用PB  (ROE) 等方式判断是否被低估. 对于资源类企业, 在周期底部的时候可以用单位股票资源价值作为投入的底限. 在周期的上升或者下降的阶段, 紧要参考资源价格的变动趋势.</p>
<p>建立在准确盈利预测基础上的PE 值是一种简洁有效的估值方式. 估值方式之间存在相互联系, 盈利预测是一切的基础, 但还不够, 需要综合使用几种估值方式来降低危机. 研究报告基地,最全面的上市企业研究报告</p>
<p>三, 联合估值<br>
联合估值是结合绝对估值和相对估值, 寻找同时股价和相对指标都被低估的股票, 这种股票的价格最有希望上涨.</p>
<p>股票估值的意义<br>
帮助投入者发现价值被严重低估的股票, 买入待涨获利, 直接带来经济利益;</p>
<p>帮助投入者判断手中的股票是否被高估或低估, 以作出卖出或继续持有的决定, 帮助投入者锁定盈利或坚定持有以获得更高收益的决心;</p>
<p>帮助投入者解析感兴趣的股票的危机. 估值指数越低的股票, 其下跌的危机就越小. 估值指数小于30％或操作建议给出 <em>立即买入</em>或 <em>买入</em>的股票即使下跌也是暂时的;</p>
<p>帮助投入者判断机构或投入咨询机构推荐的股票的安全性和获利性, 做到有理有据的接受投入建议;</p>
<p>帮助投入者在热点板块中寻找最大的获利机会. 通常热点板块中的股票的表现大相径庭, 有些投入者虽然踏中的热点, 却获利不高. 估值帮助投入者在热点板块中寻找到最佳的股票, 获得最大的收益;</p>
<p>帮助投入者理解股评信息中对股票价值低估的判断;</p>
<p>股票估值案例解析<br>
案例一: 双鹭药业股票估值的实证解析<br>
一, 股票估值<br>
1.国内研究现状<br>
随着我国证券市场的不断进展,对于股票估值的问题国内已经有不少的学者研究过. 马青山和余静(2003)采用股利贴现模型对 <em>浦发银行</em>实行了估值,著者发现实证结果与现实价格存在较大差异,并解析出原因紧要为超常增长阶段的长度难以确定. 赵金红(2005)用现金流贴现模型对 <em>上海汽车</em>实行了实证解析,强调了现金流贴现能够 <em>修正部分年度的会计失真</em>,但她也提到股权分置改革给实证带来了困难,需要对非流通股股价实行估计和修正. 许尚德和范波(2005)运用红利贴现模型对 <em>佛山照明</em>实行了实证解析,发现该模型能很好地估计出佛山照明的价值,并得出价格始终围绕价值波动的结论. 赵永(2006)采用收益贴现模型对 <em>上海机场</em>股票实行了实证解析,文中对上海机场股票分别采用区别的方式股利贴现模型和现金流贴现模型实行了估值,结果发现除了市场收益率, 贝塔值是影响股票估值的影响因素外,我国流通股和非流通股并存的现象也是影响合理估值的重要原因之一,并采取一定的方式加以了修正.</p>
<p>2.股票价值的构成<br>
股票的价值由确定性的现金流价值和不确定性的期权价值构成,一般来说,一个企业的现金流价值紧要包含:库存净值, 现金和短期国债, 每季度盈利和分红等. 经营比较稳定的企业,其现金流的价值较大. 而企业的期权价值部分往往包含:新技术, 自然资源, 品牌, 核心竞争力和专利等方面的内容. 越是新的快速增长型的企业,其期权价值就越高. 传统的公用事业包含电力, 能源和基础设施等方面的企业. 这些企业一般具备垄断性,往往处于稳定的外部需求之中,其自身的技术进步很有限,因此造成了这些企业的股票具备很高的确定性,这类企业的现金流比较固定. 许多服务业和制造业类型的股票同时具备现金流和期权的双重价值. 鉴于这些行业,需采用现金流贴现模型喝期权定价模型相结合的方式对其实行估值. 许多高科技企业本身并不盈利,有时候这类企业甚至具备负的现金流,它们仅仅拥有投入计划, 技术专利和美好前景. 这类企业的股票价格并不高,但其潜在价值确很打,需采用期权定价法来测算其期权价值,从而得出股票的价值.</p>
<p>区别行业其所具备的不确定性和确定性是区别的,传统的定价方式对于成熟的企业是成功的. 而对于高增长的企业,不能简单地套用增长年金的公式,因为未来是不可预测的. 所以对于区别行业的企业的股票的价值评估要以状况采用区别的估值模型.</p>
<p>二, 双鹭药业简要解析<br>
在医药行业大环境趋好的背景下,双鹭药业坚持自主研发,开发高端产品,增强了企业的核心竞争力,并在2007年取得了较好的业绩. 企业全年实现营业收入2.38亿元,同比增长62.55%,实现利润总额1.49亿元,增长169.34%,其中归属于上市企业股东的净利润1.35亿元,比去年同期增长181.71%. 企业实现基本每股收益1.09元. 下表是双鹭药业2007年12月28日的概况:</p>
<p>股票代码 002038 所属行业 生物药品制造业<br>
上市日期 2004-09-09 每股收益 1.09元<br>
总股本 12420.0000万股 净资产收益率 24.45%<br>
三, 模型的介绍<br>
1.稳定增长阶段FCFE模型<br>
股权自由现金流(FCFE)是指满足企业持续经营所需费用后的剩余现金流. 其计算公式为:FCFE=净收益-(1-δ)<em>(资本性支出-折旧)-Δ营运资本</em>(1-δ).</p>
<p>如果企业一直处于稳定增长阶段,以一个不变的比率持续增长,那么这个企业就可以使FCFE稳定增长模型:</p>
<p>①模型. 在稳定增长模型中股权资本的价值是三个变量的函数:下一年的预期FCFE, 稳定增长率和投入者的要求收益率:</p>
<p>P0 = FCFE1 / (r − gn)</p>
<p>其中:P0=股票当前的价值;FCFE1=下一年预期的FCFE</p>
<p>r=企业的股权资本成本;gn=FCFE的稳定增长率</p>
<p>②限制条件. a.折旧能够完全弥补资本性支出;b.股票的β值近似为1.</p>
<p>③模型的适用性. 该模型适用于股权资本自由现金流以不变的比率持续增长的, 处于稳定增长阶段的企业.</p>
<p>2.两阶段FCFE模型<br>
FCFE两阶段估价模型适用于那些预计会在一定时间段里快速增长,然后再进入稳定增长阶段的企业.</p>
<p>①模型. 股票的价值由两部分组成:一是超常增长时期每年FCFE的现值,二是超常增长时期结束时期末价值的现值.</p>
<p>股票价值P_0=高速增长阶段FCFE的现值+期末价值现值=</p>
<p>FCFEt = 第t年的FCFE; Pn高速增长阶段期末的股票价格</p>
<p>r=高速增长阶段内股权投入者的要求收益率</p>
<p>期末价值Pn一般使用永续稳定增长模型来计算:</p>
<p>Pn = FCFEt + 1 / (rn − gn)</p>
<p>其中:gn=第二阶段稳定增长阶段的增长率;rn=稳定增长阶段内股权投入者的要求收益率.</p>
<p>②计算期末价值. 在应用稳定增长模型的时候,我们仍然应该考虑在上一节中提到过的注意事项,另外,我们在估计高速增长阶段期末FCFE的时候,往往已经使用了对第一阶段的假定,因此这些假定也应与稳定增长阶段的假设相一致. 比如说,企业在超常增长阶段内的资本性支出可能会远远大于折旧,但当企业进入稳定增长阶段后,二者之间的差距应该减小.</p>
<p>四, 双鹭药业股票的估值的实证解析<br>
一般而言,在医药行业中,企业的价值最终来源于所出产的商品的价值,而这些商品的出产又包含着企业想有的专利权. 所以企业的价值一般由以下几部分组成:①那些已经应用于商品出产的专利权所带来的现金流;②企业已经拥有但是尚未应用到出产当中去的专利权的价值;③企业预期在未来一定时期内可以获得的任何新的专利权的期望价值,这些新的专利可能是当前正在实行的研究成果.</p>
<p>企业的价值=出产的商品的价值+已经存在的专利的价值+(未来可以获得的新的专利的价值-获得这些专利的成本).</p>
<p>我们运用传统的现金流模型可以估计公式中第一项 <em>出产的商品的价值</em>. 首先估计出现存产品商业周期内的预期现金流,然后将这些现金流按照适当的资本成本贴现到当前期就可以得到这些产品的价值. 第二项 <em>已经存在的专利的价值</em>可以用为专利定价的期权定价模型分别为企业拥有的区别的专利权估值,然后加总计算得到. 该公式中第三部分的价值基于对企业科研能力的展望. 某些特殊状况下,在未来一定时期内,研究开发的期望成本与由该科研项目产生的专利权的价值相等,这时第三项组成部分的价值为零.</p>
<p>1.Ri值的确定<br>
利用资本资产定价模型(CAPM)对Ri值实行确定Ri = Rf + β(Rm − Rf).</p>
<p>其中:Ri为股票i的预期收益率,Rf为无危机收益率,Rm为市场组合的预期收益率,β为贝塔系数.</p>
<p>第一,Rf值的确定:评估基准日5年期国债利率为6.01%,换算为复利为5.40%,即Rf=5.40%.</p>
<p>第二,估算资本市场平均收益率,确定市场危机溢价. 目前我国尚未形成并发布权威的资本市场平均收益率,为估算资本市场平均收益,此次试图通过对一段时期内证券市场投入组合的收益率实行解析,得出证券投入组合的收益率,作为资本市场平均收益率的参照值. 为使证券投入组合足够大,以至于可以反映资本市场平均收益率,故选上证综合指数和深圳综合指数作为研究对象;为了减少证券市场受政策性或突发性事件影响产生的短期大幅度波动对收益率的 <em>噪音</em>影响,选取10年(1997~2006年)的指数月收益率作为参考依据,具体估算历程如下:</p>
<p>①收集上证指数和深圳指数1996年12月-2006年12月没月月末收市指数Sn,计算出当月指数收益率:In = (Sn − Sn − 1) / Sn − 1.</p>
<p>②计算算术平均年收益率. 将上证指数1997年-2006年各月的收益率实行算术平均,计算出平均月收益率,然后换算成平均年收益率. 根据上海证券交易所网站和深圳证券交易所网站公布的数据计算得出上证指数算术平均年收益率为13.37%, 深证综合指数的算术平均年收益率为7.76%.</p>
<p>’(计算几何平均年收益率. 几何平均年收益率=[(2006年12月指数/1996年12月指数)^(1/10)-1],得出上证综合指数的几何平均年收益率为10.74%,深证综合指数的几何平均年收益率为4.18%.</p>
<p>④根据中国证监会公布的沪深股市的市值比重,沪深股市市值权重分别为0.7838和0.2162,计算出两股市的加权算术平均年收益率为12.16%,加权几何平均年收益率为9.32%,取二者权重各50%得到综合平均年收益率为10.74%.</p>
<p>⑤市场危机溢价. 根据上述计算结果,最后确定市场危机溢价MRP=10.74%-5.40%=5.26%.</p>
<p>第三,β值的确定. 以双鹭药业股票和上证综合指数2004年9月30日至2007年12月28日的周交易数据作为样本,运用SPSS13实行回归,回归结果为β=1.3,参数的F检验, t检验均通过. 将各数据代入CAPM模型可得</p>
<p>Ri = Rf + β(Rm − Rf) = 5.40% + 1.3 * 5.26% = 12.24%</p>
<p>2.估计股票的价值<br>
从历年的财务数据及企业的进展现状来看,由于企业的财务结构比较稳定,并且随着企业逐步壮大以及企业增长率的变化,它的FCFE也会随之增长,故假定双鹭药业股票经过4年的高速增长,然后从2012年开始将进入稳定增长阶段. 故我们采用FCFE两阶段增长模型来对其股票实行估值. 以2007年12月28日为起点,双鹭药业高速增长时期的时间=4年</p>
<p>每股经营收入 1.91元 每股净收益 1.06元 每股资本性支出1.05元<br>
每股折旧 0.06元 每股负债比率 35% 留存比率 100%<br>
净资产收益率=18.5%(ROE)(2004-2007年ROE的平均值),营运资本保持为经营收入的28%,预期增长率=1.00!18.5%=18.5%.</p>
<p>假设资本性支出以-24%增长, 折旧以35%增长, 净收益以18.5%增长.</p>
<p>稳定增长时期:预期增长率=8.7%(连续11年的GDP平均增长率)</p>
<p>稳定增长阶段的β=1.10;股权的成本=5.40%+1.10*5.26%=11.186%.</p>
<p>价值的第一个组成部分是高速增长阶段内预期FCFE的现值. 计算如下(数字为每股数值):</p>
<p>年份<br>
2008 2009 2010 2011 2012<br>
净收益 1.26 1.49 1.76 2.09 2.48<br>
—(资本性支出-折旧)(1-δ) 0.47 0.33 0.20 0.10 0<br>
—Δ营运资本(1-δ) 0.06 0.08 0.09 0.11 0.13<br>
=FCFE 0.73 1.08 1.47 1.88 2.35<br>
现值(12.24%) 0.65 0.86 1.04 1.19<br>
高速增长阶段FCFE的现值=0.65+0.86+1.04+1.19=3.74(元)在高速增长阶段末(2011年末)股票的期末价值可以用稳定增长模型来估计:</p>
<p>期末价值=预期下一年FCFE / (r − gn) = 2.35 / (0.11186 − 0.087) = 94.53(元)</p>
<p>期末价值的现值=94.53/1.12244=59.56(元)</p>
<p>总现值=高速增长阶段FCFE的现值+期末价值的现值=3.74+59.56=63.3(元)</p>
<p>由于当时企业所获得的专利都已进入出产,而且其产品已经为企业盈利做了很大贡献,其价值在第一部分已体现,且企业还没有尚未使用新的专利,故第二部分的价值为零. 前面已经有所提到,一般而言企业的第三部分价值为零. 故双鹭药业有限企业2007年12月28日的股票价值为每股63.3元,而当时股票的市场价格为每股60.5元,显然该企业的价值大于价格,具备投入价值.</p>
<p>通过对股票价值的构成的解析,从而针对医药制造业中的双鹭药业运用FCFE两阶段模型对其股票实行价值评估,得出了双鹭药业股票的真正价值,并对医药行业的股票价值评估方式给出了合理建议.</p>
<h1 id="resource">1.  resource</h1>
<p><a href="http://baike.eastmoney.com/item/%e8%82%a1%e7%a5%a8%e4%bc%b0%e5%80%bc" target="_blank" rel="noopener">http://baike.eastmoney.com/item/股票估值</a></p>
]]></content>
  </entry>
  <entry>
    <title>investment-analysis</title>
    <url>/posts/uncategorized/e7daf57f/</url>
    <content><![CDATA[<h1 id="基本解析-fundamental-analysis">1.  基本解析 Fundamental Analysis</h1>
<p>以企业价值作为紧要研究对象, 通过对决定企业内在价值和影响股票价格的宏观经济形势, 行业进展前景, 企业经营状况等实行详尽解析, 以大概测算上市企业的长期投入价值和安全边际, 并与当前的股票价格实行比较, 形成相应的投入建议. 基本解析认为股价波动轨迹不可能被准确预测, 而只能在有足够安全边际的状况下 <em>买入并长期持有</em>, 在安全边际消失后卖出.</p>
<h1 id="技术解析-technical-analysis">2.  技术解析 Technical Analysis</h1>
<p>以股票价格作为紧要研究对象, 以预测股价波动趋势为紧要目的, 从股价变化的历史图表入手, 对股市波动规律实行解析的方式总和. 技术解析有三个颇具争议的前提假设, 即市场行为包容消化一切; 价格以趋势方式波动; 历史会重演. 国内比较流行的技术解析方式包含道氏理论, 波浪理论, 江恩理论等.</p>
<h1 id="演化解析-evolutionary-analysis">3.  演化解析 Evolutionary Analysis</h1>
<p>以股市波动的生命运动内在属性作为紧要研究对象, 从股市的代谢性, 趋利性, 适应性, 可塑性, 应激性, 变异性, 节律性等方面入手, 对市场波动方向与空间实行动态跟踪研究, 为股票交易决策提给机会和危机评估的方式总和. 演化解析从股市波动的本质属性出发, 认为股市波动的各种复杂因果关系或者现象, 都可以从生命运动的基本原理中, 找到它们之间的逻辑关系及合理解释, 并为构建科学合理的博弈决策框架, 提给令人信服的依据.</p>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="http://baike.eastmoney.com/item/%e8%82%a1%e7%a5%a8%e5%b8%82%e5%9c%ba" target="_blank" rel="noopener">http://baike.eastmoney.com/item/股票市场</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>finance/stock/shanghai-180</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>浦发银行(600000)<br>
白云机场(600004)<br>
上海机场(600009)<br>
包钢股份(600010)<br>
华能国际(600011)<br>
华夏银行(600015)<br>
民生银行(600016)<br>
上港集团(600018)<br>
宝钢股份(600019)<br>
华能水电(600025)<br>
中国石化(600028)<br>
南方航空(600029)<br>
中信证券(600030)<br>
三一重工(600031)<br>
招商银行(600036)<br>
中直股份(600038)<br>
保利地产(600048)<br>
中国联通(600050)<br>
海信电器(600060)<br>
国投资本(600061)<br>
宇通客车(600066)<br>
葛洲坝(600068)<br>
同仁堂(600085)<br>
特变电工(600089)<br>
上汽集团(600104)<br>
国金证券(600109)<br>
北方稀土(600111)<br>
东方航空(600115)<br>
中国卫星(600118)<br>
中国巨石(600176)<br>
兖州煤业(600188)<br>
复星医药(600196)<br>
新湖中宝(600208)<br>
航天信息(600271)<br>
恒瑞医药(600276)<br>
西水股份(600291)<br>
广汇汽车(600297)<br>
安琪酵母(600298)<br>
万华化学(600309)<br>
白云山(600332)<br>
华夏幸福(600340)<br>
浙江龙盛(600352)<br>
江西铜业(600362)<br>
金地集团(600383)<br>
海澜之家(600398)<br>
国电南瑞(600406)<br>
华鲁恒升(600426)<br>
片仔癀(600436)<br>
通威股份(600438)<br>
蓝光发展(600466)<br>
中国动力(600482)<br>
亨通光电(600487)<br>
中金黄金(600489)<br>
方大炭素(600516)<br>
贵州茅台(600519)<br>
中天科技(600522)<br>
中铁工业(600528)<br>
天士力(600535)<br>
山东黄金(600547)<br>
恒生电子(600570)<br>
康恩贝(600572)<br>
海螺水泥(600585)<br>
用友网络(600588)<br>
北大荒(600598)<br>
青岛啤酒(600600)<br>
绿地控股(600606)<br>
东方明珠(600637)<br>
爱建集团(600643)<br>
福耀玻璃(600660)<br>
海尔智家(600690)<br>
均胜电子(600699)<br>
三安光电(600703)<br>
中航资本(600705)<br>
北汽蓝谷(600733)<br>
华域汽车(600741)<br>
中航沈飞(600760)<br>
国电电力(600795)<br>
鹏博士(600804)<br>
山西汾酒(600809)<br>
安信信托(600816)<br>
海通证券(600837)<br>
通化东宝(600867)<br>
中炬高新(600872)<br>
杉杉股份(600884)<br>
国投电力(600886)<br>
伊利股份(600887)<br>
航发动力(600893)<br>
张江高科(600895)<br>
长江电力(600900)<br>
江苏租赁(600901)<br>
贵州燃气(600903)<br>
华安证券(600909)<br>
江苏银行(600919)<br>
杭州银行(600926)<br>
东方证券(600958)<br>
中国电影(600977)<br>
招商证券(600999)<br>
大秦铁路(601006)<br>
南京银行(601009)<br>
隆基股份(601012)<br>
中信建投(601066)<br>
中国神华(601088)<br>
太平洋(601099)<br>
财通证券(601108)<br>
中国国航(601111)<br>
中国化学(601117)<br>
工业富联(601138)<br>
新城控股(601155)<br>
天风证券(601162)<br>
兴业银行(601166)<br>
北京银行(601169)<br>
中国铁建(601186)<br>
东兴证券(601198)<br>
国泰君安(601211)<br>
陕西煤业(601225)<br>
上海银行(601229)<br>
桐昆股份(601233)<br>
广汽集团(601238)<br>
农业银行(601288)<br>
青岛港(601298)<br>
中国平安(601318)<br>
中国人保(601319)<br>
交通银行(601328)<br>
新华保险(601336)<br>
三六零(601360)<br>
兴业证券(601377)<br>
中国中铁(601390)<br>
工商银行(601398)<br>
东吴证券(601555)<br>
长沙银行(601577)<br>
中国外运(601598)<br>
中国铝业(601600)<br>
中国太保(601601)<br>
上海医药(601607)<br>
明阳智能(601615)<br>
中国中冶(601618)<br>
中国人寿(601628)<br>
长城汽车(601633)<br>
中国建筑(601668)<br>
中国电建(601669)<br>
华泰证券(601688)<br>
潞安环能(601699)<br>
上海电气(601727)<br>
中国中车(601766)<br>
光大证券(601788)<br>
中国交建(601800)<br>
光大银行(601818)<br>
美凯龙(601828)<br>
成都银行(601838)<br>
中国石油(601857)<br>
紫金银行(601860)<br>
正泰电器(601877)<br>
浙商证券(601878)<br>
中国银河(601881)<br>
中国国旅(601888)<br>
紫金矿业(601899)<br>
方正证券(601901)<br>
永辉超市(601933)<br>
建设银行(601939)<br>
中国核电(601985)<br>
中国银行(601988)<br>
中国重工(601989)<br>
南京证券(601990)<br>
金隅集团(601992)<br>
贵阳银行(601997)<br>
中信银行(601998)<br>
亚普股份(603013)<br>
中科曙光(603019)<br>
养元饮品(603156)<br>
汇顶科技(603160)<br>
药明康德(603259)<br>
合盛硅业(603260)<br>
海天味业(603288)<br>
今世缘(603369)<br>
科沃斯(603486)<br>
口子窖(603589)<br>
华友钴业(603799)<br>
步长制药(603858)<br>
兆易创新(603986)<br>
洛阳钼业(603993)</p>
]]></content>
  </entry>
  <entry>
    <title>k-line</title>
    <url>/posts/uncategorized/1af0de65/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>finance/stock/shanghai-a-shares</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>600000  浦发银行<br>
600004  白云机场<br>
600006  东风汽车<br>
600007  中国国贸<br>
600008  首创股份<br>
600009  上海机场<br>
600010  包钢股份<br>
600011  华能国际<br>
600012  皖通高速<br>
600015  华夏银行<br>
600016  民生银行<br>
600017  日照港<br>
600018  上港集团<br>
600019  宝钢股份<br>
600020  中原高速<br>
600021  上海电力<br>
600022  山东钢铁<br>
600023  浙能电力<br>
600025  华能水电<br>
600026  中远海能<br>
600027  华电国际<br>
600028  中国石化<br>
600029  南方航空<br>
600030  中信证券<br>
600031  三一重工<br>
600033  福建高速<br>
600035  楚天高速<br>
600036  招商银行<br>
600037  歌华有线<br>
600038  中直股份<br>
600039  四川路桥<br>
600048  保利地产<br>
600050  中国联通<br>
600051  宁波联合<br>
600052  浙江广厦<br>
600053  九鼎投资<br>
600054  黄山旅游<br>
600055  万东医疗<br>
600056  中国医药<br>
600057  厦门象屿<br>
600058  五矿发展<br>
600059  古越龙山<br>
600060  海信电器<br>
600061  国投资本<br>
600062  华润双鹤<br>
600063  皖维高新<br>
600064  南京高科<br>
600066  宇通客车<br>
600067  冠城大通<br>
600068  葛洲坝<br>
600069  银鸽投资<br>
600070  浙江富润<br>
600071  凤凰光学<br>
600072  中船科技<br>
600073  上海梅林<br>
600075  新疆天业<br>
600076  康欣新材<br>
600077  宋都股份<br>
600078  澄星股份<br>
600079  人福医药<br>
600080  金花股份<br>
600081  东风科技<br>
600082  海泰发展<br>
600083  博信股份<br>
600085  同仁堂<br>
600086  东方金钰<br>
600088  中视传媒<br>
600089  特变电工<br>
600090  同济堂<br>
600093  易见股份<br>
600094  大名城<br>
600095  哈高科<br>
600096  云天化<br>
600097  开创国际<br>
600098  广州发展<br>
600099  林海股份<br>
600100  同方股份<br>
600101  明星电力<br>
600103  青山纸业<br>
600104  上汽集团<br>
600105  永鼎股份<br>
600106  重庆路桥<br>
600107  美尔雅<br>
600108  亚盛集团<br>
600109  国金证券<br>
600110  诺德股份<br>
600111  北方稀土<br>
600113  浙江东日<br>
600114  东睦股份<br>
600115  东方航空<br>
600116  三峡水利<br>
600117  西宁特钢<br>
600118  中国卫星<br>
600120  浙江东方<br>
600121  郑州煤电<br>
600122  宏图高科<br>
600123  兰花科创<br>
600125  铁龙物流<br>
600126  杭钢股份<br>
600127  金健米业<br>
600128  弘业股份<br>
600129  太极集团<br>
600130  波导股份<br>
600131  岷江水电<br>
600132  重庆啤酒<br>
600133  东湖高新<br>
600135  乐凯胶片<br>
600136  当代明诚<br>
600137  浪莎股份<br>
600138  中青旅<br>
600139  西部资源<br>
600141  兴发集团<br>
600143  金发科技<br>
600146  商赢环球<br>
600148  长春一东<br>
600150  中国船舶<br>
600151  航天机电<br>
600152  维科技术<br>
600153  建发股份<br>
600155  华创阳安<br>
600156  华升股份<br>
600157  永泰能源<br>
600158  中体产业<br>
600159  大龙地产<br>
600160  巨化股份<br>
600161  天坛生物<br>
600162  香江控股<br>
600163  中闽能源<br>
600165  新日恒力<br>
600166  福田汽车<br>
600167  联美控股<br>
600168  武汉控股<br>
600169  太原重工<br>
600170  上海建工<br>
600171  上海贝岭<br>
600172  黄河旋风<br>
600173  卧龙地产<br>
600175  美都能源<br>
600176  中国巨石<br>
600177  雅戈尔<br>
600178  东安动力<br>
600180  瑞茂通<br>
600182  佳通轮胎<br>
600183  生益科技<br>
600184  光电股份<br>
600185  格力地产<br>
600187  国中水务<br>
600188  兖州煤业<br>
600189  吉林森工<br>
600190  锦州港<br>
600191  华资实业<br>
600192  长城电工<br>
600195  中牧股份<br>
600196  复星医药<br>
600197  伊力特<br>
600198  大唐电信<br>
600199  金种子酒<br>
600200  江苏吴中<br>
600201  生物股份<br>
600202  哈空调<br>
600203  福日电子<br>
600206  有研新材<br>
600207  安彩高科<br>
600208  新湖中宝<br>
600210  紫江企业<br>
600211  西藏药业<br>
600212  江泉实业<br>
600213  亚星客车<br>
600215  长春经开<br>
600216  浙江医药<br>
600217  中再资环<br>
600218  全柴动力<br>
600219  南山铝业<br>
600220  江苏阳光<br>
600221  海航控股<br>
600222  太龙药业<br>
600223  鲁商发展<br>
600225  天津松江<br>
600226  瀚叶股份<br>
600227  圣济堂<br>
600229  城市传媒<br>
600230  沧州大化<br>
600231  凌钢股份<br>
600232  金鹰股份<br>
600233  圆通速递<br>
600235  民丰特纸<br>
600236  桂冠电力<br>
600237  铜峰电子<br>
600239  云南城投<br>
600241  时代万恒<br>
600242  中昌数据<br>
600243  青海华鼎<br>
600246  万通地产<br>
600248  延长化建<br>
600249  两面针<br>
600250  南纺股份<br>
600251  冠农股份<br>
600252  中恒集团<br>
600255  梦舟股份<br>
600256  广汇能源<br>
600257  大湖股份<br>
600258  首旅酒店<br>
600259  广晟有色<br>
600260  凯乐科技<br>
600261  阳光照明<br>
600262  北方股份<br>
600266  北京城建<br>
600267  海正药业<br>
600268  国电南自<br>
600269  赣粤高速<br>
600271  航天信息<br>
600272  开开实业<br>
600273  嘉化能源<br>
600276  恒瑞医药<br>
600277  亿利洁能<br>
600278  东方创业<br>
600279  重庆港九<br>
600280  中央商场<br>
600281  太化股份<br>
600282  南钢股份<br>
600283  钱江水利<br>
600284  浦东建设<br>
600285  羚锐制药<br>
600287  江苏舜天<br>
600288  大恒科技<br>
600290  华仪电气<br>
600291  西水股份<br>
600292  远达环保<br>
600293  三峡新材<br>
600295  鄂尔多斯<br>
600297  广汇汽车<br>
600298  安琪酵母<br>
600299  安迪苏<br>
600300  维维股份<br>
600302  标准股份<br>
600303  曙光股份<br>
600305  恒顺醋业<br>
600306  商业城<br>
600307  酒钢宏兴<br>
600308  华泰股份<br>
600309  万华化学<br>
600310  桂东电力<br>
600311  荣华实业<br>
600312  平高电气<br>
600313  农发种业<br>
600315  上海家化<br>
600316  洪都航空<br>
600317  营口港<br>
600318  新力金融<br>
600319  亚星化学<br>
600320  振华重工<br>
600322  天房发展<br>
600323  瀚蓝环境<br>
600325  华发股份<br>
600326  西藏天路<br>
600327  大东方<br>
600328  兰太实业<br>
600329  中新药业<br>
600330  天通股份<br>
600331  宏达股份<br>
600332  白云山<br>
600333  长春燃气<br>
600335  国机汽车<br>
600336  澳柯玛<br>
600337  美克家居<br>
600338  西藏珠峰<br>
600339  中油工程<br>
600340  华夏幸福<br>
600343  航天动力<br>
600345  长江通信<br>
600346  恒力石化<br>
600348  阳泉煤业<br>
600350  山东高速<br>
600351  亚宝药业<br>
600352  浙江龙盛<br>
600353  旭光股份<br>
600354  敦煌种业<br>
600355  精伦电子<br>
600356  恒丰纸业<br>
600358  国旅联合<br>
600359  新农开发<br>
600360  华微电子<br>
600361  华联综超<br>
600362  江西铜业<br>
600363  联创光电<br>
600365  通葡股份<br>
600366  宁波韵升<br>
600367  红星发展<br>
600368  五洲交通<br>
600369  西南证券<br>
600370  三房巷<br>
600371  万向德农<br>
600372  中航电子<br>
600373  中文传媒<br>
600375  华菱星马<br>
600376  首开股份<br>
600377  宁沪高速<br>
600378  昊华科技<br>
600379  宝光股份<br>
600380  健康元<br>
600381  青海春天<br>
600382  广东明珠<br>
600383  金地集团<br>
600386  北巴传媒<br>
600387  海越能源<br>
600388  龙净环保<br>
600389  江山股份<br>
600390  五矿资本<br>
600391  航发科技<br>
600392  盛和资源<br>
600393  粤泰股份<br>
600395  盘江股份<br>
600397  安源煤业<br>
600398  海澜之家<br>
600400  红豆股份<br>
600403  大有能源<br>
600405  动力源<br>
600406  国电南瑞<br>
600409  三友化工<br>
600410  华胜天成<br>
600415  小商品城<br>
600416  湘电股份<br>
600418  江淮汽车<br>
600419  天润乳业<br>
600420  现代制药<br>
600422  昆药集团<br>
600425  青松建化<br>
600426  华鲁恒升<br>
600428  中远海特<br>
600429  三元股份<br>
600433  冠豪高新<br>
600435  北方导航<br>
600436  片仔癀<br>
600438  通威股份<br>
600439  瑞贝卡<br>
600444  国机通用<br>
600446  金证股份<br>
600448  华纺股份<br>
600449  宁夏建材<br>
600452  涪陵电力<br>
600455  博通股份<br>
600456  宝钛股份<br>
600458  时代新材<br>
600459  贵研铂业<br>
600460  士兰微<br>
600461  洪城水业<br>
600463  空港股份<br>
600466  蓝光发展<br>
600467  好当家<br>
600468  百利电气<br>
600469  风神股份<br>
600470  六国化工<br>
600475  华光股份<br>
600476  湘邮科技<br>
600477  杭萧钢构<br>
600478  科力远<br>
600479  千金药业<br>
600480  凌云股份<br>
600481  双良节能<br>
600482  中国动力<br>
600483  福能股份<br>
600486  扬农化工<br>
600487  亨通光电<br>
600488  天药股份<br>
600489  中金黄金<br>
600490  鹏欣资源<br>
600491  龙元建设<br>
600493  凤竹纺织<br>
600495  晋西车轴<br>
600496  精工钢构<br>
600497  驰宏锌锗<br>
600498  烽火通信<br>
600499  科达洁能<br>
600500  中化国际<br>
600501  航天晨光<br>
600502  安徽建工<br>
600503  华丽家族<br>
600505  西昌电力<br>
600506  香梨股份<br>
600507  方大特钢<br>
600508  上海能源<br>
600509  天富能源<br>
600510  黑牡丹<br>
600511  国药股份<br>
600512  腾达建设<br>
600513  联环药业<br>
600515  海航基础<br>
600516  方大炭素<br>
600517  置信电气<br>
600519  贵州茅台<br>
600520  文一科技<br>
600521  华海药业<br>
600522  中天科技<br>
600523  贵航股份<br>
600525  长园集团<br>
600527  江南高纤<br>
600528  中铁工业<br>
600529  山东药玻<br>
600530  交大昂立<br>
600531  豫光金铅<br>
600532  宏达矿业<br>
600533  栖霞建设<br>
600535  天士力<br>
600536  中国软件<br>
600537  亿晶光电<br>
600538  国发股份<br>
600540  新赛股份<br>
600543  莫高股份<br>
600545  卓郎智能<br>
600546  山煤国际<br>
600547  山东黄金<br>
600548  深高速<br>
600549  厦门钨业<br>
600550  保变电气<br>
600551  时代出版<br>
600552  凯盛科技<br>
600555  海航创新<br>
600557  康缘药业<br>
600558  大西洋<br>
600559  老白干酒<br>
600560  金自天正<br>
600561  江西长运<br>
600562  国睿科技<br>
600563  法拉电子<br>
600565  迪马股份<br>
600566  济川药业<br>
600567  山鹰纸业<br>
600568  中珠医疗<br>
600569  安阳钢铁<br>
600570  恒生电子<br>
600571  信雅达<br>
600572  康恩贝<br>
600573  惠泉啤酒<br>
600575  皖江物流<br>
600576  祥源文化<br>
600577  精达股份<br>
600578  京能电力<br>
600579  天华院<br>
600580  卧龙电驱<br>
600581  八一钢铁<br>
600582  天地科技<br>
600583  海油工程<br>
600584  长电科技<br>
600585  海螺水泥<br>
600586  金晶科技<br>
600587  新华医疗<br>
600588  用友网络<br>
600589  广东榕泰<br>
600590  泰豪科技<br>
600592  龙溪股份<br>
600593  大连圣亚<br>
600594  益佰制药<br>
600596  新安股份<br>
600597  光明乳业<br>
600598  北大荒<br>
600599  熊猫金控<br>
600600  青岛啤酒<br>
600601  方正科技<br>
600602  云赛智联<br>
600603  广汇物流<br>
600604  市北高新<br>
600605  汇通能源<br>
600606  绿地控股<br>
600609  金杯汽车<br>
600611  大众交通<br>
600612  老凤祥<br>
600613  神奇制药<br>
600616  金枫酒业<br>
600617  国新能源<br>
600618  氯碱化工<br>
600619  海立股份<br>
600620  天宸股份<br>
600621  华鑫股份<br>
600622  光大嘉宝<br>
600623  华谊集团<br>
600624  复旦复华<br>
600626  申达股份<br>
600628  新世界<br>
600629  华建集团<br>
600630  龙头股份<br>
600633  浙数文化<br>
600635  大众公用<br>
600636  三爱富<br>
600637  东方明珠<br>
600638  新黄浦<br>
600639  浦东金桥<br>
600640  号百控股<br>
600641  万业企业<br>
600642  申能股份<br>
600643  爱建集团<br>
600644  乐山电力<br>
600645  中源协和<br>
600647  同达创业<br>
600648  外高桥<br>
600649  城投控股<br>
600650  锦江投资<br>
600651  飞乐音响<br>
600653  申华控股<br>
600655  豫园股份<br>
600657  信达地产<br>
600658  电子城<br>
600660  福耀玻璃<br>
600661  昂立教育<br>
600662  强生控股<br>
600663  陆家嘴<br>
600664  哈药股份<br>
600665  天地源<br>
600667  太极实业<br>
600668  尖峰集团<br>
600671  天目药业<br>
600673  东阳光<br>
600674  川投能源<br>
600675  中华企业<br>
600676  交运股份<br>
600677  航天通信<br>
600678  四川金顶<br>
600679  上海凤凰<br>
600681  百川能源<br>
600682  南京新百<br>
600683  京投发展<br>
600684  珠江实业<br>
600685  中船防务<br>
600686  金龙汽车<br>
600688  上海石化<br>
600689  上海三毛<br>
600690  海尔智家<br>
600691  阳煤化工<br>
600692  亚通股份<br>
600693  东百集团<br>
600694  大商股份<br>
600695  绿庭投资<br>
600697  欧亚集团<br>
600699  均胜电子<br>
600702  舍得酒业<br>
600703  三安光电<br>
600704  物产中大<br>
600705  中航资本<br>
600706  曲江文旅<br>
600707  彩虹股份<br>
600708  光明地产<br>
600710  苏美达<br>
600711  盛屯矿业<br>
600712  南宁百货<br>
600713  南京医药<br>
600714  金瑞矿业<br>
600715  文投控股<br>
600716  凤凰股份<br>
600717  天津港<br>
600718  东软集团<br>
600719  大连热电<br>
600720  祁连山<br>
600722  金牛化工<br>
600723  首商股份<br>
600724  宁波富达<br>
600727  鲁北化工<br>
600728  佳都科技<br>
600729  重庆百货<br>
600730  中国高科<br>
600731  湖南海利<br>
600733  北汽蓝谷<br>
600734  实达集团<br>
600735  新华锦<br>
600736  苏州高新<br>
600737  中粮糖业<br>
600738  兰州民百<br>
600739  辽宁成大<br>
600740  山西焦化<br>
600741  华域汽车<br>
600742  一汽富维<br>
600743  华远地产<br>
600744  华银电力<br>
600745  闻泰科技<br>
600746  江苏索普<br>
600748  上实发展<br>
600749  西藏旅游<br>
600750  江中药业<br>
600751  海航科技<br>
600753  东方银星<br>
600754  锦江股份<br>
600755  厦门国贸<br>
600756  浪潮软件<br>
600757  长江传媒<br>
600758  红阳能源<br>
600759  洲际油气<br>
600760  中航沈飞<br>
600761  安徽合力<br>
600763  通策医疗<br>
600764  中国海防<br>
600765  中航重机<br>
600766  园城黄金<br>
600768  宁波富邦<br>
600769  祥龙电业<br>
600770  综艺股份<br>
600771  广誉远<br>
600773  西藏城投<br>
600774  汉商集团<br>
600775  南京熊猫<br>
600776  东方通信<br>
600777  新潮能源<br>
600778  友好集团<br>
600779  水井坊<br>
600780  通宝能源<br>
600782  新钢股份<br>
600783  鲁信创投<br>
600784  鲁银投资<br>
600785  新华百货<br>
600787  中储股份<br>
600789  鲁抗医药<br>
600790  轻纺城<br>
600791  京能置业<br>
600792  云煤能源<br>
600793  宜宾纸业<br>
600794  保税科技<br>
600795  国电电力<br>
600796  钱江生化<br>
600797  浙大网新<br>
600798  宁波海运<br>
600800  天津磁卡<br>
600801  华新水泥<br>
600802  福建水泥<br>
600803  新奥股份<br>
600804  鹏博士<br>
600805  悦达投资<br>
600808  马钢股份<br>
600809  山西汾酒<br>
600810  神马股份<br>
600811  东方集团<br>
600812  华北制药<br>
600814  杭州解百<br>
600816  安信信托<br>
600818  中路股份<br>
600819  耀皮玻璃<br>
600820  隧道股份<br>
600821  津劝业<br>
600822  上海物贸<br>
600823  世茂股份<br>
600824  益民集团<br>
600825  新华传媒<br>
600826  兰生股份<br>
600827  百联股份<br>
600828  茂业商业<br>
600829  人民同泰<br>
600830  香溢融通<br>
600831  广电网络<br>
600833  第一医药<br>
600834  申通地铁<br>
600835  上海机电<br>
600836  界龙实业<br>
600837  海通证券<br>
600838  上海九百<br>
600839  四川长虹<br>
600841  上柴股份<br>
600843  上工申贝<br>
600844  丹化科技<br>
600845  宝信软件<br>
600846  同济科技<br>
600847  万里股份<br>
600848  上海临港<br>
600850  华东电脑<br>
600851  海欣股份<br>
600853  龙建股份<br>
600854  春兰股份<br>
600855  航天长峰<br>
600857  宁波中百<br>
600858  银座股份<br>
600859  王府井<br>
600860  京城股份<br>
600861  北京城乡<br>
600862  中航高科<br>
600863  内蒙华电<br>
600864  哈投股份<br>
600865  百大集团<br>
600866  星湖科技<br>
600867  通化东宝<br>
600868  梅雁吉祥<br>
600869  智慧能源<br>
600871  石化油服<br>
600872  中炬高新<br>
600873  梅花生物<br>
600874  创业环保<br>
600875  东方电气<br>
600876  洛阳玻璃<br>
600879  航天电子<br>
600880  博瑞传播<br>
600881  亚泰集团<br>
600882  妙可蓝多<br>
600883  博闻科技<br>
600884  杉杉股份<br>
600885  宏发股份<br>
600886  国投电力<br>
600887  伊利股份<br>
600888  新疆众和<br>
600889  南京化纤<br>
600890  中房股份<br>
600892  大晟文化<br>
600893  航发动力<br>
600894  广日股份<br>
600895  张江高科<br>
600896  览海投资<br>
600897  厦门空港<br>
600898  国美通讯<br>
600901  江苏租赁<br>
600903  贵州燃气<br>
600908  无锡银行<br>
600909  华安证券<br>
600917  重庆燃气<br>
600919  江苏银行<br>
600926  杭州银行<br>
600928  西安银行<br>
600929  湖南盐业<br>
600933  爱柯迪<br>
600936  广西广电<br>
600939  重庆建工<br>
600958  东方证券<br>
600959  江苏有线<br>
600960  渤海汽车<br>
600961  株冶集团<br>
600962  国投中鲁<br>
600963  岳阳林纸<br>
600965  福成股份<br>
600966  博汇纸业<br>
600967  内蒙一机<br>
600968  海油发展<br>
600969  郴电国际<br>
600970  中材国际<br>
600971  恒源煤电<br>
600973  宝胜股份<br>
600975  新五丰<br>
600976  健民集团<br>
600977  中国电影<br>
600978  宜华生活<br>
600979  广安爱众<br>
600980  北矿科技<br>
600981  汇鸿集团<br>
600982  宁波热电<br>
600983  惠而浦<br>
600984  建设机械<br>
600985  淮北矿业<br>
600986  科达股份<br>
600987  航民股份<br>
600988  赤峰黄金<br>
600989  宝丰能源<br>
600990  四创电子<br>
600992  贵绳股份<br>
600993  马应龙<br>
600995  文山电力<br>
600996  贵广网络<br>
600997  开滦股份<br>
600998  九州通<br>
600999  招商证券<br>
601000  唐山港<br>
601001  大同煤业<br>
601002  晋亿实业<br>
601003  柳钢股份<br>
601005  重庆钢铁<br>
601006  大秦铁路<br>
601007  金陵饭店<br>
601008  连云港<br>
601009  南京银行<br>
601010  文峰股份<br>
601011  宝泰隆<br>
601012  隆基股份<br>
601015  陕西黑猫<br>
601016  节能风电<br>
601018  宁波港<br>
601019  山东出版<br>
601020  华钰矿业<br>
601021  春秋航空<br>
601028  玉龙股份<br>
601038  一拖股份<br>
601058  赛轮轮胎<br>
601066  中信建投<br>
601068  中铝国际<br>
601069  西部黄金<br>
601086  国芳集团<br>
601088  中国神华<br>
601098  中南传媒<br>
601099  太平洋<br>
601100  恒立液压<br>
601101  昊华能源<br>
601106  中国一重<br>
601107  四川成渝<br>
601108  财通证券<br>
601111  中国国航<br>
601113  华鼎股份<br>
601116  三江购物<br>
601117  中国化学<br>
601118  海南橡胶<br>
601126  四方股份<br>
601127  小康股份<br>
601128  常熟银行<br>
601137  博威合金<br>
601138  工业富联<br>
601139  深圳燃气<br>
601155  新城控股<br>
601158  重庆水务<br>
601162  天风证券<br>
601163  三角轮胎<br>
601166  兴业银行<br>
601168  西部矿业<br>
601169  北京银行<br>
601177  杭齿前进<br>
601179  中国西电<br>
601186  中国铁建<br>
601188  龙江交通<br>
601198  东兴证券<br>
601199  江南水务<br>
601200  上海环境<br>
601208  东材科技<br>
601211  国泰君安<br>
601212  白银有色<br>
601216  君正集团<br>
601218  吉鑫科技<br>
601222  林洋能源<br>
601225  陕西煤业<br>
601226  华电重工<br>
601228  广州港<br>
601229  上海银行<br>
601231  环旭电子<br>
601233  桐昆股份<br>
601236  红塔证券<br>
601238  广汽集团<br>
601258  庞大集团<br>
601288  农业银行<br>
601298  青岛港<br>
601311  骆驼股份<br>
601318  中国平安<br>
601319  中国人保<br>
601326  秦港股份<br>
601328  交通银行<br>
601330  绿色动力<br>
601333  广深铁路<br>
601336  新华保险<br>
601339  百隆东方<br>
601360  三六零<br>
601366  利群股份<br>
601368  绿城水务<br>
601369  陕鼓动力<br>
601375  中原证券<br>
601377  兴业证券<br>
601388  怡球资源<br>
601390  中国中铁<br>
601398  工商银行<br>
601500  通用股份<br>
601515  东风股份<br>
601518  吉林高速<br>
601519  大智慧<br>
601555  东吴证券<br>
601566  九牧王<br>
601567  三星医疗<br>
601577  长沙银行<br>
601579  会稽山<br>
601588  北辰实业<br>
601595  上海电影<br>
601598  中国外运<br>
601599  鹿港文化<br>
601600  中国铝业<br>
601601  中国太保<br>
601606  长城军工<br>
601607  上海医药<br>
601608  中信重工<br>
601611  中国核建<br>
601615  明阳智能<br>
601616  广电电气<br>
601618  中国中冶<br>
601619  嘉泽新能<br>
601628  中国人寿<br>
601633  长城汽车<br>
601636  旗滨集团<br>
601666  平煤股份<br>
601668  中国建筑<br>
601669  中国电建<br>
601677  明泰铝业<br>
601678  滨化股份<br>
601688  华泰证券<br>
601689  拓普集团<br>
601698  中国卫通<br>
601699  潞安环能<br>
601700  风范股份<br>
601717  郑煤机<br>
601718  际华集团<br>
601727  上海电气<br>
601766  中国中车<br>
601777  力帆股份<br>
601788  光大证券<br>
601789  宁波建工<br>
601799  星宇股份<br>
601800  中国交建<br>
601801  皖新传媒<br>
601808  中海油服<br>
601811  新华文轩<br>
601818  光大银行<br>
601828  美凯龙<br>
601838  成都银行<br>
601857  中国石油<br>
601858  中国科传<br>
601860  紫金银行<br>
601865  福莱特<br>
601866  中远海发<br>
601869  长飞光纤<br>
601872  招商轮船<br>
601877  正泰电器<br>
601878  浙商证券<br>
601880  大连港<br>
601881  中国银河<br>
601882  海天精工<br>
601886  江河集团<br>
601888  中国国旅<br>
601890  亚星锚链<br>
601898  中煤能源<br>
601899  紫金矿业<br>
601901  方正证券<br>
601908  京运通<br>
601918  新集能源<br>
601919  中远海控<br>
601928  凤凰传媒<br>
601929  吉视传媒<br>
601933  永辉超市<br>
601939  建设银行<br>
601949  中国出版<br>
601952  苏垦农发<br>
601958  金钼股份<br>
601965  中国汽研<br>
601966  玲珑轮胎<br>
601968  宝钢包装<br>
601969  海南矿业<br>
601975  招商南油<br>
601985  中国核电<br>
601988  中国银行<br>
601989  中国重工<br>
601990  南京证券<br>
601991  大唐发电<br>
601992  金隅集团<br>
601996  丰林集团<br>
601997  贵阳银行<br>
601998  中信银行<br>
601999  出版传媒<br>
603000  人民网<br>
603001  奥康国际<br>
603002  宏昌电子<br>
603003  龙宇燃油<br>
603005  晶方科技<br>
603006  联明股份<br>
603007  花王股份<br>
603008  喜临门<br>
603009  北特科技<br>
603010  万盛股份<br>
603011  合锻智能<br>
603012  创力集团<br>
603013  亚普股份<br>
603015  弘讯科技<br>
603016  新宏泰<br>
603017  中衡设计<br>
603018  中设集团<br>
603019  中科曙光<br>
603020  爱普股份<br>
603021  山东华鹏<br>
603022  新通联<br>
603023  威帝股份<br>
603025  大豪科技<br>
603026  石大胜华<br>
603027  千禾味业<br>
603028  赛福天<br>
603029  天鹅股份<br>
603030  全筑股份<br>
603031  安德利<br>
603032  德新交运<br>
603033  三维股份<br>
603035  常熟汽饰<br>
603036  如通股份<br>
603037  凯众股份<br>
603038  华立股份<br>
603039  泛微网络<br>
603040  新坐标<br>
603041  美思德<br>
603042  华脉科技<br>
603043  广州酒家<br>
603045  福达合金<br>
603050  科林电气<br>
603055  台华新材<br>
603056  德邦股份<br>
603058  永吉股份<br>
603059  倍加洁<br>
603060  国检集团<br>
603063  禾望电气<br>
603066  音飞储存<br>
603067  振华股份<br>
603068  博通集成<br>
603069  海汽集团<br>
603076  乐惠国际<br>
603077  和邦生物<br>
603078  江化微<br>
603079  圣达生物<br>
603080  新疆火炬<br>
603081  大丰实业<br>
603083  剑桥科技<br>
603085  天成自控<br>
603086  先达股份<br>
603088  宁波精达<br>
603089  正裕工业<br>
603090  宏盛股份<br>
603096  新经典<br>
603098  森特股份<br>
603099  长白山<br>
603100  川仪股份<br>
603101  汇嘉时代<br>
603103  横店影视<br>
603105  芯能科技<br>
603106  恒银金融<br>
603108  润达医疗<br>
603110  东方材料<br>
603111  康尼机电<br>
603113  金能科技<br>
603115  海星股份<br>
603116  红蜻蜓<br>
603117  万林物流<br>
603118  共进股份<br>
603121  华培动力<br>
603123  翠微股份<br>
603126  中材节能<br>
603127  昭衍新药<br>
603128  华贸物流<br>
603129  春风动力<br>
603131  上海沪工<br>
603133  碳元科技<br>
603136  天目湖<br>
603138  海量数据<br>
603139  康惠制药<br>
603156  养元饮品<br>
603157  拉夏贝尔<br>
603158  腾龙股份<br>
603159  上海亚虹<br>
603160  汇顶科技<br>
603161  科华控股<br>
603165  荣晟环保<br>
603166  福达股份<br>
603167  渤海轮渡<br>
603168  莎普爱思<br>
603169  兰石重装<br>
603177  德创环保<br>
603178  圣龙股份<br>
603179  新泉股份<br>
603180  金牌厨柜<br>
603181  皇马科技<br>
603183  建研院<br>
603185  上机数控<br>
603186  华正新材<br>
603187  海容冷链<br>
603189  网达软件<br>
603192  汇得科技<br>
603196  日播时尚<br>
603197  保隆科技<br>
603198  迎驾贡酒<br>
603199  九华旅游<br>
603200  上海洗霸<br>
603203  快克股份<br>
603208  江山欧派<br>
603214  爱婴室<br>
603217  元利科技<br>
603218  日月股份<br>
603220  中贝通信<br>
603222  济民制药<br>
603223  恒通股份<br>
603225  新凤鸣<br>
603226  菲林格尔<br>
603227  雪峰科技<br>
603228  景旺电子<br>
603229  奥翔药业<br>
603232  格尔软件<br>
603233  大参林<br>
603236  移远通信<br>
603238  诺邦股份<br>
603239  浙江仙通<br>
603256  宏和科技<br>
603258  电魂网络<br>
603259  药明康德<br>
603260  合盛硅业<br>
603266  天龙股份<br>
603267  鸿远电子<br>
603268  松发股份<br>
603269  海鸥股份<br>
603277  银都股份<br>
603278  大业股份<br>
603279  景津环保<br>
603283  赛腾股份<br>
603286  日盈电子<br>
603288  海天味业<br>
603289  泰瑞机器<br>
603297  永新光学<br>
603298  杭叉集团<br>
603299  苏盐井神<br>
603300  华铁科技<br>
603301  振德医疗<br>
603303  得邦照明<br>
603305  旭升股份<br>
603306  华懋科技<br>
603308  应流股份<br>
603309  维力医疗<br>
603311  金海环境<br>
603313  梦百合<br>
603315  福鞍股份<br>
603316  诚邦股份<br>
603317  天味食品<br>
603318  派思股份<br>
603319  湘油泵<br>
603320  迪贝电气<br>
603321  梅轮电梯<br>
603322  超讯通信<br>
603323  苏农银行<br>
603326  我乐家居<br>
603327  福蓉科技<br>
603328  依顿电子<br>
603329  上海雅仕<br>
603330  上海天洋<br>
603331  百达精工<br>
603332  苏州龙杰<br>
603333  尚纬股份<br>
603335  迪生力<br>
603336  宏辉果蔬<br>
603337  杰克股份<br>
603338  浙江鼎力<br>
603339  四方科技<br>
603345  安井食品<br>
603348  文灿股份<br>
603351  威尔药业<br>
603355  莱克电气<br>
603356  华菱精工<br>
603357  设计总院<br>
603358  华达科技<br>
603359  东珠生态<br>
603360  百傲化学<br>
603363  傲农生物<br>
603365  水星家纺<br>
603366  日出东方<br>
603367  辰欣药业<br>
603368  柳药股份<br>
603369  今世缘<br>
603377  东方时尚<br>
603378  亚士创能<br>
603379  三美股份<br>
603380  易德龙<br>
603383  顶点软件<br>
603385  惠达卫浴<br>
603386  广东骏亚<br>
603387  基蛋生物<br>
603388  元成股份<br>
603389  亚振家居<br>
603393  新天然气<br>
603396  金辰股份<br>
603398  邦宝益智<br>
603399  吉翔股份<br>
603416  信捷电气<br>
603421  鼎信通讯<br>
603429  集友股份<br>
603444  吉比特<br>
603456  九洲药业<br>
603458  勘设股份<br>
603466  风语筑<br>
603477  振静股份<br>
603486  科沃斯<br>
603488  展鹏科技<br>
603496  恒为科技<br>
603499  翔港科技<br>
603500  祥和实业<br>
603501  韦尔股份<br>
603505  金石资源<br>
603506  南都物业<br>
603507  振江股份<br>
603508  思维列控<br>
603515  欧普照明<br>
603516  淳中科技<br>
603517  绝味食品<br>
603518  锦泓集团<br>
603519  立霸股份<br>
603520  司太立<br>
603527  众源新材<br>
603528  多伦科技<br>
603530  神马电力<br>
603533  掌阅科技<br>
603535  嘉诚国际<br>
603536  惠发食品<br>
603538  美诺华<br>
603555  贵人鸟<br>
603556  海兴电力<br>
603557  起步股份<br>
603558  健盛集团<br>
603559  中通国脉<br>
603566  普莱柯<br>
603567  珍宝岛<br>
603568  伟明环保<br>
603569  长久物流<br>
603577  汇金通<br>
603578  三星新材<br>
603579  荣泰健康<br>
603580  艾艾精工<br>
603583  捷昌驱动<br>
603585  苏利股份<br>
603586  金麒麟<br>
603587  地素时尚<br>
603588  高能环境<br>
603589  口子窖<br>
603590  康辰药业<br>
603595  东尼电子<br>
603596  伯特利<br>
603598  引力传媒<br>
603599  广信股份<br>
603600  永艺股份<br>
603601  再升科技<br>
603602  纵横通信<br>
603603  博天环境<br>
603605  珀莱雅<br>
603606  东方电缆<br>
603607  京华激光<br>
603608  天创时尚<br>
603609  禾丰牧业<br>
603611  诺力股份<br>
603612  索通发展<br>
603613  国联股份<br>
603615  茶花股份<br>
603616  韩建河山<br>
603617  君禾股份<br>
603618  杭电股份<br>
603619  中曼石油<br>
603626  科森科技<br>
603628  清源股份<br>
603629  利通电子<br>
603630  拉芳家化<br>
603633  徕木股份<br>
603636  南威软件<br>
603637  镇海股份<br>
603638  艾迪精密<br>
603639  海利尔<br>
603648  畅联股份<br>
603650  彤程新材<br>
603655  朗博科技<br>
603656  泰禾光电<br>
603657  春光科技<br>
603658  安图生物<br>
603659  璞泰来<br>
603660  苏州科达<br>
603661  恒林股份<br>
603662  柯力传感<br>
603663  三祥新材<br>
603665  康隆达<br>
603666  亿嘉和<br>
603667  五洲新春<br>
603668  天马科技<br>
603669  灵康药业<br>
603676  卫信康<br>
603677  奇精机械<br>
603678  火炬电子<br>
603679  华体科技<br>
603680  今创集团<br>
603681  永冠新材<br>
603683  晶华新材<br>
603685  晨丰科技<br>
603686  龙马环卫<br>
603687  大胜达<br>
603688  石英股份<br>
603689  皖天然气<br>
603690  至纯科技<br>
603693  江苏新能<br>
603696  安记食品<br>
603697  有友食品<br>
603698  航天工程<br>
603699  纽威股份<br>
603700  宁波水表<br>
603701  德宏股份<br>
603703  盛洋科技<br>
603706  东方环宇<br>
603707  健友股份<br>
603708  家家悦<br>
603709  中源家居<br>
603711  香飘飘<br>
603712  七一二<br>
603713  密尔克卫<br>
603716  塞力斯<br>
603717  天域生态<br>
603718  海利生物<br>
603721  中广天择<br>
603722  阿科力<br>
603725  天安新材<br>
603726  朗迪集团<br>
603727  博迈科<br>
603728  鸣志电器<br>
603729  龙韵股份<br>
603730  岱美股份<br>
603733  仙鹤股份<br>
603737  三棵树<br>
603738  泰晶科技<br>
603739  蔚蓝生物<br>
603757  大元泵业<br>
603758  秦安股份<br>
603766  隆鑫通用<br>
603767  中马传动<br>
603768  常青股份<br>
603773  沃格光电<br>
603776  永安行<br>
603777  来伊份<br>
603778  乾景园林<br>
603779  威龙股份<br>
603787  新日股份<br>
603788  宁波高发<br>
603789  星光农机<br>
603790  雅运股份<br>
603797  联泰环保<br>
603798  康普顿<br>
603799  华友钴业<br>
603800  道森股份<br>
603801  志邦家居<br>
603803  瑞斯康达<br>
603806  福斯特<br>
603808  歌力思<br>
603809  豪能股份<br>
603811  诚意药业<br>
603813  原尚股份<br>
603816  顾家家居<br>
603817  海峡环保<br>
603818  曲美家居<br>
603819  神力股份<br>
603822  嘉澳环保<br>
603823  百合花<br>
603825  华扬联众<br>
603826  坤彩科技<br>
603828  柯利达<br>
603829  洛凯股份<br>
603833  欧派家居<br>
603838  四通股份<br>
603839  安正时尚<br>
603843  正平股份<br>
603848  好太太<br>
603855  华荣股份<br>
603856  东宏股份<br>
603858  步长制药<br>
603859  能科股份<br>
603860  中公高科<br>
603861  白云电器<br>
603863  松炀资源<br>
603866  桃李面包<br>
603867  新化股份<br>
603868  飞科电器<br>
603869  新智认知<br>
603871  嘉友国际<br>
603876  鼎胜新材<br>
603877  太平鸟<br>
603878  武进不锈<br>
603879  永悦科技<br>
603880  南卫股份<br>
603881  数据港<br>
603882  金域医学<br>
603883  老百姓<br>
603885  吉祥航空<br>
603886  元祖股份<br>
603887  城地股份<br>
603888  新华网<br>
603889  新澳股份<br>
603890  春秋电子<br>
603895  天永智能<br>
603896  寿仙谷<br>
603897  长城科技<br>
603898  好莱客<br>
603899  晨光文具<br>
603901  永创智能<br>
603903  中持股份<br>
603906  龙蟠科技<br>
603908  牧高笛<br>
603909  合诚股份<br>
603912  佳力图<br>
603915  国茂股份<br>
603916  苏博特<br>
603917  合力科技<br>
603918  金桥信息<br>
603919  金徽酒<br>
603920  世运电路<br>
603922  金鸿顺<br>
603926  铁流股份<br>
603928  兴业股份<br>
603929  亚翔集成<br>
603933  睿能科技<br>
603936  博敏电子<br>
603937  丽岛新材<br>
603938  三孚股份<br>
603939  益丰药房<br>
603955  大千生态<br>
603956  威派格<br>
603958  哈森股份<br>
603959  百利科技<br>
603960  克来机电<br>
603963  大理药业<br>
603966  法兰泰克<br>
603967  中创物流<br>
603968  醋化股份<br>
603969  银龙股份<br>
603970  中农立华<br>
603976  正川股份<br>
603977  国泰集团<br>
603978  深圳新星<br>
603979  金诚信<br>
603980  吉华集团<br>
603982  泉峰汽车<br>
603983  丸美股份<br>
603985  恒润股份<br>
603986  兆易创新<br>
603987  康德莱<br>
603988  中电电机<br>
603989  艾华集团<br>
603990  麦迪科技<br>
603991  至正股份<br>
603993  洛阳钼业<br>
603997  继峰股份<br>
603998  方盛制药<br>
603999  读者传媒</p>
]]></content>
  </entry>
  <entry>
    <title>finance/stock/shanghai-50</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>浦发银行(600000) 民生银行(600016) 宝钢股份(600019)<br>
中国石化(600028) 南方航空(600029) 中信证券(600030)<br>
三一重工(600031) 招商银行(600036) 保利地产(600048)<br>
中国联通(600050) 上汽集团(600104) 复星医药(600196)<br>
恒瑞医药(600276) 万华化学(600309) 华夏幸福(600340)<br>
贵州茅台(600519) 海螺水泥(600585) 海尔智家(600690)<br>
三安光电(600703) 海通证券(600837) 伊利股份(600887)<br>
中信建投(601066) 中国神华(601088) 中国国航(601111)<br>
工业富联(601138) 兴业银行(601166) 中国铁建(601186)<br>
国泰君安(601211) 上海银行(601229) 农业银行(601288)<br>
中国平安(601318) 中国人保(601319) 交通银行(601328)<br>
新华保险(601336) 中国中铁(601390) 工商银行(601398)<br>
中国太保(601601) 中国人寿(601628) 中国建筑(601668)<br>
华泰证券(601688) 中国中车(601766) 中国交建(601800)<br>
光大银行(601818) 中国石油(601857) 中国国旅(601888)<br>
建设银行(601939) 中国银行(601988) 中国重工(601989)<br>
药明康德(603259) 洛阳钼业(603993)</p>
]]></content>
  </entry>
  <entry>
    <title>finance/stock/shanghai_etf</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>512960 央调ETF 1992125.73<br>
510050 50ETF 1400196.68<br>
512880 证券ETF 1004129.15<br>
510300 300ETF 880170.35<br>
510500 500ETF 871995.7<br>
510900 H股ETF 656902.19<br>
510180 180ETF 564755.77<br>
510310 HS300ETF 474830.74<br>
512000 券商ETF 388081.77<br>
515000 科技ETF 309941.67<br>
512660 军工ETF 295108<br>
518880 黄金ETF 251884.08<br>
512580 环保ETF 236487.17<br>
512980 传媒ETF 155132.44<br>
512800 银行ETF 150254<br>
510230 金融ETF 109776.16<br>
510160 小康ETF 101405.74<br>
510880 红利ETF 97417.57<br>
515880 N通信ETF 72574.35<br>
512070 非银ETF 70915.99<br>
512510 ETF500 60842.98<br>
512670 国防ETF 50032.63<br>
512010 医药ETF 46717.37<br>
512910 100ETF 38612.88<br>
512520 MSCIETF 35305.64<br>
510010 治理ETF 32752.44<br>
512100 1000ETF 27589.2<br>
513100 纳指ETF 22762.21<br>
512930 AIETF 21113.03<br>
510580 ZZ500ETF 21049.65<br>
510710 上50ETF 18201.89<br>
512690 酒ETF 15862.51<br>
510410 资源ETF 14625.84<br>
510290 380ETF 14044.89<br>
512150 A50ETF 13807.34<br>
513000 225ETF 9391.14<br>
510060 央企ETF 7795.92<br>
510020 超大ETF 6914.8<br>
510170 商品ETF 6722.87<br>
510130 中盘ETF 6468.51<br>
513520 日经ETF 6128.72<br>
512170 医疗ETF 5794.02<br>
513800 东证ETF 5611.44<br>
510090 责任ETF 5508.11<br>
510210 综指ETF 5163.85<br>
510070 民企ETF 4562.41<br>
510150 消费ETF 3913.16<br>
510600 沪50ETF 3281.51<br>
513600 恒指ETF 2982.95<br>
510030 价值ETF 2952.87<br>
510190 龙头ETF 2765.08<br>
511220 城投ETF 1929.81<br>
510220 中小ETF 1872.92<br>
510270 国企ETF 1483.21<br>
510260 新兴ETF 1398.27<br>
510110 周期ETF 901.68<br>
510420 180EWETF 865.55<br>
510120 非周ETF 779.24<br>
510280 成长ETF 475.44<br>
511010 国债ETF 434.63</p>
]]></content>
  </entry>
  <entry>
    <title>finance/stock/shanghai_fund</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>510010 治理ETF 32752.44<br>
510020 超大ETF 6914.8<br>
510030 价值ETF 2952.87<br>
510050 50ETF 1400196.68<br>
510060 央企ETF 7795.92<br>
510070 民企ETF 4562.41<br>
510090 责任ETF 5508.11<br>
510110 周期ETF 901.68<br>
510120 非周ETF 779.24<br>
510130 中盘ETF 6468.51<br>
510150 消费ETF 3913.16<br>
510160 小康ETF 101405.74<br>
510170 商品ETF 6722.87<br>
510180 180ETF 564755.77<br>
510190 龙头ETF 2765.08<br>
510210 综指ETF 5163.85<br>
510220 中小ETF 1872.92<br>
510230 金融ETF 109776.16<br>
510260 新兴ETF 1398.27<br>
510270 国企ETF 1483.21<br>
510280 成长ETF 475.44<br>
510290 380ETF 14044.89<br>
510300 300ETF 880170.35<br>
510310 HS300ETF 474830.74<br>
510330 华夏300 710754.98<br>
510350 工银300 104681.47<br>
510360 广发300 285238.12<br>
510380 国寿300 475580.24<br>
510390 平安300 135245<br>
510410 资源ETF 14625.84<br>
510420 180EWETF 865.55<br>
510430 50等权 5992.45<br>
510440 500沪市 2305.83<br>
510500 500ETF 871995.7<br>
510510 广发500 321095.84<br>
510520 诺安500 709.1<br>
510550 方正500 13574.33<br>
510560 国寿500 63631.87<br>
510580 ZZ500ETF 21049.65<br>
510590 平安500 45718.61<br>
510600 沪50ETF 3281.51<br>
510630 消费行业 8459.04<br>
510650 金融行业 1745.25<br>
510660 医药行业 4637.97<br>
510680 万家50 5982.47<br>
510710 上50ETF 18201.89<br>
510800 上证50 19657.6<br>
510810 上海国企 1395109.37<br>
510850 工银上50 220369.89<br>
510880 红利ETF 97417.57<br>
510890 红利低波 154056.17<br>
510900 H股ETF 656902.19<br>
511010 国债ETF 434.63<br>
511020 活跃国债 1120.17<br>
511030 公司债 5109.07<br>
511220 城投ETF 1929.81<br>
511230 周期债 186.76<br>
511260 十年国债 80.65<br>
511270 10年地债 1185.75<br>
511280 中期信用 42.73<br>
511290 国债十年 27.58<br>
511310 十年债 31.3<br>
512000 券商ETF 388081.77<br>
512010 医药ETF 46717.37<br>
512040 国信价值 50685.79<br>
512070 非银ETF 70915.99<br>
512090 MSCI易基 64759.23<br>
512100 1000ETF 27589.2<br>
512120 医药50 5724.73<br>
512150 A50ETF 13807.34<br>
512160 MSCI基金 70177.78<br>
512170 医疗ETF 5794.02<br>
512180 建信MSCI 52604.8<br>
512200 房地产 9137.6<br>
512220 景顺TMT 25796.76<br>
512260 500低波 20449.77<br>
512270 300低波 10597.68<br>
512280 景顺MSCI 47400.57<br>
512290 生物医药 35682.07<br>
512300 500医药 4161.71<br>
512310 500工业 10538.9<br>
512330 500信息 58918.8<br>
512340 500原料 5223.4<br>
512360 MSCI国际 18833.77<br>
512380 银华MSCI 184880.56<br>
512390 MSCI低波 20468.2<br>
512400 有色金属 44903.9<br>
512480 半导体 18650.18<br>
512500 中证500 266880.88<br>
512510 ETF500 60842.98<br>
512520 MSCIETF 35305.64<br>
512550 富时A50 8190.6<br>
512560 中证军工 2656.35<br>
512570 中证证券 3180.61<br>
512580 环保ETF 236487.17<br>
512590 高股息 2550.34<br>
512600 主要消费 545.12<br>
512610 医药卫生 1114.06<br>
512640 金融地产 2674.09<br>
512660 军工ETF 295108<br>
512670 国防ETF 50032.63<br>
512680 军工基金 50200.25<br>
512690 酒ETF 15862.51<br>
512700 银行基金 25838.1<br>
512710 军工龙头 570032.92<br>
512720 计算机 28345.34<br>
512750 基本面50 183575.49<br>
512760 半导体50 68565.98<br>
512770 战略新兴 24176.78<br>
512780 京津冀基 9308.65<br>
512790 N民企成 18898.46<br>
512800 银行ETF 150254<br>
512810 军工行业 8779.17<br>
512820 银行股基 20770.19<br>
512850 北京50 2653.2<br>
512860 MSCI中国 3062.64<br>
512870 杭州湾区 14841.06<br>
512880 证券ETF 1004129.15<br>
512890 红利LV 16338.09<br>
512900 证券基金 163450.6<br>
512910 100ETF 38612.88<br>
512920 MSCI新华 1309.26<br>
512930 AIETF 21113.03<br>
512950 央企改革 1509155.1<br>
512960 央调ETF 1992125.73<br>
512980 传媒ETF 155132.44<br>
512990 MSCIA股 49151.54<br>
513000 225ETF 9391.14<br>
513030 德国30 49727.9<br>
513050 中概互联 93143.27<br>
513100 纳指ETF 22762.21<br>
513500 标普500 57681.93<br>
513520 日经ETF 6128.72<br>
513600 恒指ETF 2982.95<br>
513660 恒生通 30900.01<br>
513680 建信H股 674.67<br>
513800 东证ETF 5611.44<br>
513880 日经225 3547<br>
513900 港股100 4197.8<br>
515000 科技ETF 309941.67<br>
515880 N通信ETF 72574.35<br>
518800 黄金基金 18011.99<br>
518880 黄金ETF 251884.08</p>
]]></content>
  </entry>
  <entry>
    <title>finance/stock/shenzhen-a-shares</title>
    <url>/posts/uncategorized/0/</url>
    <content><![CDATA[<p>000001 平安银行<br>
000002 万  科Ａ<br>
000004 国农科技<br>
000005 世纪星源<br>
000006 深振业Ａ<br>
000007 全新好<br>
000008 神州高铁<br>
000009 中国宝安<br>
000010 美丽生态<br>
000011 深物业A<br>
000012 南  玻Ａ<br>
000014 沙河股份<br>
000016 深康佳Ａ<br>
000017 深中华A<br>
000018 神州长城<br>
000019 深深宝Ａ<br>
000020 深华发Ａ<br>
000021 深科技<br>
000022 深赤湾Ａ<br>
000023 深天地Ａ<br>
000025 特  力Ａ<br>
000026 飞亚达Ａ<br>
000027 深圳能源<br>
000028 国药一致<br>
000029 深深房Ａ<br>
000030 富奥股份<br>
000031 中粮地产<br>
000032 深桑达Ａ<br>
000034 神州数码<br>
000035 中国天楹<br>
000036 华联控股<br>
000037 深南电A<br>
000038 深大通<br>
000039 中集集团<br>
000040 东旭蓝天<br>
000042 中洲控股<br>
000043 中航地产<br>
000045 深纺织Ａ<br>
000046 泛海控股<br>
000048 康达尔<br>
000049 德赛电池<br>
000050 深天马Ａ<br>
000055 方大集团<br>
000056 皇庭国际<br>
000058 深 赛 格<br>
000059 华锦股份<br>
000060 中金岭南<br>
000061 农 产 品<br>
000062 深圳华强<br>
000063 中兴通讯<br>
000065 北方国际<br>
000066 中国长城<br>
000068 华控赛格<br>
000069 华侨城Ａ<br>
000070 特发信息<br>
000078 海王生物<br>
000088 盐 田 港<br>
000089 深圳机场<br>
000090 天健集团<br>
000096 广聚能源<br>
000099 中信海直<br>
000100 TCL 集团<br>
000150 宜华健康<br>
000151 中成股份<br>
000153 丰原药业<br>
000156 华数传媒<br>
000157 中联重科<br>
000158 常山股份<br>
000159 国际实业<br>
000166 申万宏源<br>
000301 东方市场<br>
000333 美的集团<br>
000338 潍柴动力<br>
000400 许继电气<br>
000401 冀东水泥<br>
000402 金 融 街<br>
000403 ST生化<br>
000404 华意压缩<br>
000407 胜利股份<br>
000408 藏格控股<br>
000409 山东地矿<br>
000410 *ST沈机<br>
000411 英特集团<br>
000413 东旭光电<br>
000415 渤海金控<br>
000416 民生控股<br>
000417 合肥百货<br>
000418 小天鹅Ａ<br>
000419 通程控股<br>
000420 吉林化纤<br>
000421 南京公用<br>
000422 湖北宜化<br>
000423 东阿阿胶<br>
000425 徐工机械<br>
000426 兴业矿业<br>
000428 华天酒店<br>
000429 粤高速Ａ<br>
000430 张家界<br>
000488 晨鸣纸业<br>
000498 山东路桥<br>
000501 鄂武商Ａ<br>
000502 绿景控股<br>
000503 海虹控股<br>
000504 南华生物<br>
000505 珠江控股<br>
000506 中润资源<br>
000507 珠海港<br>
000509 华塑控股<br>
000510 金路集团<br>
000511 *ST烯碳<br>
000513 丽珠集团<br>
000514 渝 开 发<br>
000516 国际医学<br>
000517 荣安地产<br>
000518 四环生物<br>
000519 中兵红箭<br>
000520 长航凤凰<br>
000521 美菱电器<br>
000523 广州浪奇<br>
000524 岭南控股<br>
000525 红 太 阳<br>
000526 *ST紫学<br>
000528 柳    工<br>
000529 广弘控股<br>
000530 大冷股份<br>
000531 穗恒运Ａ<br>
000532 华金资本<br>
000533 万 家 乐<br>
000534 万泽股份<br>
000536 华映科技<br>
000537 广宇发展<br>
000538 云南白药<br>
000539 粤电力Ａ<br>
000540 中天金融<br>
000541 佛山照明<br>
000543 皖能电力<br>
000544 中原环保<br>
000545 金浦钛业<br>
000546 金圆股份<br>
000547 航天发展<br>
000548 湖南投资<br>
000550 江铃汽车<br>
000551 创元科技<br>
000552 靖远煤电<br>
000553 沙隆达Ａ<br>
000554 泰山石油<br>
000555 神州信息<br>
000557 西部创业<br>
000558 莱茵体育<br>
000559 万向钱潮<br>
000560 昆百大Ａ<br>
000561 烽火电子<br>
000563 陕国投Ａ<br>
000564 供销大集<br>
000565 渝三峡Ａ<br>
000566 海南海药<br>
000567 海德股份<br>
000568 泸州老窖<br>
000570 苏常柴Ａ<br>
000571 新大洲Ａ<br>
000572 海马汽车<br>
000573 粤宏远Ａ<br>
000576 广东甘化<br>
000581 威孚高科<br>
000582 北部湾港<br>
000584 友利控股<br>
000585 东北电气<br>
000586 汇源通信<br>
000587 金洲慈航<br>
000589 黔轮胎Ａ<br>
000590 启迪古汉<br>
000591 太阳能<br>
000592 平潭发展<br>
000593 大通燃气<br>
000595 *ST宝实<br>
000596 古井贡酒<br>
000597 东北制药<br>
000598 兴蓉环境<br>
000599 青岛双星<br>
000600 建投能源<br>
000601 韶能股份<br>
000603 盛达矿业<br>
000605 渤海股份<br>
000606 神州易桥<br>
000607 华媒控股<br>
000608 阳光股份<br>
000609 绵石投资<br>
000610 西安旅游<br>
000611 天首发展<br>
000612 焦作万方<br>
000613 *ST东海A<br>
000615 京汉股份<br>
000616 海航投资<br>
000617 中油资本<br>
000619 海螺型材<br>
000620 新华联<br>
000622 恒立实业<br>
000623 吉林敖东<br>
000625 长安汽车<br>
000626 远大控股<br>
000627 天茂集团<br>
000628 高新发展<br>
000630 铜陵有色<br>
000631 顺发恒业<br>
000632 三木集团<br>
000633 合金投资<br>
000635 英 力 特<br>
000636 风华高科<br>
000637 茂化实华<br>
000638 万方发展<br>
000639 西王食品<br>
000650 仁和药业<br>
000651 格力电器<br>
000652 泰达股份<br>
000655 金岭矿业<br>
000656 金科股份<br>
000657 中钨高新<br>
000659 *ST中富<br>
000661 长春高新<br>
000662 天夏智慧<br>
000663 永安林业<br>
000665 湖北广电<br>
000666 经纬纺机<br>
000667 美好置业<br>
000668 荣丰控股<br>
000669 金鸿能源<br>
000670 盈方微<br>
000671 阳 光 城<br>
000672 上峰水泥<br>
000673 当代东方<br>
000676 智度股份<br>
000677 恒天海龙<br>
000678 襄阳轴承<br>
000679 大连友谊<br>
000680 山推股份<br>
000681 视觉中国<br>
000682 东方电子<br>
000683 远兴能源<br>
000685 中山公用<br>
000686 东北证券<br>
000687 华讯方舟<br>
000688 建新矿业<br>
000690 宝新能源<br>
000691 ST亚太<br>
000692 惠天热电<br>
000693 *ST华泽<br>
000695 滨海能源<br>
000697 炼石有色<br>
000698 沈阳化工<br>
000700 模塑科技<br>
000701 厦门信达<br>
000702 正虹科技<br>
000703 恒逸石化<br>
000705 浙江震元<br>
000707 双环科技<br>
000708 大冶特钢<br>
000709 河钢股份<br>
000710 *ST天仪<br>
000711 京蓝科技<br>
000712 锦龙股份<br>
000713 丰乐种业<br>
000715 中兴商业<br>
000716 黑芝麻<br>
000717 韶钢松山<br>
000718 苏宁环球<br>
000719 大地传媒<br>
000720 新能泰山<br>
000721 西安饮食<br>
000722 湖南发展<br>
000723 美锦能源<br>
000725 京东方Ａ<br>
000726 鲁  泰Ａ<br>
000727 华东科技<br>
000728 国元证券<br>
000729 燕京啤酒<br>
000731 四川美丰<br>
000732 泰禾集团<br>
000733 振华科技<br>
000735 罗 牛 山<br>
000736 中房地产<br>
000737 南风化工<br>
000738 航发控制<br>
000739 普洛药业<br>
000750 国海证券<br>
000751 锌业股份<br>
000752 西藏发展<br>
000753 漳州发展<br>
000755 *ST三维<br>
000756 新华制药<br>
000757 浩物股份<br>
000758 中色股份<br>
000759 中百集团<br>
000760 斯太尔<br>
000761 本钢板材<br>
000762 西藏矿业<br>
000766 通化金马<br>
000767 漳泽电力<br>
000768 中航飞机<br>
000776 广发证券<br>
000777 中核科技<br>
000778 新兴铸管<br>
000779 三毛派神<br>
000780 *ST平能<br>
000782 美达股份<br>
000783 长江证券<br>
000785 武汉中商<br>
000786 北新建材<br>
000788 北大医药<br>
000789 万年青<br>
000790 泰合健康<br>
000791 甘肃电投<br>
000792 盐湖股份<br>
000793 华闻传媒<br>
000795 英洛华<br>
000796 凯撒旅游<br>
000797 中国武夷<br>
000798 中水渔业<br>
000799 酒鬼酒<br>
000800 一汽轿车<br>
000801 四川九洲<br>
000802 北京文化<br>
000803 *ST金宇<br>
000806 银河生物<br>
000807 云铝股份<br>
000809 *ST新城<br>
000810 创维数字<br>
000811 烟台冰轮<br>
000812 陕西金叶<br>
000813 德展健康<br>
000815 美利云<br>
000816 智慧农业<br>
000818 方大化工<br>
000819 岳阳兴长<br>
000820 神雾节能<br>
000821 京山轻机<br>
000822 山东海化<br>
000823 超声电子<br>
000825 太钢不锈<br>
000826 启迪桑德<br>
000828 东莞控股<br>
000829 天音控股<br>
000830 鲁西化工<br>
000831 五矿稀土<br>
000833 贵糖股份<br>
000835 长城动漫<br>
000836 鑫茂科技<br>
000837 秦川机床<br>
000838 财信发展<br>
000839 中信国安<br>
000848 承德露露<br>
000850 华茂股份<br>
000851 高鸿股份<br>
000852 石化机械<br>
000856 冀东装备<br>
000858 五 粮 液<br>
000859 国风塑业<br>
000860 顺鑫农业<br>
000861 海印股份<br>
000862 银星能源<br>
000863 三湘印象<br>
000868 安凯客车<br>
000869 张  裕Ａ<br>
000875 吉电股份<br>
000876 新 希 望<br>
000877 天山股份<br>
000878 云南铜业<br>
000880 潍柴重机<br>
000881 中广核技<br>
000882 华联股份<br>
000883 湖北能源<br>
000885 同力水泥<br>
000886 海南高速<br>
000887 中鼎股份<br>
000888 峨眉山Ａ<br>
000889 茂业通信<br>
000890 法 尔 胜<br>
000892 欢瑞世纪<br>
000893 东凌国际<br>
000895 双汇发展<br>
000897 津滨发展<br>
000898 鞍钢股份<br>
000899 赣能股份<br>
000900 现代投资<br>
000901 航天科技<br>
000902 新洋丰<br>
000903 云内动力<br>
000905 厦门港务<br>
000906 浙商中拓<br>
000908 景峰医药<br>
000909 数源科技<br>
000910 大亚圣象<br>
000911 南宁糖业<br>
000912 泸天化<br>
000913 钱江摩托<br>
000915 山大华特<br>
000916 华北高速<br>
000917 电广传媒<br>
000918 嘉凯城<br>
000919 金陵药业<br>
000920 南方汇通<br>
000921 海信科龙<br>
000922 *ST佳电<br>
000923 河北宣工<br>
000925 众合科技<br>
000926 福星股份<br>
000927 一汽夏利<br>
000928 中钢国际<br>
000929 兰州黄河<br>
000930 中粮生化<br>
000931 中 关 村<br>
000932 *ST华菱<br>
000933 神火股份<br>
000935 四川双马<br>
000936 华西股份<br>
000937 冀中能源<br>
000938 紫光股份<br>
000939 凯迪生态<br>
000948 南天信息<br>
000949 新乡化纤<br>
000951 中国重汽<br>
000952 广济药业<br>
000953 *ST河化<br>
000955 欣龙控股<br>
000957 中通客车<br>
000958 东方能源<br>
000959 首钢股份<br>
000960 锡业股份<br>
000961 中南建设<br>
000962 东方钽业<br>
000963 华东医药<br>
000965 天保基建<br>
000966 长源电力<br>
000967 盈峰环境<br>
000968 蓝焰控股<br>
000969 安泰科技<br>
000970 中科三环<br>
000971 高升控股<br>
000972 *ST中基<br>
000973 佛塑科技<br>
000975 银泰资源<br>
000976 春晖股份<br>
000977 浪潮信息<br>
000978 桂林旅游<br>
000979 中弘股份<br>
000980 众泰汽车<br>
000981 银亿股份<br>
000982 *ST 中绒<br>
000983 西山煤电<br>
000985 大庆华科<br>
000987 越秀金控<br>
000988 华工科技<br>
000989 九 芝 堂<br>
000990 诚志股份<br>
000993 闽东电力<br>
000995 皇台酒业<br>
000996 中国中期<br>
000997 新 大 陆<br>
000998 隆平高科<br>
000999 华润三九<br>
001696 宗申动力<br>
001896 豫能控股<br>
001979 招商蛇口<br>
002010 传化智联<br>
002011 盾安环境<br>
002012 凯恩股份<br>
002013 中航机电<br>
002014 永新股份<br>
002015 霞客环保<br>
002016 世荣兆业<br>
002017 东信和平<br>
002018 华信国际<br>
002019 亿帆医药<br>
002020 京新药业<br>
002021 中捷资源<br>
002022 科华生物<br>
002023 海特高新<br>
002024 苏宁云商<br>
002025 航天电器<br>
002026 山东威达<br>
002027 分众传媒<br>
002028 思源电气<br>
002029 七 匹 狼<br>
002030 达安基因<br>
002031 巨轮智能<br>
002032 苏 泊 尔<br>
002033 丽江旅游<br>
002034 美 欣 达<br>
002035 华帝股份<br>
002036 联创电子<br>
002037 久联发展<br>
002038 双鹭药业<br>
002039 黔源电力<br>
002040 南 京 港<br>
002041 登海种业<br>
002042 华孚色纺<br>
002043 兔 宝 宝<br>
002044 美年健康<br>
002045 国光电器<br>
002046 轴研科技<br>
002047 宝鹰股份<br>
002048 宁波华翔<br>
002049 紫光国芯<br>
002050 三花智控<br>
002051 中工国际<br>
002052 同洲电子<br>
002053 云南能投<br>
002054 德美化工<br>
002055 得润电子<br>
002056 横店东磁<br>
002057 中钢天源<br>
002058 威 尔 泰<br>
002059 云南旅游<br>
002060 粤 水 电<br>
002061 江山化工<br>
002062 宏润建设<br>
002063 远光软件<br>
002064 华峰氨纶<br>
002065 东华软件<br>
002066 瑞泰科技<br>
002067 景兴纸业<br>
002068 黑猫股份<br>
002069 獐子岛<br>
002070 *ST众和<br>
002071 长城影视<br>
002072 凯瑞德<br>
002073 软控股份<br>
002074 国轩高科<br>
002075 沙钢股份<br>
002076 雪 莱 特<br>
002077 大港股份<br>
002078 太阳纸业<br>
002079 苏州固锝<br>
002080 中材科技<br>
002081 金 螳 螂<br>
002082 栋梁新材<br>
002083 孚日股份<br>
002084 海鸥卫浴<br>
002085 万丰奥威<br>
002086 东方海洋<br>
002087 新野纺织<br>
002088 鲁阳节能<br>
002089 新 海 宜<br>
002090 金智科技<br>
002091 江苏国泰<br>
002092 中泰化学<br>
002093 国脉科技<br>
002094 青岛金王<br>
002095 生 意 宝<br>
002096 南岭民爆<br>
002097 山河智能<br>
002098 浔兴股份<br>
002099 海翔药业<br>
002100 天康生物<br>
002101 广东鸿图<br>
002102 冠福股份<br>
002103 广博股份<br>
002104 恒宝股份<br>
002105 信隆健康<br>
002106 莱宝高科<br>
002107 沃华医药<br>
002108 沧州明珠<br>
002109 兴化股份<br>
002110 三钢闽光<br>
002111 威海广泰<br>
002112 三变科技<br>
002113 天润数娱<br>
002114 罗平锌电<br>
002115 三维通信<br>
002116 中国海诚<br>
002117 东港股份<br>
002118 紫鑫药业<br>
002119 康强电子<br>
002120 韵达股份<br>
002121 科陆电子<br>
002122 天马股份<br>
002123 梦网荣信<br>
002124 天邦股份<br>
002125 湘潭电化<br>
002126 银轮股份<br>
002127 南极电商<br>
002128 露天煤业<br>
002129 中环股份<br>
002130 沃尔核材<br>
002131 利欧股份<br>
002132 恒星科技<br>
002133 广宇集团<br>
002134 *ST普林<br>
002135 东南网架<br>
002136 安 纳 达<br>
002137 麦达数字<br>
002138 顺络电子<br>
002139 拓邦股份<br>
002140 东华科技<br>
002141 贤丰控股<br>
002142 宁波银行<br>
002143 印纪传媒<br>
002144 宏达高科<br>
002145 中核钛白<br>
002146 荣盛发展<br>
002147 新光圆成<br>
002148 北纬通信<br>
002149 西部材料<br>
002150 通润装备<br>
002151 北斗星通<br>
002152 广电运通<br>
002153 石基信息<br>
002154 报 喜 鸟<br>
002155 湖南黄金<br>
002156 通富微电<br>
002157 正邦科技<br>
002158 汉钟精机<br>
002159 三特索道<br>
002160 常铝股份<br>
002161 远 望 谷<br>
002162 悦心健康<br>
002163 中航三鑫<br>
002164 宁波东力<br>
002165 红 宝 丽<br>
002166 莱茵生物<br>
002167 东方锆业<br>
002168 深圳惠程<br>
002169 智光电气<br>
002170 芭田股份<br>
002171 楚江新材<br>
002172 澳洋科技<br>
002173 创新医疗<br>
002174 游族网络<br>
002175 东方网络<br>
002176 江特电机<br>
002177 御银股份<br>
002178 延华智能<br>
002179 中航光电<br>
002180 纳思达<br>
002181 粤 传 媒<br>
002182 云海金属<br>
002183 怡 亚 通<br>
002184 海得控制<br>
002185 华天科技<br>
002186 全 聚 德<br>
002187 广百股份<br>
002188 巴士在线<br>
002189 利达光电<br>
002190 成飞集成<br>
002191 劲嘉股份<br>
002192 融捷股份<br>
002193 如意集团<br>
002194 武汉凡谷<br>
002195 二三四五<br>
002196 方正电机<br>
002197 证通电子<br>
002198 嘉应制药<br>
002199 东晶电子<br>
002201 九鼎新材<br>
002202 金风科技<br>
002203 海亮股份<br>
002204 大连重工<br>
002205 国统股份<br>
002206 海 利 得<br>
002207 *ST准油<br>
002208 合肥城建<br>
002209 达 意 隆<br>
002210 飞马国际<br>
002211 宏达新材<br>
002212 南洋股份<br>
002213 特 尔 佳<br>
002214 大立科技<br>
002215 诺 普 信<br>
002216 三全食品<br>
002217 合力泰<br>
002218 拓日新能<br>
002219 恒康医疗<br>
002220 天宝股份<br>
002221 东华能源<br>
002222 福晶科技<br>
002223 鱼跃医疗<br>
002224 三 力 士<br>
002225 濮耐股份<br>
002226 江南化工<br>
002227 奥 特 迅<br>
002228 合兴包装<br>
002229 鸿博股份<br>
002230 科大讯飞<br>
002231 奥维通信<br>
002232 启明信息<br>
002233 塔牌集团<br>
002234 民和股份<br>
002235 安妮股份<br>
002236 大华股份<br>
002237 恒邦股份<br>
002238 天威视讯<br>
002239 奥特佳<br>
002240 威华股份<br>
002241 歌尔股份<br>
002242 九阳股份<br>
002243 通产丽星<br>
002244 滨江集团<br>
002245 澳洋顺昌<br>
002246 北化股份<br>
002247 帝龙文化<br>
002248 *ST东数<br>
002249 大洋电机<br>
002250 联化科技<br>
002251 步 步 高<br>
002252 上海莱士<br>
002253 川大智胜<br>
002254 泰和新材<br>
002255 海陆重工<br>
002256 兆新股份<br>
002258 利尔化学<br>
002259 升达林业<br>
002260 德奥通航<br>
002261 拓维信息<br>
002262 恩华药业<br>
002263 大 东 南<br>
002264 新 华 都<br>
002265 西仪股份<br>
002266 浙富控股<br>
002267 陕天然气<br>
002268 卫 士 通<br>
002269 美邦服饰<br>
002270 华明装备<br>
002271 东方雨虹<br>
002272 川润股份<br>
002273 水晶光电<br>
002274 华昌化工<br>
002275 桂林三金<br>
002276 万马股份<br>
002277 友阿股份<br>
002278 神开股份<br>
002279 久其软件<br>
002280 联络互动<br>
002281 光迅科技<br>
002282 博深工具<br>
002283 天润曲轴<br>
002284 亚太股份<br>
002285 世联行<br>
002286 保龄宝<br>
002287 奇正藏药<br>
002288 超华科技<br>
002289 宇顺电子<br>
002290 中科新材<br>
002291 星期六<br>
002292 奥飞娱乐<br>
002293 罗莱生活<br>
002294 信立泰<br>
002295 精艺股份<br>
002296 辉煌科技<br>
002297 博云新材<br>
002298 中电鑫龙<br>
002299 圣农发展<br>
002301 齐心集团<br>
002302 西部建设<br>
002303 美盈森<br>
002304 洋河股份<br>
002305 南国置业<br>
002306 *ST云网<br>
002307 北新路桥<br>
002308 威创股份<br>
002309 中利集团<br>
002310 东方园林<br>
002311 海大集团<br>
002312 *ST三泰<br>
002313 日海通讯<br>
002314 南山控股<br>
002315 焦点科技<br>
002316 键桥通讯<br>
002317 众生药业<br>
002318 久立特材<br>
002319 乐通股份<br>
002320 海峡股份<br>
002321 华英农业<br>
002322 理工环科<br>
002323 雅百特<br>
002324 普利特<br>
002325 洪涛股份<br>
002326 永太科技<br>
002327 富安娜<br>
002328 新朋股份<br>
002329 皇氏集团<br>
002330 得利斯<br>
002331 皖通科技<br>
002332 仙琚制药<br>
002333 罗普斯金<br>
002334 英威腾<br>
002335 科华恒盛<br>
002336 人人乐<br>
002337 赛象科技<br>
002338 奥普光电<br>
002339 积成电子<br>
002340 格林美<br>
002341 新纶科技<br>
002342 巨力索具<br>
002343 慈文传媒<br>
002344 海宁皮城<br>
002345 潮宏基<br>
002346 柘中股份<br>
002347 泰尔股份<br>
002348 高乐股份<br>
002349 精华制药<br>
002350 北京科锐<br>
002351 漫步者<br>
002352 顺丰控股<br>
002353 杰瑞股份<br>
002354 天神娱乐<br>
002355 兴民智通<br>
002356 赫美集团<br>
002357 富临运业<br>
002358 森源电气<br>
002359 齐星铁塔<br>
002360 同德化工<br>
002361 神剑股份<br>
002362 汉王科技<br>
002363 隆基机械<br>
002364 中恒电气<br>
002365 永安药业<br>
002366 台海核电<br>
002367 康力电梯<br>
002368 太极股份<br>
002369 卓翼科技<br>
002370 亚太药业<br>
002371 北方华创<br>
002372 伟星新材<br>
002373 千方科技<br>
002374 丽鹏股份<br>
002375 亚厦股份<br>
002376 新北洋<br>
002377 国创高新<br>
002378 章源钨业<br>
002379 宏创控股<br>
002380 科远股份<br>
002381 双箭股份<br>
002382 蓝帆医疗<br>
002383 合众思壮<br>
002384 东山精密<br>
002385 大北农<br>
002386 天原集团<br>
002387 黑牛食品<br>
002388 新亚制程<br>
002389 南洋科技<br>
002390 信邦制药<br>
002391 长青股份<br>
002392 北京利尔<br>
002393 力生制药<br>
002394 联发股份<br>
002395 双象股份<br>
002396 星网锐捷<br>
002397 梦洁股份<br>
002398 建研集团<br>
002399 海普瑞<br>
002400 省广股份<br>
002401 中远海科<br>
002402 和而泰<br>
002403 爱仕达<br>
002404 嘉欣丝绸<br>
002405 四维图新<br>
002406 远东传动<br>
002407 多氟多<br>
002408 齐翔腾达<br>
002409 雅克科技<br>
002410 广联达<br>
002411 必康股份<br>
002412 汉森制药<br>
002413 雷科防务<br>
002414 高德红外<br>
002415 海康威视<br>
002416 爱施德<br>
002417 三元达<br>
002418 康盛股份<br>
002419 天虹股份<br>
002420 毅昌股份<br>
002421 达实智能<br>
002422 科伦药业<br>
002423 中原特钢<br>
002424 贵州百灵<br>
002425 凯撒文化<br>
002426 胜利精密<br>
002427 尤夫股份<br>
002428 云南锗业<br>
002429 兆驰股份<br>
002430 杭氧股份<br>
002431 棕榈股份<br>
002432 九安医疗<br>
002433 太安堂<br>
002434 万里扬<br>
002435 长江润发<br>
002436 兴森科技<br>
002437 誉衡药业<br>
002438 江苏神通<br>
002439 启明星辰<br>
002440 闰土股份<br>
002441 众业达<br>
002442 龙星化工<br>
002443 金洲管道<br>
002444 巨星科技<br>
002445 中南文化<br>
002446 盛路通信<br>
002447 壹桥股份<br>
002448 中原内配<br>
002449 国星光电<br>
002450 康得新<br>
002451 摩恩电气<br>
002452 长高集团<br>
002453 天马精化<br>
002454 松芝股份<br>
002455 百川股份<br>
002456 欧菲光<br>
002457 青龙管业<br>
002458 益生股份<br>
002459 天业通联<br>
002460 赣锋锂业<br>
002461 珠江啤酒<br>
002462 嘉事堂<br>
002463 沪电股份<br>
002464 金利科技<br>
002465 海格通信<br>
002466 天齐锂业<br>
002467 二六三<br>
002468 申通快递<br>
002469 三维工程<br>
002470 金正大<br>
002471 中超控股<br>
002472 双环传动<br>
002473 *ST圣莱<br>
002474 榕基软件<br>
002475 立讯精密<br>
002476 宝莫股份<br>
002477 雏鹰农牧<br>
002478 常宝股份<br>
002479 富春环保<br>
002480 新筑股份<br>
002481 双塔食品<br>
002482 广田集团<br>
002483 润邦股份<br>
002484 江海股份<br>
002485 希努尔<br>
002486 嘉麟杰<br>
002487 大金重工<br>
002488 金固股份<br>
002489 浙江永强<br>
002490 *ST墨龙<br>
002491 通鼎互联<br>
002492 恒基达鑫<br>
002493 荣盛石化<br>
002494 华斯股份<br>
002495 佳隆股份<br>
002496 辉丰股份<br>
002497 雅化集团<br>
002498 汉缆股份<br>
002499 科林环保<br>
002500 山西证券<br>
002501 利源精制<br>
002502 骅威文化<br>
002503 搜于特<br>
002504 *ST弘高<br>
002505 大康农业<br>
002506 协鑫集成<br>
002507 涪陵榨菜<br>
002508 老板电器<br>
002509 天广中茂<br>
002510 天汽模<br>
002511 中顺洁柔<br>
002512 达华智能<br>
002513 蓝丰生化<br>
002514 宝馨科技<br>
002515 金字火腿<br>
002516 旷达科技<br>
002517 恺英网络<br>
002518 科士达<br>
002519 银河电子<br>
002520 日发精机<br>
002521 齐峰新材<br>
002522 浙江众成<br>
002523 天桥起重<br>
002524 光正集团<br>
002526 山东矿机<br>
002527 新时达<br>
002528 英飞拓<br>
002529 海源机械<br>
002530 金财互联<br>
002531 天顺风能<br>
002532 新界泵业<br>
002533 金杯电工<br>
002534 杭锅股份<br>
002535 林州重机<br>
002536 西泵股份<br>
002537 海立美达<br>
002538 司尔特<br>
002539 云图控股<br>
002540 亚太科技<br>
002541 鸿路钢构<br>
002542 中化岩土<br>
002543 万和电气<br>
002544 杰赛科技<br>
002545 东方铁塔<br>
002546 新联电子<br>
002547 春兴精工<br>
002548 金新农<br>
002549 凯美特气<br>
002550 千红制药<br>
002551 尚荣医疗<br>
002552 宝鼎科技<br>
002553 南方轴承<br>
002554 惠博普<br>
002555 三七互娱<br>
002556 辉隆股份<br>
002557 洽洽食品<br>
002558 巨人网络<br>
002559 亚威股份<br>
002560 通达股份<br>
002561 徐家汇<br>
002562 兄弟科技<br>
002563 森马服饰<br>
002564 天沃科技<br>
002565 顺灏股份<br>
002566 益盛药业<br>
002567 唐人神<br>
002568 百润股份<br>
002569 步森股份<br>
002570 贝因美<br>
002571 *ST德力<br>
002572 索菲亚<br>
002573 清新环境<br>
002574 明牌珠宝<br>
002575 群兴玩具<br>
002576 通达动力<br>
002577 雷柏科技<br>
002578 闽发铝业<br>
002579 中京电子<br>
002580 圣阳股份<br>
002581 未名医药<br>
002582 好想你<br>
002583 海能达<br>
002584 西陇科学<br>
002585 双星新材<br>
002586 围海股份<br>
002587 奥拓电子<br>
002588 史丹利<br>
002589 瑞康医药<br>
002590 万安科技<br>
002591 恒大高新<br>
002592 八菱科技<br>
002593 日上集团<br>
002594 比亚迪<br>
002595 豪迈科技<br>
002596 海南瑞泽<br>
002597 金禾实业<br>
002598 山东章鼓<br>
002599 盛通股份<br>
002600 江粉磁材<br>
002601 龙蟒佰利<br>
002602 世纪华通<br>
002603 以岭药业<br>
002604 龙力生物<br>
002605 姚记扑克<br>
002606 大连电瓷<br>
002607 亚夏汽车<br>
002608 江苏国信<br>
002609 捷顺科技<br>
002610 爱康科技<br>
002611 东方精工<br>
002612 朗姿股份<br>
002613 北玻股份<br>
002614 奥佳华<br>
002615 哈尔斯<br>
002616 长青集团<br>
002617 露笑科技<br>
002618 丹邦科技<br>
002619 巨龙管业<br>
002620 瑞和股份<br>
002621 三垒股份<br>
002622 融钰集团<br>
002623 亚玛顿<br>
002624 完美世界<br>
002625 光启技术<br>
002626 金达威<br>
002627 宜昌交运<br>
002628 成都路桥<br>
002629 仁智股份<br>
002630 华西能源<br>
002631 德尔未来<br>
002632 道明光学<br>
002633 申科股份<br>
002634 棒杰股份<br>
002635 安洁科技<br>
002636 金安国纪<br>
002637 赞宇科技<br>
002638 勤上股份<br>
002639 雪人股份<br>
002640 跨境通<br>
002641 永高股份<br>
002642 荣之联<br>
002643 万润股份<br>
002644 佛慈制药<br>
002645 华宏科技<br>
002646 青青稞酒<br>
002647 民盛金科<br>
002648 卫星石化<br>
002649 博彦科技<br>
002650 加加食品<br>
002651 利君股份<br>
002652 扬子新材<br>
002653 海思科<br>
002654 万润科技<br>
002655 共达电声<br>
002656 摩登大道<br>
002657 中科金财<br>
002658 雪迪龙<br>
002659 中泰桥梁<br>
002660 茂硕电源<br>
002661 克明面业<br>
002662 京威股份<br>
002663 普邦股份<br>
002664 信质电机<br>
002665 首航节能<br>
002666 德联集团<br>
002667 鞍重股份<br>
002668 奥马电器<br>
002669 康达新材<br>
002670 国盛金控<br>
002671 龙泉股份<br>
002672 东江环保<br>
002673 西部证券<br>
002674 兴业科技<br>
002675 东诚药业<br>
002676 顺威股份<br>
002677 浙江美大<br>
002678 珠江钢琴<br>
002679 福建金森<br>
002680 长生生物<br>
002681 奋达科技<br>
002682 龙洲股份<br>
002683 宏大爆破<br>
002684 猛狮科技<br>
002685 华东重机<br>
002686 亿利达<br>
002687 乔治白<br>
002688 金河生物<br>
002689 远大智能<br>
002690 美亚光电<br>
002691 冀凯股份<br>
002692 睿康股份<br>
002693 双成药业<br>
002694 顾地科技<br>
002695 煌上煌<br>
002696 百洋股份<br>
002697 红旗连锁<br>
002698 博实股份<br>
002699 美盛文化<br>
002700 新疆浩源<br>
002701 奥瑞金<br>
002702 海欣食品<br>
002703 浙江世宝<br>
002705 新宝股份<br>
002706 良信电器<br>
002707 众信旅游<br>
002708 光洋股份<br>
002709 天赐材料<br>
002711 欧浦智网<br>
002712 思美传媒<br>
002713 东易日盛<br>
002714 牧原股份<br>
002715 登云股份<br>
002716 金贵银业<br>
002717 岭南园林<br>
002718 友邦吊顶<br>
002719 麦趣尔<br>
002721 金一文化<br>
002722 金轮股份<br>
002723 金莱特<br>
002724 海洋王<br>
002725 跃岭股份<br>
002726 龙大肉食<br>
002727 一心堂<br>
002728 特一药业<br>
002729 好利来<br>
002730 电光科技<br>
002731 萃华珠宝<br>
002732 燕塘乳业<br>
002733 雄韬股份<br>
002734 利民股份<br>
002735 王子新材<br>
002736 国信证券<br>
002737 葵花药业<br>
002738 中矿资源<br>
002739 万达电影<br>
002740 爱迪尔<br>
002741 光华科技<br>
002742 三圣股份<br>
002743 富煌钢构<br>
002745 木林森<br>
002746 仙坛股份<br>
002747 埃斯顿<br>
002748 世龙实业<br>
002749 国光股份<br>
002750 龙津药业<br>
002751 易尚展示<br>
002752 昇兴股份<br>
002753 永东股份<br>
002755 东方新星<br>
002756 永兴特钢<br>
002757 南兴装备<br>
002758 华通医药<br>
002759 天际股份<br>
002760 凤形股份<br>
002761 多喜爱<br>
002762 金发拉比<br>
002763 汇洁股份<br>
002765 蓝黛传动<br>
002766 索菱股份<br>
002767 先锋电子<br>
002768 国恩股份<br>
002769 普路通<br>
002770 科迪乳业<br>
002771 真视通<br>
002772 众兴菌业<br>
002773 康弘药业<br>
002774 快意电梯<br>
002775 文科园林<br>
002776 柏堡龙<br>
002777 久远银海<br>
002778 高科石化<br>
002779 中坚科技<br>
002780 三夫户外<br>
002781 奇信股份<br>
002782 可立克<br>
002783 凯龙股份<br>
002785 万里石<br>
002786 银宝山新<br>
002787 华源控股<br>
002788 鹭燕医药<br>
002789 建艺集团<br>
002790 瑞尔特<br>
002791 坚朗五金<br>
002792 通宇通讯<br>
002793 东音股份<br>
002795 永和智控<br>
002796 世嘉科技<br>
002797 第一创业<br>
002798 帝王洁具<br>
002799 环球印务<br>
002800 天顺股份<br>
002801 微光股份<br>
002802 洪汇新材<br>
002803 吉宏股份<br>
002805 丰元股份<br>
002806 华锋股份<br>
002807 江阴银行<br>
002808 苏州恒久<br>
002809 红墙股份<br>
002810 山东赫达<br>
002811 亚泰国际<br>
002812 创新股份<br>
002813 路畅科技<br>
002815 崇达技术<br>
002816 和科达<br>
002817 黄山胶囊<br>
002818 富森美<br>
002819 东方中科<br>
002820 桂发祥<br>
002821 凯莱英<br>
002822 中装建设<br>
002823 凯中精密<br>
002824 和胜股份<br>
002825 纳尔股份<br>
002826 易明医药<br>
002827 高争民爆<br>
002828 贝肯能源<br>
002829 星网宇达<br>
002830 名雕股份<br>
002831 裕同科技<br>
002832 比音勒芬<br>
002833 弘亚数控<br>
002835 同为股份<br>
002836 新宏泽<br>
002837 英维克<br>
002838 道恩股份<br>
002839 张家港行<br>
002840 华统股份<br>
002841 视源股份<br>
002842 翔鹭钨业<br>
002843 泰嘉股份<br>
002845 同兴达<br>
002846 英联股份<br>
002847 盐津铺子<br>
002848 高斯贝尔<br>
002849 威星智能<br>
002850 科达利<br>
002851 麦格米特<br>
002852 道道全<br>
002853 皮阿诺<br>
002855 捷荣技术<br>
002856 美芝股份<br>
002857 三晖电气<br>
002858 力盛赛车<br>
002859 洁美科技<br>
002860 星帅尔<br>
002861 瀛通通讯<br>
002862 实丰文化<br>
002863 今飞凯达<br>
002865 钧达股份<br>
002866 传艺科技<br>
002867 周大生<br>
002868 绿康生化<br>
002869 金溢科技<br>
002870 香山股份<br>
002871 伟隆股份<br>
002872 天圣制药<br>
002873 新天药业<br>
002875 安奈儿<br>
002876 三利谱<br>
002877 智能自控<br>
002878 元隆雅图<br>
002880 卫光生物<br>
002881 美格智能<br>
002883 中设股份<br>
002885 京泉华<br>
002886 沃特股份</p>
]]></content>
  </entry>
  <entry>
    <title>stock-category</title>
    <url>/posts/uncategorized/97dfa6d0/</url>
    <content><![CDATA[<p>我国上市公司的股票有A股, B股, H股, N股和S股等的区分. 这一区分主要依据股票的上市地点和所面对的投资者而定.</p>
<h1 id="a-股">1.  A 股</h1>
<pre><code>正式名称是人民币普通股票. 它是由我国境内的公司发行,供境内机构, 组织或个人 (不含台, 港, 澳投资者) 以人民 币认购和交易的普通股股票,我国A股股票市场经过几年快速发展,已经初具规模. 
</code></pre>
<h1 id="b-股">2.  B 股</h1>
<pre><code>正式名称是人民币特种股票,它是以人民币标明面值,以外币认购和买卖,在境内 (上海, 深圳) 证券交易所上市交易的. 它的投资人限于: 外国的自然人, 法人和其他组织,香港, 澳门, 台湾地区的自然人, 法人和其他组织,定居在国外的中国公民. 中国证监会规定的其他投资人. 现阶段B股的投资人,主要是上述几类中的机构投资者. B股公司的注册地和上市地都在境内. 只不过投资者在境外或在中国香港,澳门及台湾. 
</code></pre>
<h1 id="h-股">3.  H 股</h1>
<pre><code>即注册地在内地, 上市地在香港的外资股. 香港的英文是HongKong,取其字首,在港上市外资股就叫做H股. 
</code></pre>
<h1 id="n-股">4.  N 股</h1>
<pre><code>1. 指那些在中国大陆注册, 在纽约 (New York) 上市的外资股. 

2. 上市首日股票: 在我国股市中,当股票名称前出现了N字,表示这只股是当日新上市的股票,字母N是英语New(新)的缩写. 看到带有N字头的股票时,投资者除了知道它是新股,还应认识到这只股票的股价当日在市场上是不受涨跌幅限制的,涨幅可以高于10%,跌幅也可深于10%. 这样就较容易控制风险和把握投资机会.  
</code></pre>
<h1 id="s-股">5.  S 股</h1>
<pre><code>1. 在我国是指尚未进行股权分置改革或者已进入改革程序但尚未实施股权分置改革方案的股票,在股名前加S,此标记从2006年10月9日起启用,日涨跌幅仍为上下10% (ST股为5%) . 从2007年1月8日起,日涨跌幅调整为上下5%. 

2. 新加坡上市公司股票: 是指那些主要生产或者经营等核心业务在中国大陆, 而企业的注册地在内地,但是在新加坡交易所上市挂牌的企业股票. 
</code></pre>
<h1 id="白马股">6.  白马股</h1>
<h1 id="证券股">7.  证券股</h1>
]]></content>
  </entry>
  <entry>
    <title>stock-strategy</title>
    <url>/posts/uncategorized/85d5fafc/</url>
    <content><![CDATA[<h1 id="跟随大盘走势">1.  跟随大盘走势</h1>
<h1 id="保本">2.  保本</h1>
<p>市盈率<br>
涨跌幅最大排行, 之后逐个确定是公司原因还是系统原因, 是否会影响板块<br>
大宗交易列表  庄家情况</p>
<p>联动:<br>
AB 比较 A股与B股比较<br>
AH 比较 沪深与港比较</p>
<p>财务情况<br>
本期收入(元)<br>
本期利润(元)<br>
每股收益(元)<br>
每股净资产(元)<br>
净资产收益率(%)<br>
每股现金流(元)<br>
毛利率(%)<br>
分配方案</p>
]]></content>
  </entry>
  <entry>
    <title>stock-investment</title>
    <url>/posts/uncategorized/4bcd1648/</url>
    <content><![CDATA[<p>什么是股票投入<br>
股票投入是指企业或个人用积累起来的货币购买股票, 借以获得收益的行为.</p>
<p>股票投入的收益及成本<br>
1, 股票投入的收益</p>
<p>股票投入的收益是由 <em>收入收益</em>和 <em>资本利得</em>两部分构成的:</p>
<ol>
<li>收入收益</li>
</ol>
<p>收入收益是指股票投入者以股东身份, 按照持股的份额, 在企业盈利分配中得到的股息和红利的收益.</p>
<ol start="2">
<li>资本利得. 资本利得是指投入者在股票价格的变化中所得到的收益, 即将股票低价卖进, 高价卖出所得到的差价收益.</li>
</ol>
<p>2, 股票投入的成本</p>
<p>股票投入的成本是由机会成本与直接成本两部分构成的:</p>
<ol>
<li>
<p>机会成本. 当投入者打算实行投入时面临着多种选择, 如选择了股票投入, 就必然放弃其他的投入, 即放弃了从另外的投入中获取收益的机会, 这种因选择股票投入而只好放弃别的投入获利机会, 就是股票投入的机会成本.</p>
</li>
<li>
<p>直接成本. 直接成本是指股票投入者花费在股票投入方面的资金支出, 它由股票的价格, 交易费用, 税金和为了实行有效的投入, 取得市场信息所花费的开支四部分构成.</p>
</li>
</ol>
<p>A, 股票价款. 股票价款=委托买入成交单位*成交股数</p>
<p>B, 交易费用. 交易费用指投入者在股票交易中需交纳的费用, 它包含委托买卖佣金, 委托手续费, 记名证券过户费, 实物交割手续费. 目前国内买卖上海股票收费标准如下:</p>
<p>委托买卖佣金. 股票买卖成交后, 投入者 (委托人) 要按实际成交额向证券商支付委托买卖佣金.<br>
委托买卖手续费. 投入者如买卖股票没有成交, 应向证券商交纳委托手续费每笔1元.<br>
记名证券过户费. 凡记名证券成交后都要办理过户手续.<br>
实物交割手续费. 因为上海证券交易所在证券交易行为中推行无实物交割制度, 但目前还有部分投入者买入证券后要提领实物, 这样证券交易所必须为投入者繁复地提领证券, 增加了许多工作量. 为此, 上海证券交易所规范, 要提领实物的投入者要交纳相当于委托买卖佣金50%的费用, 相反, 如不提取实物, 证交所则代投入者免费保管.<br>
C, 税金. 根据我国现行税务规范: 在股票交易中对买卖当事人双方各按股票市值付印花税; 对股份企业股东领取的股息红利超过一年期储蓄存款利息部分收取个人收入调节税.</p>
<p>D, 信息情报费. 信息情报费开支包含为解析股票市场行情, 股票上市企业经营及财务状况, 广泛搜集有关信息, 状况资料所发生的费用开支和为搜集, 储存, 解析股票行情信息所添置的通讯设备, 个人微机等所花费的资金.</p>
<p>股票投入的基本策略<br>
股票投入具备高危机, 高收益的特点. 理性的股票投入历程, 应该包含确定投入政策→股票投入解析→投入组合→评估业绩→修正投入策略五个步骤. 股票投入解析作为其中一环, 是成功实行股票投入的重要基础.</p>
<p>股票投入的五大步骤<br>
1, 确定投入策略</p>
<p>股票投入是一种高危机的投入, 人们常说:  *危机越大, 收益越大. *换一个角度说, 也就是需要承受的压力越大. 投入者在涉足股票投入的时候, 必须结合个人的实际状况, 订出可行的投入政策. 这实质上是确定个人资产的投入组合的问题, 投入者应掌握好以下两个原则.</p>
<p>1)危机分散原则</p>
<p>投入者在支配个人财产时, 要牢记:  *不要把鸡蛋放在一个篮子里. *与房产, 珠宝首饰, 古董字画相比, 股票流动性好, 变现能力强; 与银行储蓄, 债券相比, 股票价格波幅大. 各种投入渠道都有自己的优缺点, 尽可能地回避危机和实现收益最大化, 成为个人理财的两大目标.</p>
<p>2)量力而行原则</p>
<p>股票价格变动较大, 投入者不能只想盈利, 还要有赔钱的心理准备和实际承受能力. 《证券法》明文禁止透支, 挪用公款炒股, 正是体现了这种危机控制的思想. 投入者必须结合个人的财力和心理承受能力, 拟定合理的投入政策.</p>
<p>2, 实行投入解析</p>
<p>受市场供求, 政策倾向, 利率变动, 汇率变动, 企业经营状况变动等多种因素影响, 股票价格呈现波动性, 危机性的特征. 何时介入股票市场, 购买何种股票对投入者的收益有直接影响. 股票投入解析成为股票投入步骤中很重要的一个环节.</p>
<p>股票投入解析可以分为基本解析法和技术解析法, 其目的在于预测价格趋势和价值发现, 从而为投入者提给介入时机和介入品种决策的依据.</p>
<p>3, 确立投入组合</p>
<p>在实行股票投入时, 投入者一方面希望收益最大化, 另一方面又要求危机最小, 两者的平衡点, 亦即在可接受的危机水平之内, 实现收益量大化的投入方案, 构成最佳的投入组合.</p>
<p>根据个人财务状况, 心理状况和承受能力, 投入者分别具备低危机倾向或高危机倾向. 低危机倾向者宜组建稳健型投入组合, 投入于常年收益稳定, 低市盈率, 派息率较高的股票, 如公用事业股. 高危机倾向者可组建激进型投入组合, 着眼于上市企业的成长性, 多选择一些涉足高科技领域或有资产重组题材的 <em>黑马</em>型上市企业.</p>
<p>4, 评估投入业绩</p>
<p>定期评估投入业债, 测算投入收益率, 检讨决策中的成败得失, 在股票投入中有承上启下的作用.</p>
<p>5, 修正投入策略</p>
<p>随着时间推移, 市场, 政策等各种因素发生变化, 投入者对股票的评价, 对收益的预期也相应发生变化. 在评估前一段业债的基础上, 重新修正投入策略非常必要. 如此又重复实行确定投入政策→股票投入解析→确立投入组合→评估业债的历程, 股票投入的五大步骤相辅相成, 以保证投入者预期目标的实现.</p>
<p>股票投入解析入门<br>
1, 股票投入解析的紧要方式</p>
<p>从研究范式的特征和视角来划分, 股票投入领域的解析方式紧要有如下三种: 基本解析, 技术解析, 演化解析.  (1), 基本解析 (Fundamental Analysis ) : 以企业价值作为紧要研究对象, 通过对决定企业内在价值和影响股票价格的宏观经济形势, 行业进展前景, 企业经营状况等实行详尽解析, 以大概测算上市企业的长期投入价值和安全边际, 并与当前的股票价格实行比较, 形成相应的投入建议.  (2), 技术解析 (Technical Analysis) : 以股票价格作为紧要研究对象, 以预测股价波动趋势为紧要目的, 从股价变化的历史图表入手, 对股市波动规律实行解析的方式总和. 技术解析有三个颇具争议的前提假设, 即市场行为包容消化一切; 价格以趋势方式波动; 历史会重演.  (3), 演化解析 (Evolutionary Analysis) : 以股市波动的生命运动内在属性作为紧要研究对象, 从股市的代谢性, 趋利性, 适应性, 可塑性, 应激性, 变异性, 节律性等方面入手, 对市场波动方向与空间实行动态跟踪研究, 为股票交易决策提给机会和危机评估的方式总和.</p>
<ol>
<li>基本解析法</li>
</ol>
<p>基本解析法通过对决定股票内在价值和影响股票价格的宏观经济形势, 行业状况, 企业经营状况等实行解析, 评估股票的投入价值和合理价值, 与股票市场价实行比较, 相应形成买卖的建议.  基本解析认为股价波动轨迹不可能被准确预测, 而只能在有足够安全边际的状况下 <em>买入并长期持有</em>, 在安全边际消失后卖出.</p>
<p>基本解析包含下面三个方面内容:</p>
<p>宏观经济解析. 研究经济政策(货币政策, 财政政策, 税收政策, 产业政策等等), 经济指标(国内出产总值, 失业率, 通胀率, 利率, 汇率等等)对股票市场的影响.<br>
行业解析. 解析产业前景, 区域经济进展对上市企业的影响<br>
企业解析. 具体解析上市企业行业地位, 市场前景, 财务状况.<br>
2) 技术解析法</p>
<p>技术解析法从股票的成交量, 价格, 达到这些价格和成交量所用的时间, 价格波动的空间几个方面解析走势并预测未来. 目前常用的有K线理论, 波浪理论, 形态理论, 趋势线理论和技术指标解析等, 在后面将做详细解析.</p>
<ol start="3">
<li>演化解析法 演化解析从股市波动的本质属性出发, 认为股市波动的各种复杂因果关系或者现象, 都可以从生命运动的基本原理中, 找到它们之间的逻辑关系及合理解释, 并为构建科学合理的博弈决策框架, 提给令人信服的依据.</li>
</ol>
<p>2, 如何选择合适的投入解析方式</p>
<p>基本解析法能够比较全面地把握股票价格的基本走势, 但对短期的市场变动不敏感; 技术解析贴近市场, 对市场短期变化反应快, 但难以判断长期的趋势, 特别是对于政策因素, 难有预见性.</p>
<p>从上可知, 基本解析和技术解析各有优缺点和适用范围. 基本解析能把握中长期的价格趋势, 而技术解析则为短期买入, 卖出时机选择提给参考. 投入者在具体运用时应该把两者有机结合起来, 方可实现效用最大化.</p>
<p>3, 收集投入解析所需要的信息</p>
<p>投入解析的起点在于信息的收集, 道听途说的市场传闻有很大的欺骗性和危机性, 上市企业的实地调研耗费人力, 财力大, 对于一般投入者而言, 实行股票投入解析, 特别是基本解析, 依靠的紧要还是媒体登载的国内外新闻以及上市企业公开披露的信息.</p>
<ol>
<li>上市企业需要公开披露的信息</li>
</ol>
<p>《证券法》实施后, 对上市企业持续性的公开信息披露的准确性, 完整性, 真实性实行了严格要求. 投入者有权获取的公开信息有:</p>
<p>A, 招股说明书(配股, 增发新股说明书). 对募集资金投向及可行性实行披露.</p>
<p>B, 上市公告书. 对企业设立历程, 业务范围, 上市前财务状况, 股票发行状况予以披露.</p>
<p>C, 中期报告. 在企业每一会计年度的上半年结束之日起两个月内披露. 内容包含企业财务会计报告和经营状况;涉及企业的重大诉讼事项; 已发行的股票, 企业债券变动状况;提交股东大会审议的重要事项及其他事项.</p>
<p>D, 年度报告. 在每一会计年度结束之日起4个月内公告. 内容包含企业概况; 企业财务会计报告和经营状况; 董事, 监事, 经理及有关高级经营管理人员简介及其持股状况; 已发行的股票, 企业债券状况, 包含持有企业股份最多的前10名股东名单和持股数额;国务院证券监督经营管理机构规范的其他事项.</p>
<p>E, 重大事件临时性公告. 可能对上市企业股票价格产生较大影响的重大事件包含下列状况: 企业的经营方针和经营范围的重大变化; 企业的重大投入行为和重大的购置财产的决定; 企业订立重要合同, 而该合同可能对企业的资产, 负债, 权益和经营成果产生重要影响; 企业发生重大债务和未能清偿到期重大债务的违约状况; 企业发生重大亏损或者遭受超过净资产10%以上的重大损失.</p>
<p>F, 企业出产经营的外部条件发生的重大变化.</p>
<p>G, 企业的董事长, 1/3以上的董事或者经理发生变动.</p>
<p>H, 持有企业5%以上股份的股东, 其持有股份状况发生较大变化.</p>
<p>I, 企业减资, 合并, 分立, 解散及申请破产的决定.</p>
<p>J, 涉及企业的重大诉讼, 法院依法撤销股东大会, 董事会决议.</p>
<p>K, 其它, 法律, 行政法规规范的等事项.</p>
<ol start="2">
<li>收集资料信息的途径</li>
</ol>
<p>目前, 被中国证监会指定披露上市企业信息的刊物有五家: 《中国证券报》, 《上海证券报》, 《证券时报》, 《金融时报》, 《证券市场周刊》. 除此之外, 电台, 电视也会对有关的信息实行简要的转载. 更可以在网络上找到自己所需信息.</p>
<p>以下是部分热门站点:</p>
<p>《中国证券报》:<a href="http://www.cs.com.cn/" target="_blank" rel="noopener">http://www.cs.com.cn/</a><br>
《证券时报》:<a href="http://www.p5w.net" target="_blank" rel="noopener">http://www.p5w.net</a><br>
《上海证券报》:<a href="http://www.cnstock.com" target="_blank" rel="noopener">http://www.cnstock.com</a><br>
《金融时报》:<a href="http://www.financialnews.com.cn/" target="_blank" rel="noopener">http://www.financialnews.com.cn/</a><br>
在这些网页上有电子版报刊, 历史资料检索, 财经类站点链接等内容.</p>
<p>监管机构:</p>
<p>中国证券监督经营管理委员会:<a href="http://www.csrc.gov.cn/" target="_blank" rel="noopener">http://www.csrc.gov.cn/</a></p>
<p>要闻导读, 证监会简介, 证监会公告, 法律法规库, 统计数据库, 各地证管办, 证券业协会, 交易所概况, 上市企业, 投入基金, , 中介机构, 投诉, 相关站点等.</p>
<p>证券交易所:</p>
<p>深圳证券交易所:<a href="http://www.sse.org.cn" target="_blank" rel="noopener">http://www.sse.org.cn</a></p>
<p>深圳证券交易所概况, 组织架构, 理事会和总经理室, 深圳证券结算有限企业, 深圳证券信息有限企业, 深圳证券市场入市指南, 深圳证券市场概况, 深交所市场服务工程, 深交所无形化电子交易网络, 深交所完善的信息披露网络, 深圳B股市场步入新阶段等内容.</p>
<p>上海证券交易所:<a href="http://www.sse.com.cn/" target="_blank" rel="noopener">http://www.sse.com.cn/</a></p>
<p>上证所介绍, 市场信息, 证券行情, 上市企业, 会员企业, 政策法规, 出版物, 电脑技术等栏目.</p>
<h1 id="resource">1.  Resource</h1>
<p><a href="http://baike.eastmoney.com/item/%e8%82%a1%e7%a5%a8%e6%8a%95%e8%b5%84" target="_blank" rel="noopener">http://baike.eastmoney.com/item/股票投资</a></p>
]]></content>
  </entry>
  <entry>
    <title>stock-term</title>
    <url>/posts/uncategorized/3f070ce6/</url>
    <content><![CDATA[<p>PE: 市盈率 股价/每股收益<br>
PB: 市净率PB 股价/每股净资<br>
ROE: 净资产收益率<br>
PEG:</p>
<p>市场利率        -&gt; 估算股票的价格<br>
DDM和DCF     -&gt; 绝对估值</p>
]]></content>
  </entry>
  <entry>
    <title>stock-value</title>
    <url>/posts/uncategorized/c78de80f/</url>
    <content><![CDATA[<h1 id="股票发行价格">1.  股票发行价格</h1>
<p>国际市场上确定股票发行价格的参考公式是:<br>
股票发行价格=市盈率还原值×40％+股息还原率×20％+每股净值×20％+预计当年股息与一年期存款利率还原值×20％</p>
<p>这个公式全面地考虑了影响股票发行价格的若干因素, 如利率, 股息, 流通市场的股票价格等, 值得借鉴.<br>
股票在流通市场上的价格, 才是完全意义上的股票的市场价格, 一般称为股票市价或股票行市. 股票市价表现为开盘价, 收盘价, 最高价, 最低价等形式.<br>
其中收盘价最重要, 是解析股市行情时采用的基本数据.</p>
<h1 id="股票理论价格">2.  股票理论价格</h1>
<p>股票代表的是持有者的股东权. 这种股东权的直接经济利益, 表现为股息, 红利收入. 股票的理论价格, 就是为获得这种股息, 红利收入的请求权而付出的代价, 是股息资本化的表现.</p>
<p>静态地看, 股息收入与利息收入具备同样的意义. 投入者是把资金投入于股票还是存于银行, 这首先取决于哪一种投入的收益率高. 按照等量资本获得等量收入的理论, 如果股息率高于利息率, 人们对股票的需求就会增加, 股票价格就会上涨, 从而股息率就会下降, 一直降到股息率与市场利率大体一致为止. 按照这种解析, 可以得出股票的理论价格公式为:</p>
<p>股票价格=股息/利息率<br>
股票理论价格=股息红利收益／市场利率</p>
<h1 id="股票价格的偏向性特征">3.  股票价格的偏向性特征</h1>
<h2 id="定义">3.1.  定义</h2>
<p>股票价格的偏向性特征指股票价格总体上具备不断向上增长的长期历史趋势, 这是基金长期投入能够赢利的重要理论依据.</p>
<h2 id="影响因素">3.2.  影响因素</h2>
<p>影响因素</p>
<p>股市价格波动的偏向型特征, 紧要受以下两个因素影响:</p>
<p>上市企业整体中最活跃的处于生命周期上升阶段企业的股价波动, 是偏向性的紧要推动力.<br>
上述推动历程中以 <em>接力</em>方式形成的不断接替的动力.</p>
<p>股票价格波动的偏向性是以大量企业在激烈的市场竞争中被淘汰为代价而获得的. 不理解这一点, 投入者就很容易简单地从股价波动的偏向性特征中直接推导出简单地长期持有的股票投入战略. 如果没有相应的投入危机分散化的资金经营管理措施, 股价波动的偏向性并不能保证投入者获得满意的投入回报.</p>
<p>股利的多少, 取决于每股盈利和股利支付率两个因素. 对其估计的方式是历史资料的统计解析, 例如回归解析, 时间序列解析法及趋势解析法等. 股票评价的基本模型要求无限期的预计历年的股利, 实际上是不可能做到的. 因此, 应用的模型都是各种简化的办法, 如假设每年股利相同或固定比率增长等. 贴现率的紧要作用是把所有未来区别时间的现金流入折算为现在的价值. 折算现值的比率应当使投入者所要求的收益率. 那么, 投入者要求的收益率应当是多少呢?一种办法是股票历史上长期的收益率来确定. 据计算, 美国普通股在历史上长期的收益率为8％-9％. 这种方式的缺点是: 过去的状况未必是和将来的进展; 历史上区别时期的收益率高低区别, 不好判断那一个更适用.<br>
另一种方式是参照债券的收益率, 加上一定的危机报酬率来确定. 还有一种更常见的方式是直接使用市场利率. 因为投入者要求的收益率一般不低于市场利率, 市场利率是投入与股票的机会成本, 所以市场利率可以作为贴现率. 假设未来股利不变, 其支付历程是一个永续年金,则股票的价值可用公式计算出来; 但是企业的股利不是固定不变的, 假设股利每年按照固定的比率增长, 其股票的价值也可以用公式计算出来.</p>
<p>理论上的股票价值评价方式是完美的, 无懈可击的. 但是, 在实践应用时它有一个致命的缺陷: 它的结论是建立在严格的假设之上的, 即我们假定所有年度的股利都是能够准确预测的, 然后通过对股利的贴现计算出股票的价值. 存现实经济生活中, 这是完全不可能做到的, 我们不可能准确预计五年后一个企业能获得多少利润, 更不可能预计遥远未来的某一年那个企业的年度利润, 甚至我们都无法确定到那时这个企业还是否存在.</p>
<p>既然事实上股票价值难以用不可把握的未来预期股利来计算, 那么究竟股票的价值是以什么为根据的?广大投入者是怎样确定股票的价值的?根据有效市场理论, 在证券市场上, 广大理性的投入者是根据对股票价值的无偏估计来确定股票价格的. 投入者估计股票价值的依据就是基干对企业目前业绩的全面评价, 有关信息的来源紧要是上市企业公开发布的财务报表及与该企业有关的其它资料. 也就是说, 投入者对股票价值的判断即使是以将来预期的收益为理论根据的, 这个预期的收益也是以企业目前已经公布的财务资料为基础的.</p>
<p>基于这样一个判断, 我们可以试图找出股票价值同财务数据之间的数量关系. 如果能够把股票价值同公开的财务数据之间的关系定量地表示出来, 那么广大的投入者就有了一个简便易行的方式来确定股票的价值, 进而也有了一个科学的评价上市企业企业业绩的方式, 同时, 推而广之, 这个定量方式也可以用来评价非上市企业业的业绩. 这样, 我们就有了一个简便易行, 科学有效的可适用于所有企业的业绩评价方式.</p>
<h1 id="影响股票价格的因素">4.  影响股票价格的因素</h1>
<p>股票的市场价格由股票的价值所决定, 但同时受许多其他因素的影响. 一般地看, 影响股票市场价格的因素紧要有以下几个方面:</p>
<p>1.宏观因素</p>
<p>包含对股票市场价格可能产生影响的社会, 政治, 经济, 文化等方面.</p>
<p>A．宏观经济因素. 即宏观经济环境状况及其变动对股票市场价格的影响, 包含宏观经济运行的周期性波动等规律性因素和政府实施的经济政策等政策性因素. 股票市场是整个金融市场体系的重要组成部分, 上市企业是宏观经济运行微观基础中的重要主体, 因此股票市场的股票价格理所当然地会随宏观经济运行状况的变动而变动, 会因宏观经济政策的调整而调整. 例如, 一般地讲, 股票价格会随国民出产总值的升降而涨落.</p>
<p>B．政治因素. 即影响股票市场价格变动的政治事件. 一国的政局是否稳定对股票市场有着直接的影响. 一般而言, 政局稳定则股票市场稳定运行; 相反, 政局不稳则常常引起股票市场价格下跌. 除此之外, 国家的首脑更换, 罢工, 紧要产油国的动乱等也对股票市场有重大影响.</p>
<p>C．法律因素. 即一国的法律特别是股票市场的法律规范状况. 一般来说, 法律不健全的股票市场更具备投机性, 震荡剧烈, 涨跌无序, 人为操纵成分大, 不正当交易较多; 反之, 法律法规体系比较完善, 制度和监管机制比较健全的股票市场, 证券从业人员营私舞弊的机会较少, 股票价格受人为操纵的状况也较少, 因而表现得相对稳定和正常. 总体上说, 新兴的股票市场往往不够规范, 而成熟的股票市场法律法规体系则比较健全.</p>
<p>D．军事因素. 紧要是指 军事冲突.  军事冲突是一国国内或国与国之间, 国际利益集团与国际利益集团之间的矛盾进展到不可以采取政治手段来解决的程度的结果.  军事冲突小则造成一个国家内部或一个地区的社会经济生活的动荡, 大则打破正常的国际秩序. 它使股票市场的正常交易遭到破坏, 因而必然导致相关的股票价格的剧烈动荡. 例如, 海湾战争之初, 世界紧要股市均呈下跌之势, 而且随着战局的不断变化, 股市均大幅振荡.</p>
<p>E．文化, 自然因素. 就文化因素而言, 一个国家的文化传统往往在很大程度上决定着人们的储蓄和投入心理, 从而影响股票市场资金流入流出的格局, 进而影响股票市场价格; 证券投入者的文化素质状况则从投入决策的角度影响着股票市场. 一般地, 文化素质较高的证券投入者在投入时相对较为理性, 如果证券投入者的整体文化素质较高, 则股票市场价格相对比较稳定; 相反, 如果证券投入者的整体文化素质偏低, 则股票市场价格容易出现暴涨暴跌. 在自然方面, 如发生自然灾害, 出产经营就会受到影响, 从而导致有关股票价格下跌; 反之, 如进入恢复重建阶段, 由于投入大量增加, 对相关物品的需求也大量增加, 从而导致相关股票价格的上升.</p>
<p>2.产业和区域因素</p>
<p>紧要是指产业进展前景和区域经济进展状况对股票市场价格的影响. 它是介于宏观和微观之间的一种中观影响因素, 因而它对股票市场价格的影响紧要是结构性的.</p>
<p>A.在产业方面, 每一种产业都会经历一个由成长到衰退的进展历程, 这个历程称为产业的生命周期. 产业的生命周期通常分为四个阶段, 即初创期, 成长期, 稳定期, 衰退期. 处于区别进展阶段的产业在经营状况及进展前景方面有较大差异, 这必然会反映在股票价格上. 蒸蒸日上的产业股票价格呈上升趋势, 日见衰落的产业股票价格则逐渐下落.</p>
<p>B.在区域方面, 由于区域经济进展状况, 区域对外交通与信息沟通的便利程度, 区域内的投入活跃程度等的区别, 分属于各区域的股票价格自然也会存在差异, 即便是相同产业的股票也是如此. 经济进展较快, 交通便利, 信息化程度高的地区, 投入活跃, 股票投入有较好的预期; 相反, 经济进展迟缓, 交通不便, 信息闭塞的地区, 其股票价格总体上呈平淡下跌趋势.</p>
<p>3.企业因素</p>
<p>即上市企业的运营对股票价格的影响. 上市企业是发行股票筹集资金的运用者, 也是资金使用的投入收益的实现者, 因而其经营状况的好坏对股票价格的影响极大. 而其经营管理水平, 科技开发能力, 产业内的竞争实力与竞争地位, 财务状况等无不关系着其运营状况, 因而从各个区别的方面影响着股票的市场价格. 由于产权边界明确, 企业因素一般只对本企业的股票市场价格产生深刻的影响, 是一种典型的微观影响因素.</p>
<p>4.市场因素</p>
<p>即影响股票市场价格的各种股票市场操作. 例如, 看涨与看跌, 买空与卖空, 追涨与杀跌, 获利平仓与解套或割肉等行为, 不规范的股票市场中还存在诸如分仓, 串谋, 轮炒等违法违规操纵股票市场的操作行为. 一般而言, 如果股票市场的做多行为多于做空行为, 则股票价格上涨; 反之, 如果做空行为占上风, 则股票价格趋于下跌. 由于各种股票市场操作行为紧要是短期行为, 因而市场因素对股票市场价格的影响具备明显的短期性质.</p>
<p>在以上影响股票市场价格的诸多因素中, 宏观因素, 产业和区域因素及企业因素紧要是通过影响股票发行主体即企业的经营状况和进展前景来影响股票市场价格, 它们在股票市场之外, 因而被称为基本因素. 基本因素的变动形成了股票市场价格变动的紧要利多题材和利空依据. 市场因素则紧要是通过投入者的买卖操作来影响股票市场价格, 它存在于股票市场内部, 与基本因素没有直接的关联, 因而被称为技术因素. 技术因素是技术解析的对象.</p>
<p>#股票价格解析方式</p>
<p>股票价格解析的方式很多,其中紧要的是基本解析法, 也称为基本面解析方式. 基本解析法就是利用丰富的统计资料, 运用多种多样的经济指标, 采用比例, 动态的解析方式从研究宏观的经济大气候开始, 逐步开始中观的行业兴衰解析, 进而根据微观的企业经营, 盈利的现状和前景, 从中对企业所发行的股票作出接近显示现实的客观的评价, 并尽可能预测其未来的变化, 作为投入者选购的依据. 由于它具备比较系统的理论, 受到学者们的鼓吹, 成为股价解析的主流.</p>
<p>基本解析法是准备做长线交易的股民以及 <em>业余</em>股民所应采取的最紧要, 也是最重要的解析方式. 因为这种解析方式是从解析股票的内在价值来入手的, 而把对股票市场的大环境的解析结果摆在次位, 看好一支股票时, 看中的是它的内在潜力与长期进展的良好前景, 所以当我们采用这种解析法来实行完预测解析并在适当的时机购入了具体的股票后, 就可不必耗费太多的时间与精力去关心股票价格的实时走势了.</p>
<h1 id="resource">5.  Resource</h1>
<ul>
<li><a href="http://baike.eastmoney.com/item/%e8%82%a1%e7%a5%a8%e4%bb%b7%e6%a0%bc" target="_blank" rel="noopener">http://baike.eastmoney.com/item/股票价格</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>stock</title>
    <url>/posts/uncategorized/4b365660/</url>
    <content><![CDATA[<p>中国上市公司的股票有A股, B股, H股, N股和S股等</p>
<p>股票投资入门与实战技巧: 从零开始学炒股<br>
股票大作手操盘术——融合时间和价格的利弗莫尔准则<br>
股票作手回忆录<br>
股票短线交易的24堂精品课(第二版)<br>
股票魔法师——纵横天下股市的奥秘<br>
《股票 <em>T 0</em> 操作策略——每天都是小牛市》 (第2版)<br>
股票魔法师 Ⅱ——像冠军一样思考和交易<br>
从零开始学炒股: 股票入门与实战(全彩图解版)<br>
股票投资精解: 基本面分析的30个黄金财务指标<br>
股票投机原理<br>
投资中最简单的事<br>
投资理财从入门到精通<br>
投资银行, 对冲基金和私募股权投资<br>
经济学原理(第7版)曼昆 彩印精装典藏版<br>
用经济思维看懂世界格局<br>
微观经济理论: 基本原理与扩展<br>
全球通史:从史前史到21世纪(第7版修订版上下册, 当当独家赠送全球通史主题笔记本)</p>
]]></content>
  </entry>
  <entry>
    <title>templeton</title>
    <url>/posts/stock/79a36e8a/</url>
    <content><![CDATA[<p>作为上个世纪最著名的逆向投资者, 邓普顿的投资方法被总结为: “在大萧条的低点买入, 在疯狂非理性的高点抛出, 并在这两者间游刃有余.”<br>
邓普顿的投资法宝是: “在全球范围寻找低价的, 长期前景良好的公司作为投资目标.”</p>
<p>行情总在绝望中诞生, 在半信半疑中成长, 在憧憬中成熟, 在希望中毁灭.</p>
<p>约翰·邓普顿被喻为投资之父, 这不仅在于他的91岁高龄, 还因为他是价值投资的模范, 以及让美国人知道海外地区投资的好处, 开创了全球化投资的先河.邓普顿自1987年退休之后, 全身心投入传教事业中, 还著书立说发表自己的人生哲理, 将其投资法则归纳为15条.</p>
<ol>
<li>
<p>信仰有助投资: 一个有信仰的人, 思维会更加清晰和敏锐, 犯错的机会因而减低.要冷静和意志坚定, 能够做到不受市场环境所影响. 谦虚好学是成功法宝: 那些好像对什么问题都知道的人, 其实真正要回答的问题都不知道.投资中, 狂妄和傲慢所带来的是灾难, 也是失望, 聪明的投资者应该知道, 成功是不断探索的过程.</p>
</li>
<li>
<p>要从错误中学习: 避免投资错误的惟一方法是不投资, 但这却是你所能犯的最大错误.不要因为犯了投资错误而耿耿于怀, 更不要为了弥补上次损失而孤注一掷, 而应该找出原因, 避免重蹈覆辙.</p>
</li>
<li>
<p>投资不是赌博: 如果你在股市不断进出, 只求几个价位的利润, 或是不断抛空, 进行期权或期货交易, 股市对你来说已成了赌场, 而你就像赌徒, 最终会血本无归.</p>
</li>
<li>
<p>不要听&quot;贴士&quot;: 小道消息听起来好像能赚快钱, 但要知道&quot;世上没有免费的午餐&quot;.</p>
</li>
<li>
<p>投资要做功课: 买股票之前, 至少要知道这家公司出类拔萃之处, 如自己没有能力办到, 便请专家帮忙.</p>
</li>
<li>
<p>跑赢专业机构性投资者: 要胜过市场, 不单要胜过一般投资者, 还要胜过专业的基金经理, 要比大户更聪明, 这才是最大的挑战.</p>
</li>
<li>
<p>价值投资法: 要购买物有所值的东西, 而不是市场趋向或经济前景.</p>
</li>
<li>
<p>买优质股份: 优质公司是比同类好一点的公司, 例如在市场中销售额领先的公司, 在技术创新的行业中, 科技领先的公司以及拥有优良营运记录, 有效控制成本, 率先进入新市场, 生产高利润消费性产品而信誉卓越的公司.</p>
</li>
<li>
<p>趁低吸纳: “低买高卖&quot;是说易行难的法则, 因为当每个人都买入时, 你也跟着买, 造成&quot;货不抵价&quot;的投资.相反, 当股价低, 投资者退却的时候, 你也跟着出货, 最终变成&quot;高买低卖”.</p>
</li>
<li>
<p>不要惊慌: 即使周围的人都在抛售, 你也不用跟随, 因为卖出的最好时机是在股市崩溃之前, 而并非之后.反之, 你应该检视自己的投资组合, 卖出现有股票的惟一理由, 是有更具吸引力的股票, 如没有, 便应该继续持有手上的股票.</p>
</li>
<li>
<p>注意实际回报: 计算投资回报时, 别忘了将税款和通胀算进去, 这对长期投资者尤为重要.</p>
</li>
<li>
<p>别将所有的鸡蛋放在同一个篮子里: 要将投资分散在不同的公司, 行业及国家中, 还要分散在股票及债券中, 因为无论你多聪明, 也不能预计或控制未来.</p>
</li>
<li>
<p>对不同的投资类别抱开放态度: 要接受不同类型和不同地区的投资项目, 现金在组合里的比重亦不是一成不变的, 没有一种投资组合永远是最好的.</p>
</li>
<li>
<p>监控自己的投资: 没有什么投资是永远的, 要对预期的改变作出适当的反应, 不能买了只股票便永远放在那里, 美其名为&quot;长线投资&quot;.</p>
</li>
<li>
<p>对投资抱正面态度: 虽然股市会回落, 甚至会出现股灾, 但不要对股市失去信心, 因为从长远而言, 股市始终是会回升的.只有乐观的投资者才能在股市中胜出.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>stock</category>
      </categories>
  </entry>
  <entry>
    <title>annotation</title>
    <url>/posts/java/2e443ef2/</url>
    <content><![CDATA[<p>Annotation 可以用来添加额外功能, 减少样板代码.</p>
<h1 id="元注解">1.  元注解</h1>
<p>目前有 5 种元注解</p>
<ol>
<li>@Target</li>
</ol>
<p>指定注解的可用位置, 即注解可以什么地方使用</p>
<p>枚举于 <code>java.lang.annotation.ElementType</code></p>
<ul>
<li>TYPE 作用于类, 接口或枚举类型</li>
<li>FIELD 作用于属性</li>
<li>METHOD</li>
<li>PARAMETER</li>
<li>CONSTRUCTOR</li>
<li>LOCAL_VARIABLE 局部变量</li>
<li>ANNOTATION_TYPE</li>
<li>PACKAGE</li>
<li>TYPE_PARAMETER</li>
<li>TYPE_USE</li>
<li>MODULE</li>
</ul>
<ol start="2">
<li>@Retention</li>
</ol>
<p>指定注解的级别, 即注解将保留多久</p>
<p>枚举于 <code>java.lang.annotation.RetentionPolicy</code></p>
<ul>
<li>SOURCE<br>
注解将被编译器抛弃.<br>
一般用于标记与检查.<br>
如 @Override, @Deprecated</li>
<li>CLASS<br>
注解在 class 文件中可用, 但会被 VM 抛弃.<br>
一般用于增强或生成新类.<br>
通过扩展 AbstractProcessor 实现注解处理器.</li>
<li>RUNTIME<br>
VM 将在运行期也保留注解.<br>
一遍通过反射机制来读取注解的信息.</li>
</ul>
<ol start="3">
<li>@Documented</li>
</ol>
<p>将此注解包含在 Javadoc 中</p>
<ol start="4">
<li>@Inherited</li>
</ol>
<p>允许子类继承父类中的注解</p>
<ol start="5">
<li>@Repeable</li>
</ol>
<p>允许注解在同一个声明类型上多次使用</p>
<h1 id="元素">2.  元素</h1>
<h2 id="元素类型">2.1.  元素类型</h2>
<p>注解中可以使用的元素类型有:</p>
<ul>
<li>所有基本类型, 如 int, float, double 等</li>
<li>String</li>
<li>Class</li>
<li>enum</li>
<li>Annotation</li>
<li>以上类型的数组</li>
</ul>
<p><strong>如果使用上述之外的类型, 则编译会报错. 也不允许使用包装类</strong></p>
<h2 id="元素值">2.2.  元素值</h2>
<p>元素不能有不确定的值.<br>
元素要么有默认值, 要么使用注解时提供元素的值; 无论是使用时声明, 还是默认设定时, 都不能为 null.</p>
<h1 id="abstractprocessor">3.  AbstractProcessor</h1>
<p>AbstractProcessor 实现类,<br>
使用 <code>@SupportedAnnotationTypes</code>, 列举支持的注解的全限定类名,<br>
使用 <code>@getSupportedSourceVersion</code>, 标识最低支持的 Java 版本,<br>
AbstractProcessor#process() 是注解处理器的核心方法, 用于处理注解.</p>
<p>在写完注解处理器之后, 需要在 <code>resources/META-INF/services</code> 目录下增加一个 <code>javax.annotation.processing.Processor</code> 文件, 在该文件中写入注解处理器的全限定类名.</p>
<p>也可使用 <code>com.google.auto.service</code> 的 <code>auto-service</code> 中的 @AutoService 注解处理元文件.</p>
<p>另外 AbstractProcessor 不好 Debug, 看网上好像要用到 gradle 以及 Android 的 apt 才能实现 Debug. 反正试了一下, 没有成功.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>基本类型</title>
    <url>/posts/java/5bdaa8ed/</url>
    <content><![CDATA[<p>在程序设计中经常用到一系列类型, 他们需要特殊对待.<br>
可以把他们想象成<code>基本类型</code>.<br>
之所以特殊对待, 是因为new将对象存储在<code>堆</code>里, 故用new创建一个对象–特别是小的, 简单的变量, 不是特别有效.<br>
因此, 对于这些类型, Java采用与C/C++相同的方法.<br>
这也就是说, 不用new来创建变量, 而是创建一个并非引用的<code>自动</code>变量.<br>
<strong>这个变量直接存储<code>值</code>, 并置于堆栈中, 因此更加高效</strong>.</p>
<p>Java要确定每种基本类型所占存储空间的大小.<br>
他们的大小并不像其他大多数语言那样随机器硬件架构的变化而变化.<br>
<strong>这种所占存储空间大小的不变性是Java程序比其他大多数程序语言编写的程序更具可移植性性的原因之一</strong>.</p>
<p><strong>所有数值类型都有正负号, 所以不要去寻找服务号的数值类型.</strong></p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>大小</th>
<th>最小值</th>
<th>最大值</th>
<th>包装器类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>char</td>
<td>16-bit</td>
<td>Unicode 0</td>
<td>Unicode <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>-1</td>
<td>Char</td>
<td><code>\u000</code>(null)</td>
</tr>
<tr>
<td>byte</td>
<td>8 bits</td>
<td>-128</td>
<td>128</td>
<td>Byte</td>
<td>(byte)0</td>
</tr>
<tr>
<td>short</td>
<td>16 bits</td>
<td>-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>-1</td>
<td>Short</td>
<td>(short)0</td>
</tr>
<tr>
<td>int</td>
<td>32 bits</td>
<td>-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>-1</td>
<td>Int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>64 bits</td>
<td>-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>-1</td>
<td>Long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>32 bits</td>
<td>IEEE754<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td>
<td>IEEE754</td>
<td>Float</td>
<td>0.0F</td>
</tr>
<tr>
<td>double</td>
<td>64 bits</td>
<td>IEEE754</td>
<td>IEEE754</td>
<td>Double</td>
<td>0.0D</td>
</tr>
<tr>
<td>void</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>Void</td>
<td>-</td>
</tr>
</tbody>
</table>
<h1 id="其他常用类型">1.  其他常用类型</h1>
<h2 id="高精度数字">1.1.  高精度数字</h2>
<ul>
<li>BigInteger<br>
支持任意精度的整数.</li>
<li>BigDecimal<br>
支持任何精度的定点数.</li>
</ul>
<p>这两个类包含的方法, 提供的操作与基本类型所能执行的操作类似.<br>
也就是说, 能作用于int或float的操作, 也同样能作用于BigInteger和BigDecimal.<br>
只不过必须以方法调用的方式取代运算符方式来实现运算.<br>
由于这么做复杂了许多, 所以运算速度会比较慢.<br>
这里, 我们以速度换取了精度.</p>
<h2 id="数组">1.2.  数组</h2>
<p>Java确保数组被初始化, 而且不能在它的范围之外被访问.<br>
<strong>这种范围检查, 是以每个数组上少量的内存开销及运行时的下标检查为代价的, 但是由此换来的是安全性和效率的提高, 因此付出的代价是值得的</strong>.</p>
<p>当创建一个数组对象时, 实际上就是创建了一个引用数组, 并且每个引用都对自动被初始化为一个特定的值, 该值拥有自己的关键字null.<br>
一旦Java看到null, 就知道这个引用还没指向某个对象.<br>
在使用任何引用之前, 必须为其指定一个对象;如果试图使用一个还是null的引用, 在运行时将会报错.<br>
因此, 常犯的数组错误在Java中就可以避免.</p>
<p>还可以创建用来存放基本数据类型的数组.<br>
同样, 编译器也能确保这种数组的初始化, 因为它会将这种数组所占的内存全部置为0.</p>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>Java编程思想</li>
</ul>
<hr>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">IEEE 754 标准是IEEE二进位浮点数算术标准(IEEE Standard for Floating-Point Arithmetic)的标准编号.
https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin&amp;fromid=10427270&amp;fromtitle=IEEE754%E6%A0%87%E5%87%86</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>atomic</title>
    <url>/posts/java/3df66479/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>finance/stock/券商</title>
    <url>/posts/uncategorized/2f91fe08/</url>
    <content><![CDATA[<p>东北证券<br>
东方证券<br>
中信建投<br>
中信证券<br>
中原证券<br>
光大证券<br>
兴业证券<br>
华安证券<br>
华泰证券<br>
华西证券<br>
国元证券<br>
国泰君安<br>
国海证券<br>
国盛金控<br>
天风证券<br>
山西证券<br>
广发证券<br>
招商证券<br>
江海证券<br>
海通证券<br>
申万宏源<br>
第一创业<br>
西南证券<br>
西部证券<br>
太平洋证券</p>
]]></content>
  </entry>
  <entry>
    <title>collection</title>
    <url>/posts/java/fc4d6532/</url>
    <content><![CDATA[<h1 id="集合关系图">1.  集合关系图</h1>
<p>JDK 8 <code>java.util</code>下集合关系图如下:</p>
<p><img src="collection-diagram.png" alt></p>
<h1 id="集合类介绍">2.  集合类介绍</h1>
<h2 id="interface">2.1.  interface</h2>
<ul>
<li>Collection</li>
<li>Deque</li>
<li>Iterable</li>
<li>Iterator</li>
<li>List</li>
<li>ListIterator</li>
<li>Map</li>
<li>NavigableMap</li>
<li>NavigableSet</li>
<li>Queue</li>
<li>RandomAccess</li>
<li>Set</li>
<li>SortedMap</li>
<li>SortedSet</li>
</ul>
<h2 id="abstract">2.2.  abstract</h2>
<ul>
<li>AbstractCollection</li>
<li>AbstractList</li>
<li>AbstractMap</li>
<li>AbstractQueue</li>
<li>AbstractSequentialList</li>
<li>AbstractSet</li>
<li>Dictionary</li>
<li>EnumSet</li>
</ul>
<h2 id="class">2.3.  class</h2>
<ul>
<li>ArrayDeque</li>
<li>ArrayList</li>
<li>EnumMap</li>
<li>HashMap</li>
<li>HashSet</li>
<li>Hashtable</li>
<li>IdentityHashMap</li>
<li>LinkedHashMap</li>
<li>LinkedHashSet</li>
<li>LinkedList</li>
<li>PriorityQueue</li>
<li>Stack</li>
<li>TreeMap</li>
<li>TreeSet</li>
<li>Vector</li>
<li>WeakHashMap</li>
</ul>
<p>没有 HashTable LinkedArrayList</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>concurrenthashmap-faq</title>
    <url>/posts/uncategorized/cedaf279/</url>
    <content><![CDATA[<h1 id="concurrenthashmap-实现原理">1.  ConcurrentHashMap 实现原理</h1>
<p>Node + CAS + Synchronized</p>
<p>jdk 1.7 时采用 ReentrantLock + Segment + HashEntry, 把 HashMap 分成多个段, 每个段一个锁.<br>
jdk 1.8 时采用 Node + CAS + Synchronized + 链表/红黑树, 每个 bin 一个锁(bin 的首节点).<br>
1.8 相较于 1.7 实现更清晰, 锁的粒度更低, 性能更高.</p>
<h1 id="concurrenthashmap-在-jdk-18-中-为什么要使用内置锁-synchronized-来代替重入锁-reentrantlock">2.  ConcurrentHashMap 在 JDK 1.8 中, 为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock ?</h1>
<p>Segment 继承 ReentrantLock</p>
<ul>
<li>锁的粒度降低了</li>
<li>ReentrantLock 的内存消耗比 synchronized 更大</li>
</ul>
<h1 id="concurrenthashmap-的并发度是什么">3.  ConcurrentHashMap 的并发度是什么？</h1>
<p>A: 程序运行时能够同时更新 ConccurentHashMap 且不产生锁竞争的最大线程数. 默认为 16, 且可以在构造函数中设置. 当用户设置并发度时, ConcurrentHashMap 会使用大于等于该值的最小2幂指数作为实际并发度 (假如用户设置并发度为17, 实际并发度则为32)</p>
<h1 id="为什么-concurrenthashmap-的读操作不需要加锁">4.  为什么 ConcurrentHashMap 的读操作不需要加锁?</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会发现源码中没有一处加了锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode()); <span class="comment">//计算hash</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;<span class="comment">//读取首节点的Node元素</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123; <span class="comment">//如果该节点就是首节点就返回</span></span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hash值为负值表示正在扩容, 这个时候查的是ForwardingNode的find方法来定位到nextTable来</span></span><br><span class="line">        <span class="comment">//eh=-1, 说明该节点是一个ForwardingNode, 正在迁移, 此时调用ForwardingNode的find方法去nextTable里找. </span></span><br><span class="line">        <span class="comment">//eh=-2, 说明该节点是一个TreeBin, 此时调用TreeBin的find方法遍历红黑树, 由于红黑树有可能正在旋转变色, 所以find里会有读写锁. </span></span><br><span class="line">        <span class="comment">//eh&gt;=0, 说明该节点下挂的是一个链表, 直接遍历该链表即可. </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;<span class="comment">//既不是首节点也不是ForwardingNode, 那就往下遍历</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实现原理">5.  实现原理</h1>
<p>特殊的 hash 值:</p>
<p>MOVED: -1, 表示正在迁移的节点<br>
TREEBIN: -2, 红黑树节点<br>
RESERVED: -3, hash for transient reservations<br>
正数: 表示链表节点</p>
<p>sizeCtl:</p>
<p>-1: 表示正在初始化<br>
-N: 表示有 n -1 个线程正在进行扩容<br>
0: 表示还没有初始化<br>
正数: 表示下次要扩容的大小</p>
<p>类型:</p>
<p>Node: 其他节点的父类, 对 value 和 next 都增加了 volatile, 保证节点在修改时的可见性.<br>
ForwardingNode: 其 hash 值为 -1, 当扩容时替换 bin, 标识节点扩容去了, 其中的属性 nextTable 指向正在扩容的 table.<br>
TreeBin: 其 hash 值为 -2, 本身并不负责 key-value 的包装, 而是包装了整个红黑树, 所有对红黑树的操作都是从这个节点触发.</p>
<h2 id="初始化-inittable">5.1.  初始化 initTable</h2>
<p>对 sizeCtl 做 cas, 如果成功则做扩容<br>
如果正在扩容则等待<br>
如果已经完成扩容则返回</p>
<h2 id="put-方法">5.2.  put 方法</h2>
<p>循环以下操作, 知道 put 完成</p>
<ol>
<li>如果发现没有初始化, 则初始化</li>
<li>如果发现没有首节点, 则 cas 创建首节点</li>
<li>如果发现 bin 正在进行扩容, 则帮助扩容</li>
<li>加同步锁, 对 bin 中内容进行 put 操作</li>
</ol>
<h2 id="get-方法">5.3.  get 方法</h2>
<h2 id="什么时候加锁">5.4.  什么时候加锁</h2>
<p>对 bin 进行加锁, 也就是 bin 的首节点</p>
<p>当对 bin 中内容做修改时需要加锁:<br>
putVal<br>
replaceNode<br>
clear<br>
transfer<br>
treeifyBin</p>
<p>当对 map 做计算的时候需要加锁:<br>
computeIfAbsent<br>
computeIfPresent<br>
compute<br>
merge</p>
<h1 id="resource">6.  Resource</h1>
<ul>
<li><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">https://www.jianshu.com/p/75adf47958a7</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1461980" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1461980</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>class</title>
    <url>/posts/java/ed4b199f/</url>
    <content><![CDATA[<p>在程序执行期间具有不同的状态而其他方面都相似的对象会被分组到对象的类中, 这就是关键字class的由来</p>
<h1 id="访问控制">1.  访问控制</h1>
<table>
<thead>
<tr>
<th>类</th>
<th>包</th>
<th>子孙类</th>
<th>外部包</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>&lt;package&gt;</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<h2 id="访问控制的意义">1.1.  访问控制的意义</h2>
<p>将程序开发人员按角色划分为类创建者(或者说库设计者, 那些创建新数据类型的程序员)和客户端程序员(那些在其应用中使用数据类型的消费者)</p>
<ol>
<li>让客户端程序员无法触及他们不应该触及的部分.<br>
可以让客户端程序员很容易的看出哪些东西是重要的, 哪些可以忽略.</li>
<li>允许库设计者可以改变内部的工作方式而不用担心会影响到客户端程序员</li>
</ol>
<h1 id="static-关键字">2.  static 关键字</h1>
<p>通常来说, 当创建类时, 就是在描述那个类的对象的外观和行为.<br>
除非用new创建那个类的对象, 否则, 实际上并未获得任何对象.<br>
执行new来创建对象时, 数据存储空间才被分配, 其方法才供外界调用.</p>
<p>有两种情形用上述方法是无法解决的.<br>
一种情形是, 只想为某特定域分配单一存储空间, 而不去考虑究竟要创建多少对象, 甚至根本不创建任何对象.<br>
另一种情形是, 希望某个方法不与包含它的类的任何对象关联在一起.<br>
也就是说, 即使没有创建对象, 也能调用这个方法.</p>
<p>通过static关键字可以满足这两方面的需要.</p>
<p>有些面向对象语言采用<code>类数据</code>和<code>类方法</code>两个术语, 代表哪些数据和方法只是作为整个类, 而不是类的某个特定对象而存在.</p>
<h1 id="类型转换">3.  类型转换</h1>
<ul>
<li>窄化转换<br>
将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型.<br>
这可能面临数据丢失, 所以编译器会强制我们显式的进行类型转换.</li>
<li>扩展转换<br>
不必显式转换.<br>
新类型一定能容纳原来类型的信息.</li>
</ul>
<h1 id="构造器">4.  构造器</h1>
<p>构造器是最常见的方法重载.</p>
<h1 id="this关键字">5.  this关键字</h1>
<p>this表示<code>调用方法的那个对象</code>.</p>
<p>如果在方法内部调用同一个类的另一个方法, 就不必使用this, 直接调用即可.</p>
<p>常用在构造器方法重载中:</p>
<ul>
<li>调用this方法, 即在构造器中调用另外一个构造器.此方式必须将构造器调用置于方法最起始位置, 否则编译器会报错.</li>
<li>若参数名称与数据成员名称相同, 可以用this明确指定数据成员, 防止产生歧义.</li>
</ul>
<h1 id="super关键字">6.  super关键字</h1>
<h1 id="类的加载">7.  类的加载</h1>
<p>classloader<br>
JIT</p>
<h1 id="abstract-class-interface">8.  abstract class &amp; interface</h1>
<p>abstract class 和 interface 是支持抽象类定义的 2 种机制.</p>
<p>它俩的异同:</p>
<table>
<thead>
<tr>
<th>abstract class</th>
<th>interface</th>
</tr>
</thead>
<tbody>
<tr>
<td>实例化</td>
<td>不能</td>
</tr>
</tbody>
</table>
<h1 id="resource">9.  Resource</h1>
<ul>
<li>Java编程思想</li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><code>平台相关的目标文件格式</code> 是指平台编译出来的 Class 文件无法在其他平台中使用. 相反, 正因为强制, 明确地定义了本来会跟平台相关的细节, 所以才达到了平台无关的效果.</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>concurrenthashmap</title>
    <url>/posts/java/14a6396f/</url>
    <content><![CDATA[<p>①, 重要的常量:<br>
private transient volatile int sizeCtl;<br>
当为负数时, -1 表示正在初始化, -N 表示 N - 1 个线程正在进行扩容;<br>
当为 0 时, 表示 table 还没有初始化;<br>
当为其他正数时, 表示初始化或者下一次进行扩容的大小.</p>
<p>②, 数据结构:<br>
Node 是存储结构的基本单元, 继承 HashMap 中的 Entry, 用于存储数据;<br>
TreeNode 继承 Node, 但是数据结构换成了二叉树结构, 是红黑树的存储结构, 用于红黑树中存储数据;<br>
TreeBin 是封装 TreeNode 的容器, 提供转换红黑树的一些条件和锁的控制.</p>
<p>③, 存储对象时 (put() 方法) :<br>
1.如果没有初始化, 就调用 initTable() 方法来进行初始化;<br>
2.如果没有 hash 冲突就直接 CAS 无锁插入;<br>
3.如果需要扩容, 就先进行扩容;<br>
4.如果存在 hash 冲突, 就加锁来保证线程安全, 两种情况: 一种是链表形式就直接遍历到尾端插入, 一种是红黑树就按照红黑树结构插入;<br>
5.如果该链表的数量大于阀值 8, 就要先转换成红黑树的结构, break 再一次进入循环<br>
6.如果添加成功就调用 addCount() 方法统计 size, 并且检查是否需要扩容.</p>
<p>④, 扩容方法 transfer(): 默认容量为 16, 扩容时, 容量变为原来的两倍.<br>
helpTransfer(): 调用多个工作线程一起帮助进行扩容, 这样的效率就会更高.</p>
<p>⑤, 获取对象时 (get()方法) :<br>
1.计算 hash 值, 定位到该 table 索引位置, 如果是首结点符合就返回;<br>
2.如果遇到扩容时, 会调用标记正在扩容结点 ForwardingNode.find()方法, 查找该结点, 匹配就返回;<br>
3.以上都不符合的话, 就往下遍历结点, 匹配就返回, 否则最后就返回 null.</p>
<h1 id="tode">1.  Tode</h1>
<ul>
<li>阅读源码</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="http://www.importnew.com/22007.html" target="_blank" rel="noopener">http://www.importnew.com/22007.html</a></li>
<li><a href="http://www.importnew.com/23610.html" target="_blank" rel="noopener">http://www.importnew.com/23610.html</a></li>
<li><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">https://www.jianshu.com/p/75adf47958a7</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>date-time-api</title>
    <url>/posts/uncategorized/abd25987/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>asynchronized</title>
    <url>/posts/java/4a2e928a/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>fork-join</title>
    <url>/posts/java/e90b8c72/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>hashmap-faq</title>
    <url>/posts/uncategorized/e06827e9/</url>
    <content><![CDATA[<h1 id="hashmap-的实现原理">1.  HashMap 的实现原理</h1>
<p>底层是 bin 数组 和单向链表实现的.<br>
当元素格式大于 <code>容量 * 负载因子</code> 时进行扩容, 扩容为 2 倍.<br>
当 bin 中增加, 数量大于 8 个时, 将链表转换成红黑树; 当 bin 中减少, 数量小于 6 个时, 将红黑树转换成类别.</p>
<h1 id="hash-算法">2.  hash 算法</h1>
<p>将 key 的 hashCode 分成高 16 位和低 16位, 高位与地位异或得出的值就是 hash 值.</p>
<p>这个算法的好处:</p>
<ol>
<li>算法处于从速度, 效果和质量上的综合考虑</li>
<li>高位和低位都参与计算, 并使用异或运算, 任何一位变动都会影响 hash 值, 减少 hash 碰撞的可能.</li>
</ol>
<h1 id="如果出现-hash-碰撞会有什么影响">3.  如果出现 hash 碰撞会有什么影响?</h1>
<p>hash 碰撞即 2 个元素的 hash 值相同.<br>
会影响 treeify() 和 putTreeVal() 两个方法.<br>
红黑树中元素的结构需要根据 hash 来排列.<br>
如果 key 实现了 Comparable 方法, 则根据 该方法比较顺序; 如果还是相同, 则使用 System.identityHashCode() 比较 (见 tieBreakOrder() 方法).</p>
<h1 id="hashmap-vs-linkedhashmap-vs-treemap">4.  HashMap vs LinkedHashMap vs TreeMap</h1>
<p>LinkedHashMap 保存了插入顺序<br>
TreeMap 实现了 SortMap 接口, 可排序</p>
<h1 id="hashmap-vs-hashtable">5.  HashMap vs HashTable</h1>
<ol>
<li>HashMap 线程不安全; HashTable 线程安全, 但性能慢</li>
<li>HashMap 允许 key 为 null, 但至多一个, 允许 value 为 null; HashTable 的 key 和 value 都不允许为 null</li>
</ol>
<h1 id="resource">6.  Resource</h1>
<ul>
<li><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">https://www.jianshu.com/p/75adf47958a7</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/posts/java/ca913759/</url>
    <content><![CDATA[<p>通常我们知道 HashMap 的实现是 数组+链表.<br>
这样的实现性能不够平滑, 因为无论hash算法再如何优化, 也很难让元素百分百均匀分布.<br>
当 HashMap 中有大量的元素都存放到同一个容器中时, 这个容器下有一条长长的链表, 这个时候 HashMap 就相当于一个单链表, 假如单链表有 n 个元素, 遍历的时间复杂度就是 O(n), 完全失去了它的优势.<br>
针对这种情况, JDK 8 中引入了 红黑树(查找时间复杂度为 O(log n)来优化这个问题.<br>
思路就是当容器内的元素增加一定数量时, 将它转换为树, 同样, 当元素减少到一定数量时, 再次转换成链表.</p>
<h1 id="默认属性">1.  默认属性</h1>
<ul>
<li>DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4<br>
默认初始容器数量大小 16</li>
<li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30<br>
最大容器数量 2^30</li>
<li>DEFAULT_LOAD_FACTOR = 0.75f<br>
默认负载因子 0.75</li>
<li>TREEIFY_THRESHOLD = 8<br>
树化临界值 8, 即当容器内元素增加到 8 个时, 容器由链表转换为树型结构</li>
<li>UNTREEIFY_THRESHOLD = 6<br>
反树化临界值 6, 即当容器内元素减少到 6 个时, 容器由树型转换为链表结构</li>
<li>MIN_TREEIFY_CAPACITY = 64<br>
最小树型化容器数量 64, 即当容器数量至少为该值时, 容器才能进行树型化</li>
</ul>
<h1 id="特性">2.  特性</h1>
<ul>
<li>
<p>允许 key 和 value 为 null</p>
</li>
<li>
<p>不能保证顺序恒定不变</p>
</li>
<li>
<p>初始化的容器数量为大于等于该值的最小 2 幂指数</p>
</li>
<li>
<p>扩容为之前容器数量的 2 倍</p>
</li>
<li>
<p>当容器数量大于等于 64, 且容器中元素个数大于等于 8 时, 容器由链表转换为树型结构</p>
</li>
<li>
<p>当容器中元素个数小于 6 时, 容器由树型转换为链表结构</p>
</li>
<li>
<p>性能与容器数量 (capacity) 及负载因子 (load factor) 有关<br>
扩容前最大条目数 = 初始容器数量 * 负载因子<br>
所以初始容器数量可这样配置, 以减少 rehash 次数:<br>
初始容器数量 = 预计最大条目数 / 负载因子</p>
</li>
<li>
<p>很多 key 的 hashcode 值相同也会影响性能<br>
让 key 实现 Comparable 接口, HashMap 会使用它们的比较顺序来解决它们的碰撞问题<br>
如果还是相同使用 System.identityHashCode(key) 进行比较</p>
</li>
<li>
<p>树型优化提高了查找效率<br>
链表的时间复杂度是 O(n); 链表的时间复杂度是 O(log n)<br>
但是树型的删除操作的效率低于链表</p>
</li>
<li>
<p>非线程安全<br>
可以对封装的对象同步, 或者使用 Collections.synchronizedMap() 包装<br>
或者换用 HashTable 或 ConcurrentHashMap</p>
</li>
<li>
<p>从 HashMap 上获得的迭代器都采用 fast-fail 机制<br>
即除了 Iterator 的 remove 方法外, 其他在遍历时添加或删除元素, 都有可能抛出 ConcurrentModificationException, 但不能保证一定会抛错.</p>
</li>
<li>
<p>HashMap 实现了 Serializable 接口, 但是字段使用 transient 修饰, 比如 table, entrySet 等.<br>
由于 hashCode 操作依赖于 jvm 所处的环境, 不同的环境下 hash 值可能不同. 如果直接将包含 hashCode 的数据持久化下来, 也无法通用.<br>
所以 HashMap 自己实现了 writeObject 和 readObject.</p>
</li>
</ul>
<h1 id="hashmap-源码">3.  HashMap 源码</h1>
<figure class="highlight java"><figcaption><span>hashmap.java</span><a href="/code/java/hashmap.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidObjectException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash table based implementation of the {<span class="doctag">@code</span> Map} interface.  This</span></span><br><span class="line"><span class="comment"> * implementation provides all of the optional map operations, and permits</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> null} values and the {<span class="doctag">@code</span> null} key.  (The {<span class="doctag">@code</span> HashMap}</span></span><br><span class="line"><span class="comment"> * class is roughly equivalent to {<span class="doctag">@code</span> Hashtable}, except that it is</span></span><br><span class="line"><span class="comment"> * unsynchronized and permits nulls.)  This class makes no guarantees as to</span></span><br><span class="line"><span class="comment"> * the order of the map; in particular, it does not guarantee that the order</span></span><br><span class="line"><span class="comment"> * will remain constant over time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 基于哈希表的 Map 接口的实现.</span></span><br><span class="line"><span class="comment"> * 此实现提供所有可选的映射操作，并允许key和value为null.</span></span><br><span class="line"><span class="comment"> * 除了非同步和允许null值, HashMap 类与 Hashtable 大致相同.</span></span><br><span class="line"><span class="comment"> * 此类不保证映射的顺序, 特别是它不保证该顺序恒久不变.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation provides constant-time performance for the basic</span></span><br><span class="line"><span class="comment"> * operations ({<span class="doctag">@code</span> get} and {<span class="doctag">@code</span> put}), assuming the hash function</span></span><br><span class="line"><span class="comment"> * disperses the elements properly among the buckets.  Iteration over</span></span><br><span class="line"><span class="comment"> * collection views requires time proportional to the "capacity" of the</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> HashMap} instance (the number of buckets) plus its size (the number</span></span><br><span class="line"><span class="comment"> * of key-value mappings).  Thus, it's very important not to set the initial</span></span><br><span class="line"><span class="comment"> * capacity too high (or the load factor too low) if iteration performance is</span></span><br><span class="line"><span class="comment"> * important.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 此实现假设hash方法能把元素均匀的分布在各个容器之间, 以此保证基本操作(get和put)提供稳定的性能</span></span><br><span class="line"><span class="comment"> * 遍历整个集合所需的时间与HashMap实例的容量(容器的数量 capacity)及其大小(键值对数量)成正比</span></span><br><span class="line"><span class="comment"> * 因此, 如果遍历性能很重要, 则不要初始容量设置过高(或负载因子设置过低).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An instance of {<span class="doctag">@code</span> HashMap} has two parameters that affect its</span></span><br><span class="line"><span class="comment"> * performance: &lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;.  The</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;capacity&lt;/i&gt; is the number of buckets in the hash table, and the initial</span></span><br><span class="line"><span class="comment"> * capacity is simply the capacity at the time the hash table is created.  The</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;load factor&lt;/i&gt; is a measure of how full the hash table is allowed to</span></span><br><span class="line"><span class="comment"> * get before its capacity is automatically increased.  When the number of</span></span><br><span class="line"><span class="comment"> * entries in the hash table exceeds the product of the load factor and the</span></span><br><span class="line"><span class="comment"> * current capacity, the hash table is &lt;i&gt;rehashed&lt;/i&gt; (that is, internal data</span></span><br><span class="line"><span class="comment"> * structures are rebuilt) so that the hash table has approximately twice the</span></span><br><span class="line"><span class="comment"> * number of buckets.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * HashMap的实例有2个参数影响它的性能: 初始容量和负载因子.</span></span><br><span class="line"><span class="comment"> * 容量是在哈希表中容器的数量, 而初始容量就是在哈希表创建时的容量.</span></span><br><span class="line"><span class="comment"> * 负载因子是哈希表在其容量自动增加之前可以达到多满的一个比例.</span></span><br><span class="line"><span class="comment"> * 当哈希表中元素数量超过负载因子和当前容量的乘积时, 哈希表会被rehash(即内部数据结构被重构), 从而哈希表将具有大约2倍的容器数量.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As a general rule, the default load factor (.75) offers a good</span></span><br><span class="line"><span class="comment"> * tradeoff between time and space costs.  Higher values decrease the</span></span><br><span class="line"><span class="comment"> * space overhead but increase the lookup cost (reflected in most of</span></span><br><span class="line"><span class="comment"> * the operations of the {<span class="doctag">@code</span> HashMap} class, including</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> get} and {<span class="doctag">@code</span> put}).  The expected number of entries in</span></span><br><span class="line"><span class="comment"> * the map and its load factor should be taken into account when</span></span><br><span class="line"><span class="comment"> * setting its initial capacity, so as to minimize the number of</span></span><br><span class="line"><span class="comment"> * rehash operations.  If the initial capacity is greater than the</span></span><br><span class="line"><span class="comment"> * maximum number of entries divided by the load factor, no rehash</span></span><br><span class="line"><span class="comment"> * operations will ever occur.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一般来说, 默认负载因子(0.75)很好的权衡了时间和空间成本.</span></span><br><span class="line"><span class="comment"> * 负载因子过高虽然减少了空间开销, 但是增加了检索的开销(在HashMap的大多数操作都反映出这一点, 包括get和put)</span></span><br><span class="line"><span class="comment"> * 当设置哈希表的初始容量时, 应当考虑哈希表中所需的元素数量和它的负载因子, 以便减少rehash操作的次数.</span></span><br><span class="line"><span class="comment"> * 如果初始容量大于最大元素数量除以负载因子, 那么rehash将不会发生.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If many mappings are to be stored in a {<span class="doctag">@code</span> HashMap}</span></span><br><span class="line"><span class="comment"> * instance, creating it with a sufficiently large capacity will allow</span></span><br><span class="line"><span class="comment"> * the mappings to be stored more efficiently than letting it perform</span></span><br><span class="line"><span class="comment"> * automatic rehashing as needed to grow the table.  Note that using</span></span><br><span class="line"><span class="comment"> * many keys with the same {<span class="doctag">@code</span> hashCode()} is a sure way to slow</span></span><br><span class="line"><span class="comment"> * down performance of any hash table. To ameliorate impact, when keys</span></span><br><span class="line"><span class="comment"> * are {<span class="doctag">@link</span> Comparable}, this class may use comparison order among</span></span><br><span class="line"><span class="comment"> * keys to help break ties.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果很多键值对要存储, 那么创建一个足够大的容量的HashMap实例, 将比创建需要自动rehash来扩容的实例更高效.</span></span><br><span class="line"><span class="comment"> * 需要注意的是, 有很多相同hashCode值的key时, 将会降低哈希表的性能.</span></span><br><span class="line"><span class="comment"> * 为了改善这一点, 当key可比较时, HashMap会使用它们的比较顺序来打破这种关联.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * If multiple threads access a hash map concurrently, and at least one of</span></span><br><span class="line"><span class="comment"> * the threads modifies the map structurally, it &lt;i&gt;must&lt;/i&gt; be</span></span><br><span class="line"><span class="comment"> * synchronized externally.  (A structural modification is any operation</span></span><br><span class="line"><span class="comment"> * that adds or deletes one or more mappings; merely changing the value</span></span><br><span class="line"><span class="comment"> * associated with a key that an instance already contains is not a</span></span><br><span class="line"><span class="comment"> * structural modification.)  This is typically accomplished by</span></span><br><span class="line"><span class="comment"> * synchronizing on some object that naturally encapsulates the map.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要注意的是, HashMap的实现是不同步的.</span></span><br><span class="line"><span class="comment"> * 如果多个线程同时访问哈希表, 而且其中至少有一个线程让哈希表做出结构性的改变, 那就必须保持外部同步.</span></span><br><span class="line"><span class="comment"> * (结构性的改变是指任何添加或删除一个或多个键值对;仅改变实例中已存在的一个key对应的value, 不是结构性改变)</span></span><br><span class="line"><span class="comment"> * 这一般通过对原本就封装在哈希表中的对象进行同步实现的.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If no such object exists, the map should be "wrapped" using the</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@link</span> Collections#synchronizedMap Collections.synchronizedMap}</span></span><br><span class="line"><span class="comment"> * method.  This is best done at creation time, to prevent accidental</span></span><br><span class="line"><span class="comment"> * unsynchronized access to the map:&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *   Map m = Collections.synchronizedMap(new HashMap(...));&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果没有这样的对象, 哈希表也可以通过Collections.synchronizedMap来包装.</span></span><br><span class="line"><span class="comment"> * 这最好在创建时完成这一操作, 以避免非同步访问.比如:</span></span><br><span class="line"><span class="comment"> *   Map m = Collections.synchronizedMap(new HashMap(...));</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The iterators returned by all of this class's "collection view methods"</span></span><br><span class="line"><span class="comment"> * are &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified at any time after</span></span><br><span class="line"><span class="comment"> * the iterator is created, in any way except through the iterator's own</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@code</span> remove} method, the iterator will throw a</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@link</span> ConcurrentModificationException}.  Thus, in the face of concurrent</span></span><br><span class="line"><span class="comment"> * modification, the iterator fails quickly and cleanly, rather than risking</span></span><br><span class="line"><span class="comment"> * arbitrary, non-deterministic behavior at an undetermined time in the</span></span><br><span class="line"><span class="comment"> * future.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通过任何HashMap的集合视图方法得到的迭代器都采用fail-fast机制.</span></span><br><span class="line"><span class="comment"> * 如果在迭代器创建后, 除了迭代器本身的remove方法, 在任何时候, 任何方式, 哈希表被结构性的改变, 迭代器将抛出ConcurrentModificationException.</span></span><br><span class="line"><span class="comment"> * 因此, 在面对并发修改时, 迭代器将干净利落的抛错, 而不是在之后某个不确定的时间和不确定的操作下.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed</span></span><br><span class="line"><span class="comment"> * as it is, generally speaking, impossible to make any hard guarantees in the</span></span><br><span class="line"><span class="comment"> * presence of unsynchronized concurrent modification.  Fail-fast iterators</span></span><br><span class="line"><span class="comment"> * throw {<span class="doctag">@code</span> ConcurrentModificationException} on a best-effort basis.</span></span><br><span class="line"><span class="comment"> * Therefore, it would be wrong to write a program that depended on this</span></span><br><span class="line"><span class="comment"> * exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators</span></span><br><span class="line"><span class="comment"> * should be used only to detect bugs.&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要注意的是, 迭代器的fail-fast机制不能保证它的出现, 更通俗的说, 不能保证在不同步的并发修改时必定出现.</span></span><br><span class="line"><span class="comment"> * fail-fast机制的迭代器尽可能抛出ConcurrentModificationException异常.</span></span><br><span class="line"><span class="comment"> * 因此, 依靠这个异常来保证程序的正确性的写法是不对的.</span></span><br><span class="line"><span class="comment"> * fail-fast机制应该只能用来检测错误.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href="{<span class="doctag">@docRoot</span>}/java/util/package-summary.html#CollectionsFramework"&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; the type of keys maintained by this map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; the type of mapped values</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Doug Lea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Arthur van Hoff</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Object#hashCode()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     TreeMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Hashtable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Implementation notes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This map usually acts as a binned (bucketed) hash table, but</span></span><br><span class="line"><span class="comment">     * when bins get too large, they are transformed into bins of</span></span><br><span class="line"><span class="comment">     * TreeNodes, each structured similarly to those in</span></span><br><span class="line"><span class="comment">     * java.util.TreeMap. Most methods try to use normal bins, but</span></span><br><span class="line"><span class="comment">     * relay to TreeNode methods when applicable (simply by checking</span></span><br><span class="line"><span class="comment">     * instanceof a node).  Bins of TreeNodes may be traversed and</span></span><br><span class="line"><span class="comment">     * used like any others, but additionally support faster lookup</span></span><br><span class="line"><span class="comment">     * when overpopulated. However, since the vast majority of bins in</span></span><br><span class="line"><span class="comment">     * normal use are not overpopulated, checking for existence of</span></span><br><span class="line"><span class="comment">     * tree bins may be delayed in the course of table methods.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * HashMap通常可以像哈希表一样使用, 但是当容器过大时, 它们会把容器转换成TreeNode类型, 每个的结构都类似于java.util.TreeMap.</span></span><br><span class="line"><span class="comment">     * 大多数方法先使用普通的容器类型, 但是当TreeNode的方法适用时将转变(简单的通过验证).</span></span><br><span class="line"><span class="comment">     * 容器内的TreeNode可以像其他节点一样遍历和使用, 但是当超载时将获得更快的检索速度.</span></span><br><span class="line"><span class="comment">     * 然而, 因为绝大多数容器在正常使用时不会超载, 所以检查是否是树型容器的检查可能在哈希表方法执行时中被推迟</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Tree bins (i.e., bins whose elements are all TreeNodes) are</span></span><br><span class="line"><span class="comment">     * ordered primarily by hashCode, but in the case of ties, if two</span></span><br><span class="line"><span class="comment">     * elements are of the same "class C implements Comparable&lt;C&gt;", </span></span><br><span class="line"><span class="comment">     * type then their compareTo method is used for ordering. (We</span></span><br><span class="line"><span class="comment">     * conservatively check generic types via reflection to validate</span></span><br><span class="line"><span class="comment">     * this -- see method comparableClassFor).  The added complexity</span></span><br><span class="line"><span class="comment">     * of tree bins is worthwhile in providing worst-case O(log n)</span></span><br><span class="line"><span class="comment">     * operations when keys either have distinct hashes or are</span></span><br><span class="line"><span class="comment">     * orderable, Thus, performance degrades gracefully under</span></span><br><span class="line"><span class="comment">     * accidental or malicious usages in which hashCode() methods</span></span><br><span class="line"><span class="comment">     * return values that are poorly distributed, as well as those in</span></span><br><span class="line"><span class="comment">     * which many keys share a hashCode, so long as they are also</span></span><br><span class="line"><span class="comment">     * Comparable. (If neither of these apply, we may waste about a</span></span><br><span class="line"><span class="comment">     * factor of two in time and space compared to taking no</span></span><br><span class="line"><span class="comment">     * precautions. But the only known cases stem from poor user</span></span><br><span class="line"><span class="comment">     * programming practices that are already so slow that this makes</span></span><br><span class="line"><span class="comment">     * little difference.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 树型容器(即容器内的元素都是TreeNode)主要是按hashCode排序的, 但如果2个元素都是形如"class C implements Comparable&lt;C&gt;", 有这种关系的元素会使用它们的comapreTo方法来排序.</span></span><br><span class="line"><span class="comment">     * (我们通过反射来谨慎的检查这个类型, 见comparableClassFor)</span></span><br><span class="line"><span class="comment">     * 给树型容器增加复杂度是值得的, 这样无论key是使用hashCode还是排序, 在最坏的情况下也能提供O(log n)的操作复杂度.</span></span><br><span class="line"><span class="comment">     * 因此, 只要key可以比较, 那么就算在特殊或恶意的使用场景下, 如hashCode()返回的值不够分散, 甚至许多key有相同的hashCode, 性能的下降也比较平滑.</span></span><br><span class="line"><span class="comment">     * (如果这2种方式都不适用, 我们可能要花2倍的时间或空间, 在毫无措施的情况下比较.但是已知的这样的案例都源于糟糕的用户程序设计, 在已经很慢的基础上再慢点没啥区别了)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Because TreeNodes are about twice the size of regular nodes, we</span></span><br><span class="line"><span class="comment">     * use them only when bins contain enough nodes to warrant use</span></span><br><span class="line"><span class="comment">     * (see TREEIFY_THRESHOLD). And when they become too small (due to</span></span><br><span class="line"><span class="comment">     * removal or resizing) they are converted back to plain bins.  In</span></span><br><span class="line"><span class="comment">     * usages with well-distributed user hashCodes, tree bins are</span></span><br><span class="line"><span class="comment">     * rarely used.  Ideally, under random hashCodes, the frequency of</span></span><br><span class="line"><span class="comment">     * nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="comment">     * (http://en.wikipedia.org/wiki/Poisson_distribution) with a</span></span><br><span class="line"><span class="comment">     * parameter of about 0.5 on average for the default resizing</span></span><br><span class="line"><span class="comment">     * threshold of 0.75, although with a large variance because of</span></span><br><span class="line"><span class="comment">     * resizing granularity. Ignoring variance, the expected</span></span><br><span class="line"><span class="comment">     * occurrences of list size k are (exp(-0.5) * pow(0.5, k) /</span></span><br><span class="line"><span class="comment">     * factorial(k)). The first values are:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 因为TreeNode的大小是普通节点的2倍, 所以我们只在容器中有足够多的节点时才被使用(见TREEIFY_THRESHOLD).</span></span><br><span class="line"><span class="comment">     * 当容器变的很小时(由于删除及调整大小), 树型容器也会转换成普通的容器.</span></span><br><span class="line"><span class="comment">     * 假如使用时能用hashCode均匀的分布元素, 树型容器很少被用到.</span></span><br><span class="line"><span class="comment">     * 理论上, 使用随机hashCode的节点在容器中的分布遵循泊松分布理论.</span></span><br><span class="line"><span class="comment">     * 抛开resize导致的粒度影响, 当负载因子是0.75时, 元素落在各个容器内的概率为 50%.</span></span><br><span class="line"><span class="comment">     * (exp(-0.5) * pow(0.5, k) / factorial(k))</span></span><br><span class="line"><span class="comment">     * 也就是 (e^-0.5 * 0.5^k) / k!</span></span><br><span class="line"><span class="comment">     * 通过公式计算出0~8个在同一个容器内出现的概率:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 0:    0.60653066</span></span><br><span class="line"><span class="comment">     * 1:    0.30326533</span></span><br><span class="line"><span class="comment">     * 2:    0.07581633</span></span><br><span class="line"><span class="comment">     * 3:    0.01263606</span></span><br><span class="line"><span class="comment">     * 4:    0.00157952</span></span><br><span class="line"><span class="comment">     * 5:    0.00015795</span></span><br><span class="line"><span class="comment">     * 6:    0.00001316</span></span><br><span class="line"><span class="comment">     * 7:    0.00000094</span></span><br><span class="line"><span class="comment">     * 8:    0.00000006</span></span><br><span class="line"><span class="comment">     * more: less than 1 in ten million</span></span><br><span class="line"><span class="comment">     * 更多: 不到亿分之一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The root of a tree bin is normally its first node.  However, </span></span><br><span class="line"><span class="comment">     * sometimes (currently only upon Iterator.remove), the root might</span></span><br><span class="line"><span class="comment">     * be elsewhere, but can be recovered following parent links</span></span><br><span class="line"><span class="comment">     * (method TreeNode.root()).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 树型容器的根节点一般是它的第一个加入的节点.</span></span><br><span class="line"><span class="comment">     * 然而, 某些时候(刚刚执行Iterator.remove时), 根节点可能是其他节点, 但是可以被重新分配(TreeNode.root()方法)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * All applicable internal methods accept a hash code as an</span></span><br><span class="line"><span class="comment">     * argument (as normally supplied from a public method), allowing</span></span><br><span class="line"><span class="comment">     * them to call each other without recomputing user hashCodes.</span></span><br><span class="line"><span class="comment">     * Most internal methods also accept a "tab" argument, that is</span></span><br><span class="line"><span class="comment">     * normally the current table, but may be a new or old one when</span></span><br><span class="line"><span class="comment">     * resizing or converting.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 所有合适的内部方法接受一个hashCode作为参数(通常是由public方法提供的), 允许他们相互调用时不需要重新计算hashCode.</span></span><br><span class="line"><span class="comment">     * 大多数内部方法也接收一个"tab"参数, 这通常表示当前哈希表, 也能在调整大小或转换时代表表示新表或老表.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When bin lists are treeified, split, or untreeified, we keep</span></span><br><span class="line"><span class="comment">     * them in the same relative access/traversal order (i.e., field</span></span><br><span class="line"><span class="comment">     * Node.next) to better preserve locality, and to slightly</span></span><br><span class="line"><span class="comment">     * simplify handling of splits and traversals that invoke</span></span><br><span class="line"><span class="comment">     * iterator.remove. When using comparators on insertion, to keep a</span></span><br><span class="line"><span class="comment">     * total ordering (or as close as is required here) across</span></span><br><span class="line"><span class="comment">     * rebalancings, we compare classes and identityHashCodes as</span></span><br><span class="line"><span class="comment">     * tie-breakers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The use and transitions among plain vs tree modes is</span></span><br><span class="line"><span class="comment">     * complicated by the existence of subclass LinkedHashMap. See</span></span><br><span class="line"><span class="comment">     * below for hook methods defined to be invoked upon insertion, </span></span><br><span class="line"><span class="comment">     * removal and access that allow LinkedHashMap internals to</span></span><br><span class="line"><span class="comment">     * otherwise remain independent of these mechanics. (This also</span></span><br><span class="line"><span class="comment">     * requires that a map instance be passed to some utility methods</span></span><br><span class="line"><span class="comment">     * that may create new nodes.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The concurrent-programming-like SSA-based coding style helps</span></span><br><span class="line"><span class="comment">     * avoid aliasing errors amid all of the twisty pointer operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 默认初始容量大小 - 必须是2的倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 最大容量 - 必须是2^30的倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 默认负载因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 树化临界值</span></span><br><span class="line"><span class="comment">     * bucket内元素个数的临界值, 用来决定bucket是树型结构还是list结构</span></span><br><span class="line"><span class="comment">     * 当bucket内内有如此多元素后再添加一个元素时, bucket将转换成树型结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在执行resize才做时, 反树化bucket的临界值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">     * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 最小树型化容器数量 64, 即当table大小(容器数量)至少为该值时, 容器才能进行树型化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment">     * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 链表结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next) {</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>{ <span class="keyword">return</span> key; }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>{ <span class="keyword">return</span> value; }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>{ <span class="keyword">return</span> key + <span class="string">"="</span> + value; }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>{</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) {</span><br><span class="line">                Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                        Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Static utilities -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment">     * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment">     * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment">     * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment">     * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment">     * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment">     * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment">     * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment">     * are already reasonably distributed (so don't benefit from</span></span><br><span class="line"><span class="comment">     * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment">     * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment">     * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment">     * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment">     * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 计算 key.hashCode ^ hashCode的高16位.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns x's Class if it is of the form "class C implements</span></span><br><span class="line"><span class="comment">     * Comparable&lt;C&gt;", else null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) {</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) {</span><br><span class="line">            Class&lt;?&gt; c; Type[] ts, as; ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String<span class="class">.<span class="keyword">class</span>) // <span class="title">bypass</span> <span class="title">checks</span></span></span><br><span class="line"><span class="class">                <span class="title">return</span> <span class="title">c</span></span>;</span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">for</span> (Type t : ts) {</span><br><span class="line">                    <span class="keyword">if</span> ((t <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                            ((p = (ParameterizedType) t).getRawType() ==</span><br><span class="line">                                    Comparable<span class="class">.<span class="keyword">class</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">                            (<span class="title">as</span> </span>= p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                            as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                        <span class="keyword">return</span> c;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns k.compareTo(x) if x matches kc (k's screened comparable</span></span><br><span class="line"><span class="comment">     * class), else 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>({<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>}) <span class="comment">// for cast to Comparable</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">                ((Comparable)k).compareTo(x));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * table的大小为之前的2倍.并并总是2的倍数</span></span><br><span class="line"><span class="comment">     * 思路是把低位全部转换为1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">     * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">     * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">     * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">     * for keySet() and values().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment">     * the HashMap or otherwise modify its internal structure (e.g., </span></span><br><span class="line"><span class="comment">     * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment">     * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 用于记录修改的次数</span></span><br><span class="line"><span class="comment">     * 如果modCount匹配不上, 就会抛ConcurrentModificationException.</span></span><br><span class="line"><span class="comment">     * fail-fast机制就是基于它实现的.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line">    <span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line">    <span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line">    <span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor for the hash table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty {<span class="doctag">@code</span> HashMap} with the specified initial</span></span><br><span class="line"><span class="comment">     * capacity and load factor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">     *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                    initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                    loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty {<span class="doctag">@code</span> HashMap} with the specified initial</span></span><br><span class="line"><span class="comment">     * capacity and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity the initial capacity.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty {<span class="doctag">@code</span> HashMap} with the default initial capacity</span></span><br><span class="line"><span class="comment">     * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new {<span class="doctag">@code</span> HashMap} with the same mappings as the</span></span><br><span class="line"><span class="comment">     * specified {<span class="doctag">@code</span> Map}.  The {<span class="doctag">@code</span> HashMap} is created with</span></span><br><span class="line"><span class="comment">     * default load factor (0.75) and an initial capacity sufficient to</span></span><br><span class="line"><span class="comment">     * hold the mappings in the specified {<span class="doctag">@code</span> Map}.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   m the map whose mappings are to be placed in this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  NullPointerException if the specified map is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.putAll and Map constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m the map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict false when initially constructing this map, else</span></span><br><span class="line"><span class="comment">     * true (relayed to method afterNodeInsertion).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) { <span class="comment">// pre-size</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                resize();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) {</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of key-value mappings in this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of key-value mappings in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns {<span class="doctag">@code</span> true} if this map contains no key-value mappings.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@code</span> true} if this map contains no key-value mappings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped, </span></span><br><span class="line"><span class="comment">     * or {<span class="doctag">@code</span> null} if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> k} to a value {<span class="doctag">@code</span> v} such that {<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment">     * key.equals(k))}, then this method returns {<span class="doctag">@code</span> v}; otherwise</span></span><br><span class="line"><span class="comment">     * it returns {<span class="doctag">@code</span> null}.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A return value of {<span class="doctag">@code</span> null} does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment">     * indicate that the map contains no mapping for the key; it's also</span></span><br><span class="line"><span class="comment">     * possible that the map explicitly maps the key to {<span class="doctag">@code</span> null}.</span></span><br><span class="line"><span class="comment">     * The {<span class="doctag">@link</span> #containsKey containsKey} operation may be used to</span></span><br><span class="line"><span class="comment">     * distinguish these two cases.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.get and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                <span class="comment">// (n - 1) &amp; hash 计算下标, 获得对应bucket的第一个元素</span></span><br><span class="line">                (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 先判断第一个元素是否是需要的那个</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                    ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="comment">// 如果不是, 判断第一个元素的类型, 用对应的方法遍历</span></span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K, V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns {<span class="doctag">@code</span> true} if this map contains a mapping for the</span></span><br><span class="line"><span class="comment">     * specified key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   key   The key whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@code</span> true} if this map contains a mapping for the specified</span></span><br><span class="line"><span class="comment">     * key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">     * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">     * value is replaced.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with {<span class="doctag">@code</span> key}, or</span></span><br><span class="line"><span class="comment">     *         {<span class="doctag">@code</span> null} if there was no mapping for {<span class="doctag">@code</span> key}.</span></span><br><span class="line"><span class="comment">     *         (A {<span class="doctag">@code</span> null} return can also indicate that the map</span></span><br><span class="line"><span class="comment">     *         previously associated {<span class="doctag">@code</span> null} with {<span class="doctag">@code</span> key}.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value 如果为true, 则不改变原有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode. 如果是false, 则table使用创建模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, </span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">// 空table, 则先做resize</span></span><br><span class="line">        <span class="comment">// n = table.length</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// hash 取模, 计算出该键值对放在哪个 bucket</span></span><br><span class="line">        <span class="comment">// p 为 table 中第一个元素</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            Node&lt;K, V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 判断 p.key 和 key 相同</span></span><br><span class="line">            <span class="comment">// 如果是, e = table 中第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 树结构操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K, V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 遍历链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) {</span><br><span class="line">                    <span class="comment">// 在尾部插入该元素</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) {</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 插入之后看看是否需要树化</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 如果发现 key 相同, 则取回该元素</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 修改value</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) { <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 判断是否需要resize</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 初始化或table扩容2倍</span></span><br><span class="line"><span class="comment">     * 如果是给table扩容, 由于我们是扩大2的倍数, 所以元素那么留在原地, 要么偏移2的倍数的下标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K, V&gt;[] resize() {</span><br><span class="line">        Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> {               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                    (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        }</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>({<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>})</span><br><span class="line">        Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) {</span><br><span class="line">                Node&lt;K, V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) {</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">// 树型节点分割</span></span><br><span class="line">                        ((TreeNode&lt;K, V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> { <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> {</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) {</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">else</span> {</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            }</span><br><span class="line">                        } <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) {</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) {</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment">     * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="comment">// table 太小, 使用 resize</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            TreeNode&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 遍历转换成 TreeNode 类型</span></span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                }</span><br><span class="line">                tl = p;</span><br><span class="line">            } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 转换结构</span></span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copies all of the mappings from the specified map to this map.</span></span><br><span class="line"><span class="comment">     * These mappings will replace any mappings that this map had for</span></span><br><span class="line"><span class="comment">     * any of the keys currently in the specified map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m mappings to be stored in this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified map is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>{</span><br><span class="line">        putMapEntries(m, <span class="keyword">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the mapping for the specified key from this map if present.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key key whose mapping is to be removed from the map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with {<span class="doctag">@code</span> key}, or</span></span><br><span class="line"><span class="comment">     *         {<span class="doctag">@code</span> null} if there was no mapping for {<span class="doctag">@code</span> key}.</span></span><br><span class="line"><span class="comment">     *         (A {<span class="doctag">@code</span> null} return can also indicate that the map</span></span><br><span class="line"><span class="comment">     *         previously associated {<span class="doctag">@code</span> null} with {<span class="doctag">@code</span> key}.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> : e.value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.remove and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to match if matchValue, else ignored</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matchValue if true only remove if value is equal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> movable if false do not move other nodes while removing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value, </span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            Node&lt;K, V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K, V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">do</span> {</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((k = e.key) == key ||</span><br><span class="line">                                        (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) {</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                        p = e;</span><br><span class="line">                    } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                    (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) {</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K, V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment">     * The map will be empty after this call returns.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) {</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns {<span class="doctag">@code</span> true} if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     * specified value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@code</span> true} if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     *         specified value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab; V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next) {</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                            (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a {<span class="doctag">@link</span> Set} view of the keys contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  If the map is modified</span></span><br><span class="line"><span class="comment">     * while an iteration over the set is in progress (except through</span></span><br><span class="line"><span class="comment">     * the iterator's own {<span class="doctag">@code</span> remove} operation), the results of</span></span><br><span class="line"><span class="comment">     * the iteration are undefined.  The set supports element removal, </span></span><br><span class="line"><span class="comment">     * which removes the corresponding mapping from the map, via the</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> Iterator.remove}, {<span class="doctag">@code</span> Set.remove}, </span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> removeAll}, {<span class="doctag">@code</span> retainAll}, and {<span class="doctag">@code</span> clear}</span></span><br><span class="line"><span class="comment">     * operations.  It does not support the {<span class="doctag">@code</span> add} or {<span class="doctag">@code</span> addAll}</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a set view of the keys contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>{</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">if</span> (ks == <span class="keyword">null</span>) {</span><br><span class="line">            ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">            keySet = ks;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ks;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>{ <span class="keyword">return</span> size; }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>{ HashMap.<span class="keyword">this</span>.clear(); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span>     </span>{ <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>{ <span class="keyword">return</span> containsKey(o); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                    <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.key);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a {<span class="doctag">@link</span> Collection} view of the values contained in this map.</span></span><br><span class="line"><span class="comment">     * The collection is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the collection, and vice-versa.  If the map is</span></span><br><span class="line"><span class="comment">     * modified while an iteration over the collection is in progress</span></span><br><span class="line"><span class="comment">     * (except through the iterator's own {<span class="doctag">@code</span> remove} operation), </span></span><br><span class="line"><span class="comment">     * the results of the iteration are undefined.  The collection</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from the map, via the {<span class="doctag">@code</span> Iterator.remove}, </span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> Collection.remove}, {<span class="doctag">@code</span> removeAll}, </span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> retainAll} and {<span class="doctag">@code</span> clear} operations.  It does not</span></span><br><span class="line"><span class="comment">     * support the {<span class="doctag">@code</span> add} or {<span class="doctag">@code</span> addAll} operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a view of the values contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>{</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">if</span> (vs == <span class="keyword">null</span>) {</span><br><span class="line">            vs = <span class="keyword">new</span> Values();</span><br><span class="line">            values = vs;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>{ <span class="keyword">return</span> size; }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>{ HashMap.<span class="keyword">this</span>.clear(); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span>     </span>{ <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>{ <span class="keyword">return</span> containsValue(o); }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title">spliterator</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueSpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                    <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.value);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a {<span class="doctag">@link</span> Set} view of the mappings contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  If the map is modified</span></span><br><span class="line"><span class="comment">     * while an iteration over the set is in progress (except through</span></span><br><span class="line"><span class="comment">     * the iterator's own {<span class="doctag">@code</span> remove} operation, or through the</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> setValue} operation on a map entry returned by the</span></span><br><span class="line"><span class="comment">     * iterator) the results of the iteration are undefined.  The set</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from the map, via the {<span class="doctag">@code</span> Iterator.remove}, </span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> Set.remove}, {<span class="doctag">@code</span> removeAll}, {<span class="doctag">@code</span> retainAll} and</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> clear} operations.  It does not support the</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@code</span> add} or {<span class="doctag">@code</span> addAll} operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a set view of the mappings contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() {</span><br><span class="line">        Set&lt;Map.Entry&lt;K, V&gt;&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> EntrySet()) : es;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>{ <span class="keyword">return</span> size; }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>{ HashMap.<span class="keyword">this</span>.clear(); }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K, V&gt;&gt; iterator() {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class="line">            Object key = e.getKey();</span><br><span class="line">            Node&lt;K, V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) {</span><br><span class="line">                Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class="line">                Object key = e.getKey();</span><br><span class="line">                Object value = e.getValue();</span><br><span class="line">                <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K, V&gt;&gt; spliterator() {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                    <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overrides of JDK8 Map extension methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? defaultValue : e.value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; e; V v;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                ((v = e.value) == oldValue || (v != <span class="keyword">null</span> &amp;&amp; v.equals(oldValue)))) {</span><br><span class="line">            e.value = newValue;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span>) {</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method will, on a best-effort basis, throw a</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ConcurrentModificationException} if it is detected that the</span></span><br><span class="line"><span class="comment">     * mapping function modifies this map during computation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ConcurrentModificationException if it is detected that the</span></span><br><span class="line"><span class="comment">     * mapping function modified this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfAbsent</span><span class="params">(K key, </span></span></span><br><span class="line"><span class="function"><span class="params">                             Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (mappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                Node&lt;K, V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) {</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    ++binCount;</span><br><span class="line">                } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; (oldValue = old.value) != <span class="keyword">null</span>) {</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mc = modCount;</span><br><span class="line">        V v = mappingFunction.apply(key);</span><br><span class="line">        <span class="keyword">if</span> (mc != modCount) { <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(); }</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (old != <span class="keyword">null</span>) {</span><br><span class="line">            old.value = v;</span><br><span class="line">            afterNodeAccess(old);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">            t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            tab[i] = newNode(hash, key, v, first);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">        }</span><br><span class="line">        modCount = mc + <span class="number">1</span>;</span><br><span class="line">        ++size;</span><br><span class="line">        afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method will, on a best-effort basis, throw a</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ConcurrentModificationException} if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modifies this map during computation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ConcurrentModificationException if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modified this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfPresent</span><span class="params">(K key, </span></span></span><br><span class="line"><span class="function"><span class="params">                              BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K, V&gt; e; V oldValue;</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash, key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (oldValue = e.value) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">            <span class="keyword">if</span> (mc != modCount) { <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(); }</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) {</span><br><span class="line">                e.value = v;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method will, on a best-effort basis, throw a</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ConcurrentModificationException} if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modifies this map during computation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ConcurrentModificationException if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modified this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">compute</span><span class="params">(K key, </span></span></span><br><span class="line"><span class="function"><span class="params">                     BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                Node&lt;K, V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) {</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    ++binCount;</span><br><span class="line">                } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        V oldValue = (old == <span class="keyword">null</span>) ? <span class="keyword">null</span> : old.value;</span><br><span class="line">        <span class="keyword">int</span> mc = modCount;</span><br><span class="line">        V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">        <span class="keyword">if</span> (mc != modCount) { <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(); }</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) {</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                tab[i] = newNode(hash, key, v, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            }</span><br><span class="line">            modCount = mc + <span class="number">1</span>;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method will, on a best-effort basis, throw a</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@link</span> ConcurrentModificationException} if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modifies this map during computation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ConcurrentModificationException if it is detected that the</span></span><br><span class="line"><span class="comment">     * remapping function modified this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">merge</span><span class="params">(K key, V value, </span></span></span><br><span class="line"><span class="function"><span class="params">                   BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab; Node&lt;K, V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                Node&lt;K, V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) {</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    ++binCount;</span><br><span class="line">                } <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) {</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> (old.value != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                v = remappingFunction.apply(old.value, value);</span><br><span class="line">                <span class="keyword">if</span> (mc != modCount) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                v = value;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) {</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                tab[i] = newNode(hash, key, value, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            }</span><br><span class="line">            ++modCount;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key, e.value);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (function == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next) {</span><br><span class="line">                    e.value = function.apply(e.key, e.value);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// Cloning and serialization</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a shallow copy of this {<span class="doctag">@code</span> HashMap} instance: the keys and</span></span><br><span class="line"><span class="comment">     * values themselves are not cloned.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a shallow copy of this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>{</span><br><span class="line">        HashMap&lt;K, V&gt; result;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            result = (HashMap&lt;K, V&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">        } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        }</span><br><span class="line">        result.reinitialize();</span><br><span class="line">        result.putMapEntries(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These methods are also used when serializing HashSets</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span> </span>{ <span class="keyword">return</span> loadFactor; }</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (table != <span class="keyword">null</span>) ? table.length :</span><br><span class="line">                (threshold &gt; <span class="number">0</span>) ? threshold :</span><br><span class="line">                        DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the {<span class="doctag">@code</span> HashMap} instance to a stream (i.e., </span></span><br><span class="line"><span class="comment">     * serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The &lt;i&gt;capacity&lt;/i&gt; of the HashMap (the length of the</span></span><br><span class="line"><span class="comment">     *             bucket array) is emitted (int), followed by the</span></span><br><span class="line"><span class="comment">     *             &lt;i&gt;size&lt;/i&gt; (an int, the number of key-value</span></span><br><span class="line"><span class="comment">     *             mappings), followed by the key (Object) and value (Object)</span></span><br><span class="line"><span class="comment">     *             for each key-value mapping.  The key-value mappings are</span></span><br><span class="line"><span class="comment">     *             emitted in no particular order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="keyword">int</span> buckets = capacity();</span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeInt(buckets);</span><br><span class="line">        s.writeInt(size);</span><br><span class="line">        internalWriteEntries(s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the {<span class="doctag">@code</span> HashMap} instance from a stream (i.e., </span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        reinitialize();</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                    loadFactor);</span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal mappings count: "</span> +</span><br><span class="line">                    mappings);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) { <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">            <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">            <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">            <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">            <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">            <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                    (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                            MAXIMUM_CAPACITY :</span><br><span class="line">                            tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                    (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>({<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>})</span><br><span class="line">            Node&lt;K, V&gt;[] tab = (Node&lt;K, V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) {</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// iterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>{</span><br><span class="line">        Node&lt;K, V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">        Node&lt;K, V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">        <span class="keyword">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">        HashIterator() {</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            Node&lt;K, V&gt;[] t = table;</span><br><span class="line">            current = next = <span class="keyword">null</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) { <span class="comment">// advance to first entry</span></span><br><span class="line">                <span class="keyword">do</span> {} <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt;[] t;</span><br><span class="line">            Node&lt;K, V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">do</span> {} <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt; p = current;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">            removeNode(p.hash, p.key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>{ <span class="keyword">return</span> nextNode().key; }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>{ <span class="keyword">return</span> nextNode().value; }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K, V&gt; <span class="title">next</span><span class="params">()</span> </span>{ <span class="keyword">return</span> nextNode(); }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// spliterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;K, V&gt; map;</span><br><span class="line">        Node&lt;K, V&gt; current;          <span class="comment">// current node</span></span><br><span class="line">        <span class="keyword">int</span> index;                  <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">        <span class="keyword">int</span> fence;                  <span class="comment">// one past last index</span></span><br><span class="line">        <span class="keyword">int</span> est;                    <span class="comment">// size estimate</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;       <span class="comment">// for comodification checks</span></span><br><span class="line"></span><br><span class="line">        HashMapSpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, </span><br><span class="line">                           <span class="keyword">int</span> fence, <span class="keyword">int</span> est, </span><br><span class="line">                           <span class="keyword">int</span> expectedModCount) {</span><br><span class="line">            <span class="keyword">this</span>.map = m;</span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>{ <span class="comment">// initialize fence and size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) {</span><br><span class="line">                HashMap&lt;K, V&gt; m = map;</span><br><span class="line">                est = m.size;</span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">                Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>{</span><br><span class="line">            getFence(); <span class="comment">// force init</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) est;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">K</span>&gt; </span>{</span><br><span class="line">        KeySpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est, </span><br><span class="line">                       <span class="keyword">int</span> expectedModCount) {</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> KeySpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> KeySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>, </span><br><span class="line">                            expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) {</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) {</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        action.accept(p.key);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) {</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        K k = current.key;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(k);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                    Spliterator.DISTINCT;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">V</span>&gt; </span>{</span><br><span class="line">        ValueSpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est, </span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) {</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ValueSpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> ValueSpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>, </span><br><span class="line">                            expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) {</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) {</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        action.accept(p.value);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) {</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        V v = current.value;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(v);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>{</span><br><span class="line">        EntrySpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est, </span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) {</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EntrySpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> EntrySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>, </span><br><span class="line">                            expectedModCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) {</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) {</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        action.accept(p);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) {</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        Node&lt;K, V&gt; e = current;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                    Spliterator.DISTINCT;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// LinkedHashMap support</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The following package-protected methods are designed to be</span></span><br><span class="line"><span class="comment">     * overridden by LinkedHashMap, but not by any other subclass.</span></span><br><span class="line"><span class="comment">     * Nearly all other internal methods are also package-protected</span></span><br><span class="line"><span class="comment">     * but are declared final, so can be used by LinkedHashMap, view</span></span><br><span class="line"><span class="comment">     * classes, and HashSet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a regular (non-tree) node</span></span><br><span class="line">    <span class="function">Node&lt;K, V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For conversion from TreeNodes to plain nodes</span></span><br><span class="line">    <span class="function">Node&lt;K, V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K, V&gt; p, Node&lt;K, V&gt; next)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a tree bin node</span></span><br><span class="line">    <span class="function">TreeNode&lt;K, V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(hash, key, value, next);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For treeifyBin</span></span><br><span class="line">    <span class="function">TreeNode&lt;K, V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K, V&gt; p, Node&lt;K, V&gt; next)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reset to initial default state.  Called by clone and readObject.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reinitialize</span><span class="params">()</span> </span>{</span><br><span class="line">        table = <span class="keyword">null</span>;</span><br><span class="line">        entrySet = <span class="keyword">null</span>;</span><br><span class="line">        keySet = <span class="keyword">null</span>;</span><br><span class="line">        values = <span class="keyword">null</span>;</span><br><span class="line">        modCount = <span class="number">0</span>;</span><br><span class="line">        threshold = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K, V&gt; p)</span> </span>{ }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>{ }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K, V&gt; p)</span> </span>{ }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called only from writeObject, to ensure compatible ordering.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; e : tab) {</span><br><span class="line">                <span class="keyword">for</span> (; e != <span class="keyword">null</span>; e = e.next) {</span><br><span class="line">                    s.writeObject(e.key);</span><br><span class="line">                    s.writeObject(e.value);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// Tree bins</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment">     * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment">     * linked node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</span><br><span class="line">        TreeNode&lt;K, V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K, V&gt; left;</span><br><span class="line">        TreeNode&lt;K, V&gt; right;</span><br><span class="line">        TreeNode&lt;K, V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K, V&gt; next) {</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">root</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; r = <span class="keyword">this</span>, p;;) {</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Ensures that the given root is the first node of its bin.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K, V&gt;[] tab, TreeNode&lt;K, V&gt; root)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">                TreeNode&lt;K, V&gt; first = (TreeNode&lt;K, V&gt;)tab[index];</span><br><span class="line">                <span class="keyword">if</span> (root != first) {</span><br><span class="line">                    Node&lt;K, V&gt; rn;</span><br><span class="line">                    tab[index] = root;</span><br><span class="line">                    TreeNode&lt;K, V&gt; rp = root.prev;</span><br><span class="line">                    <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;)rn).prev = rp;</span><br><span class="line">                    <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                        rp.next = rn;</span><br><span class="line">                    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                        first.prev = root;</span><br><span class="line">                    root.next = first;</span><br><span class="line">                    root.prev = <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Finds the node starting at root p with the given hash and key.</span></span><br><span class="line"><span class="comment">         * The kc argument caches comparableClassFor(key) upon first use</span></span><br><span class="line"><span class="comment">         * comparing keys.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">                TreeNode&lt;K, V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                        (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            } <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Calls find for root node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tie-breaking utility for ordering insertions when equal</span></span><br><span class="line"><span class="comment">         * hashCodes and non-comparable. We don't require a total</span></span><br><span class="line"><span class="comment">         * order, just a consistent insertion rule to maintain</span></span><br><span class="line"><span class="comment">         * equivalence across rebalancings. Tie-breaking further than</span></span><br><span class="line"><span class="comment">         * necessary simplifies testing a bit.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> d;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">                    (d = a.getClass().getName().</span><br><span class="line">                            compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">                d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                        -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Forms tree of the nodes linked from this node.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> root of tree</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K, V&gt;[] tab)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) {</span><br><span class="line">                next = (TreeNode&lt;K, V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    root = x;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K, V&gt; p = root;;) {</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                        TreeNode&lt;K, V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) {</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            moveRootToFront(tab, root);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns a list of non-TreeNodes replacing those linked from</span></span><br><span class="line"><span class="comment">         * this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K, V&gt; map)</span> </span>{</span><br><span class="line">            Node&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) {</span><br><span class="line">                Node&lt;K, V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tl.next = p;</span><br><span class="line">                tl = p;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> hd;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tree version of putVal.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">int</span> h, K k, V v)</span> </span>{</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">            TreeNode&lt;K, V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; p = root;;) {</span><br><span class="line">                <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (!searched) {</span><br><span class="line">                        TreeNode&lt;K, V&gt; q, ch;</span><br><span class="line">                        searched = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                                ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    }</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K, V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) {</span><br><span class="line">                    Node&lt;K, V&gt; xpn = xp.next;</span><br><span class="line">                    TreeNode&lt;K, V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    xp.next = x;</span><br><span class="line">                    x.parent = x.prev = xp;</span><br><span class="line">                    <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;)xpn).prev = x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the given node, that must be present before this call.</span></span><br><span class="line"><span class="comment">         * This is messier than typical red-black deletion code because we</span></span><br><span class="line"><span class="comment">         * cannot swap the contents of an interior node with a leaf</span></span><br><span class="line"><span class="comment">         * successor that is pinned by "next" pointers that are accessible</span></span><br><span class="line"><span class="comment">         * independently during traversal. So instead we swap the tree</span></span><br><span class="line"><span class="comment">         * linkages. If the current tree appears to have too few nodes, </span></span><br><span class="line"><span class="comment">         * the bin is converted back to a plain bin. (The test triggers</span></span><br><span class="line"><span class="comment">         * somewhere between 2 and 6 nodes, depending on tree structure).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeTreeNode</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">boolean</span> movable)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">            TreeNode&lt;K, V&gt; first = (TreeNode&lt;K, V&gt;)tab[index], root = first, rl;</span><br><span class="line">            TreeNode&lt;K, V&gt; succ = (TreeNode&lt;K, V&gt;)next, pred = prev;</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                tab[index] = first = succ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = succ;</span><br><span class="line">            <span class="keyword">if</span> (succ != <span class="keyword">null</span>)</span><br><span class="line">                succ.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (root.parent != <span class="keyword">null</span>)</span><br><span class="line">                root = root.root();</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.right == <span class="keyword">null</span> ||</span><br><span class="line">                    (rl = root.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>) {</span><br><span class="line">                tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            TreeNode&lt;K, V&gt; p = <span class="keyword">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">            <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) {</span><br><span class="line">                TreeNode&lt;K, V&gt; s = pr, sl;</span><br><span class="line">                <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">                    s = sl;</span><br><span class="line">                <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">                TreeNode&lt;K, V&gt; sr = s.right;</span><br><span class="line">                TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (s == pr) { <span class="comment">// p was s's direct parent</span></span><br><span class="line">                    p.parent = s;</span><br><span class="line">                    s.right = p;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    TreeNode&lt;K, V&gt; sp = s.parent;</span><br><span class="line">                    <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) {</span><br><span class="line">                        <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                            sp.left = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            sp.right = p;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                        pr.parent = s;</span><br><span class="line">                }</span><br><span class="line">                p.left = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">                    sr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">                    pl.parent = s;</span><br><span class="line">                <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">                    root = s;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = s;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = s;</span><br><span class="line">                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                    replacement = sr;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    replacement = p;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                replacement = p;</span><br><span class="line">            <span class="keyword">if</span> (replacement != p) {</span><br><span class="line">                TreeNode&lt;K, V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">                    root = replacement;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = replacement;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = replacement;</span><br><span class="line">                p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            TreeNode&lt;K, V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (replacement == p) {  <span class="comment">// detach</span></span><br><span class="line">                TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class="line">                p.parent = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (pp != <span class="keyword">null</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                        pp.right = <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (movable)</span><br><span class="line">                moveRootToFront(tab, r);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Splits nodes in a tree bin into lower and upper tree bins, </span></span><br><span class="line"><span class="comment">         * or untreeifies if now too small. Called only from resize;</span></span><br><span class="line"><span class="comment">         * see above discussion about split bits and indices.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> map the map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tab the table for recording bin heads</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> index the index of the table being split</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bit the bit of hash to split on</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">            TreeNode&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">            TreeNode&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) {</span><br><span class="line">                next = (TreeNode&lt;K, V&gt;)e.next;</span><br><span class="line">                e.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                        loHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        loTail.next = e;</span><br><span class="line">                    loTail = e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                        hiHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hiTail.next = e;</span><br><span class="line">                    hiTail = e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] = loHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    tab[index] = loHead;</span><br><span class="line">                    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">        <span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K, V&gt; root, </span></span></span><br><span class="line"><span class="function"><span class="params">                                              TreeNode&lt;K, V&gt; p)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; r, pp, rl;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                    rl.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                r.left = p;</span><br><span class="line">                p.parent = r;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K, V&gt; root, </span></span></span><br><span class="line"><span class="function"><span class="params">                                               TreeNode&lt;K, V&gt; p)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.parent = l;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K, V&gt; root, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                    TreeNode&lt;K, V&gt; x)</span> </span>{</span><br><span class="line">            x.red = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; xp, xpp, xppl, xppr;;) {</span><br><span class="line">                <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) {</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">if</span> (xp == (xppl = xpp.left)) {</span><br><span class="line">                    <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) {</span><br><span class="line">                        xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.right) {</span><br><span class="line">                            root = rotateLeft(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) {</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) {</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpp);</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) {</span><br><span class="line">                        xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.left) {</span><br><span class="line">                            root = rotateRight(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) {</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) {</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpp);</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K, V&gt; root, </span></span></span><br><span class="line"><span class="function"><span class="params">                                                   TreeNode&lt;K, V&gt; x)</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; xp, xpl, xpr;;)  {</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) {</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x.red) {</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) {</span><br><span class="line">                    <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) {</span><br><span class="line">                        xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        TreeNode&lt;K, V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                                (sl == <span class="keyword">null</span> || !sl.red)) {</span><br><span class="line">                            xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">else</span> {</span><br><span class="line">                            <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) {</span><br><span class="line">                                <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpr);</span><br><span class="line">                                xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                        <span class="keyword">null</span> : xp.right;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) {</span><br><span class="line">                                xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) {</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateLeft(root, xp);</span><br><span class="line">                            }</span><br><span class="line">                            x = root;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> { <span class="comment">// symmetric</span></span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) {</span><br><span class="line">                        xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        TreeNode&lt;K, V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                                (sr == <span class="keyword">null</span> || !sr.red)) {</span><br><span class="line">                            xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">else</span> {</span><br><span class="line">                            <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) {</span><br><span class="line">                                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpl);</span><br><span class="line">                                xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                        <span class="keyword">null</span> : xp.left;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) {</span><br><span class="line">                                xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) {</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateRight(root, xp);</span><br><span class="line">                            }</span><br><span class="line">                            x = root;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Recursive invariant check</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">checkInvariants</span><span class="params">(TreeNode&lt;K, V&gt; t)</span> </span>{</span><br><span class="line">            TreeNode&lt;K, V&gt; tp = t.parent, tl = t.left, tr = t.right, </span><br><span class="line">                    tb = t.prev, tn = (TreeNode&lt;K, V&gt;)t.next;</span><br><span class="line">            <span class="keyword">if</span> (tb != <span class="keyword">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tn != <span class="keyword">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tp != <span class="keyword">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="keyword">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="keyword">null</span> &amp;&amp; tr.red)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="泊松分布">4.  泊松分布</h1>
<p>是一种统计与概率学里常见到的离散概率分布.<br>
以下连接内容仅供参考:<br>
<a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html</a><br>
待继续研究</p>
<h1 id="todo">5.  Todo</h1>
<ul>
<li>泊松分布</li>
<li>红黑树</li>
<li>再次阅读源码</li>
</ul>
<h1 id="resource">6.  Resource</h1>
<ul>
<li><a href="http://www.cnblogs.com/killbug/p/7679043.html" target="_blank" rel="noopener">http://www.cnblogs.com/killbug/p/7679043.html</a></li>
<li><a href="http://www.cnblogs.com/leesf456/p/5242233.html" target="_blank" rel="noopener">http://www.cnblogs.com/leesf456/p/5242233.html</a></li>
<li><a href="https://blog.csdn.net/u011240877/article/details/53358305" target="_blank" rel="noopener">https://blog.csdn.net/u011240877/article/details/53358305</a></li>
<li><a href="https://blog.csdn.net/u011642663/article/details/49853087" target="_blank" rel="noopener">https://blog.csdn.net/u011642663/article/details/49853087</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>functional-interface</title>
    <url>/posts/java/ac0f1832/</url>
    <content><![CDATA[<p>函数式接口也称为 <code>SAM 接口(Single Abstract Method Interface)</code></p>
<p>其特点是:</p>
<ul>
<li>有且仅有一个抽象方法</li>
<li>允许定义静态方法</li>
<li>允许定义默认方法</li>
<li>可以使用 @FunctionalInterface 注解修饰, 方便编译器检查, 但不是必须的</li>
</ul>
<h1 id="主要接口">1.  主要接口</h1>
<ul>
<li>Consumer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 再次消费对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Function</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换对象</span></span><br><span class="line"><span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"><span class="comment">// 前置处理</span></span><br><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 后置处理</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 原封返回传入对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Predicate</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 断言对象</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"><span class="comment">// 与</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 非</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 或</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Supplier</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提供对象</span></span><br><span class="line"><span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/package-summary.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/package-summary.html</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>hashtable-faq</title>
    <url>/posts/uncategorized/80e3a16/</url>
    <content><![CDATA[<h1 id="hashtable-实现原理">1.  HashTable 实现原理</h1>
<p>通过在 get, put 方法上加 synchronized 关键字来保证线程安全.</p>
<h1 id="hashtable-的-size-方法中明明只有一条语句return-count-为什么还要做同步">2.  HashTable 的 size() 方法中明明只有一条语句&quot;return count&quot;, 为什么还要做同步?​</h1>
<p>通过 synchronized 修饰方法, 锁住的是当前对象.<br>
同步 size() 方法, 是为了防止在取 HashTable 大小时, 有 put() 或者 remove 方法修改 HashTable 的结构, 导致 count 值不准确.</p>
]]></content>
  </entry>
  <entry>
    <title>hashtable</title>
    <url>/posts/java/14dfa8ed/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>lock</title>
    <url>/posts/lock/878f9b0e/</url>
    <content><![CDATA[<h1 id="乐观锁">1.  乐观锁</h1>
<h1 id="悲观锁">2.  悲观锁</h1>
<h1 id="共享锁">3.  共享锁</h1>
<h1 id="排他锁">4.  排他锁</h1>
<h1 id="自旋锁">5.  自旋锁</h1>
<h1 id="偏向锁">6.  偏向锁</h1>
<h1 id="死锁">7.  死锁</h1>
<h2 id="死锁的-4-个必要条件">7.1.  死锁的 4 个必要条件</h2>
<ul>
<li>互斥条件</li>
</ul>
<h2 id="预防死锁">7.2.  预防死锁</h2>
<h2 id="避免死锁">7.3.  避免死锁</h2>
<h1 id="cas">8.  CAS</h1>
<h1 id="resource">9.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/jyy305/article/details/70077042" target="_blank" rel="noopener">https://blog.csdn.net/jyy305/article/details/70077042</a></li>
</ul>
]]></content>
      <categories>
        <category>lock</category>
      </categories>
  </entry>
  <entry>
    <title>object</title>
    <url>/posts/java/a8adabec/</url>
    <content><![CDATA[<h1 id="对象的创建过程">1.  对象的创建过程</h1>
<p>在语言层面上, 创建对象 (例如克隆, 反序列化) 通常仅仅是一个 new 关键字而已, 而在虚拟机中, 对象 (不包括数组和 Class 对象) 的创建又是一个怎样的过程呢?</p>
<p>虚拟机需要一条 new 指令时, 首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用, 并且检查这个符号引用代表的类是否已经加载, 解析和初始化过.<br>
如果没有, 必须先执行相应的类加载过程.</p>
<p>在类加载检查通过后, 接下来虚拟机将为新生对象分配内存.<br>
对象所需内存的大小在类加载完成后便可完全确定, 为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来.<br>
假设 Java 堆中内存是绝对规整的, 所有用过的内存都放在一边, 空闲的内存放在另一边, 中间放着一个指针作为分界点的指示器, 那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离, 这种分配方式称为 <code>指针碰撞 (Bump the Pointer)</code>.<br>
如果 Java 堆中的内存并不是规整的, 已使用的内存和空闲的内存相互交错, 那就没有办法简单地进行指针碰撞了, 虚拟机就必须维护一个列表, 记录上哪些内存块是可用的, 在分配的时候从列表中找到一块足够大的空间划分给对象实例, 并更新列表上的记录, 这种分配方式称为 <code>空闲列表 (Free List)</code>.<br>
选择哪种分配方式由 Java 堆是否规整决定, 而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定.<br>
因此, 在使用 Serial, ParNew 等带 Compact 过程的收集器时, 系统采用的分配算法是指针碰撞, 而使用 CMS 这种基于 Mark-Sweep 算法的收集器时, 通常采用空闲列表.</p>
<p>除了如何划分可用空间之外, 还有另外一个需要考虑的问题是对象创建在虚拟机中是非常频繁的行为, 即使是仅仅修改一个指针所指向的位置, 在并发情况下也并不是线程安全的, 可能出现正在给对象 A 分配内存, 指针还没来得及修改, 对象 B 又同时使用了原来的指针来分配内存的情况.<br>
解决这个问题有两种方案, 一种是堆分配内存空间的动作进行同步处理 – 实际上虚拟机采用 CAS 配置上失败重试的方式保证更新操作的原子性;<br>
另外一种是把内存分配的动作按照线程划分在不同的空间之中进行, 即每个线程在 Java 堆中预先分配一小块内存, 称为 <code>本地线程分配缓冲 (Thread Local Allocation Buffer, TLAB)</code>.<br>
那个线程要分配内存, 就在哪个线程的 TLAB 上分配, 只有 TLAB 用完并分配新的 TLAB 时, 才需要同步锁定.<br>
虚拟机是否使用 TLAB, 可以通过 <code>-XX:+/-UseTLAB</code> 参数来设定.</p>
<p>内存分配完成后, 虚拟机需要将分配到的内存空间都初始化为零值 (不包括对象头), 如果使用 TLAB, 这一工作过程也可以提前至 TLAB 分配时进行.<br>
这一步操作保证了对象实例字段在 Java 代码中可以不赋初始值就直接使用, 程序能访问到这些字段的数据类型所对应的零值.</p>
<p>接下来, 虚拟机要对对象进行必要的设置, 例如这个对象是哪个类的实例, 如何才能找到类的元数据信息, 对象的哈希码, 对象的 GC 分代年龄等信息.<br>
这些信息存放在对象的对象头 (Object Header) 之中.<br>
根据虚拟机当前的运行状态的不同, 如是否用偏向锁等, 对象头会有不同的设置方式.</p>
<p>在上面工作都完成之后, 虚拟机的视角来看, 一个新的对象已经产生了, 产对 Java 程序的视角来看, 对象创建才刚刚开始 – init 方法还没执行, 执行 new 指令之后会接着执行 init 方法, 把对象按照程序员的意愿进行初始化, 这样一个真正可用的对象才算完全产生出来.</p>
<h1 id="对象的内存布局">2.  对象的内存布局</h1>
<p>// todo</p>
<h1 id="对象的访问定位">3.  对象的访问定位</h1>
<h1 id="object-包含的方法">4.  Object 包含的方法</h1>
<ul>
<li>hashCode()<br>
Hash 是散列的意思, 就是把任意长度的输入, 通过散列算法变换成固定长度的输出, 该输出就是散列值.关于散列值, 有以下几个关键结论:
<ol>
<li>如果散列表中存在和散列原始输入K相等的记录, 那么K必定在 f(K) 的存储位置上</li>
<li>不同关键字经过散列算法变换后可能得到同一个散列地址, 这种现象称为碰撞</li>
<li>如果两个Hash值不同(前提是同一 Hash 算法), 那么这两个Hash值对应的原始输入必定不同</li>
</ol>
</li>
</ul>
<p>HashCode 有以下几个关键点:</p>
<ol>
<li>HashCode 的存在主要是为了查找的快捷性, HashCode 是用来在散列存储结构中确定对象的存储地址的</li>
<li>如果两个对象 equals 相等, 那么这两个对象的 HashCode 一定也相同</li>
<li>如果对象的 equals 方法被重写, 那么对象的 HashCode 方法也尽量重写</li>
<li>如果两个对象的 HashCode 相同, 不代表两个对象就相同, 只能说明这两个对象在散列存储结构中, 存放于同一个位置</li>
</ol>
<ul>
<li>
<p>equals()</p>
</li>
<li>
<p>toString()</p>
</li>
<li>
<p>getClass()</p>
</li>
<li>
<p>finalize()</p>
</li>
</ul>
<p>作用:</p>
<ul>
<li>finalize()是Object的protected方法, 子类可以覆盖该方法以实现资源清理工作, GC在回收对象之前调用该方法.</li>
<li>finalize()与C<ins>中的析构函数不是对应的.C</ins>中的析构函数调用的时机是确定的(对象离开作用域或delete掉), 但Java中的finalize的调用具有不确定性<br>
问题:</li>
<li>一些与finalize相关的方法, 由于一些致命的缺陷, 已经被废弃了, 如System.runFinalizersOnExit()方法, Runtime.runFinalizersOnExit()方法</li>
<li>System.gc()与System.runFinalization()方法增加了finalize方法执行的机会, 但不可盲目依赖它们</li>
<li>Java语言规范并不保证finalize方法会被及时地执行, 而且根本不会保证它们会被执行</li>
<li>finalize方法可能会带来性能问题.因为JVM通常在单独的低优先级线程中完成finalize的执行</li>
<li>对象再生问题: finalize方法中, 可将待回收对象赋值给GC Roots可达的对象引用, 从而达到对象再生的目的</li>
<li>finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法, 但并不影响GC对finalize的行为)</li>
</ul>
<p>流程:<br>
当对象变成(GC Roots)不可达时, GC会判断该对象是否覆盖了finalize方法, 若未覆盖, 则直接将其回收.否则, 若对象未执行过finalize方法, 将其放入F-Queue队列, 由一低优先级线程执行该队列中对象的finalize方法.执行finalize方法完毕后, GC会再次判断该对象是否可达, 若不可达, 则进行回收, 否则, 对象&quot;复活&quot;.<br>
对象可由两种状态, 涉及到两类状态空间, 一是终结状态空间 F = {unfinalized, finalizable, finalized}; 二是可达状态空间 R = {reachable, finalizer-reachable, unreachable}.各状态含义如下:</p>
<ul>
<li>unfinalized: 新建对象会先进入此状态, GC并未准备执行其finalize方法, 因为该对象是可达的</li>
<li>finalizable: 表示GC可对该对象执行finalize方法, GC已检测到该对象不可达.正如前面所述, GC通过F-Queue队列和一专用线程完成finalize的执行</li>
<li>finalized: 表示GC已经对该对象执行过finalize方法</li>
<li>reachable: 表示GC Roots引用可达</li>
<li>finalizer-reachable(f-reachable): 表示不是reachable, 但可通过某个finalizable对象可达</li>
<li>unreachable: 对象不可通过上面两种途径可达</li>
</ul>
<p>状态变迁图:<br>
<img src="finalize_status.jpg" alt><br>
变迁说明:</p>
<ol>
<li>新建对象首先处于[reachable, unfinalized]状态(A)</li>
<li>随着程序的运行, 一些引用关系会消失, 导致状态变迁, 从reachable状态变迁到f-reachable(B, C, D)或unreachable(E, F)状态</li>
<li>若JVM检测到处于unfinalized状态的对象变成f-reachable或unreachable, JVM会将其标记为finalizable状态(G, H).若对象原处于[unreachable, unfinalized]状态, 则同时将其标记为f-reachable(H).</li>
<li>在某个时刻, JVM取出某个finalizable对象, 将其标记为finalized并在某个线程中执行其finalize方法.由于是在活动线程中引用了该对象, 该对象将变迁到(reachable, finalized)状态(K或J).该动作将影响某些其他对象从f-reachable状态重新回到reachable状态(L, M, N)</li>
<li>处于finalizable状态的对象不能同时是unreahable的, 由第4点可知, 将对象finalizable对象标记为finalized时会由某个线程执行该对象的finalize方法, 致使其变成reachable.这也是图中只有八个状态点的原因</li>
<li>程序员手动调用finalize方法并不会影响到上述内部标记的变化, 因此JVM只会至多调用finalize一次, 即使该对象&quot;复活&quot;也是如此.程序员手动调用多少次不影响JVM的行为</li>
<li>若JVM检测到finalized状态的对象变成unreachable, 回收其内存(I)</li>
<li>若对象并未覆盖finalize方法, JVM会进行优化, 直接回收对象(O)</li>
<li>注: System.runFinalizersOnExit()等方法可以使对象即使处于reachable状态, JVM仍对其执行finalize方法</li>
</ol>
<ul>
<li>
<p>wait()</p>
</li>
<li>
<p>notify()</p>
</li>
<li>
<p>notifyAll()</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>optional</title>
    <url>/posts/uncategorized/9dfe9154/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>stream-api</title>
    <url>/posts/uncategorized/c6562866/</url>
    <content><![CDATA[<h1 id="obtain-stream">1.  Obtain Stream</h1>
<p>Streams can be obtained in a number of ways. Some examples include:</p>
<ul>
<li>From a Collection via the stream() and parallelStream() methods;</li>
<li>From an array via Arrays.stream(Object[]);</li>
<li>From static factory methods on the stream classes, such as Stream.of(Object[]), IntStream.range(int, int) or Stream.iterate(Object, UnaryOperator);</li>
<li>The lines of a file can be obtained from BufferedReader.lines();</li>
<li>Streams of file paths can be obtained from methods in Files;</li>
<li>Streams of random numbers can be obtained from Random.ints();</li>
<li>Numerous other stream-bearing methods in the JDK, including BitSet.stream(), Pattern.splitAsStream(java.lang.CharSequence), and JarFile.stream().</li>
</ul>
<h1 id="api">2.  API</h1>
<h2 id="terminal-operation">2.1.  terminal operation</h2>
<ul>
<li>
<p><r> R collect​(Supplier<r> supplier, BiConsumer&lt;R,​? super T&gt; accumulator, BiConsumer&lt;R,​R&gt; combiner) ??<br>
Performs a mutable reduction operation on the elements of this stream.</r></r></p>
</li>
<li>
<p>&lt;R,​A&gt; R collect​(Collector&lt;? super T,​A,​R&gt; collector)<br>
Performs a mutable reduction operation on the elements of this stream using a Collector.</p>
</li>
</ul>
<h3 id="short-circuiting-terminal-operation">2.1.1.  short-circuiting terminal operation</h3>
<ul>
<li>
<p>boolean allMatch​(Predicate&lt;? super T&gt; predicate)<br>
Returns true if either all elements of the stream match the provided predicate or the stream is empty, otherwise false.</p>
</li>
<li>
<p>boolean anyMatch​(Predicate&lt;? super T&gt; predicate)<br>
Returns true if any elements of the stream match the provided predicate, otherwise false.</p>
</li>
</ul>
<h2 id="intermediate-operation">2.2.  intermediate operation</h2>
<p>static <t> Stream<t> concat​(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)<br>
Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.<br>
long count()<br>
Returns the count of elements in this stream.<br>
Stream<t> distinct()<br>
Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.<br>
default Stream<t> dropWhile​(Predicate&lt;? super T&gt; predicate)<br>
Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate.<br>
static <t> Stream<t> empty()<br>
Returns an empty sequential Stream.<br>
Stream<t> filter​(Predicate&lt;? super T&gt; predicate)<br>
Returns a stream consisting of the elements of this stream that match the given predicate.<br>
Optional<t> findAny()<br>
Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty.<br>
Optional<t> findFirst()<br>
Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty.<br>
<r> Stream<r> flatMap​(Function&lt;? super T,​? extends Stream&lt;? extends R&gt;&gt; mapper)<br>
Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.<br>
DoubleStream flatMapToDouble​(Function&lt;? super T,​? extends DoubleStream&gt; mapper)<br>
Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.<br>
IntStream flatMapToInt​(Function&lt;? super T,​? extends IntStream&gt; mapper)<br>
Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.<br>
LongStream flatMapToLong​(Function&lt;? super T,​? extends LongStream&gt; mapper)<br>
Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.<br>
void forEach​(Consumer&lt;? super T&gt; action)<br>
Performs an action for each element of this stream.<br>
void forEachOrdered​(Consumer&lt;? super T&gt; action)<br>
Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order.<br>
static <t> Stream<t> generate​(Supplier&lt;? extends T&gt; s)<br>
Returns an infinite sequential unordered stream where each element is generated by the provided Supplier.<br>
static <t> Stream<t> iterate​(T seed, Predicate&lt;? super T&gt; hasNext, UnaryOperator<t> next)<br>
Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate.<br>
static <t> Stream<t> iterate​(T seed, UnaryOperator<t> f)<br>
Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.<br>
Stream<t> limit​(long maxSize)<br>
Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length.<br>
<r> Stream<r> map​(Function&lt;? super T,​? extends R&gt; mapper)<br>
Returns a stream consisting of the results of applying the given function to the elements of this stream.<br>
DoubleStream mapToDouble​(ToDoubleFunction&lt;? super T&gt; mapper)<br>
Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream.<br>
IntStream mapToInt​(ToIntFunction&lt;? super T&gt; mapper)<br>
Returns an IntStream consisting of the results of applying the given function to the elements of this stream.<br>
LongStream mapToLong​(ToLongFunction&lt;? super T&gt; mapper)<br>
Returns a LongStream consisting of the results of applying the given function to the elements of this stream.<br>
Optional<t> max​(Comparator&lt;? super T&gt; comparator)<br>
Returns the maximum element of this stream according to the provided Comparator.<br>
Optional<t> min​(Comparator&lt;? super T&gt; comparator)<br>
Returns the minimum element of this stream according to the provided Comparator.<br>
boolean noneMatch​(Predicate&lt;? super T&gt; predicate)<br>
Returns whether no elements of this stream match the provided predicate.<br>
static <t> Stream<t> of​(T t)<br>
Returns a sequential Stream containing a single element.<br>
static <t> Stream<t> of​(T… values)<br>
Returns a sequential ordered stream whose elements are the specified values.<br>
static <t> Stream<t> ofNullable​(T t)<br>
Returns a sequential Stream containing a single element, if non-null, otherwise returns an empty Stream.<br>
Stream<t> peek​(Consumer&lt;? super T&gt; action)<br>
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.<br>
Optional<t> reduce​(BinaryOperator<t> accumulator)<br>
Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any.<br>
T reduce​(T identity, BinaryOperator<t> accumulator)<br>
Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value.<br>
<u> U reduce​(U identity, BiFunction&lt;U,​? super T,​U&gt; accumulator, BinaryOperator<u> combiner)<br>
Performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions.<br>
Stream<t> skip​(long n)<br>
Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.<br>
Stream<t> sorted()<br>
Returns a stream consisting of the elements of this stream, sorted according to natural order.<br>
Stream<t> sorted​(Comparator&lt;? super T&gt; comparator)<br>
Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator.<br>
default Stream<t> takeWhile​(Predicate&lt;? super T&gt; predicate)<br>
Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate.<br>
Object[] toArray()<br>
Returns an array containing the elements of this stream.<br>
<a> A[] toArray​(IntFunction&lt;A[]&gt; generator)<br>
Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing.</a></t></t></t></t></u></u></t></t></t></t></t></t></t></t></t></t></t></t></r></r></t></t></t></t></t></t></t></t></t></r></r></t></t></t></t></t></t></t></t></t></p>
<h1 id="collectors">3.  Collectors</h1>
<p>averagingDouble<br>
averagingInt<br>
averagingLong<br>
boxSupplier<br>
castingIdentity<br>
collectingAndThen<br>
Collectors<br>
computeFinalSum<br>
counting<br>
groupingBy<br>
groupingByConcurrent<br>
joining<br>
mapMerger<br>
mapping<br>
maxBy<br>
minBy<br>
partitioningBy<br>
reducing<br>
summarizingDouble<br>
summarizingInt<br>
summarizingLong<br>
summingDouble<br>
summingInt<br>
summingLong<br>
sumWithCompensation<br>
throwingMerger<br>
toCollection<br>
toConcurrentMap<br>
toList<br>
toMap<br>
toSet</p>
<h1 id="resouce">4.  Resouce</h1>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/package-summary.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/package-summary.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Serializable</title>
    <url>/posts/java/e35808af/</url>
    <content><![CDATA[<ul>
<li>transient<br>
java语言的关键字, 变量修饰符, 如果用transient声明一个实例变量, 当对象存储时, 它的值不需要维持.换句话来说就是, 用transient关键字标记的成员变量不参与序列化过程.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>string</title>
    <url>/posts/java/9ebeb2a9/</url>
    <content><![CDATA[<h1 id="abc">1.  abc</h1>
<ul>
<li>不可变</li>
<li>实现了Comparable接口, 可比较</li>
<li>不可变</li>
<li>实现了Comparable接口, 可比较</li>
<li>不可变</li>
<li>实现了Comparable接口, 可比较</li>
<li>不可变</li>
<li>实现了Comparable接口, 可比较</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Stream API</title>
    <url>/posts/java/f0e9be1c/</url>
    <content><![CDATA[<p>Stream API 是对数据源的元素支持聚合操作</p>
<h1 id="生成-stream-source">1.  生成 Stream Source</h1>
<ul>
<li>
<p>Collection.steam() 为集合创建串行流</p>
</li>
<li>
<p>Collection.parallelStream() 为集合创建并行流, 集合元素越多, 使用的资源越多.</p>
</li>
<li>
<p>Arrays.stream(T array) or Stream.of()</p>
</li>
<li>
<p>java.io.BufferedReader.lines()</p>
</li>
<li>
<p>java.util.stream.IntStream.range()</p>
</li>
<li>
<p>java.nio.file.Files.walk()</p>
</li>
<li>
<p>java.util.Spliterator</p>
</li>
<li>
<p>Random.ints()</p>
</li>
<li>
<p>BitSet.stream()</p>
</li>
<li>
<p>Pattern.splitAsStream(java.lang.CharSequence)</p>
</li>
<li>
<p>JarFile.stream()</p>
</li>
</ul>
<h1 id="stream-操作">2.  stream 操作</h1>
<p>流的操作分 3 种:</p>
<ul>
<li>
<p>Intermediate<br>
一个流可以后面跟随零个或多个 intermediate 操作.<br>
其目的主要是打开流, 做出某种程度的数据映射/过滤, 然后返回一个新的流, 交给下一个操作使用.<br>
这类操作都是惰性化的(lazy), 就是说, 仅仅调用到这类方法, 并没有真正开始流的遍历.</p>
<ul>
<li>map (mapToInt, flatMap 等)
<ul>
<li>mapToInt<br>
转换成一个 int 数组后, 可使用 <code>summaryStatistics()</code> 返回 <code>IntSummaryStatistics</code> 对象, 进行统计操作, 如 <code>getMax</code>, <code>getMin</code>, <code>getSum</code>, <code>getAverage</code></li>
</ul>
</li>
<li>flatMap</li>
<li>filter</li>
<li>distinct</li>
<li>sorted</li>
<li>peek 对每个元素执行操作并返回一个新的 Stream</li>
<li>limit</li>
<li>skip</li>
<li>parallel</li>
<li>sequential</li>
<li>unordered</li>
</ul>
</li>
<li>
<p>Terminal<br>
一个流只能有一个 terminal 操作, 当这个操作执行后, 流就被使用 <em>光</em> 了, 无法再被操作.<br>
所以这必定是流的最后一个操作.<br>
Terminal 操作的执行, 才会真正开始流的遍历, 并且会生成一个结果, 或者一个 side effect.</p>
<ul>
<li>
<p>forEach 接收一个 Lambda 表达式, 然后在 Stream 的每一个元素上执行该表达式.</p>
</li>
<li>
<p>forEachOrdered</p>
</li>
<li>
<p>toArray</p>
</li>
<li>
<p>reduce</p>
</li>
<li>
<p>collect</p>
</li>
<li>
<p>min</p>
</li>
<li>
<p>max</p>
</li>
<li>
<p>count</p>
</li>
<li>
<p>anyMatch</p>
</li>
<li>
<p>allMatch</p>
</li>
<li>
<p>noneMatch</p>
</li>
<li>
<p>findFirst</p>
</li>
<li>
<p>findAny</p>
</li>
<li>
<p>iterator</p>
</li>
</ul>
</li>
<li>
<p>short-circuiting</p>
<ul>
<li>
<p>对于一个 intermediate 操作, 如果它接受的是一个无限大(infinite/unbounded)的 Stream, 但返回一个有限的新 Stream.</p>
</li>
<li>
<p>对于一个 terminal 操作, 如果它接受的是一个无限大的 Stream, 但能在有限的时间计算出结果.</p>
</li>
<li>
<p>anyMatch</p>
</li>
<li>
<p>allMatch</p>
</li>
<li>
<p>noneMatch</p>
</li>
<li>
<p>findFirst</p>
</li>
<li>
<p>findAny</p>
</li>
<li>
<p>limit</p>
</li>
</ul>
</li>
</ul>
<h1 id="自己生成流">3.  自己生成流</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Random seed &#x3D; new Random();</span><br><span class="line">Supplier&lt;Integer&gt; random &#x3D; seed::nextInt;</span><br><span class="line">Stream.generate(random).limit(10).forEach(System.out::println);</span><br><span class="line">&#x2F;&#x2F;Another way</span><br><span class="line">IntStream.generate(() -&gt; (int) (System.nanoTime() % 100)).</span><br><span class="line">limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stream.iterate(0, n -&gt; n + 3).limit(10). forEach(x -&gt; System.out.print(x + &quot; &quot;));</span><br></pre></td></tr></table></figure>
<p>实现了很多归约操作,如 <code>Collectors.toList()</code>, <code>Collectors.joining(&quot;, &quot;)</code></p>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>java 8</tag>
      </tags>
  </entry>
  <entry>
    <title>thread-pool</title>
    <url>/posts/java/a83206a7/</url>
    <content><![CDATA[<h3 id="threadpoolexecutor">0.0.1.  ThreadPoolExecutor</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure>
<ul>
<li>corePoolSize: 核心线程数, 如果运行的线程少于corePoolSize, 则创建新线程来执行新任务, 即使线程池中的其他线程是空闲的</li>
<li>maximumPoolSize:最大线程数, 可允许创建的线程数, corePoolSize和maximumPoolSize设置的边界自动调整池大小:</li>
<li>corePoolSize &lt;运行的线程数&lt; maximumPoolSize:仅当队列满时才创建新线程</li>
<li>corePoolSize=运行的线程数= maximumPoolSize: 创建固定大小的线程池</li>
<li>keepAliveTime:如果线程数多于corePoolSize, 则这些多余的线程的空闲时间超过keepAliveTime时将被终止</li>
<li>unit:keepAliveTime参数的时间单位</li>
<li>workQueue:保存任务的阻塞队列, 与线程池的大小有关:</li>
<li>threadFactory:使用ThreadFactory创建新线程, 默认使用defaultThreadFactory创建线程</li>
<li>handle:定义处理被拒绝任务的策略, 默认使用ThreadPoolExecutor.AbortPolicy, 任务被拒绝时将抛出RejectExecutorException</li>
</ul>
<h3 id="completionservice">0.0.2.  CompletionService</h3>
<h3 id="默认线程池的分类">0.0.3.  默认线程池的分类</h3>
<ul>
<li>newSingleThreadExecutor</li>
<li>newCachedThreadPool</li>
<li>newFixedThreadPool</li>
<li>newScheduledThreadPool</li>
<li>newSingleThreadScheduledExecutor</li>
</ul>
<h3 id="线程池的状态">0.0.4.  线程池的状态</h3>
<ol>
<li>RUNNING</li>
<li>SHUTDOWN</li>
<li>STOP</li>
<li>TIDYING</li>
<li>TERMINATED</li>
</ol>
<h3 id="添加任务的过程">0.0.5.  添加任务的过程</h3>
<ol>
<li>如果此时线程池中的数量小于corePoolSize, 即使线程池中的线程都处于空闲状态, 也要创建新的线程来处理被添加的任务.</li>
<li>如果此时线程池中的数量等于corePoolSize, 但是缓冲队列 workQueue未满, 那么任务被放入缓冲队列.</li>
<li>如果此时线程池中的数量大于corePoolSize, 缓冲队列workQueue满, 并且线程池中的数量小于maximumPoolSize, 建新的线程来处理被添加的任务.</li>
<li>如果此时线程池中的数量大于corePoolSize, 缓冲队列workQueue满, 并且线程池中的数量等于maximumPoolSize, 那么通过 handler所指定的策略来处理此任务.</li>
</ol>
<h3 id="拒绝策略">0.0.6.  拒绝策略</h3>
<ol>
<li>AbortPolicy<br>
当任务添加到线程池中被拒绝时, 它将抛出 RejectedExecutionException 异常.</li>
<li>CallerRunsPolicy<br>
当任务添加到线程池中被拒绝时, 会在线程池当前正在运行的Thread线程池中处理被拒绝的任务.自动重试提交任务, 直到成功.</li>
<li>DiscardOldestPolicy<br>
当任务添加到线程池中被拒绝时, 线程池会放弃等待队列中最旧的未处理任务, 然后将被拒绝的任务添加到等待队列中.</li>
<li>DiscardPolicy<br>
当任务添加到线程池中被拒绝时, 线程池将丢弃被拒绝的任务.</li>
</ol>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://www.cnblogs.com/yw0219/p/8810956.html" target="_blank" rel="noopener">https://www.cnblogs.com/yw0219/p/8810956.html</a></li>
</ul>
<a href="https://www.cnblogs.com/feiyun126/p/7686302.html" title target>Queue</a>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>threadlocal-faq</title>
    <url>/posts/java/14361943/</url>
    <content><![CDATA[<h1 id="用途">1.  用途</h1>
<ol>
<li>
<p>保存线程上下文, 可以再任意需要的地方获取<br>
如系统日志可以在任何地方获取到请求ID</p>
</li>
<li>
<p>线程安全的, 避免某些情况需要考虑线程安全必须同步带来的性能损失<br>
如 SimpleDateFormat 本身是线程不安全的, 如果要用这个类, 可以这样声明:</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="实现原理">2.  实现原理</h1>
<p>ThreadLocal 将值维护在 ThreadLocalMap 中, 其中 key 为 ThreadLocal 对象.<br>
每一个线程都有自己独立的 ThreadLocalMap; 在同一线程中, 多个 ThreadLocal 公用一个 ThreadLocalMap.</p>
<h1 id="threadlocal-的回收机制">3.  ThreadLocal 的回收机制</h1>
<p>ThreadLocalMap 中的 Entry 是 WeakReference,<br>
WeakReference 的特性是: 当系统进行垃圾回收时, 无论内存是否充足, 该对象仅仅被弱引用关联, 那么就会被回收.<br>
这是为了防止 ThreadLocal 一致没有回收而导致的内存泄漏风险.</p>
<p>由于ThreadLocal 的回收机制, 通常 ThreadLocal 一般都声明成静态属性, 然后在请求处理完成之后, 主动 remove 掉.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title>unsafe</title>
    <url>/posts/uncategorized/f2cf036e/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ConcurrentHashMap</title>
    <url>/posts/collection/cdf574e9/</url>
    <content><![CDATA[<p>ConcurrentHashMap 不允许插入 key 为 null 的键</p>
<p>ConcurrentHashMap 比 HashTable 性能更好</p>
<p>HashTable 采用方法级同步, 同一时间只能读或者写, 由于锁的粒度比较粗, 并发情况下, 锁的竞争比较激烈, 性能较差;<br>
jdk 1.8 中 ConcurrentHashMap 采用 CAS + Synchronized, 锁的力度比较细. 其中 Synchronized 作用在链表/红黑树的头结点上.</p>
<p>数据结构:</p>
<ul>
<li>jdk 1.7: Segment+HashEntry;</li>
<li>jdk 1.8: 数组+链表/红黑树, 通过 CAS + synchronized 保证并发一致性</li>
</ul>
<p>1.8 相较于 1.7 实现更清晰, 锁的粒度更低, 性能更高.</p>
<h1 id="实现原理">1.  实现原理</h1>
<p>特殊的 hash 值:</p>
<p>MOVED: -1, 表示正在迁移的节点<br>
TREEBIN: -2, 红黑树节点<br>
RESERVED: -3, hash for transient reservations<br>
正数: 表示链表节点</p>
<p>sizeCtl:</p>
<p>-1: 表示正在初始化<br>
-N: 表示有 n -1 个线程正在进行扩容<br>
0: 表示还没有初始化<br>
正数: 表示下次要扩容的大小</p>
<p>类型:</p>
<p>Node: 其他节点的父类, 对 value 和 next 都增加了 volatile, 保证节点在修改时的可见性.<br>
ForwardingNode: 其 hash 值为 -1, 当扩容时替换 bin, 标识节点扩容去了, 其中的属性 nextTable 指向正在扩容的 table.<br>
TreeBin: 其 hash 值为 -2, 本身并不负责 key-value 的包装, 而是包装了整个红黑树, 所有对红黑树的操作都是从这个节点触发.</p>
<h2 id="初始化-inittable">1.1.  初始化 initTable</h2>
<p>对 sizeCtl 做 cas, 如果成功则做扩容<br>
如果正在扩容则等待<br>
如果已经完成扩容则返回</p>
<h2 id="put-方法">1.2.  put 方法</h2>
<p>循环以下操作, 知道 put 完成</p>
<ol>
<li>如果发现没有初始化, 则初始化</li>
<li>如果发现没有首节点, 则 cas 创建首节点</li>
<li>如果发现 bin 正在进行扩容, 则帮助扩容</li>
<li>加同步锁, 对 bin 中内容进行 put 操作</li>
</ol>
<h1 id="get-方法">2.  get 方法</h1>
<p>get 方法的实现没有加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会发现源码中没有一处加了锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode()); <span class="comment">//计算hash</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;<span class="comment">//读取首节点的Node元素</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123; <span class="comment">//如果该节点就是首节点就返回</span></span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hash值为负值表示正在扩容, 这个时候查的是ForwardingNode的find方法来定位到nextTable来</span></span><br><span class="line">        <span class="comment">//eh=-1, 说明该节点是一个ForwardingNode, 正在迁移, 此时调用ForwardingNode的find方法去nextTable里找. </span></span><br><span class="line">        <span class="comment">//eh=-2, 说明该节点是一个TreeBin, 此时调用TreeBin的find方法遍历红黑树, 由于红黑树有可能正在旋转变色, 所以find里会有读写锁. </span></span><br><span class="line">        <span class="comment">//eh&gt;=0, 说明该节点下挂的是一个链表, 直接遍历该链表即可. </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;<span class="comment">//既不是首节点也不是ForwardingNode, 那就往下遍历</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="什么时候加锁">2.1.  什么时候加锁 ?</h2>
<p>对 bin 进行加锁, 也就是 bin 的首节点</p>
<p>当对 bin 中内容做修改时需要加锁:<br>
putVal<br>
replaceNode<br>
clear<br>
transfer<br>
treeifyBin</p>
<p>当对 map 做计算的时候需要加锁:<br>
computeIfAbsent<br>
computeIfPresent<br>
compute<br>
merge</p>
<h1 id="常见问题">3.  常见问题</h1>
<h2 id="concurrenthashmap-死循环">3.1.  ConcurrentHashMap 死循环</h2>
<p>在使用 computeIfAbsent() 时, 会新建 ReservationNode, 之后在 tranfer() 方法中, 由于没有处理 ReservationNode, 导致无法跳出循环.</p>
<p>如: jasypt-spring-boot-starter 2.1.0 服务起不来的 bug:<br>
DefaultLazyEncryptor 中的 getProperty() 会用到 ConcurrentHashMap#computeIfAbsent 导致死循环后服务起不来.</p>
<p>中间关联的是使用了 org.springframework.cache.concurrent.ConcurrentMapCache#get() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Object key, Callable&lt;T&gt; valueLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) fromStoreValue(<span class="keyword">this</span>.store.computeIfAbsent(key, k -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> toStoreValue(valueLoader.call());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValueRetrievalException(key, valueLoader, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="resource">4.  Resource</h1>
<ul>
<li><a href="https://www.jianshu.com/p/d10256f0ebea" target="_blank" rel="noopener">https://www.jianshu.com/p/d10256f0ebea</a></li>
</ul>
]]></content>
      <categories>
        <category>collection</category>
      </categories>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/posts/collection/3d614825/</url>
    <content><![CDATA[<h1 id="hashmap-的实现原理">1.  HashMap 的实现原理</h1>
<p>底层是 bin 数组 和单向链表实现的.<br>
当元素格式大于 <code>容量 * 负载因子</code> 时进行扩容, 扩容为 2 倍.<br>
当 bin 中增加元素, 数量大于 8 个时, 且总容量大于等于 64 时, 将链表转换成红黑树; 当 bin 中减少元素, 数量小于 6 个时, 将红黑树转换成类别.</p>
<h1 id="hash-算法">2.  hash 算法</h1>
<p>将 key 的 hashCode 分成高 16 位和低 16位, 高位与低位异或得出的值就是 hash 值.</p>
<p>这个算法的好处:</p>
<ol>
<li>算法处于从速度, 效果和质量上的综合考虑</li>
<li>高位和低位都参与计算, 并使用异或运算, 任何一位变动都会影响 hash 值, 减少 hash 碰撞的可能.</li>
</ol>
<h1 id="如果出现-hash-碰撞会有什么影响">3.  如果出现 hash 碰撞会有什么影响?</h1>
<p>hash 碰撞即 2 个元素的 hash 值相同.<br>
会影响 treeify() 和 putTreeVal() 两个方法.<br>
红黑树中元素的结构需要根据 hash 来排列.<br>
如果 key 实现了 Comparable 方法, 则根据 该方法比较顺序; 如果还是相同, 则使用 System.identityHashCode() 比较 (见 tieBreakOrder() 方法).</p>
<h1 id="hashmap-vs-linkedhashmap-vs-treemap">4.  HashMap vs LinkedHashMap vs TreeMap</h1>
<p>LinkedHashMap 保存了插入顺序<br>
TreeMap 实现了 SortMap 接口, 可排序</p>
<h1 id="hashmap-vs-hashtable">5.  HashMap vs HashTable</h1>
<ol>
<li>HashMap 线程不安全; HashTable 线程安全, 但性能慢</li>
<li>HashMap 允许 key 为 null, 但至多一个, 允许 value 为 null; HashTable 的 key 和 value 都不允许为 null</li>
</ol>
<h1 id="fast-fail-机制原理">6.  fast-fail 机制原理</h1>
<p>HashMap 中有一个私有属性 modCount, 在 map 添加/移除元素时加 1, 用于记录 map 的修改次数<br>
在调用 Iterator, Spliterator 遍历, 移除, 拆分元素时, 通过判断 modCount 是否有变化, 如果变化则说明有并发修改, 抛出 ConcurrentModificationException 异常.</p>
<h1 id="jdk-7-中-高并发下-hashmap-会产生死循环">7.  JDK 7 中, 高并发下 HashMap 会产生死循环</h1>
<p>当 HashMap 需要扩容时, 会调用 rehash() 方法, 该方法在构建新的链表时, 会将顺序倒置. 在高并发下, 这个方法会倒置链表回路, 从而在 get()<br>
方法调用时产生死循环.</p>
<p>这个问题在 JDK 8 中修复.</p>
<h1 id="resource">8.  Resource</h1>
<ul>
<li><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">https://www.jianshu.com/p/75adf47958a7</a></li>
</ul>
]]></content>
      <categories>
        <category>collection</category>
      </categories>
  </entry>
  <entry>
    <title>AQS</title>
    <url>/posts/uncategorized/dfdb52be/</url>
    <content><![CDATA[<p>protected boolean tryAcquire(int arg) {<br>
protected boolean tryRelease(int arg) {<br>
protected int tryAcquireShared(int arg) {<br>
protected boolean tryReleaseShared(int arg) {<br>
protected boolean isHeldExclusively() {</p>
]]></content>
  </entry>
  <entry>
    <title>CyclicBarrier</title>
    <url>/posts/concurrency/a90698a8/</url>
    <content><![CDATA[<p>循环栅栏, 循环执行: 在凑满指定计数后执行指定的方法.</p>
<p>特点:</p>
<ul>
<li>CyclicBarrier 在计数为 0 之后会自动重置, 所以可以复用.</li>
<li>工作线程完成任务之后, 会阻塞等待其他线程完成.</li>
</ul>
<h1 id="api">1.  API</h1>
<ul>
<li>
<p>CyclicBarrier(parties, barrierAction)<br>
必须设置线程数量, 可以设置等待完成后的统一任务</p>
</li>
<li>
<p>await<br>
当前线程等待其他线程执行到 await 位置, 凑满足够的线程之后, 如果有统一任务, 则先执行一次统一任务, 然后唤醒所有等待线程继续向下执行, 并重置计数.</p>
<p>如果在等待过程中线程被中断, 或者线程等待超时, 则会破坏栅栏. 此时已经进入等待的线程将被唤醒继续执行, 而之后进入 await 方法的线程发现栅栏被破坏, 会直接抛出异常.</p>
</li>
<li>
<p>reset<br>
栅栏被破坏后, 可以通过该方法手工重置栅栏.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>collection</title>
    <url>/posts/collection/fc4d6532/</url>
    <content><![CDATA[<p>常用线程安全的类型对比</p>
<table>
<thead>
<tr>
<th>线程安全</th>
<th>非线程安全</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vector</td>
<td>ArrayList, LinkedList</td>
</tr>
<tr>
<td>HashTable</td>
<td>HashMap, LinkedHashMap, HashSet, TreeMap, TreeSet</td>
</tr>
<tr>
<td>StringBuffer</td>
<td>StringBuilder</td>
</tr>
</tbody>
</table>
<h2 id="hashmap-vs-hashtable">0.1.  HashMap vs HashTable</h2>
<ul>
<li>HashMap 线程不安全, 但有 fast-fail 机制; HashTable 线程安全</li>
<li>HashMap 允许 key 为 null;  HashTable 则不允许</li>
</ul>
]]></content>
      <categories>
        <category>collection</category>
      </categories>
  </entry>
  <entry>
    <title>CompletableFuture</title>
    <url>/posts/concurrency/227b7dd1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>CountDownLatch</title>
    <url>/posts/concurrency/55559e81/</url>
    <content><![CDATA[<p>倒计数器, 在完成倒计数后, 等待在倒计数器上的线程才能继续执行.</p>
<p>特点:</p>
<ul>
<li>CountDownLatch 在计数为 0 之后无法重置, 所以不可复用.</li>
<li>工作线程完成任务之后, 不会阻塞等待其他线程完成.</li>
</ul>
<h1 id="api">1.  API</h1>
<ul>
<li>CountDownLatch(count)<br>
指定计数</li>
<li>countDown<br>
在任务线程中倒数, 表示该任务已完成</li>
<li>await<br>
在主线程中等待所有任务完成</li>
</ul>
<h1 id="使用场景">2.  使用场景</h1>
<ol>
<li>将异步代码变成同步代码</li>
</ol>
<p>学习自 redisson 的源码: org.redisson.command.CommandAsyncService#await</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(RFuture&lt;?&gt; future, <span class="keyword">long</span> timeout, TimeUnit timeoutUnit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    CountDownLatch l = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">        l.countDown();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> l.await(timeout, timeoutUnit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>ReentrantLock</title>
    <url>/posts/concurrency/6e505175/</url>
    <content><![CDATA[<p>重入锁, 即同一个线程可以对 ReentrantLock 多次加锁, 但与之对应的, 必须执行相同次数的解锁, 否则其他线程无法获取到锁资源.</p>
<h1 id="api">1.  API</h1>
<ul>
<li>ReentrantLock(boolean fair)<br>
初始化时, 可以设置是否公平竞争.</li>
<li>lock<br>
可重入锁</li>
<li>unlock</li>
<li>lockInterruptibly<br>
响应中断, 即在请求锁的过程中, 取消对锁的请求. 有助于处理死锁问题.</li>
<li>tryLock<br>
尝试请求锁, 可以设置最大等待时长.</li>
<li>newCondition<br>
新建锁的条件. Condition 有 await 和 signal 等方法.<br>
await 方法会使当前线程等待, 同时释放当前锁, 在其他线程调用 signal 或 signalAll 方法后重新获得锁并继续执行. 或者当前线程被中断时, 也能跳出等待.<br>
awaitUninterruptibly 方法类似于 await 方法, 但它不会在等待过程中响应中断.</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>ForkJoinPool</title>
    <url>/posts/concurrency/a990506e/</url>
    <content><![CDATA[<p>通过<code>分而治之</code>的思想</p>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>LockSupport</title>
    <url>/posts/concurrency/ad8369f2/</url>
    <content><![CDATA[<p>LockSupport 是一个线程阻塞工具, 可以在线程内任意位置让线程阻塞.</p>
<p>和Thread.suspend()相比, 它弥补了由于resume()在前发生, 导致线程无法继续执行的情况.<br>
和Object.wait()相比, 它不需要先获取某个对象的锁, 也不会抛出 InterruptedException异常, 只会默默返回.</p>
<h1 id="api">1.  API</h1>
<ul>
<li>park &amp; unpark<br>
它为每一个线程准备了一个许可, 如果许可可用, 那么 park()函数会立即返回, 并且消费这个许可 (也就是将许可变为不可用) , 如果许可不可用, 就会阻塞. unpark() 则使得一个许可变为可用</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>ReentrantReadWriteLock</title>
    <url>/posts/concurrency/bef5ddf0/</url>
    <content><![CDATA[<p>读写锁提供读写分离控制能力. 读操作越多, 越能发挥读写锁的功效.</p>
<p>读-读不互斥: 由于读取操作不会影响数据完整性, 所以读读之间不阻塞<br>
读-写互斥: 读阻塞写, 写也会阻塞读<br>
写-写互斥: 写写阻塞.</p>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>Semaphore</title>
    <url>/posts/concurrency/780e0b85/</url>
    <content><![CDATA[<p>信号量, 允许多个线程访问同一资源.</p>
<h1 id="api">1.  API</h1>
<ul>
<li>Semaphore(int permits, boolean fair)<br>
构造函数可以指定准入数和是否公平竞争</li>
<li>acquire</li>
<li>acquireUninterruptibly</li>
<li>tryAcquire</li>
<li>release</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/posts/concurrency/151f44ae/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>Thread</title>
    <url>/posts/concurrency/368c49b5/</url>
    <content><![CDATA[<h1 id="线程状态">1.  线程状态</h1>
<ul>
<li>NEW</li>
<li>RUNABLE</li>
<li>BLOCKED</li>
<li>WAITING</li>
<li>TIMED_WAITING</li>
<li>TERMINATED</li>
</ul>
<img src="/posts/concurrency/368c49b5/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" class>
<h2 id="waiting-vs-blocked">1.1.  WAITING vs BLOCKED</h2>
<p>WAITING 状态是线程已经分配到 CPU 时间, 但是由于需要等待事件发生, 所以主动释放 CPU, 直到事件完成后调用被唤醒;<br>
BLOCKED 状态是线程想到获得 CPU 时间, 但是没有获得锁, 所以轮不到, 进入 BLOCKED 状态;</p>
<h1 id="api">2.  API</h1>
<ul>
<li>
<p>start<br>
开启新线程, 等待 CPU 调用.</p>
</li>
<li>
<p>run<br>
不要使用 run 开启新线程, 直接调用 Thread.run() 只会在当前线程中, 串行执行 run 的代码.</p>
</li>
<li>
<p>stop<br>
立即终止线程, 已废弃.<br>
暴力终止, 假如线程工作到一半被终止, 可能会引起数据不一致等问题.</p>
</li>
<li>
<p>sleep<br>
线程进入 TIME_WAITING 状态.</p>
</li>
<li>
<p>interrupt<br>
中断线程.<br>
线程不会立即让线程退出, 而是给线程发送一个通知, 告知目标线程, 有人希望你退出; 线程收到通知后, 自行决定如何处理.</p>
</li>
<li>
<p>wait &amp; notify<br>
线程等待和唤醒.<br>
线程中, 如果调用了 obj.wait() 方法, 那么线程就会停止继续执行, 进入 WAIT 状态, 直到有其他线程调用 obj.notify() 或 obj.notifyAll() 方法唤醒.</p>
<p>wait 和 notify 方法都必须包含在对应的 synchronized 块中, 都必须先获得目标对象的监视器.</p>
</li>
<li>
<p>suspend &amp; resume<br>
线程挂起和继续执行, 已废弃.<br>
线程调用 suspend 导致线程暂停的同时, 并不会释放任何锁资源. 其他线程想要访问被它占用的锁资源时, 都会受到影响, 无法正常继续运行, 直到 对应线程上调用 resume.</p>
<p>resume 方法必须在 suspend 方法后面执行, 如果意外的在 suspend 前面执行了, 可能会导致被挂起的线程继续执行, 而导致整个系统无法正常工作.</p>
</li>
<li>
<p>join &amp; yield<br>
join 会阻塞当前线程, 直到目标线程执行完毕. 如果给出最大等待时间, 在超出时间范围后继续执行.</p>
<p>join 本质上是让调用线程 wait 在当前线程对象实例上. 在线程执行完成后, 被等待的线程在退出前调用 notifyAll 通知所有等待线程继续执行. 因此, 在开发中, 不要在 Thread 对象上使用类似 wait 或者 notify 等方法, 可能会影响系统 API 工作.</p>
<p>yield 会让出 CPU, 表示当前线程不执行了. 如果觉得一个线程不那么重要, 或者优先级比较低, 而且害怕它占用太多 CPU 资源, 那么可以在适当的适合调用 yield, 给其他重要线程更多的工作机会.</p>
</li>
</ul>
<h1 id="守护线程-daemon">3.  守护线程 Daemon</h1>
<p>守护线程表示该线程提供系统性的服务, 比如垃圾回收线程, JIT 线程.<br>
与之对应的是用户线程, 可以认为是系统的工作线程, 它会完成这个常旭应该完成的业务工作.<br>
当用户线程全部结束时, 意味着这个程序实际上无事可做了, 守护线程要守护的对象已经没有了, 整个程序可以结束了.</p>
<h1 id="线程同步方式">4.  线程同步方式</h1>
<ul>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>

</li>
<li>自旋 CAS, 参考 ConcurrentHashMap 中的 get() 方法</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>ThreadPoolExecutor</title>
    <url>/posts/concurrency/9545bc72/</url>
    <content><![CDATA[<h1 id="参数">1.  参数</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                TimeUnit unit,</span><br><span class="line">                BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                ThreadFactory threadFactory,</span><br><span class="line">                RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure>
<ul>
<li>corePoolSize<br>
核心线程数, 如果运行的线程小于 corePoolSize, 且没有空闲线程, 则创建新线程来执行任务.</li>
<li>maximumPoolSize<br>
可允许创建的线程数.<br>
当队列满时, 如果 corePoolSize 小于 maximumPoolSize, 则开始创建小于 maximumPoolSize 的线程帮助处理任务.</li>
<li>keepAliveTime &amp; unit<br>
当线程池中的线程大于 corePoolSize时, 多余的空闲线程的最大存活时长和单位.</li>
<li>workQueue<br>
保存任务的阻塞队列.</li>
<li>threadFactory<br>
使用 ThreadFactory 创建新线程.</li>
<li>handler<br>
拒绝任务的策略:
<ul>
<li>AbortPolicy: 抛出异常, 默认策略.</li>
<li>CallerRunsPolicy: 在调用线程执行.</li>
<li>DiscardPolicy: 抛弃新提交的任务.</li>
<li>DiscardOldestPolicy: 抛弃最老的任务.</li>
</ul>
</li>
</ul>
<h1 id="api">2.  API</h1>
<ul>
<li>submit &amp; execute<br>
submit 和 execute 都用于提交任务, 区别在于 execute 能打印出任务在执行过程中的异常.</li>
</ul>
<h1 id="executor">3.  Executor</h1>
<p>在 Executors 中包含了常用的 ThreadPoolExecutor 创建方式.</p>
<ul>
<li>newFixedThreadPool(int nThreads)<br>
返回一个固定线程数的线程池.<br>
如果没有可用核心线程, 则放入队列中, 等待核心线程可用时处理.<br>
使用 LinkedBlockingQueue 队列.</li>
<li>newCachedThreadPool()<br>
返回根据任务情况自动调整线程数的线程池.<br>
如果有空闲线程, 则优先复用空闲线程; 如果没有, 则创建新先处理.<br>
使用 SynchronousQueue 队列.</li>
<li>newSingleThreadExecutor()<br>
返回固定只有一个线程的线程池.<br>
使用 LinkedBlockingQueue 队列.</li>
<li>newScheduledThreadPool()<br>
返回计划任务的自动调整线程数的线程池.<br>
使用 DelayedWorkQueue 队列.</li>
<li>newSingleThreadScheduledExecutor()<br>
返回计划任务的单个线程的线程池.<br>
使用 DelayedWorkQueue 队列.</li>
</ul>

<h2 id="scheduledexecutorservice">3.1.  ScheduledExecutorService</h2>
<p>ScheduledExecutorService 是 newScheduledThreadPool 或 newSingleThreadScheduledExecutor 返回的对象.<br>
它的 API:</p>
<ul>
<li>schedule<br>
会在给定时间堆任务进行一次调度.</li>
<li>scheduleAtFixedRate<br>
会以上一个任务的开始时间为起点, 周期性的调度, 调度频率是一致的.</li>
<li>scheduleWithFixedDelay<br>
会以上一个任务的结束时间为起点, 周期性的调度</li>
</ul>
<h2 id="blockingqueue-阻塞队列">3.2.  BlockingQueue 阻塞队列</h2>
<ul>
<li>直接提交队列<br>
该功能由 SynchronousQueue 对象提供. SynchronousQueue 没有容量, 每一个插入操作都要等待一个相应的删除操作, 反之, 每一个删除操作都要等待一个相应的插入操作.<br>
如果使用 SynchronousQueue, 提交的任务不会被真实的保存, 而总是将新任务提交给线程执行, 如果没有空闲线程, 则创建新的线程, 如果线程数量达到上限, 则执行拒绝策略.</li>
<li>有界队列<br>
有界的任务队列可以使用 ArrayBlockingQueue 实现.<br>
当使用有界的任务队列时, 若有新的任务需要执行, 如果线程池的实际线程数小于 corePoolSize, 则会优先创建新的线程; 若大于 corePoolSize, 则会将新任务加入等待队列. 若等待队列已满, 无法加入, 则在总线程数不大于 maximumPoolSize 的前提下, 创建新的进程执行任务; 若大于maximumPoolSize, 则执行拒绝策略. 可见, 有界队列仅当在任务队列装满时, 才可能将线程数提升到 corePoolSize 以上, 换言之, 除非系统非常繁忙, 否则要确保核心线程数维持在 corePoolSize.</li>
<li>无界队列<br>
有界的任务队列可以使用 LinkedBlockingQueue 实现.<br>
与有界队列相比, 除非系统资源耗尽, 否则无界的任务队列不存在任务入队失败的情况. 当有新的任务到来, 系统的线程数小于 corePoolSize时, 线程池会生成新的线程执行任务, 但当系统的线程数达到corePoolSize 时, 线程就不会继续增加了. 若后续任由新的任务加入, 而又没有空闲的线程资源, 则任务直接进入队列等待. 若任务创建和处理的速度差异很大, 无界队列会保持快速增长, 直到耗尽系统内存.</li>
<li>优先任务队列<br>
优先任务队列是带有执行优先级的任务队列. 它通过PriorityBlockingQueue 类实现, 可以控制任务的执行先后顺序. 他是一个特殊的无界队列. 无论是有界队列 ArrayBlockingQueue 类, 还是未指定大小的无界队列 LinkedBlockingQueue 类都是按照先进先出算法处理任务的. 而 PriorityBlockingQueue 类则可以根据任务自身的优先级顺序先后执行, 在确保系统性能的同时, 也能有很好的质量保证 (总是确保高优先级的任务先执行) .</li>
</ul>
<h2 id="自定义线程池线程数量设计">3.3.  自定义线程池线程数量设计</h2>
<p>假设:<br>
Ncpu = CPU 的数量<br>
Ucpu = CPU 的使用率<br>
W/C = 等待时间与计算时间的比率 = 阻塞系数</p>
<p>为了保证达到期望的使用率, 最优的线程池大小为:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>s</mi><mo>=</mo><mi>N</mi><mi>c</mi><mi>p</mi><mi>u</mi><mo>×</mo><mi>U</mi><mi>c</mi><mi>p</mi><mi>u</mi><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>W</mi><mi mathvariant="normal">/</mi><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Nthreads = Ncpu \times Ucpu \times (1 + W/C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></p>
<p>一般地, CPU 密集型的应用, 为了防止 CPU 上下文切换而增加额外的开销, 线程数量大致为:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>s</mi><mo>=</mo><mi>N</mi><mi>c</mi><mi>p</mi><mi>u</mi><mo>±</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">Nthreads = Ncpu \pm 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>而, IO 密集型的应用, 为了充分利用等待时间, 线程数量大致为:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>s</mi><mo>=</mo><mi>N</mi><mi>c</mi><mi>p</mi><mi>u</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>W</mi><mi mathvariant="normal">/</mi><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Nthreads = Ncpu / (1 - W/C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></p>
<p>而阻塞系数范围在 0.8 ~ 0.9 之间.</p>
<p>假设是一台 4 核 CPU 的服务器, CPU 密集型服务, 线程池的线程数约 3 ~ 5; IO 密集型的服务, 线程池的线程数约 20 ~ 40.</p>
<h1 id="future">4.  Future</h1>
<p>通过 ThreadPoolExecutor.submit(Callable task) 方法,提交任务给线程池, 将返回 Future 对象, 能够异步获取处理结果.</p>
<p>submit 方法会将 Callable 类型的 task 封装成 FutureTask 类型, FutureTask 是 Runnable, Future 的实现类型的.</p>

<p>FutureTask 会持有以下属性:</p>
<ul>
<li>state: 处理状态</li>
<li>callable: 需要运行的任务</li>
<li>outcome: 结果</li>
<li>runner: 处理的线程</li>
<li>waiters: 等待线程链表</li>
</ul>
<p>ThreadPoolExecutor.submit 方法提交任务后, 交给线程池里的线程执行, 之后调用 Future.get 方法获取结果.</p>
<p>Future.get 方法, 也就是调用 FutureTask.get 方法.<br>
该方法会循环判断判断任务的处理状态.<br>
如果任务正在执行, 会通过 Thread.yield 方法让出 CPU 资源, 等待下次循环再效验.<br>
如果任务执行完成, 则将 outcome 返回.</p>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>concurrency-term</title>
    <url>/posts/concurrency/e1c7f23/</url>
    <content><![CDATA[<h1 id="概念">1.  概念</h1>
<h2 id="同步和异步">1.1.  同步和异步</h2>
<p>同步和异步通常用来形容一次方法调用.<br>
同步方法调用一旦开始, 调用者必须等到方法调用返回, 才能继续后续的行为.<br>
异步方法调用一旦开始, 方法调用就会立即返回, 调用者就可以继续后续的操作; 而真正的执行是在另外一个线程中, 不会阻碍调用者.</p>
<h2 id="阻塞和非阻塞">1.2.  阻塞和非阻塞</h2>
<p>阻塞和非阻塞通常用来形容多线程间的相互影响.<br>
阻塞表示线程因某种原因导致了其他线程等待或挂起. 比如某个线程占用了临界区, 其他线程同时也想使用这个资源就会被阻塞.<br>
非阻塞表示线程之间互不影响, 不会妨碍其他线程工作.</p>
<h2 id="并发和并行">1.3.  并发和并行</h2>
<p>并发和并行用来形容多个任务一起执行.<br>
并发表示多个任务交替执行.<br>
并行表示多个任务同时执行.</p>
<h2 id="临界区">1.4.  临界区</h2>
<p>临界区用来表示一种公共资源或者共享数据, 可以被线程使用.<br>
但同一资源在同一时间只有被一个线程占用, 而其他线程同时也想使用这个资源, 必须等待资源的被释放.</p>
<h2 id="死锁">1.5.  死锁</h2>
<p>多个线程并发争夺多个资源时, 因为相互抢占资源, 导致谁都无法继续执行.</p>
<h2 id="死锁的四个必要条件">1.6.  死锁的四个必要条件</h2>
<ol>
<li>互斥<br>
一个资源在同一时间只能被一个线程占有.</li>
<li>请求与保持<br>
线程已经占有了至少一个资源, 但又提出新的资源请求, 但是该资源已经被其他线程占有, 此时资源请求被阻塞, 但对已占有的资源保持不放.</li>
<li>不可剥夺<br>
在资源未被主动释放前, 其他线程不能强行剥夺资源.</li>
<li>循环等待<br>
若干线程形成循环等待资源的关系.</li>
</ol>
<h3 id="如何处理死锁">1.6.1.  如何处理死锁</h3>
<ol>
<li>预防死锁<br>
通过破坏四个必要条件中是一个或几个来防止死锁的发生.</li>
<li>检测死锁<br>
允许系统运行时发生死锁, 但检测死锁是否发生, 并干预解除死锁.</li>
</ol>
<h2 id="饥饿">1.7.  饥饿</h2>
<p>饥饿是指线程因为某些原因导致无法获取到资源, 导致无法继续执行.</p>
<h2 id="活锁">1.8.  活锁</h2>
<p>多个线程并发争夺多个资源时, 因为相互谦让资源, 导致谁都无法继续执行.</p>
<h2 id="并发级别">1.9.  并发级别</h2>
<ul>
<li>阻塞<br>
synchronized, 锁会导致线程阻塞.</li>
<li>无饥饿<br>
线程之间非公平竞争, 如线程优先级, 非公平锁等会导致线程饥饿; 相反, 如果线程之间公平竞争, 那么任何线程都有机会执行.</li>
<li>无障碍<br>
无障碍是最弱的非阻塞调度.<br>
线程之间互不影响的执行, 谁都可以进入临界区修改数据, 但是并发情况下不能保证数据安全.</li>
<li>无锁<br>
无锁的并行必定是无障碍的.<br>
在无锁情况下, 所有线程都能尝试对临界区进行访问, 无锁并发能保证必定有一个线程能够在有限步骤内完成操作离开临界区.</li>
<li>无等待<br>
无等待是在无锁的基础上扩展, 要求所有线程都必须在有限步骤内完成操作. 这也同时解决了饥饿问题.<br>
典型的无等待结构就是 RCU (Read-Copy-Update). 它的基本思想就是, 对数据的读不加控制, 因此所有的读线程操作都是无等待的; 写数据时, 先取得原始数据的副本, 接着只修改副本数据, 修改完成后, 在合适的时机会写数据.</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li>
<a href="https://mp.weixin.qq.com/s?__biz=MzA5MTkxMDQ4MQ==&mid=2648933285&idx=1&sn=f5507c251b84c3405f2fe0f7fb1da97d&chksm=88621b9bbf15928dd4c26f52b2abb0e130cde02100c432f33f0e90123b5e4b20d43017c1030e&token=1916804008&lang=zh_CN&scene=21#wechat_redirect" title target>Java 高并发系列</a></li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
      <tags>
        <tag>term</tag>
      </tags>
  </entry>
  <entry>
    <title>jhat</title>
    <url>/posts/java-tool/1895bd20/</url>
    <content><![CDATA[<p>jhat 是虚拟机转储快照分析工具, 但一般使用 VisualVM, Eclipse Memory Analyzer, IBM HeapAnalyzer 等工具分析.</p>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>synchronized</title>
    <url>/posts/concurrency/edea11bc/</url>
    <content><![CDATA[<p>非公平, 可重入</p>
<p>用法:</p>
<ul>
<li>指定加锁对象: 对给定的对象加锁, 进入同步代码前需要获得给定对象的锁.</li>
<li>修饰实例方法: 相当于对当前实例加锁, 进入同步代码前需要获得当前实例的锁.</li>
<li>修饰静态方法: 相当于对当前类加锁, 进入同步代码前需要获得当前类的锁.</li>
</ul>
]]></content>
      <categories>
        <category>concurrency</category>
      </categories>
  </entry>
  <entry>
    <title>jinfo</title>
    <url>/posts/java-tool/ff6d76ba/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo [option] pid</span><br></pre></td></tr></table></figure>
<h1 id="常用命令">1.  常用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看属性配置, 如果没有配置, 则显示系统默认值</span></span><br><span class="line">jinfo -flag <span class="variable">$property</span> <span class="variable">$pid</span></span><br><span class="line"><span class="comment"># 查询CMSInitiatingOccupancyFraction参数值. </span></span><br><span class="line">jinfo -flag CMSInitiatingOccupancyFraction <span class="variable">$pid</span></span><br><span class="line">jinfo -flag MaxDirectMemorySize <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印非系统默认配置项和启动时命令行参数</span></span><br><span class="line">jinfo -flags <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>jcmd</title>
    <url>/posts/java-tool/a5c20da9/</url>
    <content><![CDATA[<p>jcmd 拥有 jmap 绝大部分功能, 官方也建议用 jcmd 替代 jmap.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地 JVM 进程</span></span><br><span class="line">jcmd -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 jvm 中支持的所有命令</span></span><br><span class="line">jcmd <span class="variable">$pid</span> <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dump jvm 内存情况</span></span><br><span class="line"><span class="comment"># 类似于 `jmap -dump:format=b,file=heapdump $pid`</span></span><br><span class="line"><span class="comment"># 除非设置 -all 选项, 否则会触发一次 full gc</span></span><br><span class="line">jcmd <span class="variable">$pid</span> GC.heap_dump &lt;file-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆外内存分析</span></span><br><span class="line">jcmd <span class="variable">$pid</span> VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</span><br></pre></td></tr></table></figure>
<h1 id="注意事项">1.  注意事项</h1>
<p>jmap 和 jcmd dump 文件的时候会触发 FGC , 使用的时候注意场景.</p>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>jmap</title>
    <url>/posts/java-tool/1933bbd2/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmap [option] vmid</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">-dump 生产Java堆转储快照. 格式为: -dump:[live, ]format&#x3D;b, file&#x3D;&lt;filename&gt;, 其中live子参数说明是否只dump出存活的对象</span><br><span class="line">-finalizerinfo 显示在F-Queue中等待Finalizer线程执行finalize方法的对象. 只有在Linux&#x2F;Solaris平台下有效</span><br><span class="line">-heap 显示Java堆详细信息, 如使用哪种回收器, 参数配置, 分代状况等. 只有在Linux&#x2F;Solaris平台下有效</span><br><span class="line">-histo 显示堆中对象统计信息, 包括类, 实例数量, 合计容量</span><br><span class="line">-permstat 以ClassLoader为统计口径显示永久代内存状态. 只有在Linux&#x2F;Solaris平台下有效</span><br><span class="line">-F 当虚拟机进程对-dump选项没有响应时, 可使用这个选项强制生成dump快照. 只有在Linux&#x2F;Solaris平台下有效</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程中占用资源最大的前 10 对象</span></span><br><span class="line"><span class="comment"># -histo:live live 表示仅输出存活的对象; 如果没有指定则输出所有对象</span></span><br><span class="line">jmap -histo:live <span class="variable">$pid</span> | head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看堆使用情况</span></span><br><span class="line">jmap -heap <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将内存使用情况输出到文件</span></span><br><span class="line">jmap -dump:format=b,file=heapdump <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>g1 调校</title>
    <url>/posts/uncategorized/ef549917/</url>
    <content><![CDATA[<h1 id="启动-g1">1.  启动 G1</h1>
<p><code>XX:+UseG1GC</code> , 采用 G1 垃圾收集器</p>
<ul>
<li>暂停时间<br>
用-XX:MaxGCPauseMillis来指定, 默认值200ms. 这是一个软性目标, G1会尽量达成, 如果达不成, 会逐渐做自我调整. 对于Young GC来说, 会逐渐减少Eden区个数, 减少Eden空间那么Young GC的处理时间就会相应减少; 对于Mixed GC, G1会调整每次Choose Cset的比例, 默认最大值是10%, 当然每次选择的Cset少了, 所要经历的Mixed GC的次数会相应增加. 同时减少Eden的总空间时, 就会更加频繁的触发Young GC, 也就是会加快Mixed GC的执行频率, 因为Mixed GC是由Young GC触发的, 或者说借机同时执行的. 频繁GC会对对应用的吞吐量造成影响, 每次Mixed GC回收时间太短, 回收的垃圾量太少, 可能最后GC的垃圾清理速度赶不上应用产生的速度, 那么可能会造成串行的Full GC, 这是要极力避免的. 所以暂停时间肯定不是设置的越小越好, 当然也不能设置的偏大, 转而指望G1自己会尽快的处理, 这样可能会导致一次全部并发标记后触发的Mixed GC次数变少, 但每次的时间变长, STW时间变长, 对应用的影响更加明显.</li>
<li>Region大小<br>
用-XX:G1HeapRegionSize来指定, 若未指定则默认最多生成2048块, 每块的大小需要为2的幂次方, 如1,2,4,8,16,32, 最大值为32M. Region的大小主要是关系到Humongous Object的判定, 当一个对象超过Region大小的一半时, 则为巨型对象, 那么其会至少独占一个Region, 如果一个放不下, 会占用连续的多个Region. 当一个Humongous Region放入了一个巨型对象, 可能还有不少剩余空间, 但是不能用于存放其他对象, 这些空间就浪费了. 所以如果应用里有很多大小差不多的巨型对象, 可以适当调整Region的大小, 尽量让他们以普通对象的形式分配, 合理利用Region空间.</li>
<li>新生代比例<br>
新生代比例有两个数值指定, 下限: -XX:G1NewSizePercent, 默认值5%, 上限: -XX:G1MaxNewSizePercent, 默认值60%. G1会根据实际的GC情况(主要是暂停时间)来动态的调整新生代的大小, 主要是Eden Region的个数. 最好是Eden的空间大一点, 毕竟Young GC的频率更大, 大的Eden空间能够降低Young GC的发生次数. 但是Mixed GC是伴随着Young GC一起的, 如果暂停时间短, 那么需要更加频繁的Young GC, 同时也需要平衡好Mixed GC中新生代和老年代的Region, 因为新生代的所有Region都会被回收, 如果Eden很大, 那么留给老年代回收空间就不多了, 最后可能会导致Full GC.</li>
<li>并发GC线程数<br>
通过 -XX:ConcGCThreads来指定, 默认是-XX:ParallelGCThreads/4, 也就是在非STW期间的GC工作线程数, 当然其他的线程很多工作在应用上. 当并发周期时间过长时, 可以尝试调大GC工作线程数, 但是这也意味着此期间应用所占的线程数减少, 会对吞吐量有一定影响.</li>
<li>并行GC线程数<br>
通过 -XX:ParallelGCThreads来指定, 也就是在STW阶段工作的GC线程数, 其值遵循以下原则:
<ol>
<li>如果用户显示指定了ParallelGCThreads, 则使用用户指定的值.</li>
<li>否则, 需要根据实际的CPU所能够支持的线程数来计算ParallelGCThreads的值, 计算方法见步骤③和步骤④.</li>
<li>如果物理CPU所能够支持线程数小于8, 则ParallelGCThreads的值为CPU所支持的线程数. 这里的阀值为8, 是因为JVM中调用nof_parallel_worker_threads接口所传入的switch_pt的值均为8.</li>
<li>如果物理CPU所能够支持线程数大于8, 则ParallelGCThreads的值为8加上一个调整值, 调整值的计算方式为: 物理CPU所支持的线程数减去8所得值的5/8或者5/16, JVM会根据实际的情况来选择具体是乘以5/8还是5/16.<br>
比如, 在64线程的x86 CPU上, 如果用户未指定ParallelGCThreads的值, 则默认的计算方式为: ParallelGCThreads = 8 + (64 - 8) * (5/8) = 8 + 35 = 43.</li>
</ol>
</li>
<li>被纳入Cset的Region的存活空间占比阈值<br>
通过 -XX:G1MixedGCLiveThresholdPercent指定, 不同版本默认值不同, 有65%和85%. 在全局并发标记阶段, 如果一个Region的存活对象的空间占比低于此值, 则会被纳入Cset. 此值直接影响到Mixed GC选择回收的区域, 当发现GC时间较长时, 可以尝试调低此阈值, 尽量优先选择回收垃圾占比高的Region, 但此举也可能导致垃圾回收的不够彻底, 最终触发Full GC.</li>
<li>触发全局并发标记的老年代使用占比<br>
通过-XX:InitiatingHeapOccupancyPercent指定, 默认值45%, 也就是老年代占堆的比例超过45%. 如果Mixed GC周期结束后老年代使用率还是超过45%,那么会再次触发全局并发标记过程, 这样就会导致频繁的老年代GC, 影响应用吞吐量. 同时老年代空间不大, Mixed GC回收的空间肯定是偏少的. 可以适当调高IHOP的值, 当然如果此值太高, 很容易导致年轻代晋升失败而出发Full GC, 所以需要多次调整测试.</li>
<li>触发Mixed GC的堆垃圾占比<br>
通过-XX:G1HeapWastePercent指定, 默认值5%, 也就是在全局标记结束后能够统计出所有Cset内可被回收的垃圾占整对的比例值, 如果超过5%, 那么就会触发之后的多轮Mixed GC, 如果不超过, 那么会在之后的某次Young GC中重新执行全局并发标记. 可以尝试适当的调高此阈值, 能够适当的降低Mixed GC的频率.</li>
<li>每轮Mixed GC回收的Region最大比例<br>
通过-XX:G1OldCSetRegionThresholdPercent指定, 默认10%, 也就是每轮Mixed GC附加的Cset的Region不超过全部Region的10%, 最多10%, 如果暂停时间短, 那么可能会少于10%. 一般这个值不需要额外调整.</li>
<li>一个周期内触发Mixed GC最大次数<br>
通过-XX:G1MixedGCCountTarget指定, 默认值8. 也就是在一次全局并发标记后, 最多接着8此Mixed GC, 也就是会把全局并发标记阶段生成的Cset里的Region拆分为最多8部分, 然后在每轮Mixed GC里收集一部分. 这个值要和上一个参数配合使用, 8*10%=80%, 应该来说会大于每次标记阶段的Cset集合了. 一般此参数也不需额外调整.</li>
<li>G1为分配担保预留的空间比例<br>
通过-XX:G1ReservePercent指定, 默认10%. 也就是老年代会预留10%的空间来给新生代的对象晋升, 如果经常发生新生代晋升失败而导致Full GC, 那么可以适当调高此阈值. 但是调高此值同时也意味着降低了老年代的实际可用空间.</li>
<li>谨慎使用Soft Reference<br>
如果SoftReference过多, 会有频繁的老年代收集. -XX:SoftRefLRUPolicyMSPerMB参数, 可以指定每兆堆空闲空间的软引用的存活时间, 默认值是1000, 也就是1秒. 可以调低这个参数来触发更早的回收软引用. 如果调高的话会有更多的存活数据, 可能在GC后堆占用空间比会增加.  对于软引用, 还是建议尽量少用, 会增加存活数据量, 增加GC的处理时间.</li>
<li>晋升年龄阈值<br>
通过-XX:MaxTenuringThreshold指定, 默认值15. 一般新生对象经过15次Young GC会晋升到老年代, 巨型对象会直接分配在老年代, 同时在Young GC时, 如果相同age的对象占Survivors空间的比例超过 -XX:TargetSurvivorRatio的值(默认50%), 则会自动将此次晋升年龄阈值设置为此age的值, 所有年龄超过此值的对象都会被晋升到老年代, 此举可能会导致老年代需要不少空间应对此种晋升. 一般这个值不需要额外调整.</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/qq_27529917/article/details/87072130" target="_blank" rel="noopener">https://blog.csdn.net/qq_27529917/article/details/87072130</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>jstack</title>
    <url>/posts/java-tool/9f2701e8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstack [option] vmid</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">-F 当正常输出的请求不被响应时, 强制输出线程堆栈</span><br><span class="line">-l 除堆栈外, 显示关于锁的附加信息</span><br><span class="line">-m 如果调用到本地方法的话, 可以显示c&#x2F;c++的堆栈</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>jps</title>
    <url>/posts/java-tool/5c32ce94/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps [options] [hostid]</span><br><span class="line"></span><br><span class="line">hostid 为 RMI 注册表中注册的主机名</span><br><span class="line">options:</span><br><span class="line">-q 只输出 lvmid, 省略朱磊的名称</span><br><span class="line">-m 输出虚拟机进程启动时传递给 main() 函数的参数</span><br><span class="line">-l 输出主类的全名, 如果进程执行的是 Jar 包, 则输出 Jar 包路径</span><br><span class="line">-v 输出虚拟机进程启动时 JVM 参数</span><br></pre></td></tr></table></figure>
<h1 id="常用命令">1.  常用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有 java 进程</span></span><br><span class="line"><span class="comment"># -l 显示完整主方法路径, 或完整 jar 路径</span></span><br><span class="line"><span class="comment"># -v 输出传递给 jvm 的参数</span></span><br><span class="line">jps -lv</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>jstat</title>
    <url>/posts/java-tool/145cb8cc/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstat [ option vmid [interval[s|ms] [count]]]</span><br><span class="line"></span><br><span class="line">如果是本地虚拟机进程, vmid 与 lvmid 一致; 如果是远程虚拟机进程, vmid 格式为</span><br><span class="line">[protocol:][&#x2F;&#x2F;]lvmid[@hostname[:port]&#x2F;servername]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">-class 监视类装载, 卸载数量, 总空间以及类装载所耗费的时间</span><br><span class="line">-gc 监视 Java 堆状况, 包括 Eden 区, 两个 Survivor 区, 老年代, 永久代等容量, 已用空间, GC 时间合计等信息</span><br><span class="line">-gcapacity 监视内容与 -gc 基本相同, 但输出主要关注 Java 堆各个区域使用到的最大, 最小空间</span><br><span class="line">-gcutil 监视内容与 -gc 基本相同, 但输出主要关注已使用空间占总空间的百分比</span><br><span class="line">-gccause 监视内容与-gcutil功能一样, 但是会额外输出导致上一次GC产生的原因</span><br><span class="line">-gcnew 监视新生代GC状况</span><br><span class="line">-gcnewcapacity 监视内容与-gcnew基本相同, 输出主要关注使用到的最大, 最小空间</span><br><span class="line">-gcold 监视老年代GC状况</span><br><span class="line">-gcoldccapacity 监视内容与-gcold基本相同, 输出主要关注使用到的最大, 最小空间</span><br><span class="line">-gcpermcapacity 输出永久代使用到的最大, 最小空间</span><br><span class="line">-compiler 输出JIT编译器编译过的方法, 耗时等信息</span><br><span class="line">-printcompilation 输出已经被JIT编译的方法</span><br></pre></td></tr></table></figure>
<h1 id="常用命令">1.  常用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] $pid [&lt;interval&gt; [&lt;count&gt;]]</span></span><br><span class="line"><span class="comment"># interval 间隔时间, 单位毫秒</span></span><br><span class="line"><span class="comment"># count 打印次数</span></span><br><span class="line">jstat -gc <span class="variable">$pid</span> 5000 20</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment">#  S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span></span><br><span class="line"><span class="comment"># 10240.0 10240.0  0.0    0.0   63488.0  29363.2   167936.0     0.0     4480.0 779.9  384.0   76.4       0    0.000   0      0.000    0.000</span></span><br><span class="line"><span class="comment"># 10240.0 10240.0  0.0    0.0   63488.0  29363.2   167936.0     0.0     4480.0 779.9  384.0   76.4       0    0.000   0      0.000    0.000</span></span><br><span class="line"><span class="comment"># 10240.0 10240.0  0.0    0.0   63488.0  29363.2   167936.0     0.0     4480.0 779.9  384.0   76.4       0    0.000   0      0.000    0.000</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># S0C: 年轻代第一个survivor的容量(字节)</span></span><br><span class="line"><span class="comment"># S1C: 年轻代第二个survivor的容量(字节)</span></span><br><span class="line"><span class="comment"># S0U: 年轻代第一个survivor已使用的容量(字节)</span></span><br><span class="line"><span class="comment"># S1U: 年轻代第二个survivor已使用的容量(字节)</span></span><br><span class="line"><span class="comment"># EC: 年轻代中Eden的空间(字节)</span></span><br><span class="line"><span class="comment"># EU: 年代代中Eden已使用的空间(字节)</span></span><br><span class="line"><span class="comment"># OC: 老年代的容量(字节)</span></span><br><span class="line"><span class="comment"># OU: 老年代中已使用的空间(字节)</span></span><br><span class="line"><span class="comment"># PC: 永久代的容量</span></span><br><span class="line"><span class="comment"># PU: 永久代已使用的容量</span></span><br><span class="line"><span class="comment"># YGC: 从应用程序启动到采样时年轻代中GC的次数</span></span><br><span class="line"><span class="comment"># YGCT: 从应用程序启动到采样时年轻代中GC所使用的时间(单位: S)</span></span><br><span class="line"><span class="comment"># FGC: 从应用程序启动到采样时老年代中GC(FULL GC)的次数</span></span><br><span class="line"><span class="comment"># FGCT: 从应用程序启动到采样时老年代中GC所使用的时间(单位: S)</span></span><br><span class="line"></span><br><span class="line">jstat -gcutil <span class="variable">$pid</span> 5000 20</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span></span><br><span class="line"><span class="comment"># 0.00   0.00  48.25   0.00  17.41  19.90      0    0.000     0    0.000    0.000</span></span><br><span class="line"><span class="comment"># 0.00   0.00  48.25   0.00  17.41  19.90      0    0.000     0    0.000    0.000</span></span><br><span class="line"><span class="comment"># 0.00   0.00  48.25   0.00  17.41  19.90      0    0.000     0    0.000    0.000</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># s0: 年轻代中第一个survivor已使用的占当前容量百分比</span></span><br><span class="line"><span class="comment"># s1: 年轻代中第二个survivor已使用的占当前容量百分比</span></span><br><span class="line"><span class="comment"># E: 年轻代中Eden已使用的占当前容量百分比</span></span><br><span class="line"><span class="comment"># O: 老年代中已使用的占当前容量百分比</span></span><br><span class="line"><span class="comment"># P: 永久代中已使用的占当前容量百分比</span></span><br><span class="line"><span class="comment"># M: 等于 MU/MC, Meta 区使用率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示加载class的数量, 及所占空间等信息</span></span><br><span class="line">jstat -class <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>visualvm</title>
    <url>/posts/java-tool/25863f2f/</url>
    <content><![CDATA[<p>jvisualvm 同 jconsol e都是一个基于图形化界面的, 可以查看本地及远程的 Java Gui 监控工具.</p>
<h1 id="配置方式">1.  配置方式</h1>
<ol>
<li>创建配置文件 <code>jstatd.all.policy</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant codebase &quot;file:$&#123;java.home&#125;&#x2F;..&#x2F;lib&#x2F;tools.jar&quot; &#123;  </span><br><span class="line">   permission java.security.AllPermission;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动监控服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jstatd -J-Djava.security.policy&#x3D;jstatd.all.policy -J-Djava.rmi.server.logCalls&#x3D;true &amp;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>配置 JMX 管理 Tomcat<br>
在 <a href="http://startup.sh" target="_blank" rel="noopener">startup.sh</a> 最后一行前添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CATALINA_OPTS&#x3D;&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote.port&#x3D;11099 -Dcom.sun.management.jmxremote.ssl&#x3D;false -Dcom.sun.management.jmxremote.authenticate&#x3D;false -Xshare:off&quot;</span><br></pre></td></tr></table></figure>
<h1 id="btrace">2.  BTrace</h1>
<p>BTrace 是 VisualVM 的一个插件, 本身也可以独立运行.<br>
它的作用是在不停止目标程序运行的前提下, 通过 HotSpot 虚拟机的 HotSwap 技术动态加入原本不存在的调试代码.</p>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>life/创业/创业</title>
    <url>/posts/uncategorized/54db4226/</url>
    <content><![CDATA[<p>小康生活水平家庭常用<br>
使用周期要在一周到一年内<br>
能三个月内迅速成型的产品<br>
能迅速推广裂变的</p>
<p>服装<br>
化妆品<br>
咨询公司<br>
远程办公, 外包<br>
茶叶<br>
对电商, 帮用户选择</p>
<p>不能是电商网站首页常见的, 最好价格不是那么透明的</p>
<h1 id="电子商务">1.  电子商务</h1>
<p>国内电子商务体系比较成熟<br>
竞争比较激烈</p>
<h2 id="分类">1.1.  分类</h2>
<p>水果<br>
化妆品<br>
服装</p>
<h2 id="平台">1.2.  平台</h2>
<p>淘宝<br>
京东<br>
拼多多<br>
返利网</p>
<h2 id="方案">1.3.  方案</h2>
<p>排行榜<br>
对接各大电商品牌, 制作排行榜, 进行价格, 性价比, 好评度比对</p>
<h3 id="切入点">1.3.1.  切入点</h3>
<p>对产品不熟悉<br>
对店铺, 平台的比较<br>
综合性购物</p>
<h1 id="开发培训">2.  开发培训</h1>
<p>被动收入<br>
对知识的梳理需要时间</p>
<h2 id="平台-2">2.1.  平台</h2>
<p>慕课网</p>
<h1 id="量化交易">3.  量化交易</h1>
<p>国内没有网络化交易<br>
不支持个人获取信息, 提交交易订单<br>
需要资金支持<br>
风险比较高</p>
<h1 id="跨境电商">4.  跨境电商</h1>
<h1 id="5g">5.  5G</h1>
<h1 id="短视频">6.  短视频</h1>
<h1 id="少儿编程">7.  少儿编程</h1>
<h1 id="软件外包">8.  软件外包</h1>
<p>如何让水平低的人也能协同作业.</p>
<p>###################33</p>
<p>吃穿住行<br>
复制成功案例</p>
<p>TED<br>
网易公开课<br>
得到<br>
樊登读书</p>
<p>周导新商业 樊登 俞凌雄 王紫杰</p>
]]></content>
  </entry>
  <entry>
    <title>life/top/target-manage</title>
    <url>/posts/uncategorized/e743eeca/</url>
    <content><![CDATA[<ul>
<li>top target
<ul>
<li>提高自我管理水平
<ul>
<li>自律
<ul>
<li>作息规律</li>
<li>运动</li>
<li>不玩游戏</li>
</ul>
</li>
</ul>
</li>
<li>去大企业工作
<ul>
<li>提高技术水平</li>
<li>提高项目管理能力</li>
</ul>
</li>
</ul>
</li>
<li>top strategy
<ul>
<li>保持精神状态
<ul>
<li>避免长时间进入意识空间</li>
</ul>
</li>
<li>工作去情绪化</li>
<li>对他人尊重与礼貌</li>
<li>说话有磁性, 走路抬头挺胸有自信</li>
<li>减少全职工作占用的时间, 多花功夫在自我培养上</li>
</ul>
</li>
<li>next
<ul>
<li>财务自由</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mat</title>
    <url>/posts/java-tool/94c06ea2/</url>
    <content><![CDATA[<h1 id="install">1.  Install</h1>
<p><a href="http://download.eclipse.org/mat/1.8.1/update-site/" target="_blank" rel="noopener">http://download.eclipse.org/mat/1.8.1/update-site/</a></p>
<h1 id="常见问题">2.  常见问题</h1>
<h2 id="文件太大-打不开">2.1.  文件太大, 打不开</h2>
<p>提示 <code>OutOfMemeory: java heap space</code></p>
<p>修改 <code>mat.app/Contents/Eclipse/MemoryAnalyzer.ini</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xmx2g</span><br></pre></td></tr></table></figure>
<h1 id="resource">3.  Resource</h1>
<p><a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">http://www.eclipse.org/mat/downloads.php</a><br>
<a href="https://blog.csdn.net/u013928412/article/details/80503511" target="_blank" rel="noopener">https://blog.csdn.net/u013928412/article/details/80503511</a><br>
<a href="https://www.cnblogs.com/trust-freedom/p/6744948.html" target="_blank" rel="noopener">https://www.cnblogs.com/trust-freedom/p/6744948.html</a><br>
<a href="https://help.eclipse.org/neon/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html" target="_blank" rel="noopener">https://help.eclipse.org/neon/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html</a></p>
]]></content>
      <categories>
        <category>java-tool</category>
      </categories>
  </entry>
  <entry>
    <title>life/创业/品牌名称</title>
    <url>/posts/uncategorized/1f6dfc69/</url>
    <content><![CDATA[<p>奶醉<br>
鲜境</p>
]]></content>
  </entry>
  <entry>
    <title>思维训练</title>
    <url>/posts/uncategorized/cb1401cd/</url>
    <content><![CDATA[<p>逻辑是思维的规律, 一切知识是逻辑思维的结晶.</p>
<p>学习逻辑学, 可以掌握正确的思维的方式方法, 帮助人们提高逻辑思维能力.</p>
<p>范式模仿是人类学习逻辑思维的主要方式, 通过模仿前任正确的思维范式, 正确的语言范式, 正确的行为范式, 人们在日常生活和实践中养成了正确的习惯, 因此正确的范式是根本. 正确的思想范式必须遵循思维的规律和客观的规律.</p>
<h1 id="逻辑思维的界定">1.  逻辑思维的界定</h1>
<p>逻辑思维 7 级理论的基本内容:</p>
<ol>
<li>定性思考<br>
定义, 界定描述. 能把事物是什么说清楚的本领;</li>
<li>定量思考<br>
划分, 分解剖析. 对事务做精准量化认知的本领.</li>
<li>本质思考<br>
概括, 简化抽象. 通过表象直接洞察本源的本领.</li>
<li>比较思考<br>
判断, 判别评估能力. 对两个事物做正确评估的本领.</li>
<li>因果思考<br>
推理, 事例推演能力. 发现因果之间无形关系的本领.</li>
<li>想象思考<br>
假说, 假设想象能力. 超越限时束缚凭空假想的本领.</li>
<li>整体思考<br>
体系, 创建系统能力. 将散乱无序的事物整合的本领.</li>
</ol>
<h1 id="三元逻辑论">2.  三元逻辑论</h1>
<ul>
<li>主观逻辑与客观逻辑</li>
<li>推理逻辑与创新逻辑</li>
<li>静态逻辑与动态逻辑<br>
静态逻辑三大定律:<br>
- 同一律 在以为思维过程中, 必须在同一意义上使用概念和判断不能混淆不同的概念和判断. 公式是: <code>甲是甲</code> 或 <code>甲等于甲</code><br>
- 矛盾律 在以为思维过程中, 对同一对象不能同时作出两个矛盾的判断, 即不能既肯定它, 又否定它. 公式是: <code>甲不是非甲</code> 或 <code>甲不能既是乙, 又不是乙</code><br>
- 排中律 在以为思维过程中, 任一事物在同一时间里具有某属性或不具有有属性, 而没有其他可能. 即一个命题是真的或不是真的, 此外没有其他可能. 公式是: <code>甲是乙</code> 或 <code>甲不是乙</code><br>
动态逻辑三大定律:<br>
- 多维变易律 在多维思维过程中, 同一事物在不同思维维度上存在着不同的观点, 这些观点可以彼此对立且都是正确的.<br>
- 深层简易律 在多维思维过程中, 同一事物在不同思维维度上存在多样性的正确观点, 但是思维层次越深, 位数越少.<br>
- 环境不易律 在多维思维过程中, 对同一事物在不同思维维度上存在不同的观点, 环境是判断观点正确与否的终极标准. 无虑主观还是客观都受其生存界面制约, 超越或脱离生存界限必错必死.</li>
</ul>
<h1 id="逻辑学的-2条基本规律">3.  逻辑学的 2条基本规律</h1>
<ul>
<li>收敛率: 归纳法和演绎法遵循的根本法则, 适用于观察, 分析, 以是非为评价体系.</li>
<li>发散率: 多维法和跳跃法遵循的根本法则, 适用于设计, 创新, 以优劣为评价体系.</li>
</ul>
<h1 id="1-定义">4.  1. 定义</h1>
<p>当我们对某个东西下定义时, 首先面临的问题就是怎样说清楚它. 一般人么采用的办法无外乎两种: 一是描述它是什么样子, 有哪些特殊之处; 二是界定它不是什么, 与其他事物的区别.</p>
<p>逻辑思维 7 级理论中的定义相当于形式逻辑学中的概念. 如何正确创造一个概念, 即概念 = 内涵 + 外延. 内涵是概念锁反映事物的本质属性, 外延是具有概念所反映的本质属性的事物锁组成的类.<br>
事物是指客观存在的一切事情和物体, 简称事物.<br>
属性是事物本身锁固有的性质, 即事物必然的, 基本的, 不可分离的特征.<br>
内涵是事物的本质属性, 即事物诸多属性中不可替代的核心属性.<br>
外延是事物的同类组成的集合, 它们都具有相同的内涵.</p>
<p>形式逻辑学中探讨概念时, 更关注其语言构造性, 即怎样制造一个概念才能使其符合客观现实; 而逻辑思维 7 级理论在研究定义时更关注其思维实用性, 即怎样描述界定才能吧事物说清楚.</p>
<p>定义是感性思维向理性思维升级的需要. 初级定义是视觉经验化的感知定义, 高级定义是抽象思辨化的理性定义.</p>
<h2 id="思维工具">4.1.  思维工具</h2>
<ol>
<li>核心定义法</li>
</ol>
<p>抓住事物的核心是最准确的定义方式, 在这里核心就是指事物的内涵, 即事物的本质属性. 一般情况下无形属性, 主要属性, 普遍属性都可承担核心的职责. 例如, 人是什么? 定义: 人是会思考的高级动物. 核心定义法的运用没有一定之规, 不同的人对同一事物会有不同的定义, 我们唯一可以确定的是如果从有形属性, 次要属性, 特殊属性的角度描述界定事物, 皆术语非核心定义. 一般这样定义, 局限性比较大, 漏洞会比较多, 经不起多角度的推敲质疑.</p>
<ol start="2">
<li>外框定义法</li>
</ol>
<p>在对事物认知的过程中, 由于认知能力低下, 人们也会常常遇到无法界定某事物本质属性的情况, 这时候外框定义法就不失为一种比较使用的定义法. 例如美国著名数学家, 控制论的创始人维纳在给信息下定义时就指出: 信息就是信息, 即非物质, 也非能量. 这就是典型的外框定义法, 即造一个框吧要定义的事物与其他事物区别开来, 当人们知道了某事物不失什么的时候, 也就间接知道了它是什么. 另外, 外框定义也可以采用描述事物背景环境来界定事物是什么, 例如, 刘邦是中国汉朝的开过皇帝.</p>
<ol start="3">
<li>比喻定义法</li>
</ol>
<p>比喻是人们熟悉的一种描述界定方式, 比如, 学习想登山, 沟通像桥梁, 管理像灯塔等等. 比喻定义法的精髓在于寻找无形事物与有形事物之间的相同点, 当找到共性后, 我们就可以用有形事物来表示无形事物. 人们喜欢用比喻来解说是因为比喻可以把无形的事物转化为有形的事物, 帮助人们直观形象去理解复杂与抽象, 这是人们的视觉思维在抽象世界中一种本能应用, 毕竟看得见, 摸得着的形象更容易让人理解. 不仅儿童喜欢通过比喻来理解无形的事物, 成人同样也喜欢用比喻来解说深奥的道理.</p>
<h2 id="常见错误">4.2.  常见错误</h2>
<ol>
<li>答非所问</li>
<li>循环定义</li>
<li>概念堆砌</li>
</ol>
<h1 id="2-划分">5.  2. 划分</h1>
<p>划分是模糊思维向精确思维升级的需要.</p>
<p>划分法则:</p>
<ul>
<li>整体性法则, 穷尽所有, 无所遗漏</li>
<li>相同性原则, 共性提炼, 同类归一</li>
</ul>
<p>定义是正确划分的基础, 划分是深度定义的先导.<br>
划分与综合是一体两面, 划分是为了局部深度认知, 是从整体到局部; 综合是为了整体深度认知, 是从局部到整体. 如果没有微观的正确划分, 就不会有宏观的正确综合.</p>
<h2 id="思维工具-2">5.1.  思维工具</h2>
<ol>
<li>分类法</li>
</ol>
<p>分类法是指对事物做类别划分, 即把具有相同属性的事物划归同一集合. 分类的特点是对多数量个体进行划分, 而且划分后的集合之间没有等级差别. 比如, 按照性别划分, 人可以分为男人与女人两个集合, 而且男人与女人这两个集合之间不存在谁比谁更高级的问题.</p>
<ol start="2">
<li>分层法</li>
</ol>
<p>分层是指对事物做层次划分, 即把具有相同登记的事物划归同一集合. 分层的特点是对多数量个体进行划分, 而且划分后的集合之间存在等级差别. 比如按照年龄划分, 人可分为老人, 中年人, 青年, 少年, 婴幼儿五个集合, 而且这五个集合之间存在着年龄的等级差.</p>
<ol start="3">
<li>分元法</li>
</ol>
<p>分元是指对事物做元素划分, 即把事物划分为几个组成部分. 分元的特点是对一个事物进行划分, 而且划分后的各组成部分既相互依存又彼此独立. 比如, 按照形体划分, 人可分为头, 躯体, 四肢三个组成部分; 按照生理功能划分, 人可分为运动系统, 消化系统, 呼吸系统, 泌尿系统, 生殖系统, 内分泌系统, 脉管系统, 神经系统, 感觉器等九个组成部分.</p>
<h2 id="常见错误-2">5.2.  常见错误</h2>
<ol>
<li>整体不清</li>
<li>鸡鸭混同</li>
<li>抓小放大</li>
</ol>
<h1 id="概括">6.  概括</h1>
<p>概括是内容思维向形式思维升级的需要.</p>
<p>概括的精髓有 2 个:</p>
<ul>
<li>简化, 即按照思维的目的择其重点, 而不顾其他. 比如对事务我们可以按照有点进行简化概括, 也可以按照缺点进行简化概括, 还可以按照趣味性进行简化概括.</li>
<li>提炼, 即对事务去除杂质, 提取所需要的精华, 例如众人皆知的万有引力定律就是从复杂的天体运动轨迹现象规律中提炼概括出的伟大成果.</li>
</ul>
<p>一般来讲概括有 5 种形态:</p>
<ul>
<li>从有形到无形 用抽象的概念代表具体的实物</li>
<li>从现象到本质 对事物变化规律的总结归纳</li>
<li>从特殊到普遍 从具体个例中总结出普适性范式</li>
<li>从低级到高级 从故事内容中提炼出哲理思想</li>
<li>从复杂到简单 从诸多重要因素中抓住核心点</li>
</ul>
<p>概括和划分都有对事物简化的功能, 但两者的层次不一样, 前者是质的简化, 后者是量的简化.<br>
概括的表达形式和定义有类似之处, 但这是两个截然不同的思维动作. 比如, 人们只有先概括出事物的规律, 然后才能去描述界定. 概括是创造性的思维深加工过程, 它关注的是目的性和主观性, 而定义只是一个准确描述界定的过程, 它关注的是清晰性和客观性.</p>
<p>概括技能在实际工作和生活中的常见应用有:</p>
<ol>
<li>语言的简洁表达</li>
<li>经验教训的总结</li>
<li>抓住问题的核心</li>
<li>文章标题的提炼</li>
<li>工作方法是归纳</li>
</ol>
<h2 id="思维工具-3">6.1.  思维工具</h2>
<ol>
<li>要点概括法</li>
</ol>
<p>要点概括就是分清事物的主次, 把重要的要素提炼出来. 一般情况下对事物要点的确认是根据具体问题来决定的, 比如有些要点是指目标目的, 有些要点是指价值用途, 有些要点是指组成部分, 不同的思维指向决定了人们对同一事物不同的要点提炼.</p>
<ol start="2">
<li>抽象概括法</li>
</ol>
<p>抽象概括就是找出不同事物的无形相同点, 这个相同点可以是相同的属性, 相同的本质, 相同的规律, 相同的功能, 相同的价值, 相同的结构, 相同的目的, 相同的步骤等等. 抽象概括是一种比较高级的概括方法, 因为它要求人们具有较高的抽象思辨水平, 要有透过不同的有形现象或事物看到其背后无形相同点的洞察力. 以龟兔赛跑这个故事为例, 当人们在总结故事的寓意时, 实际上就是在寻找有形故事与无形哲理的相同点. 当人们发现龟兔赛跑的故事内容与勤能补拙, 骄傲必败等哲理思想相通是, 一个完整的抽象概括思维过程就完成了. 所以, 理解了这一点, 我们就清楚了抽象概括的本质就是无形求同, 这个无形求同可以发生在有形事物与有形事物之间, 可以发生在有形事物与无形事物之间, 当然更高级的是在无形事物与无形事物之间.</p>
<ol start="3">
<li>模式概括法</li>
</ol>
<p>模式概括就是寻找事物的固定形式. 模式概括是一种比较古老原始的概括方法, 无形是人类对日月星辰运行规律的总结, 还是动物对天敌猎物活动规律的总结, 其实质都是一种模式概括. 模式的特点是稳定性和重复性, 可以想象假如树木变幻不定, 就不可能有树木结构模式的概括; 假如太阳运行轨迹从不重复循环, 也不可能有太阳运动规律的概括. 而正是因为世间万物都有其稳定性和重复性的模式, 所以人类或低等动物们才能在大量的成功或失败活动中总结经验, 形成可识别的模式, 在以后的活动中遵循正确的模式, 避免错误的模式, 提高成功率. 通常模式分动静两种, 动态模式是指事物的变化模式, 即事物在运动变化时的固定流程或规律. 静态模式是指事物的构成模式, 即事物存在所必须具备的固定组成要素或条件. 需要指出的是, 模式概括尽管是古老的, 原始的, 但它并不是低级的, 低效的, 今天无论是在商业经营中, 还是在科学研究中, 人们在认知复杂多变的问题或情境时, 使用最多的还是模式概括, 所谓方法, 策略, 窍门, 范例, 公式, 规律, 法则的总结归纳实际上都是模式概括的具体应用.</p>
<h2 id="常见错误-3">6.2.  常见错误</h2>
<ol>
<li>以偏概全</li>
<li>内容不符</li>
<li>要点散乱</li>
</ol>
<h1 id="判断">7.  判断</h1>
<p>判断是无序思维向有序思维升级的需要.</p>
<p>判断分为主观判断和客观判断, 它是在两个以上方案之间选择的思维活动. 判断的基本思维公式是: 判断 = 标准 + 方案.<br>
没有正确的标准, 就没有正确的判断, 比如判断对错, 真假, 轻重, 取舍, 利害, 进退, 美丑等.首先要确立明确的标准, 假如标准混乱的话, 则判断结论混乱.<br>
判断受诸多因素影响, 例如信息, 经验, 情绪, 目的, 环境, 对象, 时间, 变化等.<br>
从本质来看, 判断是最简单的推理, 推理是由多个简单判断构成的复杂判断.</p>
<p>基本概念:</p>
<ul>
<li>判断方案 可供选择的可能性</li>
<li>判断标准 论证评估多个判断方案之间顺序关系的基本原则</li>
<li>判断环境 判断方案所处的背景条件, 它是判断思维活动的界面</li>
<li>判断目的 促使判断这做出主动选择的内在动机或需求</li>
</ul>
<h2 id="思维工具-4">7.1.  思维工具</h2>
<ol>
<li>一维判断法</li>
</ol>
<p>无论是判断真假, 还是判断对错, 都是在两个以上的方案中做出选择, 在思维过程中必须遵循同一律, 矛盾律, 排中律. 这是为了保证在同一思维维度上判断的恒定性, 如果没有这一点保证, 判断就会变得不可捉摸, 混乱的思维活动. 但是, 如果判断对象比较复杂, 也可以从多个思维维度分别对同一事物做判断, 比如男女在交往过程中, 会对自己的恋人分别从相貌, 性格, 职业, 才能, 家庭等各个方面做评估, 得出肯定火否定的结论. 加入从不同的思维维度评估得出的结论吧差异, 甚至彼此矛盾, 这时候可以采用加权平均的方式得出一个综合的结论, 也可以选择一个最重要的判断标准, 以它的结论为最终决定.</p>
<ol start="2">
<li>平面判断法</li>
</ol>
<p>如果说一维判断是就事论事, 那平面判断就是不就事论事. 通常品面判断是以事物的背景环境作为判断的界面, 并以此作为判别对错的关键. 砒霜是毒药, 但对某些病症却是良药; 枪炮是制造流血杀戮的工具, 但也是维护合并安定的盾牌; 善良是一种美德, 但是对残暴恶徒来讲就变成迂腐了. 一般来说, 平面判断法就是 “具体问题具体分析”, 对问题的判断只有结合其背景环境才能做出精确的论证评估, 脱离了限制条件去做判断无异于在沙滩上建高楼大厦, 主体看似坚固, 但最终会垮塌的. 需要说明一点, 有些人认为平面判断是以为判断的扩展, 其实这是一种误解. 以为判断是从事物的不同侧面做判断, 平面判断是从事物的存在环境作判断, 前者是微观判断, 后者是宏观判断.</p>
<ol start="3">
<li>立体判断法</li>
</ol>
<p>世界是多层次的, 任何事物置身其中都必存在于一个具体的环境中, 这是平面判断的基础.同事判断者在不同层次看事物也会产生不同个观感, 这是立体判断的基础. 一次军事行动,从战术, 战役, 战略不同层次去评估其意义是不同的. 以二战日本偷袭珍珠港之战为例, 无论从战术还是战役的层次看, 都是一次非常成功的军事行动, 但是如果站在战略的层面看, 这是一次非常错误的军事行动, 当时它为日本树立了一个强大的敌人, 美国仅凭其强大的工业实力就足够拖垮日本, 最后事实也证明了这一点. 立体判断法是一种通过框架结构来论证评估的思维方法, 它认为事物是一个系统, 但它置身于更复杂的母系统中, 对事物的判断不能就事论事, 也不能就近论事, 不是仅仅从局部环境来寻找判断的理由, 而应当站在更宏观的母系统框架层次思考问题才能做出准确的论证评估.</p>
<h2 id="常见错误-4">7.2.  常见错误</h2>
<ol>
<li>缺少选项</li>
<li>标准混乱</li>
<li>背离界面</li>
</ol>
<h1 id="推理">8.  推理</h1>
<p>推理是现象思维向本质思维升级的需要.</p>
<p>推理可分为两种基本形式:</p>
<ul>
<li>静态推理 例如, 数学推理就属于静态推理, 其前提已知条件或推理公式是不变的</li>
<li>动态推理 例如, 军事推理则属于动态推理, 其前提条件或推理公式是在不断变化的</li>
</ul>
<p>推理公式是指事物的道理, 它卡哇伊具体表现为事物的某以属性, 也可以体现为事物的运动规律, 还可以是事物与环境的互动关系, 或者事物所必须遵循的自然法则等等.<br>
如果说 <code>已知 + 已知 = 未知</code> 是推理的基本公式, 那么推理思维活动主要就是寻找 <code>+</code> 和 <code>=</code> 的道理, 用一系列的道理去组织 <code>链接</code> 哥哥已知条件, 去寻找未知答案.</p>
<p>推理是判断的复杂形式, 是由一系列判断构成的复杂关系链.</p>
<p><code>因为..., 所有...</code> 是推理的基本凡是, 但它和逻辑范畴中的英国关系是量回事. 比如, “因为下雨时, 我刚好在外面, 所以衣服被淋湿了.” 这演绎为一种因果关系. “因为男人都好色, 你是男人, 所以你好色.” 这归纳为一种从属关系.<br>
因果推理只是推理的主要形式之一, 它的基础是事物之间的因果关系. 但事物之间处理因果关系还存在着矛盾关系, 空间关系, 对称关系, 相似关系, 从属关系, 转化关系等.</p>
<p>在形式逻辑学中, 推理一般可分为以下三类:</p>
<ol>
<li>按照推理前提的数目分类. 一个前提的为直接推理, 两个以上前提的是间接推理.</li>
<li>根据前提和结论之间是否存在必然关系进行分类. 前提真则结论必真, 前提假则结论必假的叫必然性推理, 否则是或然性推理.</li>
<li>根据思维进程分类. 有一般到特殊的叫演绎推理, 有特殊到一般的叫归纳推理, 有特殊到特殊的类比推理.</li>
</ol>
<p>归纳: 因为男人爱美, 女人也爱美, 所有所有人都爱美.<br>
演绎: 因为爱美是人的天性, 你是人, 所以你爱美.</p>
<p>从某种程度上讲, 这三大类推理建立的三围坐标构成了形式逻辑学关于正确推理的知识体系. 尽管这一体系不能囊括所有的推理模式, 但它的简历第一次让人类对纷繁复杂的推理思维活动有了一个明确清晰的参照, 通过这个参照坐标人们可以抛开具体的内容, 从形式的角度论证推理过程的对错, 进而识别推理结果的真假. 由于形式逻辑学的出现, 人类开始有了标准化的思维规则和思维流程, 在它所提供的公理化思维工具帮助下, 散乱的算术, 几何, 物理, 天文, 生物, 地理, 政治, 教育, 工程技术等知识经验得意被一一梳理加工成系统化的科学知识理论, 可以说是形式逻辑学的创立才开启了科学的大门.</p>
<h2 id="思维工具-5">8.1.  思维工具</h2>
<ol>
<li>排除推理法</li>
</ol>
<p>在实际生活中, 任免最常用的推理方法就是排除推理法, 这是在本能经验CGI就可以发挥巨大效力的简单推理方法. 最经典的例子就是警察破案, 通过意义排除嫌疑人, 最后剩下的那个人就一定是罪犯. 在科学领域, 排除推理法也是一种最主要的研究方法, 当遇到特殊现象时, 科学家门就会用已知的理论一一去解释, 如果所有的理论都无法解释该现象, 这就意味着科学面临着革命性的突破, 需要新理论的诞生.</p>
<ol start="2">
<li>比较推理法</li>
</ol>
<p>比较推理的思维流程是遇到问题时, 先找到一个比较参照物, 然后或者是比较两者的相同点, 或者是比较两者的不同点, 最后得出一个结论. 具体比较的内容有特征比较, 关系比较, 过程比较, 功能比较, 结构比较, 环境比较, 模式比较, 原理比较等. 比较推理法在显示中有着管饭的应用, 医生看病就是把病人与头脑中的病症库进行比较, 寻找相似的病情和治疗方案; 对成功者的模仿就是把自己与成功者进行比较, 求同去异或者类似的成功; 沟通时的距离说明就是把当前的事情与曾经的egg或失败案例进行对比, 以此来证明自己结论的正确性; 学生阶梯就是把新题目与以往做过的题目做比较, 找到相同的原理或思路后寻求问题的答案; 父母对孩子的比喻教育就是把孩子能理解的具体事务与不能理解的抽象道理进行类比, 帮助孩子认识新事物.</p>
<ol start="3">
<li>因果推理法</li>
</ol>
<p>在逻辑学范畴中 因果是指事物的起因和结果. 两者之间的关系用一句话来简单概括就是: 有因, 必有果. 因果推理法就是利用因果之间的前后相继, 必然关联的属性来考虑问题的方法. 具体思路表现为有因寻果, 或者是由果探因. 因果过膝的类型多种多样, 有一因多果, 一果多因, 多果多因, 护卫因果等. 了解和掌握这些属性和规律有助于人们更准确的推演实例.</p>
<ol start="4">
<li>分解推理法</li>
</ol>
<p>面对复杂问题是, 任免一般采用将大问题分解成数个相关的小问题, 通过分析研究没个小问题的答案, 最终综合得出大问题的答案, 这就是分解推理法的基本思路.<br>
掌握分解推理法的难点在于对问题的分解方式, 同一事物从不同角度去分解会得到不同的结果, 人们即可以从时间流程去分解, 也可以从要素内容去分解, 还可以一分为二或一分为多. 一般来讲, 对问题分解的巧妙与否决定了后期推理分析的难度.</p>
<h3 id="万能公式">8.1.1.  万能公式</h3>
<ol>
<li>列出所有选项</li>
<li>确立判断标准</li>
<li>衡量价值高低</li>
<li>选择判断结果</li>
</ol>
<h2 id="常见错误-5">8.2.  常见错误</h2>
<ol>
<li>前提错误</li>
<li>缺少一句</li>
<li>倒果为因</li>
</ol>
<h1 id="假说">9.  假说</h1>
<p>假说是现实思维向虚拟思维升级的需要.</p>
<p>假说思维是一种超越现实性的思维技巧, 它可以突破时间和空间的限制, 突破实际和环境的束缚, 虚构现实中并不存在的事物.</p>
<p>假说有三种基本形式:</p>
<ul>
<li>猜测 即对未知的假设想象, 它主要是建立在客观基础之上的, 目的是求真求对.</li>
<li>幻想 即对不存在事物的假设想象, 他主要是建立在主观基础之上的, 目的是求优求美.</li>
<li>虚拟 即对有形事物的无形模拟假设想象, 它是在头脑思维空间对现实事物复制再现.</li>
</ul>
<h2 id="思维工具-6">9.1.  思维工具</h2>
<ol>
<li>发散思考法</li>
</ol>
<p>任何事物都存在无限多的可能性, 但它在现实中表现只有一种. 这就像一棵大树当它还是一粒种子的时候具有无限多的可能性, 但长大成树后我们所看到的只有唯一的现实形态. 由于人们在思维活动中受现实的影响通常只看到有形的一, 看不到无形的多; 只看到现在的一, 看不到未来的多; 只看到熟悉的一, 看不到陌生的多… 久而久之我们的思维就养成狭隘扁平的模式.<br>
发散思考法就是把事物的可能性全部一一列举出来, 在思维过程中不要去考虑事物的现实性, 只关注是否存在的可能性.</p>
<ol start="2">
<li>强制联想法</li>
</ol>
<p>任何事物与其他事物之间存在着无限多的联系, 这些联系只有极少数是为人们所之所见的, 更多的联系则潜藏在深层次, 如漂浮的冰山在海面下庞大的部分. 要认识到事物之间深层次的联系, 首先要具备超强的洞察力. 强制联想法就是一种训练人们思维深刻性的方法, 它要求人们把看似不相关的东西联系起来, 寻找他们内在必然性联系.<br>
强制联想法利用了大脑神奇的想象力, 人们只要把一些无关的东西强制联系在一起, 自然就会迸发出灵感火花, 这是靠推理细微得不到的. 在强制的过程中, 人们会不知不觉突破许多自我设限, 消除思维屏蔽, 把不可能转化为可能, 把不相关融合为一体. 通过这种训练人们会发现万事万物是普遍联系的, 现实性其实就是被物质化的那部分, 而更多的则以无形信息的形态存在于视觉之外, 有待于人们用头脑去思考挖掘.</p>
<ol start="3">
<li>假设分析法</li>
</ol>
<p>假设分析法通过对并不存在的事情进行虚拟假设, 然后以此为基础进行现实性的分析思考. 它是人们在日常生活工作常用的一种思维方法.<br>
提前假设这种可能性已经发生了, 这样思考不仅可以帮助人们启发新思路, 还可以大大降低思维难度, 节省了繁琐的推理过程.<br>
现代社会发展节奏越来越快, 环境变化也月岭门组装, 善用假设分析法可以帮助人们提前思考应对未来的种种变化, 洞察先机, 智高一筹.</p>
<h2 id="常见错误-6">9.2.  常见错误</h2>
<ol>
<li>自我限定</li>
<li>拘泥现实</li>
<li>胡思乱想</li>
</ol>
<h1 id="体系">10.  体系</h1>
<p>体系是局部思维向整体思维升级的需要</p>
<p>体系思维是一种创建系统的思维能力. 简单讲, 就是把散乱无序的要素整合为有机整体. 它是一种宏观的组织构建思维技能.</p>
<p><code>体系 = 要素 + 联系 + 结构</code>. 构建一个体系, 首先要确定基本的系统要素, 它是整个体系的基石; 其次是要确定要素之间的联系, 它是体系演变生化的法则; 最后是确定系统结构, 它是体系的宏观框架, 也是最关键的部分, 不同结构设计决定了不同体系的功能.</p>
<p>理论体系的构建模块: 原始概念, 基本公理, 理论框架.<br>
企业体系的构建模块: 企业部门, 职能关系, 管理制度.<br>
问题体系的构建模块: 问题要点, 相互关系, 整体模式.</p>
<p>体系思维的核心是整体化, 推理思维的核心是联系化. 前者侧重于考虑全局, 关注全局的组织框架对错; 后者侧重于考虑结构, 关注结果的推导过程对错.</p>
<h2 id="思维工具-7">10.1.  思维工具</h2>
<ol>
<li>模式思考法</li>
</ol>
<p>模式, 即事物的标准范式. 任何事物都有自己的模式, 它是从不断重复出现的时间中发现和抽象出的形式. 模式思考法是一种模仿性的体系思维方式, 通过把已知的事物的模式作为参照坐标, 来知道自己去思考问题. 例如, 我们可以吧人体模式作为参照坐标, 去思考企业管理系统的要素和联系, 头代表管理宗旨, 左右手代码奖励与惩罚, 审理代码组织协调, 双脚代码计划和权力.</p>
<ol start="2">
<li>框架思考法</li>
</ol>
<p>在思维领域中, 框架是指一种思维结构, 它有数个思维要素而非实质要素构成的虚系统. 框架思考法就是在这个固定的思维结构指导下去分析和解决具体问题方法.</p>
<p>从某种程度上讲, 框架也是一种模式, 不过更加抽象, 不涉及具体内容. 框架思考法通常只为思考着提供一个大致的思维结构, 它告诉人们要思考什么, 但不会提供具体的思考内容, 由于每个人的理解能力和经验学识不同, 在同一个思维结构下最后的思维结果又可能大相径庭.</p>
<p>框架思考法主要有思维要素框架, 思维流程框架, 平面思维框架, 立体思维框架这四种.</p>
<ol start="3">
<li>系统思考法</li>
</ol>
<p>系统思考法是以系统理论为基础, 把对象作为多方面联系的动态整体来加以研究的思维方法. 简单来说就是对事情全面思考, 不只就事论事, 而是把一件事放在普遍的联系中, 是把想要达到的结果, 实现该结果的过程, 过程优化以及对未来的影响等一系列问题作为一个整体系统进行研究. 这种思维方法是目前人类掌握的最高级, 最科学的思维方式. 常见的思考法有整体法, 结构法, 要素法, 功能法.</p>
<ul>
<li>
<p>整体法<br>
在分析和处理问题的过程中, 始终从整体来考虑,  把整体放在第一位, 而不是让人和网部分的东西凌驾于整体之上. 整体法要求吧思考问题的方向对准全局和整体, 从全局和整体触发, 但同时它不排斥重视局部, 是在整体观的指导下是局部问题得到解决, 以实现整体功能的最大限度发挥.</p>
</li>
<li>
<p>结构法<br>
进行系统思维时, 注意系统内部的结构性. 系统由各部分组成, 部分与部分之间组合是否合理, 对系统由很大影响. 这就是系统中的结构问题. 好的结构, 是组成系统的各部分组成合理, 是有机的联系. 从结构的方面着手研究问题能使思维清晰, 有条不絮, 在这个过程中也能尽量避免错误.</p>
</li>
<li>
<p>要素法<br>
每一个系统都是有繁杂的因素构成的, 其中相对具有重要意义的因素称之为构成要素. 要是整个系统正常运转并发挥最好的作用或处于最佳状态, 必须对各要素考察周全和充分, 充分发挥各要素的作用.</p>
</li>
<li>
<p>功能法<br>
是指为了使一个系统呈现出最佳态势, 从大局出发来调整或盖面系统内部各部分的功能与作用. 在此过程中, 可能是使所有部分都向更好的方面改变, 从而使系统状态更加, 也可能为了求得系统的全局利益, 以降低系统某部分的功能为代价.</p>
</li>
</ul>
<h2 id="常见错误-7">10.2.  常见错误</h2>
<ol>
<li>要素不清</li>
<li>联系散乱</li>
<li>结构失衡</li>
</ol>
<h1 id="思维模板">11.  思维模板</h1>
<p>思维模板是指一种集成化, 模ß块化的使用思维方法, 它侧重于应用和速成.</p>
<p>逻辑思维模板是吧逻辑思维 7 级理论中的思维技能视为 7 个功能模块, 灵活组成构成的实用思维方法.</p>
<p>从形式来讲, 逻辑思维模板分为两类:</p>
<ul>
<li>整体模板<br>
是 7 项技能全部应用, 有着明确的先后顺序程式<br>
整体模板的价值在于开发头脑的思维广度和深度, 用标准化的思维流程规范人们的思维活动, 减少不必要的动作, 提高思维效率.</li>
<li>组合模板<br>
是 2 - 3 项技能组合应用, 先后顺序随机而定<br>
组合模板的价值在于应用操作的简单性和灵活性, 可以针对具体问题提供快速高效的阶梯思路.</li>
</ul>
<p>逻辑思维模板是一个开放系统, 每一个模板都可以应用于不同的领域, 每个人也可以根据自己的习惯, 问题的类型来灵活组合设计适用的模板.</p>
<p>思维模板的设计组合应兼顾两方面要求:</p>
<ol>
<li>人们思维的习惯和简单性</li>
<li>问题分析解决的适用性和高效性</li>
</ol>
<p>从内容来讲, 逻辑思维模板有沟通咨询模板, 团队会议模板, 分析研讨模板, 方案设计模板, 创意激发模板等.</p>
<ol>
<li>沟通咨询组合模板</li>
</ol>
<ul>
<li>定义 倾听归纳, 理解对方说了些什么</li>
<li>假说 建立假说, 揣摩对方的潜在意图</li>
<li>划分 把对方的内容分为表层和深层两部分</li>
</ul>
<ol start="2">
<li>团队会议组合模板</li>
</ol>
<ul>
<li>定义 明确本次会议的主题</li>
<li>概括 归纳提炼每个人的发言要点</li>
<li>划分 整理会议内容, 要点归类合并划分</li>
</ul>
<ol start="3">
<li>分析研讨组合模板</li>
</ol>
<ul>
<li>判断 自觉反应, 表明观点</li>
<li>推理 寻找依据, 推理论证</li>
<li>体系 扩大视野, 大画面思考, 宏观分析</li>
</ul>
<ol start="4">
<li>方案设计组合模板</li>
</ol>
<ul>
<li>体系 确立方案的整体框架</li>
<li>假说 设想方案的具体内容</li>
<li>推理 论证推理方案的可行性</li>
</ul>
<ol start="5">
<li>创意激发组合模板</li>
</ol>
<ul>
<li>定义 常规定义说明</li>
<li>判断 质疑否定常规, 激发灵感创意</li>
<li>推理 逆向思维, 论证分析创意的实用性</li>
</ul>
<h1 id="记忆力">12.  记忆力</h1>
<h2 id="1-简化定义记忆法">12.1.  1. 简化定义记忆法</h2>
<p>对于复杂冗长的描绘内容进行精简, 把 <code>A + B + C</code> 格式的定义, 转化为 <code>A + C + B</code> 格式, 突出核心定义使之便于记忆.</p>
<p>如: 本质是事物本身固有的根本的属性.<br>
本质 – 是属性, 它是事物本身固有的, 根本的.</p>
<p>操控要点:</p>
<ul>
<li>简化定义记忆法的要点在于删繁为简, 抛弃中间复杂抽象的形容词, 直接把握两端, 使定义的本质凸显, 便于人们快速领悟所有记忆的重点.</li>
<li>定义使之对事物的描述界定, 因此简化定义记忆法可适用于一切描述界定类的记忆内容. 如对概念解释, 事件说明, 问题简答, 文章背诵等.</li>
<li>在记忆时, <code>A + B + C</code> 三点的 A 和 C 是必记内容, B 根据情况可死记硬背, 也可不记而凭借理解临场自由发挥. 通常领悟了 AC 的含义, 会让 B 的记忆理解更容易.</li>
</ul>
<h2 id="2-内容划分记忆法">12.2.  2. 内容划分记忆法</h2>
<p>对总舵的内容进行划分, 使之便于记忆. 划分的方法可以是分层, 分类, 分元.</p>
<p>操控要点:</p>
<ul>
<li>内容划分记忆法是通过深度婆媳让人们树立清楚事物的内在关系, 从而提高记忆效果.</li>
<li>事物越是无序混乱, 大脑记忆起来越是吃力. 越用划分法可以从宏观 (分类, 分层) 或围观 (分元) 劣势无序之中的有序, 使记忆有脉络可寻.</li>
<li>内容划分是对所要记忆内容的以此重新加工组织的过程, 不同的划分标准会呈现不同的记忆脉络关系.</li>
</ul>
<h2 id="3-关键词提炼记忆法">12.3.  3. 关键词提炼记忆法</h2>
<p>阅读索要记忆的内容, 并从中提炼出关键词汇, 通过把握要点提高记忆力.<br>
例如 5W1H要点, 时间, 地点, 人物, 事件, 原因, 方法.</p>
<p>操控要点:</p>
<ul>
<li>关键词, 是指文章中比较重点或者醒目的词汇. 提炼关键词可以让人们借助少量重点词汇的提示, 联想记忆整篇文章的内容.</li>
<li>不同的人对关键词的理解有所不同, 从主观喜好性角度来讲没有优劣之分, 可以随意选择, 但从客观重要性角度来讲, 事物自有其内在轻重规律, 还是要遵循一定之规的. 如 5W1H 所涉及到的因素对事件本身而言都是重点.</li>
<li>关键词的提炼没有特别数量限定, 但总体而言越少越容易记忆, 当然一味追求少也是不对的, 最终目的还是要能够记住全部内容, 不要遗漏重点.</li>
</ul>
<h2 id="4-比较判断记忆法">12.4.  4. 比较判断记忆法</h2>
<p>将所要记忆的内容与其他内容对比, 以增进理解效果, 加深记忆印象. 常见的比较方法包括: 求同比较, 求异比较, 求关系比较, 对错比较, 优劣比较, 正反比较, 时间比较等.</p>
<p>操控要点:</p>
<ul>
<li>比较判断记忆法属于理解记忆法, 通过各种比较, 人们找出事物之间的相似或差异规律, 因果或主次关系, 从而真正理解所要记忆的内容是什么样的, 是记忆空间井然有序, 而非杂乱无章.</li>
<li>比较判断可以是新记忆内容之间的比较, 也可以是新记忆内容与熟知内容之间的比较, 通常后者用的更多, 因为它更容易让人们理解消化型知识, 并激发记忆联想.</li>
<li>将判断法应用于记忆活动, 重点不是得出正确的判断结果, 而是通过判断在事物之间建立某种关系, 使记忆联想更容易.</li>
</ul>
<h2 id="5-三环推理记忆法">12.5.  5. 三环推理记忆法</h2>
<p>将要记忆的内容按照 <code>核心 + 要点 + 环境</code> 三层环形图示, 并标注关键词, 是记忆重点突出, 关系明确, 更加清晰直观.</p>
<p>操控要点:</p>
<ul>
<li>三环推理记忆法属于理解记忆法之一, 它主要是用层次结构将所要记忆内容的重点呈现出来, 让人们直观理解后脉络清晰, 更便于记忆.</li>
<li>核心代表的是所要记忆内容的主题, 中心思想, 目标等.</li>
<li>要点代表的是由核心衍生出的观点, 理由, 知识要点等.</li>
<li>环境代表的是核心适用的边界条件, 环境背景, 应用范围等.</li>
<li>在具体应用中, 个人可以根据记忆内容的复杂性, 增添更多的图标, 更准确的呈现事物的内在逻辑结构. 比如加三角, 箭头, 连线等.</li>
</ul>
<h2 id="6-创意想象记忆法">12.6.  6. 创意想象记忆法</h2>
<p>将所要记忆的内容进行创意想象加工, 使之形象鲜明, 直观夸张, 便于记忆. 常规方法有形象夸张法, 故事串词法.</p>
<h2 id="7-人型脑图记忆法">12.7.  7. 人型脑图记忆法</h2>
<p>借助熟悉的人体结构模式, 将所要记忆的内容与之关联, 达到记忆定位定向的良好效果.</p>
<p>操控要点:</p>
<ul>
<li>人型脑图记忆法是一种非常有效的右脑记忆方法, 它以直观形象的人性图为主干, 将所要记忆的关键词与之关联, 整合为一体, 既方便记, 也方便忆.</li>
<li>定向, 是指人型脑图的各部位分别指向什么, 再次不要求两者有逻辑关系, 可以自由选择, 方便记忆.</li>
<li>定位, 是指人型脑图的各部位功能必须与所要记忆内容 功能有相似性, 两者要有一定的逻辑关系, 不能随意指定, 胡乱关联.</li>
<li>人型脑图可以进一步创意细分, 使之容纳更多的记忆内容, 比如添加眼睛, 耳朵, 嘴巴, 身体分左右两侧, 手分五指等.</li>
<li>人型脑图如果进一步扩张, 可以想象体检一些场景内容, 以适应更复杂的记忆需要. 比如添加树木, 楼房, 道路, 湖泊等.</li>
</ul>
<h1 id="理解力">13.  理解力</h1>
<h2 id="1-形象比喻理解法">13.1.  1. 形象比喻理解法</h2>
<p>将抽象的道理通过形象的方式展示, 使人们更直观容易理解其含义. 常见的方法有拟人拟物, 情境虚拟, 角色模拟, 案例类比等.</p>
<p>操控要点:</p>
<ul>
<li>拟人拟物, 是吧抽象的改为或道理与具体的人或物相关联, 然后求同找出两者的相似之处, 组织语言予以表达解说, 是人们便于直观理解, 印象深刻.</li>
<li>情境虚拟, 是虚拟出一个场景, 让人如身临其境, 通过情境虚拟体验来理解抽象的事物或道理.</li>
<li>角色模拟, 实质上是中换位思考方式, 通过假扮不同的人物角色, 使心里和行为与角色同频, 进而顿悟理解一些道理. 比如让孩子扮演服务工作角色, 体会父母的辛苦.</li>
<li>案例类比, 是借助相似的熟悉案例来解说饿瘪深难的道理或规律, 帮助人们理解.</li>
<li>形象比喻理解法是重要的转换理解法之一, 它通过吧人们难理解的, 陌生的事物转换成容易理解的, 熟悉的事物, 来加深印象, 消化知识.</li>
</ul>
<h2 id="2-虚实二分理解法">13.2.  2. 虚实二分理解法</h2>
<p>把事物分解为有形与无形两个层面, 然后分别观察事物不同层面的属性或组成, 以此深化对事物的认识理解.</p>
<ul>
<li>世界是由有形与无形两部分组成的.</li>
<li>初级的思维划分是以肉眼是否能看见作为划分标准, 深层的划分是以理解的难度作为划分标准的.</li>
</ul>
<h2 id="3-主客观概括理解法">13.3.  3. 主客观概括理解法</h2>
<p>思考问题时, 分别从主观和客观两个角度认识事物, 总结归纳.</p>
<h2 id="4-多为判断理解法">13.4.  4. 多为判断理解法</h2>
<p>按照 <code>问题类型不同 + 判断标准不同 + 判断结论不同</code> 模式理解认知问题是非对错.</p>
<p>操控要点:</p>
<ul>
<li>通常判断的问题可分为主观类问题, 客观类问题, 主客观综合类问题这三种, 对于不同的问题要选择相应的判断标准, 才能得出正确的结论.</li>
<li>主观类问题是指建立在人的主观思想层面的问题, 这类问题有两个判断标准:
<ul>
<li>自我性 我认为对的就是对的.</li>
<li>从众性 多数人认为对的就是对的.</li>
</ul>
</li>
<li>客观类问题实质建立在自然客观规律层面的问题, 这类问题有两个判断标准:
<ul>
<li>真实性 真实的就是对的, 虚假的就是错的</li>
<li>有效性 有效的就是对的, 无效的就是错的</li>
</ul>
</li>
<li>主客观综合类问题是指既包含类主观因素又包含了客观因素的复杂问题, 其对错标准不确定, 要视具体问题具体分析.</li>
</ul>
<h2 id="5-因果发散理解法">13.5.  5. 因果发散理解法</h2>
<p>对看似不相关的事物进行发散思维, 构建它们之间的因果关系链.</p>
<h2 id="6-假设识别理解法">13.6.  6. 假设识别理解法</h2>
<p>通过清晰识别问题的前提假设, 直接洞察理解问题的实质.</p>
<h2 id="7-系统脑图理解法">13.7.  7. 系统脑图理解法</h2>
<p>通过回执系统脑图, 使复杂性事物的内在要素, 联系和结构以直观的方式呈现.</p>
<p>操控要点:</p>
<ul>
<li>系统脑图理解法, 是通过形象图示的方式让人们看清事物内在的要素, 联系和结构. 通常脑图回执的方式不同, 给人们的感受不同, 从某种程度来讲, 系统脑图是一种对信息重组后的呈现, 具体图示因人而异, 因此具有多样性和个性化的特点.</li>
<li>绘制系统脑图的关键是要素的划分, 当系统的要素明确以后, 联系和结构就自然呈现出来了.</li>
<li>系统脑图也可以先确定结构, 后划分要素, 但绘制者需要对事物的认知具有较高的水平, 才能做到举重若轻, 游刃有余, 根据结构规定做出正确的要素划分. 常见的结构模型除了树形结构, 金字塔结构以外, 还有人型结构, 环形结构, 发散结构, 网络结构.</li>
</ul>
<h1 id="分析力">14.  分析力</h1>
<h2 id="1-问题描述分析法">14.1.  1. 问题描述分析法</h2>
<p><code>问题界定 + 已知条件 + 未知答案 + 逻辑公式</code></p>
<ul>
<li>问题界定 确定问题类型. 观察, 分析, 设计, 决策, 创新等</li>
<li>已知条件 识别已知条件. 有形已知 + 无形已知</li>
<li>已知答案 识别已知答案. 有形已知 + 无形已知</li>
<li>逻辑公式 识别逻辑关系. 因果关系 + 其他关系</li>
</ul>
<h2 id="2-一分为二分析法">14.2.  2. 一分为二分析法</h2>
<p>按照 <code>事物二分 + 三联解说</code> 的模式来分析事物的深层本质或变化规律<br>
三联解说: 对立联系, 统一联系, 转化联系</p>
<h2 id="3-哲学思考分析法">14.3.  3. 哲学思考分析法</h2>
<p>通过本源型, 宏观性, 反思性等哲学的角度来思考问题</p>
<ul>
<li>哲学思考分析法是一种极度抽象的思考方法, 其实质是超越问题本身的局限. 追本溯源式的思考, 宏观俯视式的思考, 反思批判式的思考都是建立在高度概括能力之上的.</li>
</ul>
<h2 id="4-天地人判断分析法">14.4.  4. 天地人判断分析法</h2>
<p>从天地人三个不同层面寻找理由, 分析研讨问题的对错真伪. 具体应用在辩论领域中又分为正辩模板和反辩模板两种方法.</p>
<ul>
<li>
<p>正辩模板</p>
<ul>
<li>天级理由 从宏观找判断理由, 站在高层境界, 从大尺度, 大概率角度来说理.</li>
<li>地级理由 从中观找判断理由, 结合环境背景, 从界面平台角度说理.</li>
<li>人级理由 从微观找判断理由, 就事论事, 因人而异, 从浅近处说理.</li>
</ul>
</li>
<li>
<p>反辩模板</p>
<ul>
<li>天级理由 通过概念多维化找理由.</li>
<li>地级理由 通过标准多维化找理由.</li>
<li>人级理由 通过视角多维化找理由.</li>
</ul>
</li>
</ul>
<h2 id="5-整体瑰丽分析法">14.5.  5. 整体瑰丽分析法</h2>
<p>从宏观将推理五法视为一个整体框架, 在遇到问题时, 先确定选择大思路方法, 然后进行具体思考分析.</p>
<ul>
<li>分解推理法: 问题分解, 化繁为简</li>
<li>类比推理法: 题型求同, 借鉴模仿</li>
<li>因果推理法: 因果公式, 关系构建</li>
<li>假设推理法: 假设想象, 大胆猜测</li>
<li>排除推理法: 试错论证, 逐一排查</li>
</ul>
<h2 id="6-反向假设分析法">14.6.  6. 反向假设分析法</h2>
<p>采用反向假设的方式思考分析问题, 以求打开思路, 激发创意. 常见的反向假设有目标逆反, 方法逆反, 规则逆反等.</p>
<h2 id="7-全局思考分析法">14.7.  7. 全局思考分析法</h2>
<p>按照 <code>目标假设 + 整体框架 + 流程推理</code> 的模式, 对事物整体把握, 统筹全局分析和解决问题.</p>
<h1 id="问题">15.  问题</h1>
<ol>
<li>经验与理论的关系?</li>
</ol>
<p>经验知识一堆零散是铜钱, 理论是一根钱串子, 不从理论上提供, 思想就上不了台阶, 产生不了飞跃.</p>
<ol start="2">
<li>学习逻辑思维会降低思维的灵活性么?</li>
</ol>
<p>学习逻辑思维并不会固化人们的思维方式.<br>
学习逻辑思维, 可以掌握正确的思维的方式方法, 帮助人们提高逻辑思维能力, 指导人们的行为更准确, 更高效.<br>
如果没有学习逻辑思维, 在处理问题时, 可能在发散思维是影响下, 偏离正确的, 直接的方式处理问题, 也可能对复杂问题难以入手.<br>
人们需要一套逻辑思维体系去处理生活中各式各样的问题, 而对于不同的类型的问题, 可以采用不同的思维工具处理, 所以不存在固化思维的问题.</p>
<ol start="3">
<li>如何学习逻辑思维?</li>
</ol>
<p>简历逻辑思维知识体系, 掌握各种思维工具, 不断练习.</p>
<h1 id="resource">16.  Resource</h1>
<p>形式逻辑学<br>
3天学会逻辑思维 逻辑思维7级<br>
柔性思维<br>
脑力训练<br>
智力拓张<br>
全脑思维训练场<br>
像大师一样思考<br>
柔性思维教练<br>
思维脑图训练<br>
道家思维活学活用<br>
柔性头脑修炼</p>
<p>逻辑学导论 欧文.M.柯匹<br>
工具论 亚里士多德<br>
新工具论 弗兰西斯.培根<br>
思维工具 奥斯本 头脑风暴</p>
<p><a href="https://www.xinli001.com/info/100349508" target="_blank" rel="noopener">https://www.xinli001.com/info/100349508</a><br>
<a href="http://hd.baofeng.com/play/41/play-802541-drama-22.html" target="_blank" rel="noopener">http://hd.baofeng.com/play/41/play-802541-drama-22.html</a><br>
<a href="https://study.163.com/course/courseMain.htm?courseId=1350019&amp;" target="_blank" rel="noopener">https://study.163.com/course/courseMain.htm?courseId=1350019&amp;</a><em>trace_c_p_k2</em>=630fbaa038d5455b94578ccb7f3561ef</p>
]]></content>
  </entry>
  <entry>
    <title>memory</title>
    <url>/posts/uncategorized/ea6d3435/</url>
    <content><![CDATA[<p>记忆是一种智力活动, 即人们记住事物的能力, 实际上包括对各种信息的识别, 分析, 理解, 加工 (抽象, 比较, 概括等), 存储, 再现等各种综合能力.</p>
<h1 id="记忆的分类">1.  记忆的分类</h1>
<h2 id="按内容分类">1.1.  按内容分类</h2>
<ul>
<li>形象 实体事物</li>
<li>抽象 文字, 概念, 逻辑关系等</li>
<li>情绪 情绪, 情感是指客观事物是否符合人们需要而产生的态度体现.</li>
<li>动作 各种姿势, 习惯等</li>
</ul>
<h2 id="按感知器官分类">1.2.  按感知器官分类</h2>
<ul>
<li>视觉 主导记忆类型, 主要根据事物的形状, 颜色.</li>
<li>听觉 主导记忆类型, 主要根据声音的节奏.</li>
<li>味觉</li>
<li>触觉</li>
<li>混合 多种上述记忆理性组合</li>
</ul>
<h2 id="按保持时间分类">1.3.  按保持时间分类</h2>
<ul>
<li>瞬时记忆</li>
<li>短时记忆</li>
<li>长时记忆</li>
<li>永久记忆 跟自己切身相关的</li>
</ul>
<h2 id="按意识类型分类">1.4.  按意识类型分类</h2>
<p>意指意识, 是否有掌握内容的主观目的性</p>
<ul>
<li>无意识记</li>
<li>无意回忆</li>
<li>有意识记
<ul>
<li>有预定的记忆目的和要求</li>
<li>需要做出记忆的意志和努力</li>
<li>需要运作一定的记忆方法</li>
</ul>
</li>
<li>有意回忆</li>
</ul>
<h1 id="记忆监控">2.  记忆监控</h1>
<p>人的记忆过程分为<code>元记忆 (meta-memory)</code> 和 <code>客体记忆 (object-memory)</code>.<br>
其中, 客体记忆就是我们通常所说的对事物信息进行编码, 存储和提取的加工过程;<br>
而元记忆则是对客体记忆的认识, <code>控制</code> 和 <code>监测</code>.</p>
<p>元记忆的认识主要在于对记忆内容理解, 分析, 概括, 分类, 比较等.<br>
元记忆的控制主要在于记忆内容的 <code>编码</code>, <code>解码</code> 和 <code>触发</code> 策略.<br>
元记忆的监测主要在于记忆过程的评价和改进.</p>
<h1 id="记忆方法">3.  记忆方法</h1>
<p>记忆内容一般为数字, 文字, 以及内容之间的关系.</p>
<ul>
<li>编码
<ol>
<li>通过朗读将记忆内容转换成有节奏的声音</li>
<li>通过联想将记忆内容转换成故事性的图片</li>
<li>通过理解将记录内容结构化整理分类</li>
<li>按顺序将记忆内容串联成有前后关系顺序的故事</li>
</ol>
</li>
<li>触发<br>
将记忆内容与一件熟悉的事物锚定, 在看到这件特定事物时, 就能联想起记忆内容
<ol>
<li>特殊的手势, 动作, 语句</li>
<li>特定的时间</li>
</ol>
</li>
<li>解码<br>
根据记忆内容前后关系的线索还原出记忆内容</li>
</ul>
<h2 id="常见方法">3.1.  常见方法</h2>
<ul>
<li>记忆宫殿<br>
想象一个熟悉的空间, 比如自己的家, 这个空间再划分出不同的小房间,<br>
在每个小房间内将不同的事物与记忆内容想关联,<br>
然后确定一条固定的路径遍历整个空间,<br>
通过事物与记忆内容的线索联想, 以及固定的遍历路径来记忆.</li>
<li>思维导图<br>
通过对记忆内容系统化的理解, 将记忆内容通过不同角度分类, 并标注不同颜色来记忆.</li>
<li>绘画联想<br>
将记忆内容转换成一副 <code>生动</code>,<code>具体</code>,<code>关己</code>,<code>夸张</code> 的图片.</li>
<li>复述<br>
将已记忆的内容复述出来, 能体现理解水平, 同时也能帮助更牢固的记忆.</li>
<li>复习<br>
根据艾宾浩斯记忆曲线, 记忆的牢固程度与时间和复习次数有关.</li>
<li>记忆后冥想<br>
长时间的记忆内容会使大脑疲劳, 所有在专注的记忆一段时间后, 冥想一会, 让大脑自由放空, 有时间消化记忆内容, 会比一直不停的反复记忆更能掌握记忆内容.</li>
<li></li>
</ul>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
<a href="https://wiki.mbalib.com/wiki/%E8%AE%B0%E5%BF%86%E5%8A%9B" title target>记忆力</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>life/创业/逆向盈利</title>
    <url>/posts/uncategorized/fc91d338/</url>
    <content><![CDATA[<p><a href="https://www.ximalaya.com/jiaoyu/18364928/" target="_blank" rel="noopener">https://www.ximalaya.com/jiaoyu/18364928/</a><br>
<a href="https://www.iqiyi.com/v_19rs7mn8m4.html#curid=2905815600_b9f085183bc2ec02d25b4f3722ca6888" target="_blank" rel="noopener">https://www.iqiyi.com/v_19rs7mn8m4.html#curid=2905815600_b9f085183bc2ec02d25b4f3722ca6888</a></p>
<p>正向盈利 = 投资 收入 成本 利润</p>
<p>行业周期: 暴力 微利 无利</p>
<p>正向盈利 3 大障碍:<br>
利润找不到出路<br>
资产找不到出口<br>
投资无出头之日</p>
<p>今天最大的机会来自于传统行业, 传统老板, 传统公司, 传统生意, 如果用逆向盈利的方式去做, 所有行业都值得再做一次</p>
<p>逆向盈利:</p>
<pre><code>清 观念
调 结构
补 方法
</code></pre>
<p>学习如何有效思考</p>
<p>模式盈利: 把看得见的钱分掉, 赚看不见的前<br>
系统盈利: 整合资源盈利</p>
<p>股东<br>
代理<br>
客户</p>
<p>开企业的要点<br>
- 投资<br>
- 收入<br>
- 成本<br>
- 利润</p>
<p>企业盈利模式:<br>
- 产品盈利<br>
- 功能<br>
- 附加价值<br>
- 品牌盈利<br>
- 模式盈利<br>
- 系统盈利<br>
- 资源整合<br>
- 资源盈利<br>
- 收租盈利<br>
- 金融盈利<br>
- 金融杠杆<br>
- 生态盈利</p>
<p>如何判断投资的价值<br>
- 投资回报率:  利润 / 投资</p>
<p>商业模式<br>
1. 卖给股东<br>
2. 卖给代理商<br>
3. 落地</p>
<pre><code>逆向盈利
    跑量, 裂变
</code></pre>
<p>传销<br>
直销</p>
<p>8 种盈利方式<br>
6 种莫斯<br>
4 种思维<br>
2 种类型的公司<br>
1 个目标</p>
<p>商业模式:<br>
1 个中心<br>
3 个基本点<br>
6 个步骤<br>
界定和把我利润源  客户<br>
不断完善企业的利润点 产品<br>
打造利润杠杆, 构筑商业模式内部运作价值<br>
疏通扩宽利润渠道, 构筑商业模式外部运作价值链<br>
建立有效保护利润的利润屏障<br>
12 大趋势</p>
]]></content>
  </entry>
  <entry>
    <title>thingking-tool</title>
    <url>/posts/uncategorized/15e61ecf/</url>
    <content><![CDATA[<h1 id="空-雨-散">1.  空 雨 散</h1>
<p>这是最常用的决策模式,  <em>空・雨・伞</em>, 意如其名, 也就是说,  <em>抬头看天, 天空乌云密布, 像是要下雨的样子, 所以出门时带上把雨伞吧</em>.</p>
<p>这里的 <em>抬头看天</em>, 是说要看清自己所处的周边环境, 也就是分析自己的外部环境. 而由此得出 <em>像是要下雨的样子</em>, 便是从分析自己的外部环境中得出的自我分析. 我们可以看到在这个思维过程中, 其视角是从外至内, 从大到小. 当然, 其结果是可能下雨, 也可能不下雨.</p>
<p>我们在此基础上得出 <em>出门时带上把雨伞吧</em>这个结论, 思考一下, 这里为什么是 <em>要带上雨伞呢</em>, 原因可能是只有雨伞, 也可能是不喜欢雨衣, 这些因素都考虑进来, 最后得出 <em>要带雨伞</em>这一结论.</p>
<p>其实, 不必把这个思考过程想得太过复杂, 简单来说, 我们在进行决策时通常会经过这样的步骤:</p>
<ul>
<li>空: 把握事实和现状</li>
<li>雨: 解释, 预测</li>
<li>伞: 行动, 提案</li>
</ul>
<h1 id="5w1h">2.  5W1H</h1>
<p>5W1H就是我们常说的[who / where / why / when / what / how]. 也许会有人觉得这么简单的东西也能称之为逻辑思维？！是的, 的确是的, 因为5W1H所代表的就是最重要的信息. 尽管广为人知, 但决不能因此而轻视之. 特别是当你想向别人传达信息时, 这个思考框架会发挥极大作用.</p>
<h1 id="矩阵分析法">3.  矩阵分析法</h1>
<p>矩阵分析法是指画出横轴竖轴, 将思考因素排列其中, 在此基础上进行分析, 将问题视觉化. 比如: PPM分析 (product portfolio management) , 以横轴表示市场占有率, 以纵轴表示成长率, 分为四个象限, 用来管理产品的生命周期.</p>
<p>当你遇见很棘手的问题, 不知如何下手时, 可以画出相应的矩阵图来帮助自己分析问题. 将实际工作中常用到的关键词, 比如满意度, 问题点, 活跃度, 营业额等, 列入数轴之中, 分析其中的因果关系. 这里为大家介绍两个常用的矩阵.</p>
<h2 id="swot矩阵">3.1.  SWOT矩阵</h2>
<p>分析优势, 弱点, 机会, 危机, 可供决策时参考.</p>
<h2 id="紧迫性和重要度的矩阵">3.2.  紧迫性和重要度的矩阵</h2>
<p>将紧迫性和重要度结合起来, 不仅可以帮你跟有效地利用时间, 在你做优先级排序时, 也可以活用这个矩阵.</p>
<h1 id="pdca循环">4.  PDCA循环</h1>
<p>Plan/Do/Check/Adjust, 也就是在制定战略时, 首先做出假设, 然后将制定计划并付诸实施, 再将结果用于制定新的计划.</p>
<h1 id="费米推理">5.  费米推理</h1>
<p>所谓的 <em>费米推理</em>指的是, 利用手边现有的有限信息及知识, 推论出很大的答案.</p>
<p>比如, 想知道 <em>日本一年的新车售出量有多少</em>, 通常的做法是google一下, 登陆汽车工业会的网站, 各个汽车制造商的网站等调查相关数据, 但是, 如果我们假设没有这些数据的话, 你会怎么做？这里要用到的, 就是费米推理.</p>
<p>思考过程如下:</p>
<p>首先, 日本人口约为1.3亿, 其中有驾照的人口约为1/3, 而这1/3中有自家车的约为1/3. 假定一辆汽车的平均使用年限为7年的话, 那么, 去年换新车的数量约为整体的1/7,也就得出了130,000,000÷3÷3÷7≒2,000,000, 也就是自驾车中需要换新的数量约为200万辆.</p>
<p>另外, 新车售出量中还包括了卡车, 拖拉机, 商用车等, 如果假定这部分的售出量与自驾车的换新数量相同也就是200万辆的话, 得出 <em>日本一年的新车售出量约为400万辆</em> 的结论, 而实际的统计数据是500万辆.</p>
<p>在费米推理中, 重要的是你从哪里入手思考, 以及将如何展开推理论. 经常锻炼自己进行 <em>费米推定</em>的思维训练, 在有限的时间里, 无限接近正确答案, 培养独立思考的能力, 进而练就解决问题的能力.</p>
<h1 id="aidma法则">6.  AIDMA法则</h1>
<p>AIDMA法则可以用来说明消费者为何会购买某一商品的背后逻辑.<br>
具体说来, 也就是:</p>
<ul>
<li>A (Attention让消费者知道这一商品的存在) : 认知阶段;</li>
<li>I (Interest产生兴趣) D (Desire培养欲望) M (Memory形成记忆) : 情感阶段;</li>
<li>A (Action实际购买) : 行动阶段.</li>
</ul>
<h1 id="水平思考的六顶帽子">7.  水平思考的六顶帽子</h1>
<p>六顶帽子的颜色, 依次是:</p>
<ul>
<li>红: 直觉视点, 即根据直觉判断</li>
<li>蓝: 思考视点, 即根据理性思考来判断</li>
<li>白: 中立视点, 即根据客观资料和数据判断</li>
<li>绿: 创造视点, 即创造性思维</li>
<li>黄: 乐观视点, 即正向性思维</li>
<li>黑: 批判视点, 即批判性思维</li>
</ul>
<h1 id="smart-原则">8.  SMART 原则</h1>
<p>SMART 原则就是项目管理中常用的一个思维框架.</p>
<ul>
<li>S Specific 代码具体, 指绩效考核要切中特定的工作指标,不能笼统.</li>
<li>M Measuable 代表可度量, 指绩效指标是数量化或者行为化的, 验证这些绩效指标的数据或者信息是可以获得的.</li>
<li>A Attainable 代表可实现, 指绩效指标在付出努力的情况下可以实现, 避免设立过高或过低的目标.</li>
<li>R Realistic 代表实现性, 指绩效指标是实实在在的, 可以证明和观察; 绩效指标是与本职工作相关联的.</li>
<li>T Time bound 代表时限, 注重完成绩效指标的特定期限.</li>
</ul>
<h1 id="产品思维模型">9.  产品思维模型</h1>
<ul>
<li>产品特点</li>
<li>客户结构</li>
<li>资源盘点</li>
<li>机会条件</li>
<li>风险管控</li>
<li>人员结构</li>
</ul>
<p>产品思维模型是关于产品的整体考量. 产品的胜出, 主要在于两点: 解决 (客户) 需求与排除竞争. 客户的核心需求牵引产品的核心竞争力, 塑造了产品特质, 而产品特质决定了客户结构; 要想做好产品, 就需要具备相应的资源, 资源与机会条件之间的差距就是我们努力的方向; 市场经济中, 风险 (尤其是竞争) 是永存的, 需要人创造, 改善条件去管控, 化解.</p>
<h1 id="头脑风暴法">10.  头脑风暴法</h1>
<p>采用头脑风暴法组织群体决策时, 要集中有关专家召开专题会议, 主持者以明确的方式向所有参与者阐明问题, 说明会议的规则, 尽力创造融洽轻松的会议气氛. 一般不发表意见, 以免影响会议的自由气氛. 由专家们 <em>自由</em>提出尽可能多的方案.</p>
<p>头脑风暴何以能激发创新思维？根据A·F·奥斯本本人及其他研究者的看法, 主要有以下几点:</p>
<ul>
<li>联想反应<br>
联想是产生新观念的基本过程. 在集体讨论问题的过程中, 每提出一个新的观念, 都能引发他人的联想. 相继产生一连串的新观念, 产生连锁反应, 形成新观念堆, 为创造性地解决问题提供了更多的可能性.</li>
<li>热情感染<br>
在不受任何限制的情况下, 集体讨论问题能激发人的热情. 人人自由发言, 相互影响, 相互感染, 能形成热潮, 突破固有观念的束缚, 最大限度地发挥创造性地思维能力.</li>
<li>竞争意识<br>
在有竞争意识情况下, 人人争先恐后, 竞相发言, 不断地开动思维机器, 力求有独到见解, 新奇观念. 心理学的原理告诉我们, 人类有争强好胜心理, 在有竞争意识的情况下, 人的心理活动效率可增加50%或更多.</li>
<li>个人欲望<br>
在集体讨论解决问题过程中, 个人的欲望自由, 不受任何干扰和控制, 是非常重要的. 头脑风暴法有一条原则, 不得批评仓促的发言, 甚至不许有任何怀疑的表情, 动作, 神色. 这就能使每个人畅所欲言, 提出大量的新观念.</li>
</ul>
<p>开展头脑风暴的步骤</p>
<p>1.汇集问题<br>
派代表轮流上台发表头脑风暴的结果, 并将卡片一张张贴在事先准备好的大白板上, 如果有相同点, 便将相同的问题贴在一起</p>
<p>2.分类整理<br>
以相似性为基础, 从容地筛选卡片, 把类似项目的卡片分组摆放</p>
<p>3.排出顺序<br>
将每一大类的问题, 根据其重要性排列顺序, 如果问题较多, 可以分成A, B, C三组, A组是最重要的, B组是一般重要, C组是次要的.</p>
<p>4.划分责任<br>
将各类问题涉及的部门, 以矩阵图的方式列出, 并标示出主要负责部门与参与解决部门.</p>
<p>5.构思方案<br>
构思方案最好由主要负责部门带头, 举办小型研讨会, 并提出建议方案, 经由决策小组同意后, 形成决策, 同时交付执行.</p>
<p>6.效果确认与跟进<br>
根据执行计划, 定期与不定期地检讨成果与进度, 以确保问题能顺利解决.</p>
<p>7.标准化<br>
将此次的经验变成标准化的流程, 并将相关的资料书面化, 以便未来参考.</p>
<h1 id="resource">11.  Resource</h1>
<a href="https://wiki.mbalib.com/wiki" title target>MBA智库百科</a>]]></content>
  </entry>
  <entry>
    <title>number-to-graphic</title>
    <url>/posts/uncategorized/e4eabef3/</url>
    <content><![CDATA[<p>以 2 位数字为一组去记忆, 是因为 2 位数字可以对应的中文词组比其他位数的词组多.</p>
<p>数字 | 名词 | 动词 | 形容词<br>
1 | 笔 | 依靠, 倚靠<br>
2 | 鹅, 鸭子 | |<br>
3 | 耳朵 |<br>
4 | 小旗子 | 比心<br>
5 | 钩子, 屋子 |<br>
6 | 勺子, 柳树 | 溜了<br>
7 | 拐杖 | 吃饭<br>
8 | 溜冰鞋 | 发财<br>
9 | 酒, 猫 |<br>
00 | 望远镜 |<br>
01 | 灵异(小鬼) |<br>
02 | 铃儿 |<br>
03 | 灵山 |<br>
04 | 灵石, 灵丝 |<br>
05 | 领舞, 领悟<br>
06 | 灵柳(成精的柳树, 观音的玉净瓶) |<br>
07 | 灵气<br>
08 | 淋巴, 风火轮(有灵气的溜冰鞋)<br>
09 | 灵酒, 邻居<br>
10 | 棒球, 一块石头, 依恋, 伊琳<br>
11 | 筷子, 瑶瑶 | 失忆, 试衣, |诗意<br>
12 | 椅子<br>
13 | 医生 | | 一生<br>
14 |  | | 一世<br>
15 | 圆月, 鹦鹉, 衣物, 义乌, 医务, 遗物, 药物, 妖雾, 妖物<br>
16 | 石榴 | | 一溜烟,一流<br>
17 | 仪器,遗弃的孤儿<br>
18 | 石板, 彩票(要发)<br>
19 | 衣勾, 高尔夫球(1像一个人, 9像倒过来的球杆)<br>
20 | 两块石头 钥匙 香烟(20支)<br>
21 | 鳄鱼<br>
22 | 双胞胎<br>
23 | 幸运星<br>
24 | 饿死的乞丐<br>
25 | 二胡<br>
26 | 二流<br>
27 | 耳机<br>
28 | 自行车(二八大扛) 恶霸<br>
29 | 二舅<br>
30 | 三菱汽车, 山石<br>
31 | 鲨鱼<br>
32 | 扇耳光, 伞儿, 山坳<br>
33 | 两只耳朵 | | 姗姗来迟<br>
34 | 三丝 | 三思<br>
35 | 珊瑚<br>
36 | 山路<br>
37 | 山鸡, 三七(中药)<br>
38 | 妇女<br>
39 | 寒冬(三九寒冬)<br>
40 | 司令<br>
41 | 司仪<br>
42 | 柿儿(柿子) | 找事儿<br>
43 | 石山<br>
44 | 石狮 | 实施 | 史诗<br>
45 | 师傅<br>
46 | 饲料 | 私聊<br>
47 | 司机, 四季 | 死机<br>
48 | 石板<br>
49 | 毛泽东(新中国成立)<br>
50 | 五菱, 武林盟主<br>
51 | 工人 | 劳动<br>
52 | 我儿<br>
53 | 雾散<br>
54 | 青年<br>
55 | 火车<br>
56 | 蜗牛<br>
57 | 武器<br>
58 | 尾巴<br>
59 | 棺材(无可救药的人放进棺材)<br>
60 | 榴莲<br>
61 | 儿童<br>
62 | 炉儿<br>
63 | 流沙<br>
64 | 螺丝<br>
65 | 锣鼓<br>
66 | 两只小蝌蚪<br>
67 | 绿旗, 氯气<br>
68 | 喇叭<br>
69 | 太极<br>
70 | 麒麟<br>
71 | 奇异果<br>
72 | 企鹅<br>
73 | 花旗参<br>
74 | 骑士<br>
75 | 起舞<br>
76 | 气流<br>
77 | 亲戚<br>
78 | 青蛙<br>
79 | 气球<br>
80 | 巴黎铁塔<br>
81 | 军人<br>
82 | 靶儿<br>
83 | 项羽(力拔山兮气盖世)<br>
84 | 巴士<br>
85 | 白虎<br>
86 | 八路<br>
87 | 白旗<br>
88 | 爸爸<br>
89 | 芭蕉, 八角<br>
90 | 精灵<br>
91 | 球衣, 秋衣<br>
92 | 球儿<br>
93 | 救生圈<br>
94 | 调酒师<br>
95 | 酒壶<br>
96 | 九牛一毛, 九牛二虎<br>
97 | 格斗, 八神, 香港<br>
98 | 酒吧<br>
99 | 舅舅</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/pdca</title>
    <url>/posts/uncategorized/2ce7ccab/</url>
    <content><![CDATA[<h1 id="如何解决问题">1.  如何解决问题</h1>
<p>发现问题<br>
分析问题<br>
解决问题<br>
总结问题</p>
<p>这是解决问题行之有效的流程.</p>
<ol>
<li>
<p>分析问题</p>
<p>先对问题做界定, 了解问题域</p>
<p>问题域:<br>
场景<br>
原因</p>
</li>
<li>
<p>解决问题</p>
<p>列出解决方案后选择</p>
<p>优先解决主要诉求. 问题可能被拆分成许多小问题, 需要紧急, 重要程度排序.</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/名录</title>
    <url>/posts/uncategorized/6f7596a5/</url>
    <content><![CDATA[<h1 id="个人培养">1.  个人培养</h1>
<h2 id="书">1.1.  书</h2>
<p>思考快与慢 – 丹尼尔卡尼曼</p>
<h2 id="人物">1.2.  人物</h2>
<p>丹尼尔卡尼曼<br>
樊登</p>
<h1 id="管理">2.  管理</h1>
<h1 id="书-2">3.  书</h1>
<p>卓有成效的管理者 – 德鲁克</p>
<h2 id="人物-2">3.1.  人物</h2>
<p>德鲁克  管理学鼻祖</p>
<h2 id="公司">3.2.  公司</h2>
<p>IBM<br>
华为</p>
]]></content>
  </entry>
  <entry>
    <title>star模型</title>
    <url>/posts/uncategorized/7b1118cc/</url>
    <content><![CDATA[<p>STAR 模型常用于面试过程中面试官了解应聘者的方法. 主要目的是为了收集应聘者是否有胜任岗位的素质.</p>
<ul>
<li>Situation 背景<br>
任务背景</li>
<li>Task 任务<br>
任务具体内容</li>
<li>Action 行动<br>
采取的行动</li>
<li>Result 结果<br>
行动带来的结果</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/如何与人相处</title>
    <url>/posts/uncategorized/98777dd0/</url>
    <content><![CDATA[<h1 id="上帝心态">1.  上帝心态</h1>
<p>心态会影响与人相处的格局.<br>
从第一印象开始, 双方的相处格局就开始建立.</p>
<p>相互尊重是彼此相处的最好方式, 但生活中不能人人都能如此, 甚至相同的人, 在不同的时间, 场合下对人的态度也是会变的.<br>
大概是由于物竞天择的道理, 只有比自己强大, 才能令人敬畏.<br>
比如, 小时候的你对父母言听计从, 但是到了青春期接触的人多了, 觉得父母不过尔尔, 也或许是翅膀硬了, 自我膨胀的感觉, 使你开始出现叛逆.<br>
又或者是对老师, 对警察, 对暴力分子的和颜悦色.<br>
还有各种各样的歧视链, 比如, 地域, 肤色, 性别, 职业等.<br>
而日常生活中, 一般遇到的是与自己类似的人, 引起这种格局的是权利, 金钱, 职业, 智力经验.</p>
<p>这些外在的因素导致的格局很难改变, 我们应该怎么面对.<br>
上帝心态, 可以想象成上帝俯视地表每一个人的那种古井无波的心态.<br>
就像脑子里住着个上帝, 每个人的言行都看的一清二楚, 包括自己, 此时无论发生什么事情, 都无法引起情绪波动.</p>
<h1 id="尊重他人">2.  尊重他人</h1>
<p>建立档案, 知晓背景, 摆正心态.</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/如何加快思维速度</title>
    <url>/posts/uncategorized/b18e129b/</url>
    <content><![CDATA[<ol>
<li>对于已知信息的混乱, 则通过辅助工具分析, 理清思路</li>
<li>对于没有遇见过的问题, 一下子无法找到头绪</li>
<li>抽象化类似问题, 寻找解决类似问题的思路</li>
<li>要多思考, 多练习</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/学习如何有效思考</title>
    <url>/posts/uncategorized/fba4877d/</url>
    <content><![CDATA[<p>过去的方法真的是有效的么?</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/如何避免逻辑错误</title>
    <url>/posts/uncategorized/d6fbb43d/</url>
    <content><![CDATA[<ol>
<li>逻辑错误常因为逻辑过于复杂之后, 对一些逻辑条件的思考的不足</li>
<li>常因为思考中断</li>
<li>思考中断是因为往一个逻辑条件推理的时候, 回过头思考忘记了之前的上下文</li>
<li>如何解决</li>
<li>建立事情的抽象模型</li>
<li>罗列已知的信息在其他地方辅助记忆</li>
<li>在已知信息基础上进行推理</li>
<li>通过以上信息获得通用的思考模型, 防止思考出错, 避免重复推导</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/方法论</title>
    <url>/posts/uncategorized/12ddcf8/</url>
    <content><![CDATA[<ul>
<li>问题空间<br>
要解决什么样的问题?<br>
有哪些约束条件?</li>
<li>解题空间<br>
有哪些解决方法?<br>
解决方法各有什么优缺点?</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>有效沟通四步法</title>
    <url>/posts/uncategorized/540986d9/</url>
    <content><![CDATA[<ul>
<li>表达你要的, 而不是不要的</li>
<li>表达感受, 而不是情绪<br>
表达自己是愤怒的, 而不是愤怒的表达</li>
<li>表达你的需求而不是抱怨<br>
不要让对方猜测, 我想要什么.</li>
<li>表达你要区的方向, 而不是抱怨所在的位置<br>
看目标, 而不是陷在事件里</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/智慧的意义</title>
    <url>/posts/uncategorized/8b0ecc9/</url>
    <content><![CDATA[<p>单纯通过力量(等级, 权利)只能压制比自己弱的人.<br>
生活中有很多甚至不能暴力解决的事情. 比如谈恋爱, 搞定丈母娘, 谈生意, 职场交际等.<br>
这些事情那就要靠智慧(布局, 谋划, 策略, 战术, 技巧), 靠科学, 靠行之有效的方法.</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/跳槽的资本是什么</title>
    <url>/posts/uncategorized/82c57850/</url>
    <content><![CDATA[<p>企业对员工的需求是员工的价值, 能力多少决定给出多少酬劳<br>
员工对企业的需求是薪资福利, 往往是超出自身能力范围的待遇</p>
<p>所以就可能出现, 企业找不到人, 人找不到好工作</p>
<p>所以跳槽或者找工作的资本就是自身的价值, 只要自身能力过硬, 就不怕找不到好的工作</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/让声音更有磁性</title>
    <url>/posts/uncategorized/efd024df/</url>
    <content><![CDATA[<p>发音主要在 口腔, 鼻腔和胸腔<br>
练习腹式呼吸法</p>
<p>喉咙不要用力, 在胸腔处共振, 使声音更有磁性</p>
]]></content>
  </entry>
  <entry>
    <title>素质模型</title>
    <url>/posts/uncategorized/e9d8f0a0/</url>
    <content><![CDATA[<p>知识——某一职业领域需要的信息 (如人力资源管理的专业知识) ;<br>
技能——掌握和运用专门技术的能力 (如英语读写能力, 计算机操作能力) ;<br>
社会角色——个体对于社会规范的认知与理解 (如想成为工作团队中的领导) ;<br>
自我认知——对自己身份的知觉和评价 (如认为自己是某一领域的权威) ;<br>
特质——某人所具有的特征或其典型的行为方式 (如喜欢冒险) ;<br>
动机——决定外显行为的内在稳定的想法或念头 (如想获得权利, 喜欢追求名誉) .</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://wiki.mbalib.com/wiki/%E7%B4%A0%E8%B4%A8%E6%A8%A1%E5%9E%8B" title target>素质模型</a>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ab</title>
    <url>/posts/uncategorized/9e83486d/</url>
    <content><![CDATA[<p>安装ab工具</p>
<p>yum install httpd-tools</p>
<p>参数说明</p>
<p>-n: 执行的请求个数, 默认时执行一个请求</p>
<p>-c: 一次产生的请求个数, 即并发个数</p>
<p>-p:模拟post请求, 文件格式为gid=2&amp;status=1,配合-T使用</p>
<p>-T:post数据所使用的Content-Type头信息, 如果-T ‘application/x-www-form-urlencoded’</p>
<p>1.模拟get请求<br>
直接在url后面带参数即可</p>
<p>ab -c 10 -n 10 <a href="http://www.test.api.com/?gid=2" target="_blank" rel="noopener">http://www.test.api.com/?gid=2</a></p>
<p>​</p>
<p>2.模拟post请求</p>
<p>在当前目录下创建一个文件post.txt</p>
<p>编辑文件post.txt写入</p>
<p>cid=4&amp;status=1</p>
<p>相当于post传递cid,status参数</p>
<p>ab -n 100  -c 10 -p ‘post.txt’ -T ‘application/x-www-form-urlencoded’ ‘<a href="http://test.api.com/ttk/auth/info/" target="_blank" rel="noopener">http://test.api.com/ttk/auth/info/</a>’</p>
]]></content>
  </entry>
  <entry>
    <title>management/self-management/金钱的意义</title>
    <url>/posts/uncategorized/7a4f0d78/</url>
    <content><![CDATA[<p>生活中的事情可分为 2 种:<br>
- 能用钱解决的事情 80%<br>
- 不能用钱解决的事情 20%</p>
<p>金钱不是万能的, 也不需要万能, 它是我们用来解决问题的工具, 生活中大部分事情都能用金钱解决</p>
<p>所以面对赚钱的策略有:<br>
- 优化金钱的方式<br>
- 劳动所得 提高自身价值, 获得更高的认可<br>
- 被动收入 跳出生活舒适圈, 在业余时间多尝试各种收入方式</p>
]]></content>
  </entry>
  <entry>
    <title>locale</title>
    <url>/posts/uncategorized/4180c698/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置操作系统语言</span><br><span class="line"># 或者可以 修改 &#96;&#x2F;etc&#x2F;locale.gen&#96;,  之后执行 &#96;sudo locale-gen&#96;</span><br><span class="line">sudo dpkg-reconfigure locales</span><br><span class="line"></span><br><span class="line">sudo localectl set-locale LANGUAGE&#x3D;zh_CN.utf8</span><br><span class="line">sudo localectl set-locale LANGUAGE&#x3D;zh_CN.utf8</span><br><span class="line"># sudo localectl set-locale LC_ALL&#x3D;zh_CN.utf8</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>linux</title>
    <url>/posts/uncategorized/9211474f/</url>
    <content><![CDATA[<h1 id="桌面系统分区">1.  桌面系统分区</h1>
<table>
<thead>
<tr>
<th>Dir</th>
<th>Desc</th>
<th>Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>/tmp</td>
<td>临时文件</td>
<td>2G</td>
</tr>
<tr>
<td>/home</td>
<td>用户目录</td>
<td>Max</td>
</tr>
<tr>
<td>/usr</td>
<td>软件</td>
<td>20G</td>
</tr>
<tr>
<td>/</td>
<td>跟目录</td>
<td>10G</td>
</tr>
<tr>
<td>/var</td>
<td>系统日志</td>
<td>20G</td>
</tr>
<tr>
<td>/opt</td>
<td>企业级软件</td>
<td>10G</td>
</tr>
<tr>
<td>/data</td>
<td>企业应用数据　｜ 20G</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="制作-u-盘启动盘">2.  制作 U 盘启动盘</h1>
<p><strong>Debian 官网会打包 3 个 DVD镜像, 只有第一个镜像制作成 U 盘启动盘, 才能被开机启动时引导, 其他 2 个都不行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 1. 插入 U 盘, 查找确定 U 盘位置, 通常在如 &#96;&#x2F;dev&#x2F;sdX&#96; 的位置</span><br><span class="line">sudo fdisk -l</span><br><span class="line"># osx: diskutil list</span><br><span class="line"></span><br><span class="line"># 2. 卸载 U 盘</span><br><span class="line">sudo umount &#x2F;dev&#x2F;sdb</span><br><span class="line"># osx: diskutil unmountDisk &#x2F;dev&#x2F;disk2</span><br><span class="line"></span><br><span class="line"># 3. 格式化 U 盘</span><br><span class="line"># -l 是强制执行,  如果没有, 则会提示 &#96;partition not foun&#96;</span><br><span class="line">sudo mkfs.vfat -F 32 -l &#x2F;dev&#x2F;sdb</span><br><span class="line"># osx: Disk Utility &#x2F; View &#x2F; show all Devices, 之后格式化成 ExFat, 分区类型选择 GUID</span><br><span class="line"></span><br><span class="line"># 4. 将镜像写入 U 盘</span><br><span class="line"># bs 是写入速度, 默认是 512 K</span><br><span class="line">dd if&#x3D;ubuntu-16.0.3-desktop-amd64.iso of&#x3D;&#x2F;dev&#x2F;sdb bs&#x3D;4m</span><br><span class="line"></span><br><span class="line"># 5. 重启机器后安装</span><br></pre></td></tr></table></figure>
<h1 id="格式化-u-盘">3.  格式化 U 盘</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 1. 插入 U 盘, 查找确定 U 盘位置, 通常在如 &#96;&#x2F;dev&#x2F;sdb&#96; 的位置</span><br><span class="line">sudo fdisk -l</span><br><span class="line"></span><br><span class="line"># 2. 卸载 U 盘</span><br><span class="line">umount &#x2F;dev&#x2F;sdb</span><br><span class="line"></span><br><span class="line"># 3. 格式化 U 盘</span><br><span class="line"># 格式化为 FAT 分区</span><br><span class="line">sudo mkfs.fat &#x2F;dev&#x2F;sdb -I</span><br><span class="line">sudo mkfs.fat -F32 -v -l -n &quot;     &quot; &#x2F;dev&#x2F;sdb</span><br><span class="line">sudo mkfs.vfat -F 32 &#x2F;dev&#x2F;sdb</span><br><span class="line"></span><br><span class="line"># 格式化为 NTFS 分区, 先要安装ntfsprogs</span><br><span class="line">sudo apt-get install ntfsprogs</span><br><span class="line">sudo mkfs.ntfs &#x2F;dev&#x2F;sdb</span><br><span class="line">sudo mkfs.ntfs -Q -v -F -L &quot;&quot; &#x2F;dev&#x2F;sdb</span><br><span class="line"></span><br><span class="line"># 格式化为ext4&#x2F;3&#x2F;2</span><br><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;sdb    # 格式化为ext4分区</span><br><span class="line">sudo mkfs.ext3 &#x2F;dev&#x2F;sdb    # 格式化为ext3分区</span><br><span class="line">sudo mkfs.ext2 &#x2F;dev&#x2F;sdb    # 格式化为ext2分区</span><br><span class="line"></span><br><span class="line"># 由于ext系列的分区都有一个给super user的保留空间, 必须占用一定的百分比, 默认5%, 这么一来格式化容量小的分区还不觉得, 5%也没多少, 但是如果是几百G, 1T的分区就会有问题, in this case, 5%可是不小的数目啊！</span><br><span class="line">sudo mkfs.ext3 -m 0.05 &#x2F;dev&#x2F;sda1    </span><br><span class="line"> # 注意-m后的参数, 设定的已经是百分位, 这里设定为0.05, 是0.05%, 也就是万分之5！</span><br><span class="line"></span><br><span class="line">sudo fdisks -l</span><br><span class="line"></span><br><span class="line">基本功, 格式化命令, 以格式化 &#x2F;dev&#x2F;sdb4 分区为例: </span><br><span class="line">sudo umount &#x2F;dev&#x2F;sdb4    # 必须先卸载该分区</span><br><span class="line"></span><br><span class="line"># 格式化为 FAT 分区</span><br><span class="line">sudo mkfs.vfat -F 32 &#x2F;dev&#x2F;sdb4       # -F 参数必须大写, 参数有 12, 16 和 32, 分别对应 FAT12, FAT16, FAT32. </span><br><span class="line"></span><br><span class="line"># 格式化为 NTFS 分区, 先要安装ntfsprogs, 以 Ubuntu &#x2F; Debian 为例: </span><br><span class="line">sudo apt-get install ntfsprogs</span><br><span class="line"></span><br><span class="line">#然后执行格式化命令, 以格式化 &#x2F;dev&#x2F;sda1 分区为例: </span><br><span class="line">sudo umount &#x2F;dev&#x2F;sda1       # 必须先卸载该分区</span><br><span class="line">sudo mkfs.ntfs &#x2F;dev&#x2F;sda1        # 格式化为ntfs速度有点慢. </span><br><span class="line"></span><br><span class="line"># 格式化为ext4&#x2F;3&#x2F;2 ,  以格式化 &#x2F;dev&#x2F;sda1 分区为例: </span><br><span class="line">sudo umount &#x2F;dev&#x2F;sda1       # 必须先卸载该分区</span><br><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;sda1    # 格式化为ext4分区</span><br><span class="line">sudo mkfs.ext3 &#x2F;dev&#x2F;sda1    # 格式化为ext3分区</span><br><span class="line">sudo mkfs.ext2 &#x2F;dev&#x2F;sda1    # 格式化为ext2分区</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="ubuntu-安装">4.  Ubuntu 安装</h1>
<p>需要将引导模式改为 legacy, UEFI 会导致提示 <code>vfat 到 /boot/efi 上失败</code></p>
]]></content>
  </entry>
  <entry>
    <title>nmap</title>
    <url>/posts/uncategorized/96512c85/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看局域网中在线的IP</span></span><br><span class="line">nmap -sP 192.168.1.1/24</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>企业可视化流程建模 LOVEM</title>
    <url>/posts/management/2ffde89d/</url>
    <content><![CDATA[<p>LOVEM, Line Of Visibility Enterprise Modeling</p>
<h1 id="resources">1.  Resources</h1>
<ul>
<li><a href="https://wiki.mbalib.com/wiki/LOVEM" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/LOVEM</a></li>
</ul>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>management tool</tag>
      </tags>
  </entry>
  <entry>
    <title>meta-char</title>
    <url>/posts/uncategorized/9c4a9773/</url>
    <content><![CDATA[<h1 id="bash-标准元字符">1.  bash 标准元字符</h1>
<pre><code>* 0个或多个在*之前的那个普通字符
. 匹配任意字符
^ 匹配行首, 或后面字符的非
$ 匹配行尾
[] 匹配字符集合
\ 转义符
\&lt;\&gt; 精确匹配符号
\{n\} 匹配前面字符出现n次
\{n,\} 匹配前面字符至少出现n次
\{n,m\} 匹配前面字符出现n~m次
</code></pre>
<h1 id="awk-支持的扩展元字符">2.  awk 支持的扩展元字符</h1>
<pre><code>? 匹配前面的字符出现0或1次
+ 匹配前面的字符出现至少1次
() 表示一个字符集合或用在expr中
| 表示或, 匹配一组可选的字符</code></pre>
]]></content>
  </entry>
  <entry>
    <title>expect</title>
    <url>/posts/uncategorized/1cc2b052/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y expect</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>nohup</title>
    <url>/posts/uncategorized/c7ecbf73/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt; myout.file 2&gt;&amp;1 &amp;   </span><br><span class="line"></span><br><span class="line">nohup <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>notify-send</title>
    <url>/posts/uncategorized/500f51d4/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y libnotify-bin</span><br></pre></td></tr></table></figure>
<h1 id="使用">2.  使用</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向桌面发送通知</span><br><span class="line">notify-send [title] [message]</span><br><span class="line"></span><br><span class="line"># 在 crontab 中需要前面加 export DISPLAY&#x3D;:0.0</span><br><span class="line">export DISPLAY&#x3D;:0.0 &amp;&amp; notify-send -t 3 &#39;Stay Sober&#39; &#39;Awake &amp; Alive&#39;</span><br><span class="line"></span><br><span class="line">* *   *   *   *    export DISPLAY&#x3D;:0.0 &amp;&amp; export XAUTHORITY&#x3D;&#x2F;home&#x2F;ravi&#x2F;.Xauthority &amp;&amp; sudo -u ravi &#x2F;usr&#x2F;bin&#x2F;notify-send Hey &quot;How are you&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pagecache</title>
    <url>/posts/uncategorized/9ba60726/</url>
    <content><![CDATA[<h1 id="pagecache">1.  pagecache</h1>
<p>页高速缓存, 简称页高缓.</p>
<p>pagecache 是通过将磁盘中的数据缓存到内存中, 从而减少磁盘I/O操作, 从而提高性能.</p>
<h2 id="pagecache-的管理">1.1.  pagecache 的管理</h2>
<p>linux 通过 radix tree 和两个双向链表管理 pagecache.</p>
<p>radix tree 是一种搜索树, 用于快速查找脏的 (dirty) 或回写的 (writeback) 页面.</p>
<p>active_list 和 inactive_list 两个双向链表, 用于回收 pagecache.<br>
active_list 中的 page 被认为是 hot, 内存回收时不能释放; 之后在 inactive_list 中的 page 才可以回收.<br>
首次缓存数据的 page 会被加入到 inactive_list 中, 已经在 inactive_list 中的 page 再次访问就会移入 active_list 中.<br>
这两个链表都使用了伪 LRU 算法, 从尾部加入, 从头部移除.<br>
如果 active_list 中 page 数量远远大于 inactive_list, 那么 active_list 头部的就会被移入 inactive_list 中, 从而维持两个链表的平衡.</p>
<h2 id="读">1.2.  读</h2>
<p>当内核发起一个读请求时, 首先检查请求的数据是否在 pagecache 中, 如果没有命中 (cache miss), 则从磁盘中读取数据, 并缓存起来, 之后读相同文件的请求就能命中 (cache hit) 了.<br>
pagecache 可以只缓存文件的部分内容, 不需要把整个文件都缓存起来.</p>
<h2 id="写">1.3.  写</h2>
<p>pagecache 缓存的存储设备称为后备存储 (backing store);<br>
当内核发起一个写请求, 会直接往 page 中写入, 后备存储中的内容不会直接更新. 内核会将被写入的 page 标记为 dirty, 之后内核会周期性的写回到磁盘上.</p>
<h1 id="resource">2.  Resource</h1>
<a href="https://blog.csdn.net/damontive/article/details/80552566" title target>Linux内核学习笔记 (八) Page Cache与Page回写</a>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Page_cache" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Page_cache</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>rar</title>
    <url>/posts/uncategorized/6ad92fda/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install rar unrar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line"><span class="comment"># 将test.jpg和test.png压缩成一个rar包</span></span><br><span class="line">rar a test.rar test.jpg test.png</span><br><span class="line"><span class="comment"># 是将所有.jpg的文件压缩成一个rar包</span></span><br><span class="line">rar a test.rar *.jpg</span><br><span class="line"><span class="comment"># 是将文件夹test压缩成一个rar包</span></span><br><span class="line">rar a test.rar <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="comment"># 将test.rar中的所有文件解压出来</span></span><br><span class="line">unrar e test.rar</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>regex</title>
    <url>/posts/uncategorized/4204f8ca/</url>
    <content><![CDATA[<p><a href="https://www.jb51.net/tools/shell_regex.html" target="_blank" rel="noopener">https://www.jb51.net/tools/shell_regex.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>ssh</title>
    <url>/posts/uncategorized/ee8dcc44/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-f 要求 在执行命令前退至后台. 它用于当 准备询问口令或密语, 但是用户希望它在后台进行. 该选项隐含了 -n 选项. 在远端机器上启动 X11 程序的推荐手法就是类似于 ssh -f host xterm 的命令.</span><br><span class="line"></span><br><span class="line">-g 允许远端主机连接本地转发的端口.</span><br><span class="line"></span><br><span class="line">-n 把 stdin 重定向到 &#x2F;dev&#x2F;null (实际上防止从 stdin 读取数据). 在后台运行时一定会用到这个选项. 它的常用技巧是远程运行 X11 程序. 例如, ssh -n shadows.cs.hut.fi emacs 将会在 shadows.cs.hut.fi 上启动 emacs, 同时自动在加密通道中转发 X11 连接. 在后台运行. (但是如果 要求口令或密语, 这种方式就无法工作; 参见 -f 选项.)</span><br><span class="line"></span><br><span class="line">-N 不执行远程命令. 用于转发端口. (仅限协议第二版)</span><br><span class="line"></span><br><span class="line">-L port:host:hostport</span><br><span class="line">    将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport</span><br><span class="line"></span><br><span class="line">-R port:host:hostport</span><br><span class="line">    将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机 才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport</span><br></pre></td></tr></table></figure>
<h1 id="ssh-隧道">1.  ssh 隧道</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地转发</span></span><br><span class="line">ssh -g -f -N -L forwardingPort:targetIP:targetPort user@sshServerIP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程转发 逆向隧道</span></span><br><span class="line">ssh -f -N -R forwardingPort:targetIP:targetPort user@sshServerIP</span><br><span class="line"></span><br><span class="line">ssh -f -v -N -S none -o ControlMaster=no -o ExitOnForwardFailure=yes -o ConnectTimeout=10 -o NumberOfPasswordPrompts=3 -o TCPKeepAlive=no -o ServerAliveInterval=60 -o ServerAliveCountMax=1 root@114.55.127.5 -L 52689:rm-bp18dj01b38saby47.mysql.rds.aliyuncs.com:3306</span><br></pre></td></tr></table></figure>
<h1 id="生成-ssh-key">2.  生成 ssh key</h1>
<figure class="highlight plain"><figcaption><span>lang=shell</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -N &quot;&quot; -f $HOME&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>
<h1 id="常见问题">3.  常见问题</h1>
<h2 id="1-登录远程主机后中文乱码">3.1.  1. 登录远程主机后中文乱码</h2>
<p>提示 <code>bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)</code></p>
<p>原因:<br>
1. 远程主机没有本机的字符集 <code>en_US.UTF-8</code><br>
2. 本机字符集不支持中文</p>
<p>解决方案:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 进入字符集选择页面, 勾选缺失的字符集</span></span><br><span class="line">sudo dpkg-reconfigure locales</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 让当前会话支持中文</span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
<h1 id="resources">4.  Resources</h1>
<ul>
<li><a href="http://linux.51yip.com/search/ssh" target="_blank" rel="noopener">http://linux.51yip.com/search/ssh</a></li>
<li><a href="http://www.zsythink.net/archives/2450/" target="_blank" rel="noopener">http://www.zsythink.net/archives/2450/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ssh-copy-id</title>
    <url>/posts/uncategorized/f69dab8c/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@server</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub user@server</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>tty-ui</title>
    <url>/posts/uncategorized/6da7c691/</url>
    <content><![CDATA[<p>whiptail<br>
dialog</p>
<p>whiptail 是替代 dialog 的实现,它基于 newt 库.而 newt 则是为了简化 ncurses 开发而产生的新的 tty 下的UI库.</p>
<p><a href="https://www.jianshu.com/p/588076fb36de" target="_blank" rel="noopener">https://www.jianshu.com/p/588076fb36de</a></p>
]]></content>
  </entry>
  <entry>
    <title>tmux</title>
    <url>/posts/uncategorized/8980c419/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>wine-setup</title>
    <url>/posts/tool/433da766/</url>
    <content><![CDATA[<h3 id="安装">0.0.1.  安装</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看架构</span><br><span class="line">dpkg --print-architecture</span><br><span class="line"># 添加 i386</span><br><span class="line">sudo dpkg --add-architecture i386 &amp;&amp; sudo apt update</span><br><span class="line"># 安装</span><br><span class="line">sudo apt install wine wine32 wine64 libwine libwine:i386 fonts-wine</span><br><span class="line">sudo apt install wine-development wine32-development wine64-development libwine-development libwine-development:i386 fonts-wine</span><br><span class="line">sudo apt install winetrick</span><br></pre></td></tr></table></figure>
<h3 id="使用">0.0.2.  使用</h3>
<h5 id="选择版本">0.0.2.0.1.  选择版本</h5>
<p>选择稳定版or开发版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config wine</span><br></pre></td></tr></table></figure>
<h5 id="配置wine">0.0.2.0.2.  配置wine</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置窗口</span><br><span class="line">winecfg</span><br><span class="line"># 配置注册表</span><br><span class="line">regedit</span><br></pre></td></tr></table></figure>
<h5 id="安装软件">0.0.2.0.3.  安装软件</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wine setup.exe</span><br></pre></td></tr></table></figure>
<h5 id="卸载软件">0.0.2.0.4.  卸载软件</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uninstaller 不能完全删除菜单和桌面图标, 必须手动删除</span><br><span class="line">wine uninstaller</span><br></pre></td></tr></table></figure>
<h3 id="resource">0.0.3.  Resource</h3>
<ul>
<li>winehq download<br>
<a href="https://www.winehq.org/download" target="_blank" rel="noopener">https://www.winehq.org/download</a></li>
<li>winehq debian install<br>
<a href="https://wiki.winehq.org/Debian" target="_blank" rel="noopener">https://wiki.winehq.org/Debian</a></li>
<li>debian wiki (老版本安装)<br>
<a href="https://wiki.debian.org/Wine" target="_blank" rel="noopener">https://wiki.debian.org/Wine</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>undistract-me</title>
    <url>/posts/uncategorized/1a89ee5c/</url>
    <content><![CDATA[<p>当长时间运行的终端命令完成时获取通知</p>
<p>从 <code>/usr/share/undistract-me/long-running.bash</code> 中可知:<br>
<code>$LONG_RUNNING_COMMAND_TIMEOUT</code> 用来设置长命令的判断时间,<br>
默认为超过 10 秒的将被视为长时间运行的任务</p>
]]></content>
  </entry>
  <entry>
    <title>xmodmap</title>
    <url>/posts/uncategorized/354baed7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看键盘布局</span><br><span class="line">xmodmap -pke</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>homebrew</title>
    <url>/posts/uncategorized/eedb4419/</url>
    <content><![CDATA[<h1 id>1.  </h1>
<h1 id="如何更新源">2.  如何更新源</h1>
<p><code>brew install</code> 时会先执行 <code>brew update</code>, 即先更新下自己<br>
该操作比较慢, 可通过修改代码源优化加速.</p>
<p>Homebrew 由 3 个部分组成:</p>
<ul>
<li>brew</li>
<li>homebrew-core</li>
<li>homebrew-cask</li>
<li>homebrew-bottles 二进制预编译包</li>
</ul>
<p>更新源<br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># brew</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span> </span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="comment"># git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span></span><br><span class="line"><span class="comment"># git remote set-url origin https://github.com/Homebrew/brew.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># homebrew-core</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span> </span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="comment"># git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span></span><br><span class="line"><span class="comment"># git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># homebrew-cask</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-cask"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="comment"># git remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># homebrew-bottles</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc_osx</span><br><span class="line"><span class="comment"># echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc_sox</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line"><span class="comment"># 如果命令执行成功, 则表示更新源成功</span></span><br></pre></td></tr></table></figure>
<h1 id="手动安装">3.  手动安装</h1>
<p>如果下载安装文件比较慢, 可以手动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 Homebrew 缓存目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --cache)</span>"</span></span><br><span class="line"><span class="comment"># 替换掉已下载的安装包即可</span></span><br><span class="line"><span class="comment"># 已下载的安装包会放在 `./download` 目录下, 然后软连接到此目录下</span></span><br></pre></td></tr></table></figure>
<h1 id="常用命令">4.  常用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 诊断Homebrew的问题</span></span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新包</span></span><br><span class="line"><span class="comment"># 也可以使用 reinstall</span></span><br><span class="line">brew upgrade [software]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最新的包的列表</span></span><br><span class="line">brew outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理旧版本和缓存文件</span></span><br><span class="line">brew cleanup [software]</span><br><span class="line"><span class="comment"># 查看可清理的旧版本包, 不执行实际操作</span></span><br><span class="line">brew cleanup -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定的软件包的相关信息; 如果没有指定, 显示安装了包数量, 文件数量, 和总占用空间</span></span><br><span class="line">brew info [software]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的包的依赖, 树形显示</span></span><br><span class="line">brew deps --installed --tree</span><br></pre></td></tr></table></figure>
<h1 id="常用安装">5.  常用安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install autojump</span><br><span class="line">brew install axel</span><br><span class="line">brew install bash</span><br><span class="line">brew install make grep gnu-sed gnu-tar gnu-time gnu-which gnu-indent gnu-units inetutils findutils ed coreutils</span><br><span class="line">brew install rar</span><br><span class="line"></span><br><span class="line">brew cask install iterm2</span><br><span class="line">brew cask install visual-studio-code</span><br><span class="line">brew cask install sogouinput</span><br><span class="line">brew cask install spectacle</span><br><span class="line">brew cask install alfred</span><br><span class="line">brew cask install docker</span><br><span class="line">brew cask install flux</span><br><span class="line">brew cask install google-chrome</span><br><span class="line">brew cask install intellij-idea</span><br><span class="line">brew cask install wechat</span><br><span class="line"></span><br><span class="line">brew cask install atom</span><br><span class="line">brew cask install cheatsheet</span><br><span class="line">brew cask install dingtalk</span><br><span class="line">brew cask install edrawmax</span><br><span class="line">brew cask install foxmail</span><br><span class="line">brew cask install tunnelblick</span><br><span class="line"></span><br><span class="line"><span class="comment"># brew cask install jietu</span></span><br><span class="line"><span class="comment"># brew cask install snip # 截图工具</span></span><br><span class="line">brew cask install snipaste <span class="comment"># 截图工具</span></span><br><span class="line">brew cask install yed <span class="comment"># 画图工具</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line">brew tap ringohub/redis-cli</span><br><span class="line">brew update &amp;&amp; brew doctor</span><br><span class="line">brew install redis-cli</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>osx</title>
    <url>/posts/uncategorized/e6068634/</url>
    <content><![CDATA[<h1 id="收费但好用的工具">1.  收费但好用的工具</h1>
<p>edraw 画图工具<br>
screentflow 录屏工具<br>
mousepose 鼠标/键盘点击提示工具</p>
<h1 id="更新-bash">2.  更新 bash</h1>
<ol>
<li><code>brew install bash</code></li>
<li>重启, 按 Cmd + R, <code>csrutil disable</code></li>
<li>重启</li>
<li><code>sudo sh -c &quot;echo '/usr/local/bin/bash' &gt;&gt; /etc/shells&quot;</code></li>
<li><code>sudo mv /bin/bash /bin/bash.origin</code></li>
<li><code>sudo ln -s /usr/local/bin/bash /bin/bash</code></li>
<li>重启, 按 Cmd + R <code>csrutil enable</code></li>
</ol>
<h1 id="实用命令">3.  实用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用caffeinate阻止Mac运行屏幕保护和睡眠</span></span><br><span class="line">caffeinate -t 3600</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不通过App Store更新OS X</span></span><br><span class="line">sudo softwareupdate -i -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有下载过的文件列出来</span></span><br><span class="line">sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* <span class="string">'select LSQuarantineDataURLString from LSQuarantineEvent'</span> |more</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用chflags命令隐藏文件或文件夹</span></span><br><span class="line"><span class="comment"># 如果你想让某个文件或文件夹影藏, 那么chflags命令可以实现.</span></span><br><span class="line">你只需将文件路径填对即可, 比如我们向隐藏桌面上的macx文件夹.</span><br><span class="line">如果你想再次看到文件夹, 只需将hidden改为nohidden即可.</span><br><span class="line"></span><br><span class="line">chflags hidden ~/Desktop/macx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行剪切板</span></span><br><span class="line"><span class="built_in">echo</span> haha | pbcopy</span><br><span class="line">pbpaste &gt; ha.txt</span><br></pre></td></tr></table></figure>
<h1 id="快捷键">4.  快捷键</h1>
<p>opt + esc 阅读已选中内容<br>
ctrl + cmd + d 翻译</p>
<h1 id="faq">5.  FAQ</h1>
<h1 id="osx-1015-上-crontab-定时任务无法生效">6.  OSX 10.15 上 crontab 定时任务无法生效</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.d3tt.com/view/109</span></span><br><span class="line"><span class="built_in">which</span> cron</span><br><span class="line"><span class="comment"># /usr/sbin/cron</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 cron 拖到 /系统偏好设置/安全性与隐私/完全磁盘经济访问权限中</span></span><br></pre></td></tr></table></figure>
<h1 id="resource">7.  Resource</h1>
<ul>
<li><a href="https://my.oschina.net/ssssbook/blog/1808180" target="_blank" rel="noopener">https://my.oschina.net/ssssbook/blog/1808180</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>screencapture</title>
    <url>/posts/uncategorized/301c3cf/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c         强制截图保存到剪贴板而不是文件中</span><br><span class="line">-C         截图时保留光标 (只在非交互模式下有效) </span><br><span class="line">-d         display errors to the user graphically (不知道啥意思) </span><br><span class="line">-i         交互模式截取屏幕. 可以是选区或者是窗口. </span><br><span class="line">             control key - 截图保存到剪贴板</span><br><span class="line">             space key   - 在鼠标选区模式和窗口模式间切换</span><br><span class="line">             escape key  - 退出截图</span><br><span class="line">-m         只截取主显示器 (-i模式下无效) </span><br><span class="line">-M         截图完毕后, 会打开邮件客户端, 图片就躺在邮件正文中</span><br><span class="line">-o         在窗口模式下, 不截取窗口的阴影</span><br><span class="line">-P         截图完毕后, 在图片预览中打开</span><br><span class="line">-s         只允许鼠标选择模式</span><br><span class="line">-S         窗口模式下, 截取屏幕而不是窗口</span><br><span class="line">-t&lt;format&gt; 指定图片格式, 模式是png. 可选的有pdf, jpg, tiff等</span><br><span class="line">-T&lt;seconds&gt; 延时截取, 默认为5秒. </span><br><span class="line">-w         只允许窗口截取模式</span><br><span class="line">-W         开始交互截取模式, 默认为窗口模式 (只是默认模式与-i不同) </span><br><span class="line">-x         不播放声效</span><br><span class="line">-a         do not include windows attached to selected windows (不懂) </span><br><span class="line">-r         不向图片中加入dpi信息</span><br><span class="line">-l&lt;windowid&gt; 抓取指定windowid的窗口截图</span><br><span class="line">-R&lt;x,y,w,h&gt; 抓取指定区域的截图</span><br><span class="line">-B&lt;bundleid&gt; 截图输出会被bundleid指出的程序打开</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screencapture -T 0 ~/Desktop/<span class="built_in">test</span>-screencapture.png</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>docker-compose-cmd</title>
    <url>/posts/uncategorized/2d6dcdfd/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>docker-compose-file</title>
    <url>/posts/uncategorized/d4f54bd0/</url>
    <content><![CDATA[<h1 id="version">1.  version</h1>
<pre><code>不同配置文件版本需要特定的 Docker 引擎版本支持
</code></pre>
<h1 id="service">2.  service:</h1>
<pre><code>定义服务配置
</code></pre>
<h1 id="network">3.  network</h1>
<pre><code>定义网络分区及配置
</code></pre>
<h1 id="volumns">4.  volumns</h1>
<pre><code>创建卷宗, 会在 `Docker Root Dir` 下创建对应目录
</code></pre>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:$IMAGE_TAG</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:/var/hyperledger/production/orderer</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 docker-compose-file.yaml 中没有提到的卷宗</span></span><br><span class="line">docker-compose -f docker-compose-file.yaml down --volumes --remove-orphans</span><br></pre></td></tr></table></figure>
<h1 id="resource">5.  Resource</h1>
<ul>
<li><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker-cmd</title>
    <url>/posts/uncategorized/36e7a239/</url>
    <content><![CDATA[<h1 id="命令">1.  命令</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -t Name and optionally a tag in the &#39;name:tag&#39; format</span><br><span class="line"># -f Name of the Dockerfile (Default is &#39;PATH&#x2F;Dockerfile&#39;)</span><br><span class="line">docker build -t name:tag -f path&#x2F;Dockerfile</span><br><span class="line"></span><br><span class="line"># 查看容器运行状态</span><br><span class="line">docker stats --no-stream [container_id]</span><br><span class="line"></span><br><span class="line"># 查看单个重启的ip</span><br><span class="line">docker inspect -f &#39;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; container_name_or_id</span><br><span class="line"></span><br><span class="line"># 查看所有容器IP</span><br><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; $(docker ps -aq)</span><br></pre></td></tr></table></figure>
<h1 id="网络模式">2.  网络模式</h1>
<p>网络模式有:</p>
<ul>
<li>bridge 桥接模式, 默认</li>
<li>overlay 覆盖模式, 只适用于 swarm 环境, 给多个节点创建一个私有网络</li>
<li>host 主机模式, 只能访问主机</li>
<li>none 没有网络</li>
</ul>
<h1 id="卷宗">3.  卷宗</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看卷宗列表</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据卷宗名称查看具体位置</span></span><br><span class="line">docker volume inspect net_orderer.example.com</span><br><span class="line"><span class="comment"># 返回的 json 中, Mountpoint 表示位置</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>docker-compose</title>
    <url>/posts/docker/f9b84192/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<p><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker tool</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-file</title>
    <url>/posts/uncategorized/48e7c716/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/posts/docker/f255ffad/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除老版本</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加docker组</span></span><br><span class="line"><span class="comment"># sudo groupadd docker</span></span><br><span class="line"><span class="comment"># sudo gpasswd -a $&#123;USER&#125; docker</span></span><br><span class="line"><span class="comment"># sudo systemctl restart docker</span></span><br><span class="line"><span class="comment"># 切换当前会话到新 group 或者重启 X 会话</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户所在的所有用户组</span></span><br><span class="line">groups</span><br><span class="line"><span class="comment"># 将用户添加到 docker 用户组</span></span><br><span class="line">sudo usermod -a -G docker &lt;username&gt;</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure>
<h1 id="镜像">2.  镜像</h1>
<p>通过修改镜像源地址, 加快镜像下载速度.<br>
镜像源配置文件是: <code>/etc/docker/daemon.json</code></p>
<ol>
<li>使用daoCloud的镜像加速器</li>
</ol>
<h5 id="修改方法">2.0.0.0.1.  修改方法</h5>
<p>不同环境可查看 <a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">https://www.daocloud.io/mirror#accelerator-doc</a></p>
<p>在linux下使用如下命令配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;85ad13ff.m.daocloud.io</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>阿里云镜像加速器</li>
</ol>
<p>注册 <code>https://cr.console.aliyun.com/</code><br>
之后访问 <code>https://cr.console.aliyun.com/#/accelerator</code><br>
获得专属加速器<br>
/etc/docker/daemon.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;61mj61jz.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h1 id="网络">3.  网络</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --net=bridge</span><br></pre></td></tr></table></figure>
<h1 id="修改docker的默认镜像存储位置">4.  修改Docker的默认镜像存储位置</h1>
<p>可能会需要镜像太多, 或者磁盘分配太小, 之后导致无法再下载镜像,或者容器无法启动.<br>
我们可能需要将镜像存储位置移动到其他文件目录下.</p>
<p>默认镜像存储位置是 <code>/var/lib/docker</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过该命令查看默认镜像存储位置</span></span><br><span class="line">docker info | grep <span class="string">'Docker Root Dir'</span></span><br></pre></td></tr></table></figure>
<h2 id="方式-1-修改docker的默认镜像存储位置">4.1.  方式 1: 修改Docker的默认镜像存储位置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对之前的数据做个文件备份, 如果有把握可以跳过</span></span><br><span class="line">tar -zcC /var/lib/docker &gt;/mnt/var_lib_docker-backup-$(date + %s).tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移整个/var/lib/docker目录到目的路径</span></span><br><span class="line">mv /var/lib/docker /home/raven/Package/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立symlink软链接</span></span><br><span class="line">ln -s /data/tools/docke /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认文件夹类型为symlink 类型</span></span><br><span class="line">ls -al /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h2 id="方式-2-修改镜像和容器的默认存放路径">4.2.  方式 2:  修改镜像和容器的默认存放路径</h2>
<p>在 <code>/etc/default/docker</code> 中修改</p>
<blockquote>
<p>DOCKER_OPTS=&quot;-g /home/raven/Package/docker&quot;</p>
</blockquote>
<p>之后重启服务</p>
<p>或者 修改 <code>/etc/docker/daemon.json</code></p>
<blockquote>
<p>{“registry-mirrors”: [“http://***.***.com”],“graph”:&quot;/home/raven/Packages/docker&quot;}</p>
</blockquote>
<p>修改后立即生效</p>
<h1 id="容器管理工具">5.  容器管理工具</h1>
<p>以下 3 个工具都能通过文件配置管理与发布 Docker 容器.</p>
<h2 id="docker-compose">5.1.  Docker Compose</h2>
<p>Docker Compose 只能管理当前主机上的容器</p>
<h2 id="docker-swarm">5.2.  Docker Swarm</h2>
<p>Docker Swarm 能管理多主机上的容器, 是由 Docker 公司开发的</p>
<h2 id="kubernates">5.3.  Kubernates</h2>
<p>Kubernates 也能管理多主机上的容器, 是有谷歌开发的.<br>
Kubernates 比 Docker Swarm 更主流有点, 目前很多大公司使用它作为默认容器管理工具.</p>
<h1 id="problem">6.  Problem</h1>
<h2 id="1-动态设置-容器最大内存">6.1.  1. 动态设置 容器最大内存</h2>
<p>在部署docker应用,  应用编排时都需要指定一个内存的最大使用上限.<br>
如果应用使用的内存超过了配额, 镜像会被kill掉.<br>
所以java微服务应用, 有必要设置应用自己的最大内存.</p>
<p>docker镜像服务的内存不能全部给 <em>-Xmx</em> , 因为JVM消耗的内存不仅仅是Heap.</p>
<p>JVM = Heap + Method Area +Constant Pool + Thread Stack * num of thread .</p>
<p>Xmx的值可设置为镜像上限减去150m或200m.<br>
当然还需要考虑应用自身的特点, 比如class数目, 并发线程数等.</p>
<p>通过 cgroups 动态获取容器资源配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git memory limit size</span></span><br><span class="line">limit_in_bytes=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># If not default limit_in_bytes in cgroup</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$limit_in_bytes</span>"</span> -ne <span class="string">"9223372036854771712"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    limit_in_megabytes=$(expr <span class="variable">$limit_in_bytes</span> \/ 1048576)</span><br><span class="line">    heap_size=$(expr <span class="variable">$limit_in_megabytes</span> - <span class="variable">$RESERVED_MEGABYTES</span>)</span><br><span class="line">    <span class="built_in">export</span> JAVA_OPTS=<span class="string">"-Xmx<span class="variable">$&#123;heap_size&#125;</span>m <span class="variable">$JAVA_OPTS</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> JAVA_OPTS=<span class="variable">$JAVA_OPTS</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start tomcat</span></span><br></pre></td></tr></table></figure>
<h1 id="常见问题">7.  常见问题</h1>
<h2 id="docker-杀死容器">7.1.  docker 杀死容器</h2>
<p>解决办法, 调整容器分配的内存到 1280m , 调整jvm分配的内存, 大致参数如下:</p>
<p>-Xms512m -Xmx512m -XX:ReservedCodeCacheSize=128m -XX:+UseCodeCacheFlushing -XX:MetaspaceSize=192m -XX:MaxMetaspaceSize=192m -XX:MaxDirectMemorySize=64m</p>
<p>明确已知内存 512m + 128m + 192m + 64m 共 896m,</p>
<p>另外线程预留 128m  (预留 200线程, 每线程 512k)</p>
<p>剩余 256m 作为余量</p>
<h1 id="resource">8.  Resource</h1>
<ul>
<li>
<p>doc<br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/debian/#install-using-the-repository" target="_blank" rel="noopener">https://docs.docker.com/engine/installation/linux/docker-ce/debian/#install-using-the-repository</a><br>
<a href="https://docs.docker.com/reference/" target="_blank" rel="noopener">https://docs.docker.com/reference/</a></p>
</li>
<li>
<a href="https://yq.aliyun.com/articles/233839?spm=5176.10695662.1996646101.searchclickresult.7cb74579zzEffo" title target>Docker 加速器</a>
</li>
<li>
<p><a href="https://www.cnblogs.com/ilinuxer/p/6648681.html" target="_blank" rel="noopener">https://www.cnblogs.com/ilinuxer/p/6648681.html</a></p>
</li>
<li>
<p><a href="https://github.com/maqian/toolbox" target="_blank" rel="noopener">https://github.com/maqian/toolbox</a></p>
</li>
<li>
<a href="http://www.cnblogs.com/xuxinkun/p/5541894.html" title target>Docker容器内存监控</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>git-commit</title>
    <url>/posts/uncategorized/591708b8/</url>
    <content><![CDATA[<h1 id="添加文件到索引">1.  添加文件到索引</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件到仓库</span></span><br><span class="line"><span class="comment"># -f 强制添加 ignore 的文件</span></span><br><span class="line"><span class="comment"># -u 只添加修改的文件</span></span><br><span class="line">git add <span class="variable">$&#123;file_path&#125;</span></span><br><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line"><span class="comment"># . 也可以使用 --all, -A 代替</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h1 id="推送代码">2.  推送代码</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送前需要先获取并合并远程代码更新内容</span></span><br><span class="line"><span class="comment"># -u 用于第一次推送时, 将当前代码分支与远程代码分支建立追踪关系.</span></span><br><span class="line"><span class="comment"># -u 也可用手动方式建立关联</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h1 id="本地dev提交到远程dev分支">3.  本地dev提交到远程dev分支</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin dev:dev</span><br></pre></td></tr></table></figure>
<h1 id="记录仓库变更">4.  记录仓库变更</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m 必填项, 提交内容的注释</span></span><br><span class="line"><span class="comment"># 此时只是记录本地仓库的变更, 需要推送的远程仓库</span></span><br><span class="line">git commit -m <span class="variable">$&#123;commit_msg&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="查看变更日志">5.  查看变更日志</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看变更日志</span></span><br><span class="line"><span class="comment"># 日志内容有 commit-id, author, date, commit-msg</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<h1 id="解决冲突">6.  解决冲突</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存入草稿</span></span><br><span class="line">git stash</span><br><span class="line"><span class="comment"># 获取并合并远程仓库更新</span></span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 取出草稿, git会自动合并</span></span><br><span class="line"><span class="comment"># 需要手动修改冲突</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<h1 id="查看改动差异">7.  查看改动差异</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认与 Head 比较, 显示差异</span></span><br><span class="line">git diff <span class="variable">$&#123;patch_id&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示摘要而非整个 diff</span></span><br><span class="line">git diff --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>
<h1 id="文件回滚">8.  文件回滚</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回退单个文件</span></span><br><span class="line">git reset <span class="variable">$&#123;commit_id&#125;</span> <span class="variable">$&#123;file_path&#125;</span></span><br><span class="line"><span class="comment"># 指定文件路径回滚</span></span><br><span class="line"><span class="comment"># 默认回滚到 Head</span></span><br><span class="line">git chekcout -- <span class="variable">$&#123;file1&#125;</span> <span class="variable">$&#123;file2&#125;</span> <span class="variable">$&#123;file3&#125;</span></span><br><span class="line">git checkout .</span><br><span class="line">git checkout HEAD .</span><br><span class="line">git checkout HEAD <span class="variable">$&#123;file&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="回退某次提交">9.  回退某次提交</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若已提交到远程仓库, 需要回退本次提交</span></span><br><span class="line">git revert <span class="variable">$&#123;commit_id&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="合并本地-commit">10.  合并本地 commit</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 软重置到最早的 commit-id, 并保持文件的修改</span></span><br><span class="line">git reset --soft <span class="variable">$&#123;latest_commit-id&#125;</span></span><br><span class="line"><span class="comment"># 之后重新提交</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git-clone</title>
    <url>/posts/uncategorized/98f5bb46/</url>
    <content><![CDATA[<h1 id="clone">1.  clone</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line"><span class="comment"># -b 指定下载远程代码的分支, 默认为 master</span></span><br><span class="line"><span class="comment"># directory 指定代码存放的目录, 如果没有指定则为当前目录下的, 创建项目名称的目录用于存放代码</span></span><br><span class="line"><span class="comment"># -o 设置远程仓库名称, 默认为 origin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --depth=1, 表示只拉取最近的一个 reversion</span></span><br><span class="line"><span class="comment"># 如果想看历史版本, 可以再用 `git fetch --unshallow` 拉取</span></span><br><span class="line"><span class="comment"># 如果想要再次拉取所有分支 `git pull origin refs/heads/*:refs/remotes/origin/*` 拉取</span></span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$branch_id</span> --depth=1 <span class="variable">$git_url</span> <span class="variable">$directory</span></span><br></pre></td></tr></table></figure>
<h2 id="github-上-git-clone-太慢">1.1.  github 上 git clone 太慢</h2>
<p>有以下 2 种方式解决</p>
<ol>
<li>只获取最近一层 reversion<br>
减少历史版本对 clone 操作的影响</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --depth=1 只获取最近一个 reversion</span></span><br><span class="line"><span class="comment"># -b master 只获取 master 分支</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 -b master <span class="variable">$url</span></span><br><span class="line"><span class="comment"># 之后再获取历史版本</span></span><br><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置 host<br>
git clone 特别慢是因为 <a href="http://github.global.ssl.fastly.Net" target="_blank" rel="noopener">github.global.ssl.fastly.Net</a> 域名被限制了<br>
只要找到这个域名对应的 ip 地址, 然后在 hosts 文件中加上ip与域名的映射, 刷新 DNS 缓存就可以了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">151.101.76.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.112 github.com</span><br></pre></td></tr></table></figure>
<h1 id="导入外部项目">2.  导入外部项目</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.oschina.net/question/82993_133520</span></span><br><span class="line"><span class="comment"># 从原始地址clone一份bare仓库</span></span><br><span class="line">git <span class="built_in">clone</span> --bare  https://github.com/bartaz/impress.js.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> impress.js.git</span><br><span class="line"><span class="comment"># 导入项目</span></span><br><span class="line">git push --mirror git@git.oschina.net:username/impress-js.git</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>git-branch</title>
    <url>/posts/tool/ac453d0a/</url>
    <content><![CDATA[<img src="/posts/tool/ac453d0a/git-branch-model.png" class>
<ul>
<li>master<br>
主分支, 功能稳定</li>
<li>develop<br>
开发分支, 体现开发状态的分支<br>
用于 DEV, QA 环境测试构建, 在 PRD 环境测试完成后合并到 master 分支</li>
<li>feature<br>
新功能开发分支<br>
从 master 或 develop 创建该分支<br>
用于本地环境开发自测, 开发完成后合并到 develop 分支</li>
<li>release<br>
发布分支, 准备发布上线的分支<br>
从 develop 创建该分支<br>
如果 PRD 环境出现问题, 则从 develop 分支开始修复, 再次合并到 release 分支; 如果 PRD 环境测试完成, 功能确定之后, 合并到 master 分支<br>
允许在 release 分支上做版本修改等小细节处理, 不必合并回 develop</li>
<li>hotfix<br>
线上问题紧急修复<br>
从 release 或 master 创建该分支<br>
修复完成后, 需要合并到 develop, release, master</li>
</ul>
<h1 id="查看分支">1.  查看分支</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前分支名称</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看本地与远程仓库有哪些分支</span></span><br><span class="line"><span class="comment"># -a 表示查看所有分支</span></span><br><span class="line"><span class="comment"># -v 显示最近更新相关信息</span></span><br><span class="line">gti branch -av</span><br></pre></td></tr></table></figure>
<h1 id="创建切换分支">2.  创建+切换分支</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>
<h1 id="切换分支">3.  切换分支</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>
<h1 id="手动建立追踪关系">4.  手动建立追踪关系</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream dev origin/dev</span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/<span class="variable">$&#123;branch&#125;</span> master</span><br></pre></td></tr></table></figure>
<h1 id="获取代码更新">5.  获取代码更新</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git pull origin dev:dev</span><br></pre></td></tr></table></figure>
<h1 id="合并分支">6.  合并分支</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先切换到要主分支</span></span><br><span class="line">git checkout <span class="variable">$&#123;branch_id&#125;</span></span><br><span class="line"><span class="comment"># 合并作业分支到主分支</span></span><br><span class="line">git merge <span class="variable">$&#123;another_branch_id&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="删除分支">7.  删除分支</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line"><span class="comment"># -D, --delete 表示删除分支</span></span><br><span class="line"><span class="comment"># 不能删除当前分支, 需要切换到其他分支后删除</span></span><br><span class="line">git branch -D <span class="variable">$&#123;local_branch_id&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远端分支</span></span><br><span class="line"><span class="comment"># 如果需要重命名远程分支, 没有直接命令, 只能删除后重新推送</span></span><br><span class="line">git push -d origin <span class="variable">$&#123;remote_branch_id&#125;</span></span><br><span class="line"><span class="comment"># 或者推送一个空分支</span></span><br><span class="line">git push origin :<span class="variable">$&#123;remote_branch_id&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除没有与远程分支绑定的本地分支</span></span><br><span class="line">git remote prune origin</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>
<h1 id="分支重命名">8.  分支重命名</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -m 表示重命名本地分支名称</span><br><span class="line">git branch -m $&#123;old_name&#125; $&#123;new_name&#125;</span><br><span class="line"># 之后删除远程老分支后重新推送</span><br></pre></td></tr></table></figure>
<h2 id="同步远程分支-删除远端不存在的分支">8.1.  同步远程分支, 删除远端不存在的分支</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>
<h1 id="resource">9.  Resource</h1>
<a href="https://learnku.com/devtools/t/9992/a-successful-git-branch-model-for-commercial-application-development" title target>Git 分支模型</a>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-config</title>
    <url>/posts/uncategorized/c3490969/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置你的名字和邮件地址</span></span><br><span class="line">git config --global user.name <span class="variable">$USERNAME</span></span><br><span class="line">git config --global user.email <span class="variable">$EMAIL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置文本编辑器</span></span><br><span class="line">git config --global core.editor vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果为 true, 则在检出时自动将行结束符转换成 CRLF (回车换行)</span></span><br><span class="line"><span class="comment"># 如果为 input, 则在提交时自动将行结束符转换为 LF, 检出时不转换</span></span><br><span class="line"><span class="comment"># 如果为 false, 则保留行结束符原来的格式</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git" title target>Git Config</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>git 常见问题</title>
    <url>/posts/tool/729107b9/</url>
    <content><![CDATA[<h1 id="常见问题">1.  常见问题</h1>
<h2 id="编写脚本参数配置">1.1.  编写脚本参数配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当要编写脚本,用 `cd` 命令切入切出目录比较麻烦</span></span><br><span class="line"><span class="comment"># 可以使用 `--git-dir` 及 `--work-tree` 指定 git 命令的工作目录, 这样就方便多了</span></span><br><span class="line">git --git-dir <span class="string">"<span class="variable">$project_dir</span>/.git"</span> --work-tree <span class="string">"<span class="variable">$project_dir</span>"</span> status --porcelain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用 `GIT_DIR` 及 `GIT_WORK_TREE` 来配置, 效果是一样的</span></span><br><span class="line">GIT_DIR=<span class="string">"<span class="variable">$project_dir</span>/.git"</span> GIT_WORK_TREE=<span class="string">"<span class="variable">$project_dir</span>"</span> git status --porcelain</span><br></pre></td></tr></table></figure>
<h2 id="拒绝合并">1.2.  拒绝合并</h2>
<p>提示 <code>fatal: refusing to merge unrelated histories</code> , or <code>绝合并无关的历史</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该命令能把远程仓库合并到本地, 但是会有冲突</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令能把远程仓库中最新版本覆盖本地, 无冲突</span></span><br><span class="line">git pull --rebase=preserve</span><br></pre></td></tr></table></figure>
<h1 id="去除大文件历史记录">2.  去除大文件历史记录</h1>
<p><a href="https://gitee.com/help/articles/4232#article-header0" target="_blank" rel="noopener">https://gitee.com/help/articles/4232#article-header0</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看存储库中的大文件</span></span><br><span class="line">git rev-list --objects --all | grep -E `git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk <span class="string">'&#123;print$1&#125;'</span> | sed <span class="string">':a;N;$!ba;s/\n/|/g'</span>`</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">git rev-list --objects --all | grep <span class="string">"<span class="variable">$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -15 | awk '&#123;print$1&#125;')</span>"</span></span><br><span class="line"></span><br><span class="line">改写历史, 去除大文件</span><br><span class="line">git filter-branch --tree-filter <span class="string">'rm -f path/to/large/files'</span> --tag-name-filter cat -- --all</span><br><span class="line">git push origin --tags --force</span><br><span class="line">git push origin --all --force</span><br></pre></td></tr></table></figure>
<h1 id="resource">3.  Resource</h1>
<ul>
<li>
<a href="https://gitee.com/all-about-git" title target>Git 大全</a>
</li>
<li>
<a href="https://www.jianshu.com/p/335e5ac0a823" title target></a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>git-fork</title>
    <url>/posts/uncategorized/926f5cf9/</url>
    <content><![CDATA[<h1 id="同步-fork-的代码">1.  同步 fork 的代码</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定一个上游仓库</span></span><br><span class="line"><span class="comment"># upstream为你自己为同步源取的别名</span></span><br><span class="line">git remote add upstream <span class="variable">$&#123;git-url-fork-by&#125;</span></span><br><span class="line">git fetch upstream/<span class="variable">$&#123;branch_id&#125;</span></span><br><span class="line"><span class="comment"># --no-commit 防止 fast-forward 后直接 commit</span></span><br><span class="line">git merge upstream/<span class="variable">$&#123;branch_id&#125;</span> --no-commit</span><br><span class="line"><span class="comment"># 如果文件有差异, 可以checkout fork 分支上的文件</span></span><br><span class="line">git checkout upstream/<span class="variable">$&#123;branch_id&#125;</span> <span class="variable">$&#123;file_path&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git-gerrit</title>
    <url>/posts/uncategorized/9736f18b/</url>
    <content><![CDATA[<h1 id="gerrit-提交">1.  gerrit 提交</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitdir=$(git rev-parse --git-dir); scp -p -P 29418 ravenfu@10.25.20.102:hooks/commit-msg <span class="variable">$&#123;gitdir&#125;</span>/hooks/</span><br><span class="line">git commit --amend --reset-author</span><br><span class="line">git commit --amend --author <span class="string">'ravenfu &lt;ravenfu@aliyun.com&gt;'</span></span><br><span class="line">git push origin head:refs/<span class="keyword">for</span>/zxq_dev</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git-初始化</title>
    <url>/posts/uncategorized/dc9223cb/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置上传账户信息</span></span><br><span class="line"><span class="comment"># commit时会带上这些信息</span></span><br><span class="line">git config --global user.name ravenfu</span><br><span class="line">git config --global user.email ravenfu@aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># windowns 专用配置</span></span><br><span class="line"><span class="comment"># git config --global core.autocrlf false</span></span><br><span class="line"><span class="comment"># git config --global core.longpaths true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文路径输出</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 git 默认编辑工具 默认是 nano</span></span><br><span class="line">git config --global core.editor vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局钩子</span></span><br><span class="line"><span class="comment"># 将 全局钩子脚本 放在 `~/.git_template/hooks` 下</span></span><br><span class="line"><span class="comment"># 之后所有 `git init` 后 `.git/hooks` 目录下的钩子都从这个目录下取</span></span><br><span class="line">git config --global init.templatedir ~/.git_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下这步生成 ssh key, 用于配置在代码管理应用, 方便下载代码</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git-remote</title>
    <url>/posts/uncategorized/4d7559a7/</url>
    <content><![CDATA[<h1 id="远程仓库映射管理">1.  远程仓库映射管理</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有哪些远程仓库</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># origin 为使用者定义的远程仓库名称</span></span><br><span class="line"><span class="comment"># 远程仓库可以有多个</span></span><br><span class="line"><span class="comment"># 远程仓库名称不一定叫 origin, origin 只是大家常用的远程仓库名称</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地仓库新初始化, 将本地仓库与远程仓库绑定</span></span><br><span class="line">git remote add origin <span class="variable">$&#123;git_url&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin <span class="variable">$&#123;git_url&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="多仓库">2.  多仓库</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加第二个仓库</span></span><br><span class="line">git remote add gitee git@gitee.com:Ravenfu/spring-boot.git</span><br><span class="line"><span class="comment"># git remote set-url --add gitee git@gitee.com:Ravenfu/spring-boot.git</span></span><br><span class="line"><span class="comment"># 去掉 grafted</span></span><br><span class="line">git filter-branch -- --all</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git push -u gitee master</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>git-tag</title>
    <url>/posts/uncategorized/5e44acfa/</url>
    <content><![CDATA[<h1 id="tag操作">1.  tag操作</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 更新本地tags</span></span><br><span class="line">git pull --tags</span><br><span class="line"><span class="comment"># 推送tags</span></span><br><span class="line">git push --tags</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d <span class="variable">$&#123;tag_name&#125;</span></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :refs/tags/<span class="variable">$&#123;tag_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理远端没有的本地分支</span></span><br><span class="line"><span class="comment"># 先删除全部, 之后重新获取</span></span><br><span class="line">git tag -l | xargs git tag -d</span><br><span class="line">git fetch --tags</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>github</title>
    <url>/posts/uncategorized/637cabe9/</url>
    <content><![CDATA[<h1 id="topic">1.  Topic</h1>
 每天/每周/每月周期的热门 Repositories 和 Developers
 最新和最流行的讨论主题
<h1 id="搜索">2.  搜索</h1>
<h2 id="搜开发者">2.1.  搜开发者</h2>
<table>
<thead>
<tr>
<th>搜索条件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>location:</td>
<td>location:china 匹配用户填写的地址</td>
</tr>
<tr>
<td>language:</td>
<td>language:kotlin 匹配开发语言为kotlin的开发者</td>
</tr>
<tr>
<td>followers:</td>
<td>followers:&gt;=1000 匹配拥有超过 1000 名关注者的开发者</td>
</tr>
<tr>
<td>in:fullname</td>
<td>jack in:fullname 匹配用户实名为jack的开发者</td>
</tr>
</tbody>
</table>
<h2 id="搜项目">2.2.  搜项目</h2>
<table>
<thead>
<tr>
<th>搜索条件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>awesome + xxx</td>
<td>找到优秀的工具列表</td>
</tr>
<tr>
<td>language:</td>
<td>language:kotlin 匹配开发语言为kotlin的项目</td>
</tr>
<tr>
<td>star:</td>
<td>star:&gt;=500 匹配收藏数超过 500 的项目</td>
</tr>
<tr>
<td>forks:</td>
<td>forks:&gt;=500 匹配分指数超过 500 的项目</td>
</tr>
</tbody>
</table>
<h1 id="下载单个文件">3.  下载单个文件</h1>
<h2 id="下载单个文件-2">3.1.  下载单个文件</h2>
<p>如要下载这个文件 <code>https://github.com/ravenfu/jvm-option-script/blob/master/ejava.sh</code></p>
<ol>
<li>把 url 中 <code>github.com</code> 替换为 <code>raw.githubusercontent.com</code></li>
<li>删除 <code>/blob</code></li>
</ol>
<p>然后就可以通过命令下载了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL -o ejava.sh https://raw.githubusercontent.com/ravenfu/jvm-option-script/master/ejava.sh</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com" target="_blank" rel="noopener">https://github.com</a>                  /maqian/toolbox/blob/master/bin/ejava<br>
<a href="https://raw.githubusercontent.com" target="_blank" rel="noopener">https://raw.githubusercontent.com</a>   /maqian/toolbox/master/bin/ejava</p>
<h1 id="常见问题">4.  常见问题</h1>
<h2 id="访问-github-慢">4.1.  访问 github 慢</h2>
<h3 id="通过域名解析">4.1.1.  通过域名解析</h3>
<p>我们可以利用以下网址获得以下 GitHub 域名的 IP 地址:</p>
<ul>
<li>
<p><a href="https://site.ip138.com/" target="_blank" rel="noopener">https://site.ip138.com/</a></p>
</li>
<li>
<p><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a></p>
</li>
<li>
<p><a href="http://github.com" target="_blank" rel="noopener">github.com</a></p>
</li>
<li>
<p><a href="http://github.global.ssl.fastly.net" target="_blank" rel="noopener">github.global.ssl.fastly.net</a></p>
</li>
<li>
<p><a href="http://raw.githubusercontent.com" target="_blank" rel="noopener">raw.githubusercontent.com</a></p>
</li>
</ul>
<p>之后组装成 hosts 配置添加到 hosts 文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">140.82.112.3 github.com</span><br><span class="line">151.101.77.194 github.global.ssl.fastly.net</span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>
<h3 id="通过-gitee-导入已有项目">4.1.2.  通过 gitee 导入已有项目</h3>
<p>gitee 新建项目, 并添加导入已有项目 – github 上的项目的地址, 之后从 gitee 上下载</p>
]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/posts/uncategorized/518e617c/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<a href="https://git-scm.com/book/zh" title target>Git 官方文档</a>
]]></content>
  </entry>
  <entry>
    <title>git-rebase</title>
    <url>/posts/uncategorized/50c9f23c/</url>
    <content><![CDATA[<p>如果提交存在于你的仓库之外, 而别人可能基于这些提交进行开发, 那么不要执行变基.</p>
<p>如果你遵循这条金科玉律, 就不会出差错.  否则, 人民群众会仇恨你, 你的朋友和家人也会嘲笑你, 唾弃你.</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" title target>git rebase</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>intellij-idea-faq</title>
    <url>/posts/uncategorized/6802d45a/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>gitlab</title>
    <url>/posts/uncategorized/4adbd460/</url>
    <content><![CDATA[<h1 id="gitlab-中-markdown-语法">1.  Gitlab 中 Markdown 语法</h1>
<p><a href="https://docs.gitlab.com/ee/user/markdown.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/user/markdown.html</a></p>
<h1 id="常见问题">2.  常见问题</h1>
<h2 id="you-can-only-merge-once-the-items-above-are-resolved">2.1.  You can only merge once the items above are resolved</h2>
<ul>
<li><a href="https://gitlab.com/gitlab-com/support-forum/issues/4668" target="_blank" rel="noopener">https://gitlab.com/gitlab-com/support-forum/issues/4668</a></li>
<li><a href="https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html#limitations" target="_blank" rel="noopener">https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html#limitations</a></li>
</ul>
<p>Navigate to your project’s Settings &gt; General page.<br>
Expand the Merge requests section.<br>
In the Merge checks subsection, select the Pipelines must succeed checkbox.<br>
Press Save for the changes to take effect.</p>
]]></content>
  </entry>
  <entry>
    <title>intellij-idea-tuning</title>
    <url>/posts/uncategorized/299a844d/</url>
    <content><![CDATA[<h1 id="配置文件路径">1.  配置文件路径</h1>
<ul>
<li>Linux ~/.config/JetBrains/<product><version>/config</version></product></li>
<li>OSX ~/Library/Preferences/<product><version></version></product></li>
<li>Windows ~/AppData/Roaming/JetBrains/<product><version></version></product></li>
</ul>
<h1 id="配置调整">2.  配置调整</h1>
<h2 id="内存">2.1.  内存</h2>
<p>IDEA比较消耗系统资源, 如果觉得IDEA比较慢, 可以适当调整<br>
默认文件是 <code>$IDEA_HOME/bin/idea.vmoptions</code>.<br>
<strong>不建议直接修改默认文件, 默认文件在重装后会被覆盖</strong><br>
<strong>Help | Edit Custom VM Options 会创建一个复制文件, 可以在这里修改</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms512m</span><br><span class="line">-Xmx2048m</span><br></pre></td></tr></table></figure>
<h2 id="行长">2.2.  行长</h2>
<p>Settting | Editor | Code Style<br>
Right Margin : 180</p>
<h2 id="自动make">2.3.  自动Make</h2>
<p>Setting | build, extecution, deployment | Compiler<br>
Make project automatically checked</p>
<h2 id="修改代码字体">2.4.  修改代码字体</h2>
<p>Setting | Editor | Colors &amp; Fonts | Font<br>
Save as MyScheme, 修改字体 : 13</p>
<h2 id="修改代码提示大小写不敏感自动弹出提示框">2.5.  修改代码提示大小写不敏感&amp;自动弹出提示框</h2>
<p>Setting | Editor | General | Code Completion<br>
Case sensitive completion : None<br>
Auto-display code completion : checked</p>
<h2 id="自动make-2">2.6.  自动Make</h2>
<p>Preferences | build, extecution, deployment | Compiler<br>
Make project automatically</p>
<h2 id="提高编译效率">2.7.  提高编译效率</h2>
<p>注意: Eclipse 编译器编译有 lombok 的代码时会报错.</p>
<p>Build, Execution, Deployment | Compiler | Java Compileer<br>
User compiler : Eclipse<br>
Processed on errors : checked</p>
<h2 id="tomcat-下乱码">2.8.  tomcat 下乱码</h2>
<p>Run | Edit Configuration | tomcat | Startup/Connection</p>
<table>
<thead>
<tr>
<th>name</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>JAVA_TOOL_OPTIONS</td>
<td>-Dfile.encoding=UTF-8</td>
</tr>
</tbody>
</table>
<h2 id="修改属性资源文件properties的编码">2.9.  修改属性资源文件(.properties)的编码</h2>
<p>Editor | File Encoding<br>
Transparent native-to-ascii conversion : checked</p>
<h2 id="开启序列化-serialversionuid-检测">2.10.  开启序列化 serialVersionUID 检测</h2>
<p>Setting | Inspections | Serialization issues<br>
serialzable class without “serialVersionUID” : checked</p>
<h2 id="点击-stop-时立即关闭调试线程">2.11.  点击 stop 时立即关闭调试线程</h2>
<p>Build, Execution, Deployment | Debugger |<br>
Java | kill the debugger process immediately : checked</p>
<h2 id="允许多个实例">2.12.  允许多个实例</h2>
<p>Edit Configuration<br>
Single instance only : unchecked</p>
<h2 id="字段-import-类型">2.13.  字段 Import 类型</h2>
<p>Setting | Editor | Auto Import</p>
<p>Optimize import on the fly : checked<br>
Add unambiguous import on the fly : checked</p>
<h2 id="多行tab">2.14.  多行Tab</h2>
<p>Setting | Editor | Editor Tabs<br>
Show tabs in one row : unchecked</p>
<h2 id="关闭编辑窗口滚动条悬停时的代码透镜">2.15.  关闭编辑窗口滚动条悬停时的代码透镜</h2>
<p>Setting | Editor | General | Appearance<br>
Show code lens on scrollbar honver : unchecked</p>
<h2 id="签名">2.16.  签名</h2>
<p>Preferences | Editor | File and Code Templates<br>
Includes | File Header</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author $&#123;USER&#125;</span><br><span class="line"> * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="maven-并行编译">2.17.  Maven 并行编译</h2>
<p>File | Settings | Build, Execution, Deployment | Build Tools | Maven<br>
Thread count: 2C<br>
查看 CPU 是 i7-1051U, 是 4 核 8 线程的, 所以设置为 2C, 标识一个核心开启2个线程.</p>
<h2 id="gitignore">2.18.  gitignore</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># IntelliJ project files</span><br><span class="line">.DS_Store&#x2F;</span><br><span class="line">.idea&#x2F;</span><br><span class="line">out&#x2F;</span><br><span class="line">gen&#x2F;</span><br><span class="line">dst&#x2F;</span><br><span class="line">target&#x2F;</span><br><span class="line">.mvn&#x2F;</span><br><span class="line"></span><br><span class="line">mvnw</span><br><span class="line">mvnw.cmd</span><br><span class="line"></span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>
<h2 id="使用外部注解">2.19.  使用外部注解</h2>
<p>Intellij IDEA 的注解, 辅助开发, 加强参数效验</p>
<ol>
<li>开启外部注解:</li>
</ol>
<p>Settings | PreferencesEditor | Code Style | Java | Code Generation<br>
Use external annotations : checked</p>
<ol start="2">
<li>配置外部注解存放文件</li>
</ol>
<ul>
<li>方式 1: 模块级配置</li>
</ul>
<p>Project Structure | Modules | Paths | External Annotations</p>
<ul>
<li>方式 2: 项目级配置</li>
</ul>
<p>Project Structure | SDKs | Annotations</p>
<h2 id="同步配置">2.20.  同步配置</h2>
<p>IDEA 需要安装 <code>IDE Settings Sync</code> &amp; <code>Settings Repository</code> 2个插件, 一般默认自带了.</p>
<p>File / Settings Repository 页面中设置同步存放的 git 地址, 然后点击 Overwrite Local.  如果想要储存库保留远程设置和本地设置的组合, 可以点击 Merge. 如果检测到任何冲突, 将显示一个对话框, 可以在其中解决这些冲突. 如果要使用本地设置覆盖远程设置, 请单击点击 Overwrite Remote.</p>
<h2 id="性能优化">2.21.  性能优化</h2>
<h3 id="去除不必要的代码检测">2.21.1.  去除不必要的代码检测</h3>
<p>Settings / Build, Execution, Deployment / Compiler / Kotlin compiler<br>
Keep compiler process alive between invocations -&gt; unchecked</p>
<p>Inspections<br>
Spellings -&gt; unchecked</p>
<h3 id="优化启动速度">2.21.2.  优化启动速度</h3>
<p>配置 idea64.vmoptions 参数</p>
<figure class="highlight plain"><figcaption><span>config/idea64.vmoptions</span></figcaption><table><tr><td class="code"><pre><span class="line">-Xms512m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line">-ea</span><br><span class="line">-XX:CICompilerCount&#x3D;2</span><br><span class="line">-Dsun.io.useCanonPrefixCache&#x3D;false</span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes&#x3D;&quot;&quot;</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Djdk.attach.allowAttachSelf</span><br><span class="line">-Dawt.useSystemAAFontSettings&#x3D;lcd</span><br><span class="line">-Dsun.java2d.renderer&#x3D;sun.java2d.marlin.MarlinRenderingEngine</span><br><span class="line">-Dsun.tools.attach.tmp.only&#x3D;true</span><br><span class="line">-Duser.language&#x3D;en</span><br><span class="line">-javaagent:&#x2F;home&#x2F;raven&#x2F;Documents&#x2F;script&#x2F;run-config&#x2F;idea&#x2F;jetbrains-agent&#x2F;jetbrains-agent.jar</span><br></pre></td></tr></table></figure>
<h3 id="加大编译内存">2.21.3.  加大编译内存</h3>
<p>Settings / Build, Execution, Deployment / Compiler<br>
Build process heap size: 1024</p>
<h3 id="加大-maven-导入内存">2.21.4.  加大 Maven 导入内存</h3>
<p>Settings / Build, Execution, Deployment / Build Tools / Maven / Importing<br>
VM options for importer: -Xmx1024m</p>
]]></content>
  </entry>
  <entry>
    <title>intellij-idea</title>
    <url>/posts/tool/a688dbc5/</url>
    <content><![CDATA[<h1 id="常用-plugin">1.  常用 Plugin</h1>
<ul>
<li>GsonFormat 将 Json 对象转换成类, 可以由 JsonFormat 替代</li>
<li>Lombok Plugin</li>
<li>Scroll from source</li>
<li>Free Mybatis Plugin Mybatis 支持</li>
<li>Key Promoter 学习 Intellij IDEA 快捷键</li>
<li>Maven Helper Maven 依赖分析, 如排除冲突, 无用依赖等</li>
<li>Alibaba Java Coding Guidelines</li>
<li>CheckStyle-IDEA 代码规范检查插件</li>
<li>FindBugs-IDEA 潜在 Bug 检查</li>
<li>MetricsReloaded 代码复杂度检查</li>
<li>Statistic 代码统计插件</li>
<li>CodeGlance 显示代码地图插件</li>
<li>SonarLint</li>
<li>GenerateAllSetter 给对象的所有set方法赋值</li>
<li>VisualVM Launcher</li>
<li>Translation 翻译</li>
<li>Restfultoolkit 查找资源路径 <code>ctrl + \\</code></li>
<li>CamelCase 字符串格式转换 <code>opt + shift + U</code></li>
<li>PlantUML Integration</li>
<li>Floobits 协同工具</li>
</ul>
<h1 id="常用-postfix">2.  常用 postfix</h1>
<p>自动生成代码功能, 有点类似于 Live Template, 区别在于: 1. 不可自定义, 自能用系统默认的; 2. postfix 是先输入代码, 在加一个 <code>.</code> 后提示并生成代码</p>
<ul>
<li>for</li>
<li>fori</li>
<li>format</li>
<li>if</li>
<li>nn</li>
<li>notnull</li>
<li>null</li>
<li>opt</li>
<li>return</li>
<li>sout</li>
<li>stream</li>
<li>switch</li>
</ul>
<h1 id="快捷键">3.  快捷键</h1>


	<div class="row">
    <embed src="./IntelliJIDEA_ReferenceCard.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="小技巧">3.1.  小技巧</h2>
<ul>
<li>Alt+1 选择目录, Esc 回到编辑区</li>
<li>添加 TODO, FIXME 注释, 可以通过 Alt+6 查看需要修改的地方</li>
<li>Spring Tab 下可以查看有哪些 Beans 及 MVC 的路由</li>
<li>右击编辑窗口左侧(行号行号边), 打开 <code>annotate</code> 可以查看文件修改记录</li>
<li>Hierarchy 方便查看源码</li>
<li>Structural Search and Replace 通过模板搜索或替换代码</li>
<li>使用外部注解加强代码效验</li>
</ul>
<h3 id="call-hierarchy-控制包含哪些类">3.1.1.  call hierarchy 控制包含哪些类</h3>
<p>点击 Scope - Config<br>
在 Library classes 中 选择类路径, 右击 <code>Include Recursively</code> 递归包含.<br>
如: lib:org.springframework…*</p>
<h1 id="常见问题">4.  常见问题</h1>
<h2 id="maven-依赖过多-导致编译报-outofmemorygc-overhead-limit-exceeded">4.1.  Maven 依赖过多, 导致编译报 OutOfMemory:GC overhead limit exceeded</h2>
<ol>
<li>最好是能去除不必要的依赖</li>
<li>调整编译内存<br>
Settings | Build, Execution, Deployment<br>
Build process heap size (Mbytes): 2048 (默认700)</li>
</ol>
<h2 id="下载源码提示-cannot-download-sources">4.2.  下载源码提示 Cannot Download Sources</h2>
<p>查看配置文件目录下 IDEA 的日志文件定位问题<br>
如 Linux 下的 <code>~/.&lt;product&gt;&lt;version&gt;/config/system/log</code></p>
<h2 id="linux-下菜单中中文显示方框">4.3.  Linux 下菜单中中文显示方框</h2>
<figure class="highlight plain"><figcaption><span>.IntelliJIdea2019.2/config/idea64.vmoptions</span></figcaption><table><tr><td class="code"><pre><span class="line">-Duser.language&#x3D;en</span><br></pre></td></tr></table></figure>
<h2 id="gradle-项目测试配置">4.4.  Gradle 项目测试配置</h2>
<p>如果不使用 Gradle 进行测试, 而是使用 junit/testng 来测试, 会有代码缓存问题, 导致测试不通过</p>
<p>Settings | Build, Execution, Deployment | Build Tools | Gradle<br>
Build and run using: Gradle<br>
Run tests using: Gradle</p>
<h2 id="idea-自身缓存出现问题">4.5.  IDEA 自身缓存出现问题</h2>
<p>代码 build 报错, 但是 maven install 是能够成功的<br>
这种情况可能是由于 IDEA 的缓存造成的<br>
解决办法: File | Invalidate Caches / Restart</p>
<h2 id="exception-during-working-with-external-system-javalangassertionerror">4.6.  exception during working with external system: java.lang.AssertionError</h2>
<p>Refresh Gradle Dependencise</p>
<h2 id="安装-restfultoolkit">4.7.  安装 RestfulToolkit</h2>
<p>报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NoSuchFieldError: ModulesNode</span><br></pre></td></tr></table></figure>
<p>问题 issue:<br>
<a href="https://github.com/mrmanzhaow/RestfulToolkit/issues/32" target="_blank" rel="noopener">https://github.com/mrmanzhaow/RestfulToolkit/issues/32</a></p>
<p>解决办法:<br>
<a href="https://github.com/aborn/RestfulToolkit/releases" target="_blank" rel="noopener">https://github.com/aborn/RestfulToolkit/releases</a><br>
<a href="https://github.com/aborn/RestfulToolkit" target="_blank" rel="noopener">https://github.com/aborn/RestfulToolkit</a></p>
<h1 id="resource">5.  Resource</h1>
<ul>
<li>
<a href="https://www.jetbrains.com/help/idea/keymap-reference.html" title target>keymap</a>
</li>
<li>
<a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf" title target>pdf</a>
</li>
<li>
<a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html" title target>Intellij IDEA Offical Site Help</a>
</li>
<li>
<a href="https://segmentfault.com/a/1190000021220727?utm_source=tag-newest" title target>破解</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>Interpreter</title>
    <url>/posts/design-pattern/b03226b7/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>给定一个语言, 定义它的文法表示, 并定义一个解释器, 这个解释器使用该标识来解释语言中的句子.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqfCAYufIamkKKZEIImkLd24Sbqh2efIYuipy_CKghaKW41ReIm_CqKXCwyajGWeLQBXd0zaLW3rGMXDhbekBeWP8Qb5kPbvYJcKcE6NdqUPCLWyObEZgul5SJYLOdK35vTpJcPgNec2hgwT0jHYk90Tbl3ZmkwLVA05M1G30000">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>解释类容易膨胀</li>
<li>解释器模式使用场景较少, 而要使用时, 一般会选择成熟的框架, 如 ANTLR 等.</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Chain Of Responsibility</title>
    <url>/posts/design-pattern/9126ad1f/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>使多个对象都有机会处理请求, 从而避免请求的发送者与接收者之间的耦合关系.<br>
将这些对象连成一条链, 并沿着这条链传递该请求, 直到有一个对象处理它为止.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/VO_12i8m38RlUOg0bmsPuCxYPHVF-WIr3MumMcmoBxftjrsxAOZBfKs-_7yIK5SMhxIWxXKpdfGrFNby0eROB3aFMXEpyrDzYm_N6MIIormloc_IJhBYJFU1MD2djuGHm3eXzDsjbKcmrfwtYB7Ct-NUD6u4iWQZ9K0we75MUnBAY--3n_Y7rO4567q0vaCFhwhwCLcbzKVi0ir_WARlo0fMnwNq1W00">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>将请求的发送者与接收者解耦, 发送者不需要关心接收者</li>
<li>能够灵活的组建请求的处理链</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Command</title>
    <url>/posts/design-pattern/8ecaead4/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>将一个请求封装为一个对象, 从而是你可用不同的请求对客户进行参数化; 对请求进行排队或记录请求日志, 以及支持可撤销的操作.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li>Invoker 调用者</li>
<li>Receiver 接收者, 命令执行者</li>
<li>Command 命令</li>
</ul>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/XOz13e8m44NtSufPIamvW3RTk7Bh3PeoQ2DCap8I4-Nk5a9941DdsVdlzmru5egrTOIdqBQMAtm1fjbZ7to5z2Jt4DeLC02undPToh6B9FG_pq48ex_U14FzpKtKcfchnedaoFSKI-l41zuLnsar0AKVnzviSvc3QurCZHRPKx-LsaZafGfuvZxSAIQWySI2IfcbFR-LfTdSVq2jFNTYMRmLCWOM9wr-fEVJu0C0">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Mediator</title>
    <url>/posts/design-pattern/7c0966a3/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>用一个中介对象来封装一系列的对象交互, 中介者使各对象不需要显式地相互引用, 从而使其耦合松散, 而且可以独立地改变它们之间的交互.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>系统中对象之间存在比较复杂的引用关系, 导致它们之间的依赖关系结构混乱而且难以复用该对象</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqfCAYufIamkKKZEIImkLl1DJSbCBCalue9mdVFpaejIIrBXmbnewftpSt9I4zDBKnMgkHI0G1TkWa8kJ4yjcc5mFOQu98oukE36sDJewcAw0s6lJOsU7ZQZ2Qb0iKCNuH4kTBiKTEsmcq-4CYCk0000">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>简化了对象之间的关系, 将对象间的关系封装于 Visitor 中</li>
<li>Visitor 提供了对象间交互的平台, 使原本多对多的关系转化为一对一</li>
<li>Colleague 可以独立, 易于复用</li>
<li>系统将以 Visitor 为中心, 当它出现问题时, 可能影响整个系统</li>
<li>新增 Colleague 时, 必须修改 Visitor</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
<ul>
<li>Colleague 之间的职责必须明确</li>
</ul>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Memento</title>
    <url>/posts/design-pattern/9679fe6e/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>在不破坏封装性的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>需要保存/回滚数据的相关状态</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/XP0n3i8m34NtdC8Z5Mek07HX1J5mWgWrRGHDfCJ0W7ftqgHkAf0WGwf-_tm_MzGtvJqSiKT35bu2mYdXJ8eG_7X7PGqFgnlmIB6oMjIBoP2abXs568H8uIUdMsqKMVSZ_-jvaXciTXZawM-kCXJhxExJDp8O6t83GKTWBmkM6F4HE_6Dno7TdG63JsPOfN4tqJB4-r__74UTzZ86m0vw6yioJykXQ1eOWNbrUnKur1NpvWxQqtRgKt4ZFmwQlRPaPh7OlPJLBBy1">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator</title>
    <url>/posts/design-pattern/e5868a15/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/dP4n3i8m34Ltdy8Z5Se9G4Ye4mkSmIqcBQeIAJ422NftqXObG600Z_R_pzy9KEN5KIrOT-GzReGTYNLu1GmrnyhQZibWGtxB5vaLZ_wkEd9mcQdN0qp-qXfnBFm_votGMcl7ceGZAQ9hnvGsVKhnezdOe7IjRWJj8OUCYA-0QSDGmNHo9fnqpfvZ9athYyKexO7D7eUT096wl2cLkI3TyJ9FoQ3iMZQ2IgrYmkTUKcOV5AOvxmu0">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Null Object</title>
    <url>/posts/design-pattern/f353d759/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/ZP312i8m44Jl-nLpL2Jq1qGGxmh-mTfiDH0IJRQzQF_TjlOIYj2vxJ1lsLdYMzR4jQBsd3EEytXvIc9rCU1D6BH35vr5abShMJTRweb-n5NOhq-VMxyg7Q8Al3IAs9JGX9J0l6TKLS563FJ3XVlazYJ1ZeuGBTljFyQK5Vw5oYFev9q4XJaiNqPV">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Observer</title>
    <url>/posts/design-pattern/9b6f44e7/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>在对象之间定义了一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbNmJofEBIfBBLAevb800cs5ilpC58NIWfJ4abGDJQvQBgxadCJYOWNd_BpaejIILCBg4MO7boPbfIQNe2fDB2b9JCxGW9kJ3sLe8YjAIIL2KLv-IMPQ9JP7ebgign1S0dITGZ68X8huP1QNsC2CjuERNqnxby9LsjJewM44AnVCwIYoK44kkAoU7Lm30000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Strategy</title>
    <url>/posts/design-pattern/144645ed/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>策略模式定义了算法族, 分别分装起来, 让他们之间可以相互替换.<br>
此模式让算法的变化独立于可用算法的客户.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>系统需要动态的选择几种算法中的一种</li>
<li>系统中有许多类, 数据结构相似, 主要区别在于它们的行为</li>
<li>冗长的条件语句,难以维护</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbK8BYbAB4bDhrIevb800cs5ilpC58MCnBoKd5GDJQvQBgxadCJYOWNd_BpaejIIL9XwHvmQiAjtmcq1t0asDNfwc1OHa7T2Sc59QaK9r1vTXC-AeGna-ujJIs3o6XWADP5LfbQa9fSYh8Cu6MPNFi8QBW00">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>算法可以自由切换, 且扩展性良好</li>
<li>可以对冗长的条件判断进行优化</li>
<li>可能出现策略类过多的问题</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>State</title>
    <url>/posts/design-pattern/a393d2fb/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>允许对象在内部状态改变时改变它的行为, 对象看起来好像修改了它的类.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>对象的行为依赖于它的状态, 并且可以根据他的状态改变而改变它的相关行为</li>
<li>冗长的条件语句,难以维护</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbK8BaaiILMevb800cs5ilpC58LYa92XXYQ6c15Gh9QBApadiRXOmJa_BxaejIGLR80XnIOOaMO2nDasDRgwQ0x1AME4P6r9QaK9r3vTQ0Y03GUP39FEXyfm0G00">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>实现比较复杂, 有多少种状态, 就有多少个对应状态的具体实现类, 而每一个实现类对每一种状态都要有对应的方法处理</li>
<li>可以将转化规则拆散封装</li>
<li>可以对冗长的条件判断进行优化</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Template Method</title>
    <url>/posts/design-pattern/97601f83/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>模板方法模式在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中.<br>
模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>有一套通用的算法流程, 但是具体实现步骤可能有差别</li>
<li>业务流程基本定型, 不需要重复开发规范好的代码</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/XP0n3i8m34Ltdy8Z2BKz02oKcOqBf4bA8uK49OQbvEwaD8sGsghUB3_x_szWZIV7E27Np7kyoSTJCvBO0yOwODygmtJ0jrK2AKslaZehTlk9cOuapB-QaJXl8tL40e2nKTEfUqTes-pYjxoedFmDLLLObcLk_yMFcr2z0WMGHk3W2c3ypCKQxYJ9sOVM8Y_cpDkdJr7CRi8N">
<h2 id="特点">3.3.  特点</h2>
<ul>
<li>封装不变部分, 扩展可变部分</li>
</ul>
<h2 id="开发规范">3.4.  开发规范</h2>
<p>为了防止恶意操作, 一般模板方法都加上 final 关键字</p>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Visitor</title>
    <url>/posts/design-pattern/cae5e19f/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<ul>
<li>将数据的结构与操作相分离</li>
</ul>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>数据结构比较稳定, 但是需要经常对此数据结构定义新的操作</li>
<li>在一个复杂类型中, 需要遍历很多子元素, 且子元素的类型可能不同</li>
<li>需要给类型中定义许多不同且不相关的操作</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbK8oopEBCalKgZcKW02ROMo_CmKXJAGe6jEQcvgNecZXdD-Nd9HQaagJ40X5ShGnAN72LsF4qoFaoPNBHTNSavYSR42JCs0E04H0b1vkFM9oScf1IKQC5ULGMWixeOxXboTJiJeX8dPrEZfeGSP5ypjA98mT-6LTUBYSix91Cdgwjh1KW6o45GT5m00">
<h1 id="特点">4.  特点</h1>
<ul>
<li>Visitor 职责单一, 扩展灵活</li>
<li>Visitor 需要知道被访问者的具体细节, 违反了迪米特原则和依赖倒置原则</li>
</ul>
<h2 id="开发规范">4.1.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>behavoral</tag>
      </tags>
  </entry>
  <entry>
    <title>Abstract Factory</title>
    <url>/posts/design-pattern/b7f4ee84/</url>
    <content><![CDATA[<p>抽象工厂是创建其他工厂方法的超级工厂.</p>
<h1 id="意图">1.  意图</h1>
<p>抽象工厂模式提供了一个接口, 用于创建相关或依赖对象的家族, 而不需要明确指定具体类.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>系统要独立于它的产品的创建, 组合和表示时.</li>
<li>系统要由多个产品系列中的一个来配置时.</li>
<li>需要强调一系列相关产品对象的设计, 以便进行联合使用时.</li>
<li>需要提供一个产品类库, 而只想显示他们的接口而不是实现时.</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li>AbstractFactory<br>
声明一个创建抽象产品对象的操作接口</li>
<li>ConcreteFactory<br>
实现创建具体产品对象的操作</li>
<li>AbstractProduct<br>
为一类产品对象声明一个接口</li>
<li>ConcreteProduct<br>
实现 AbstractProduct 接口, 定义一个将被相应的具体工厂创建的产品对象.</li>
<li>Client<br>
仅使用由 AbstractFactory 和 AbstractProduct 类声明的接口.</li>
</ul>
<p>通常在运行时创建一个 ConcreteFactory 类的实例. 这一具体工厂创建具有特定实现的产品对象. 为创建不同的产品对象, 客户应使用不同的具体工厂.<br>
AbstractFactory 将产品对象的创建延迟到它的 ConcreteFactory 子类.</p>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqfCAYufIamkKKZEIImkLd24Sjs0EB-eKg6QIm48j1MgOUfguKe2Yl9JIfDB71MIYr8JIr9XN0rDWbgSKBKu0RNKSd517E2SdmUKB4c5Ei1mm5rWH4yNe0U_JOskBaQG4ANAY8iBHzJ274b0tWdX6hWlmHR1U8O4v8suCBoCBEzaI40Uw0ECnA2dPuTaFpvf9mnf8nJTHdYbmPRdPARcbO15qG8ScnGyL77BEN410000">
<h2 id="开发规范">3.3.  开发规范</h2>
<ol>
<li>将工厂实现为单例<br>
一个应用中一般每个产品系列只需要一个 ConcreteFactory 的实例. 因此工厂通常最好实现为一个单例.</li>
<li>创建产品<br>
AbstractFactory 仅声明一个创建产品的接口, 真正创建产品是由 ConcreteFactory 子类实现的.</li>
<li>定义可扩展的工厂<br>
最通常的一个办法是为每一类产品定义一个工厂方法. 但如果新增一种产品, 则需要改变 AbstractFactory 以及其相关的类.<br>
为避免此问题, 一种更灵活但不太安全的方式就是给创建对象的方法增加一个参数, 用于指定需要创建的对象的类型. 它可以是一个类标识符, 一个整数, 一个字符串, 或其他任何可以标识这种产品的东西. 实际使用时, AbstractFactory 只需要一个 <code>make()</code> 方法和一个指示要创建对象的种类的参数.    # 意图</li>
</ol>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
      </tags>
  </entry>
  <entry>
    <title>Factory Method</title>
    <url>/posts/design-pattern/6ba1dc80/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>工厂方法模式定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个.<br>
工厂方法让类把实例化推迟到子类.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li>Product<br>
定义工厂方法锁创建对象的接口.</li>
<li>ConcreteProduct<br>
实现 Product 接口</li>
<li>Creator<br>
声明工厂方法, 该方法返回一个 Product 类型的对象.</li>
<li>ConcreteCreator<br>
实现工厂方法.</li>
</ul>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqfCAYufIamkKKZEIImkLd0kIaqioIzIgEPI009jXO2Y_9HIe6nkOdQgXYPNBHSNL5r-Nd9HQaagOVMPUIMfHMc9oQamEIukc2QR6brTT9Euk616sDJewS5b4NhHBDRJiyDG1000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
      </tags>
  </entry>
  <entry>
    <title>Builder</title>
    <url>/posts/design-pattern/d627af49/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时.</li>
<li>当构建过程必须允许被构造的对象有不同的表示时.</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li>Director 导向器<br>
构造一个使用 Builder 接口的对象</li>
<li>Builder<br>
为创建一个 Product 对象的各个不见指定抽象接口</li>
<li>ConcreteBuilder<br>
实现 Builder 的接口已构造和装配该产品的各个部件<br>
定义并明确它所创建的表示<br>
提供一个检索产品的接口</li>
<li>Product<br>
表示被构造的复杂对象.<br>
包含定义组成部分的类</li>
</ul>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/XOz12W8n34NtEKMM8z8BIEb2FS3W3Jfja4AnaAPkTExkO6mNip6RmEU__nC8sTUAryGKf32-0BSv3c4wjvGZCIww3x02-AKA-o2eSBTqzbbILF_iMQOleivBUGGceR-4oZENsBQQEycDQik_h4xRjp7xI83nIZ7zCjZt6ZUoJsXjg-GSV000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
      </tags>
  </entry>
  <entry>
    <title>Object Pool</title>
    <url>/posts/design-pattern/b196263a/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLWXABIvDJCf93SZFpr6miGdEp4lFIIt9pxEpKwZcKW02RLGbwQabddd59ObvoQaQccWA51AJ2qipYn0IPVcPAGf5gJcfYSMf6d1LHL269bSj5vTpJcPgNec2hguTYZtOnBcuK5oIhukG0G00">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
        <tag>object-pool pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Singleton</title>
    <url>/posts/design-pattern/65563eb2/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<ul>
<li>保证只有一个实例被创建, 并提供该对象的全局访问</li>
<li>封装适时初始化, 也就是在第一次使用是初始化</li>
</ul>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLWZEp4lFIIt9prEevj9LyFGB3d7qStO5Ck4I6ffSsWhLnIM99Pd9jKZgqrDBFFE0mdd9gK0bjLnS22aR9ErS0000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
      </tags>
  </entry>
  <entry>
    <title>Prototype</title>
    <url>/posts/design-pattern/a36a5ae4/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/ZOun2e0m303tl2AZ8le0ALryW7wXXWYLsaYRHTI_wwRWuirtSE2ZSfeSCGv9L7HR6NV0cmhxSMPIf22HYn9E00ekP-maKcBbFyNZcADflYb05pn7nTg-3beqnY-h9BKMBW00">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>creational</tag>
      </tags>
  </entry>
  <entry>
    <title>composite</title>
    <url>/posts/design-pattern/380a0d58/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>将对象组合成树型结构以表示 <code>部分 - 整体</code> 的层次结构. Composite 使得用户对单个对象和组合对象的使用具有一致性.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/VP0z3i8m38Ltdy9Z8fIUeEhIjPU84XSYjN6LM5s0kvUVG505UBBap-_v6K8KIgDrX3tF2qUAWcV0MnsG5qfMI6cu0hZ9vlo4SX0gaC4XP6dVknswKvXyebWqLWuUhVUgohjNfp-PH3Elz0_REnr9-cAczE-J1xBZzqZLgxqqJSss7zmL2ls8piPqzLsm0G00">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>Adapter</title>
    <url>/posts/design-pattern/19dc647c/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>将一个类的接口转换为客户希望的另外一个接口.<br>
Adapter 使原本由于接口不兼容而不能一起工作的那些类可以一起工作.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbLmJ4ai0B8LghaKW41ReIm_CqKXlo2rAB4aCpzFGvEhbeihEIUnk5Z1EJylkIYr91LLXoxKX5I5H0XDq1oOUXGR8PfJV5DBCl9J8AfXzjZKwEgYMyx5vPoJcPfNeg1h1_C15xhxu5AfN000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>Bridge</title>
    <url>/posts/design-pattern/6ed40aa9/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>将抽象部分和实现部分分离, 使它们可以独立地变化.</p>
<h1 id="适用场景">2.  适用场景</h1>
<ul>
<li>不希望在抽象与它的实现部分之间有固定的绑定关系. 在程序运行时实现部分可以被选择与切换.</li>
<li>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充.</li>
<li>对抽象的实现部分的修改不应该影响客户</li>
</ul>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li>Abstraction<br>
定义抽象类的接口</li>
<li>RefinedAbstraction<br>
扩充由 Abstraction 定义的接口</li>
<li>Implementor<br>
定义实现类的接口</li>
<li>ConcreteImplementor<br>
实现 Implementor</li>
</ul>
<p>将抽象与实现分离, 为用户提供一个稳定的接口.</p>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqfCAYufIamkKKZEIImkLd04Sqioy_CKghaKW41ReHgcf5OXlo0L8gcXoLNBnGNH4fIQbfcNck88LGMKvUBAp2j9BKfBJ4vLyCmjo4dDJSqhoI-2cmWt1YI9R9HpVbvoKMf9Af8cHx9qEU7JXUH7cnfTNQmUG7QsJOsU7bQd4QNA2SL2BLta4E420000">
<h2 id="开发规范">3.3.  开发规范</h2>
<ol>
<li>Abstraction 与 Implementor 之间应该是一对一的关系</li>
</ol>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>Decorator</title>
    <url>/posts/design-pattern/336f0513/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>动态地给一个对象添加一些额外的职责.<br>
就增加功能来说, Decorator 模式比生成子类更加灵活.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbLmpiyjoCzBpIjHgEPI009jXVo2rAB4aipyF0rDhbekhkISnE9YeBAyvABKabI2oX4ckwGcvmDbyekWIe6o0000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>Facade</title>
    <url>/posts/design-pattern/97f2d197/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>为子系统中的一组接口提供一个一致的界面.<br>
Facade 模式定义了一个高层接口, 这个接口使得子系统更加容易使用.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLd1BJ4vCILMevb800cs5ilpC58NyWjIYn99KHmrDBA9EM4MTWQArN5oPUIMfHMc9oQaAmPN59QcvZXWYJXWYpbnSK4Vewjh1z2bOATZOb1QdsjbXIZhXatH6aWG0">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>private-class-data</title>
    <url>/posts/design-pattern/311736c6/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLd19B4bq1hEgkHI0G5SXiQIaA3Efj2JL45t025t062oWZJ140w5P1qaV4jjO4wedFRN44QvO0vke4LPHOw1eBHSNnFM-YPbvgAv7-2S5o8BgXokZd_iGBij7SXGN0000">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>flyweight</title>
    <url>/posts/design-pattern/81cb386e/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>运用共享技术有效地支持大量细粒度的对象.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<ul>
<li></li>
</ul>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/bOzH2i8m44J_Suhzh4fw0l6dq0k81rZYs0P3Aic25lNkQi6qj0HqVsVdpOooNX1ER42rww-mJIjqL_I-3NKN11OKk4cmFbgp5nPhLkgfb74S8rMTDm62kLVJmFNiFXRyp3lus7B0CSzbzoSo8MesqeK-hMiWIIlEw0VF6BXzbELot_mXMtY2-WQljHxRgCfPU26jTukAKsq9deZvz1S0">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>如何读一本书</title>
    <url>/posts/uncategorized/f5057e2c/</url>
    <content><![CDATA[<ul>
<li>扩展<br>
书中提到的其他资料, 如人物, 书籍</li>
</ul>
<h1 id="读书百遍-其义自见">1.  读书百遍, 其义自见</h1>
<p>在学习新知识的时候, 独自来到知识孤岛, 没有标准, 没有参考时, 这句话会有 2 个问题:</p>
<ol>
<li>读书百遍需要很长时间<br>
那么和别人相互交流, 或者直接由已经理解的人那里学习, 是不是应该更快呢?</li>
<li>自己理解是否有偏差<br>
每个人都可以有自己的理解, 有可能出现偏差, 甚至错误.</li>
</ol>
<p>如何规避?</p>
<p>我们需要一套学习的方法:</p>
<ol>
<li>我们需要了解知识的体系结构
<ul>
<li>主要内容是什么</li>
<li>知识的结构是什么</li>
<li>边界是什么, 适用于什么范围</li>
</ul>
</li>
<li>自学完成之后, 需要与别人交流
<ul>
<li>自己有没有记忆牢固</li>
<li>别人和自己的理解是否一致</li>
<li>有没有知识盲点</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>很有道理的句子</title>
    <url>/posts/uncategorized/6cfb65ef/</url>
    <content><![CDATA[<p>Good judgment comes from experience, and experience comes from bad judgment<br>
正确的判断来自于丰富的经验, 而大多数经验又来自于错误的判断.</p>
]]></content>
  </entry>
  <entry>
    <title>如何说服别人</title>
    <url>/posts/uncategorized/871c7492/</url>
    <content><![CDATA[<blockquote>
<p>说服他人时, 最好从对方的切身利益出发, 而非理性.<br>
相对于得到新东西, 人们更害怕失去已经拥有的东西.<br>
既然如此, 利用人类这一恐惧心理 – 害怕失去有价值的东西: 工作, 名声, 金钱, 地位, 控制力等, 成功率就越大.<br>
— 投资大家芒格2-探索智慧: 从达尔文到芒格</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>proxy</title>
    <url>/posts/design-pattern/7372c9be/</url>
    <content><![CDATA[<h1 id="意图">1.  意图</h1>
<p>为另一个对象提供一个替身或占位符以控制这个对象的访问.</p>
<h1 id="适用场景">2.  适用场景</h1>
<h1 id="实现">3.  实现</h1>
<h2 id="参与者">3.1.  参与者</h2>
<h2 id="结构">3.2.  结构</h2>
<img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbK8BatAIaqkKQZcKW02ROMo_CmKXQBKmjBKuX8DJQvQBgxadCJYOeMWrCGSOjK65ELNLE9H1JF7faPF3zbWL0cmALnS4CDqxL1SOALWOrEKMb2KMfoQLr9iPyV5vPoJ2MI2rC4C0m00">
<h2 id="开发规范">3.3.  开发规范</h2>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>structural</tag>
      </tags>
  </entry>
  <entry>
    <title>思考与说话</title>
    <url>/posts/uncategorized/3da8966f/</url>
    <content><![CDATA[<p>沟通交流时说话不经过思考, 容易说出一些不恰当的话.</p>
<p>先思考, 将要说的话过一遍, 再说出来, 这样又觉得思维速度跟不上说话速度, 容易出现卡顿.</p>
<p>说话时, 先产生一个念头, 是自己需要表达给对方的一个思想. 需要在说出之前整理, 过滤, 确认符合情理逻辑, 再说出口.</p>
<p>有时候我们能很流畅的和别人交流, 是因为我们知道对方在想什么, 接下来会发生什么, 应该说些什么.</p>
<p>所以我们需要整理思考什么呢?</p>
<ul>
<li>人物<br>
对方正在做什么<br>
对方的背景, 知识面等<br>
对方需要什么信息</li>
<li>情境<br>
身处的环境<br>
我的立场</li>
<li>上下文逻辑<br>
已经表达过什么信息</li>
</ul>
<p>我们需要掌握这些情况, 防止自己说完出洋相.<br>
在还没掌握这些情况之前, 要么聆听, 要么提问获取信息之后再表达.</p>
]]></content>
  </entry>
  <entry>
    <title>容易出错的地方</title>
    <url>/posts/uncategorized/35d5fab5/</url>
    <content><![CDATA[<ul>
<li>
<p>思考不完整</p>
<ul>
<li>逻辑上下文更新慢, 逻辑修改太多次后, 出现混乱, 失忆</li>
<li>缺少完整的体系参考, 遗漏一些方面的思考</li>
<li>疲劳, 思维变懒</li>
</ul>
</li>
<li>
<p>个人防御墙<br>
由于情绪, 偏见引起的和他人的对立面, 导致无意义的争执</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>思维训练</title>
    <url>/posts/uncategorized/cb1401cd/</url>
    <content><![CDATA[<h1 id="衡量思维的">1.  衡量思维的</h1>
<h1 id="如何提升思维能力">2.  如何提升思维能力</h1>
<a href="https://doc.mbalib.com/view/6bccff38bd4f5b438d5bce7e2db7ba53.html" title target>如何一步一步训练自己的思维能力</a>
<a href="https://doc.mbalib.com/view/6bccff38bd4f5b438d5bce7e2db7ba53.html" title target>如何一步一步训练自己的思维能力</a>
]]></content>
  </entry>
  <entry>
    <title>气场</title>
    <url>/posts/uncategorized/a53aa14/</url>
    <content><![CDATA[<p>有气场的人一般有什么共同点?</p>
<ol>
<li>
<p>理性<br>
沟通过程中非常冷静, 没有幅度太大的的情感波动和肢体语言, 说话匀速, 眼神坚定.<br>
通常都是微笑表达友善, 说话有条理, 思考过程中也是看着对方, 目光不会偏移到别处.</p>
</li>
<li>
<p>自信<br>
有成功的经验和信念支撑, 不会轻易让对方知道自己的短处.<br>
即使嘴上说的丧气的话, 表情和肢体语言上却没有太大变化, 似乎一切都在掌控范围内.<br>
自信源于自己成功处理过某些问题, 那么再遇到类似问题的时候就有底气. 如果一直把问题放在那里不处理, 在没有解决前与人谈及相关问题时, 就会有心虚的表现.</p>
</li>
<li>
<p>有阅历<br>
似乎一切事情对方都能说出几分道理.</p>
</li>
<li>
<p>仪态<br>
着装看上去给人干净整洁, 舒适随和感.<br>
站坐姿态大方得体.</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>我离职的原因</title>
    <url>/posts/uncategorized/d7e9e1bf/</url>
    <content><![CDATA[<p>最近我变的非常焦虑, 脾气也很暴躁. 仔细想了下, 原因大概有:</p>
<ol>
<li>
<p>家庭的压力<br>
目前家里的收入来源是我上班工作, 而我觉得, 目前的薪资水平不足以支持家庭的开销, 基本攒不下什么钱.<br>
18 年, 迎来了我儿子安仔, 而我自己也没买房, 我不想我儿子以后也娶老婆没有房子. 尽快购房是我的目标.</p>
</li>
<li>
<p>工作的瓶颈<br>
公司的薪资目前不够理想, 并且上升慢.<br>
除此之外, 作为一个程序员, 我有点觉得自己目前的工作属于重复劳动, 技术层面没有很久没有质的提升.<br>
对于升职, 我其实没有欲望. 我看着我的上级领导们每天被各种各样的琐事包围, 从早忙到晚. 我不想成为他们那样. 身为程序员, 骨子里有一份飘逸逍遥. 我理想的工作状态是, 写好代码, 轻松惬意的在边上喝着茶, 看着系统帮我自动完成任务.</p>
</li>
<li>
<p>莫名的担忧<br>
今年生了很久的病, 填病例时, 突然发现年龄那块要以 3 开头了. 似乎一下子感觉到了时间紧迫, 好多事情没有完成. 似乎一下子失去了自信, 自己已经不再年轻, 少了一份优势. 经常有听到新闻说 IT 公司对 30 岁以上的员工的各种偏见.<br>
每天两点一线, 在公司拿着固定的收入, 让我惴惴不安, 仿佛有什么重要的东西在不停的流逝.</p>
</li>
</ol>
<p>那么眼下迫切需要做的:</p>
<ul>
<li>寻找一份薪资更高, 职位更合适的工作<br>
从内心来讲, 我想试试那种更多需要交流的工作, 但是有点怕转型不容易, 自己没有交流技巧的底蕴.</li>
<li>拥有工作以外的收入来源<br>
主要的我想试试股票. 这应该是一条比较实用的道路.<br>
我能想象的发家致富的方法, 就是开公司, 那就会涉及到投资, 社会经济等一系列的支持, 适合去了解整个社会的运作. 另一方面, 就是向目标中的有钱人靠拢. 我的上一辈甚至同辈都不太愿意尝试股票, 它的风险太高了, 那是不是成了他们永远也接触不到层次. 我需要尝试, 需要铺路, 需要经验.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>社会常见问题</title>
    <url>/posts/uncategorized/932599af/</url>
    <content><![CDATA[<p>一个和睦的家庭<br>
家庭成员丰富, 关系和睦</p>
<p>什么会导致家庭的不和睦</p>
<p>健康<br>
其中有长期的疾病, 或者突然的变故<br>
经济<br>
物质达不到要求<br>
精神<br>
没有足够的时间相处, 没有太多的相关性</p>
<p>预防:<br>
养成良好的生活习惯</p>
]]></content>
  </entry>
  <entry>
    <title>自控力</title>
    <url>/posts/uncategorized/ca2dc828/</url>
    <content><![CDATA[<p>如何从被游戏支配中解脱? 如果救治拖延症?</p>
<ul>
<li>
<p>先要离开当前状态, 比如冥想, 运动, 让自己独处<br>
然后脑中思考现在有什么事情要做, 怎么做, 定制一个计划<br>
有了明确的目标和计划之后就能摆脱那些负面的状态了</p>
</li>
<li>
<p>重复的事情做多了就没有成就感, 变成了固定任务. 那由于人性的懒惰, 就开始变动逃避这些固定任务.</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>社会人员层次</title>
    <url>/posts/uncategorized/dcf306e/</url>
    <content><![CDATA[<ul>
<li>劳动力
<ul>
<li>脑力劳动</li>
<li>体力劳动</li>
</ul>
</li>
<li>政府工作人员</li>
<li>企业家</li>
<li>学生</li>
<li>退休老年人群</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>被动收入</title>
    <url>/posts/uncategorized/9818c042/</url>
    <content><![CDATA[<p>房产<br>
- 房租<br>
- 炒房<br>
理财<br>
- 股票<br>
- 基金<br>
- 利息<br>
IT<br>
- 广告<br>
- <a href="https://www.google.cn/adsense/start/" title target>Google Adsense</a><br>
- 商品推广<br>
- 京东<br>
- 拼多多<br>
- 淘宝<br>
- 自媒体<br>
- 公众号<br>
- 知乎<br>
- 简书<br>
- 今日头条<br>
知识产权<br>
- 专利<br>
- 版权<br>
- 商标</p>
]]></content>
  </entry>
  <entry>
    <title>认知, 区别和理解</title>
    <url>/posts/uncategorized/1f39ef51/</url>
    <content><![CDATA[<p>量子纠缠大概讲的是 2 个原本耦合的粒子分开后仍然相互影响.</p>
<p>这是不是多维空间的秘密?</p>
<p>比如一根绳子从一张纸的一点穿过, 再从另一点穿回来. 从纸的正面看来, 是 2 条在纸上不相干的绳子. 但是扯动其中一根绳子, 会带动另一根. 原因是在纸的背后, 绳子其实是连着的, 这本来就是一根绳子, 只是我们没看到纸的背面. 从多维空间的角度来讲, 绳子的背面在更高的维度, 我们的观察看不到.</p>
<p>所以许多事情, 在我们的认知范围之外, 只是我们并不知道他们的联系.<br>
我们应该多观察, 多学习, 多思考, 提高对事物的敏感性, 才能触摸到那些看不见的联系.</p>
<p>另外, 既然是因为观察事物的角度不同而导致认识的不同, 那么多从不同角度观察, 就能更全面的认识事物. 通常我们的建模, 就是用于认识事物. 把事物罗列出来, 事物和事物之间的关系标识出来, 就是建模. 而日常生活中的换位思考, 体谅他人也是这个道理.</p>
<blockquote>
<p>我们不喜欢不确定或未知的东西, 所以我们需要总结, 归类, 组织和构建整合世界.<br>
把思想和物体进行归类, 有助于我们认知, 区别和理解, 它让生活简化了.<br>
理解和控制我们的环境有助于更好的应对未来．我们要知道事情发生的过程和原因, 　才能在未来更好的预见它．<br>
这也是我们总是喜欢寻找模型和各种事物, 行动以及情境等因果关系的原因.<br>
根据这些模型的相似点, 人们更容易分类, 理解以及作出推测.<br>
寻找和识别环境中的事物以及事情之间的联系, 能帮助我们什么有效, 什么无效.<br>
---- 投资大家芒格2-探索智慧: 从达尔文到芒格</p>
</blockquote>
]]></content>
      <tags>
        <tag>认知</tag>
        <tag>区别</tag>
        <tag>理解</tag>
      </tags>
  </entry>
  <entry>
    <title>life/top/strategy/strategy</title>
    <url>/posts/uncategorized/15e55d9f/</url>
    <content><![CDATA[<h1 id="性格">1.  性格</h1>
<h2 id="坦荡">1.1.  坦荡</h2>
<p>一切谋略都如同下棋一般,摆在台面上进行.<br>
心中光明磊落,充满阳光,满满正能量.<br>
即使是小心机,也是应变的需要,合情合理的对症下药.</p>
<h2 id="从容">1.2.  从容</h2>
<p>无论遇到什么样的处境,都保持从容镇定.<br>
以悠闲,逍遥的心态享受生活.<br>
不拘于形式,套路多变.</p>
<h2 id="清醒">1.3.  清醒</h2>
<p>以一种第三者的视角,观察自己的言行举止,时刻保持清醒.<br>
自己正在做什么,要怎么做.<br>
而不是凭本能与感觉做事,明确事情的重点.</p>
<h2 id="预判">1.4.  预判</h2>
<p>对自己的行为所带来的后果有一个预判.<br>
这么做会有什么结果?<br>
如果结果出人意料,应该如何应对?<br>
需要为自己的行为负责.</p>
<h2 id="严谨">1.5.  严谨</h2>
<p>对于任何事物都有准确全面的认识.<br>
深度挖掘事物的本质;如果时间不允许,至少对整体的把控没有任何问题.<br>
把事情处理稳妥.</p>
<h2 id="宽容">1.6.  宽容</h2>
<p>对于他人要包容,至少对事不对人.<br>
不能页不要强制别人变成自己需要的.</p>
<h2 id="大局">1.7.  大局</h2>
<p>平衡各方利益, 看清形势.</p>
<h2 id="节奏">1.8.  节奏</h2>
<p>做事情把握好节奏. 期望是那种流线型的感觉.</p>
<h1 id="改进">2.  改进</h1>
<h2 id="放松后没有状态">2.1.  放松后没有状态</h2>
<p>什么都不管了, 导致完全凭着本能行事<br>
要注意休息, 不用熬夜</p>
<h2 id="不断挑战自己底线">2.2.  不断挑战自己底线</h2>
<p>使自己遇到事情, 临危不乱, 面不改色</p>
<h2 id="细致程度">2.3.  细致程度</h2>
<h2 id="气质">2.4.  气质</h2>
<h2 id="二阶思维">2.5.  二阶思维</h2>
<p>所谓二阶思维 (Second-Order Thinking) 就是一位置要考虑结果背后的结果.<br>
举个例子, 一阶思维会说这是一家好公司, 让我们买进它的股票.<br>
二阶思维则需要考虑这是一家好公司, 但是人人都知道它是一家好公司, 所以这股票的价格自然就高了, 因此对于投资者来讲, 这家公司就不是足够好的公司了, 我们可以卖出它的股票.</p>
<p>所以说, 二阶思维就是迫使我们在采取行动时考虑长期影响.<br>
在此过程中, 我们最需要问自己的问题是, <code>如果我做了这件事, 那么接下来会发生什么</code>.</p>
<h2 id="注重与人沟通">2.6.  注重与人沟通</h2>
<p>比起处理事情, 更应该注重与人交流上.<br>
人和事, 人更重要. 应该有条不紊的处理人和事情, 一味的拼命干活是不对的, 有不是机器.<br>
再忙, 也不能没了章法.</p>
<h2 id="城府">2.7.  城府</h2>
<p>真正有城府的人是不会表现出来的, 他会更表现不是用脑的, 让人忽略你, 一副和蔼可亲的样子, 让人不会产生警惕感甚至敌意. 最终在别人死在他手里的时候, 才回过味来.</p>
<h2 id="记忆力">2.8.  记忆力</h2>
<p>如果记不住东西, 也很可能是对这些东西不感兴趣, 也有可能是事物没有思维方式去记忆它.</p>
<h2 id="善用工具">2.9.  善用工具</h2>
<p>假舆马者, 非利足也, 而致千里; 假舟楫者, 非能水也, 而绝江河. 君子生非异也, 善假于物也.</p>
<h2 id="要接纳别人的观点">2.10.  要接纳别人的观点</h2>
<p>在别人发表自己观点的时候要先接纳, 理解他们说的是什么, 然后在思辨; 而不是主观片面的认为别人就是错的.</p>
]]></content>
  </entry>
  <entry>
    <title>life/top/strategy/time_manage</title>
    <url>/posts/uncategorized/e7353388/</url>
    <content><![CDATA[<h1 id="时间管理">1.  时间管理</h1>
<p>必须保证自己的状态</p>
<h2 id="工作日时间表">1.1.  工作日时间表</h2>
<p>起床 @30m @started(07:00) @done(08:00)<br>
上班路上 @1h30m @started(08:00) @done(09:30)<br>
- 确认目标与计划<br>
工作 @2h30m @started(09:30) @done(12:00)<br>
吃饭/休息 @1h30m @started(12:00) @done(13:30)<br>
工作 @5h30m @started(13:30) @done(18:30)<br>
自由时间 @1h @started(18:30) @done(19:30)<br>
回家路上 @1h30m @started(19:30) @done(21:00)<br>
自由时间 @1h30m @started(21:00) @done(22:30)<br>
- 自我审视, 工作总结, 计划安排<br>
洗澡 @30m @started(22:30) @done(23:00)<br>
放松 @30m @started(23:00) @done(23:30)<br>
睡觉 @8h @started(23:30) @done(07:00)</p>
<ol>
<li>路上时间 3h</li>
<li>工作时间 8h</li>
<li>自由时间 2h30m</li>
<li>睡觉时间 7h30m</li>
</ol>
<h1 id="休息日时间表">2.  休息日时间表</h1>
<p>起床 @30m @started(07:00) @done(08:00)</p>
<p>休息 @1h30m @started(12:00) @done(13:30)</p>
<p>洗澡 @30m @started(22:30) @done(23:00)<br>
放松 @30m @started(23:00) @done(23:30)<br>
睡觉 @8h @started(23:30) @done(07:00)</p>
<p>其余时间 做家务 学习</p>
<h1 id="重要日期">3.  重要日期</h1>
<p>4月25号 梦佳生日<br>
3月9号  结婚纪念日<br>
12月6号 认识纪念日</p>
]]></content>
  </entry>
  <entry>
    <title>life/top/workflow/develop</title>
    <url>/posts/uncategorized/7f81befe/</url>
    <content><![CDATA[<p>确定需求 =&gt; 需求文档<br>
分析需求 =&gt; 需求分析文档<br>
软件开发 =&gt; 开发代码, 测试代码, 测试用例<br>
软件测试 =&gt; 测试报告(单元测试, 集成测试, 压力测试)</p>
<h1 id="业务分析">1.  业务分析</h1>
<ul>
<li>正常流程
<ul>
<li>主体对象</li>
<li>业务过程</li>
<li>业务边界</li>
</ul>
</li>
<li>异常流程
<ul>
<li>异常情况列表</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>life/创业/电商/note</title>
    <url>/posts/uncategorized/72c479e7/</url>
    <content><![CDATA[<p>没有库存, 直接对外销售, 赚取推广费<br>
提供优惠商品, 让客户浏览购买</p>
<p>推广平台:</p>
<p>京东<br>
淘宝<br>
拼多多</p>
]]></content>
  </entry>
  <entry>
    <title>life/top/workflow/drive</title>
    <url>/posts/uncategorized/1a171398/</url>
    <content><![CDATA[<h1 id="交通标识">1.  交通标识</h1>
<h3 id="danger">1.0.1.  Danger</h3>
<ul>
<li>红绿灯</li>
<li>限速</li>
<li>限行</li>
</ul>
<h3 id="warning">1.0.2.  Warning</h3>
<ul>
<li>减速</li>
</ul>
<h1 id="驾驶流程">2.  驾驶流程</h1>
<h3 id="准备">2.0.1.  准备</h3>
<ul>
<li>安全带</li>
<li>夜晚开灯</li>
<li>确认周围环境</li>
</ul>
<h3 id="驾驶">2.0.2.  驾驶</h3>
<ul>
<li>集中注意力, 眼看前方</li>
<li>确认交通标识是否可以行驶</li>
</ul>
<h3 id="转向变道">2.0.3.  转向/变道</h3>
<ul>
<li>确认交通标识是否可以转向</li>
<li>确认后方情况是否可以转向</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>life/top/strategy/workflow-manage</title>
    <url>/posts/uncategorized/65c9125c/</url>
    <content><![CDATA[<p>基于<code>思考快与慢</code>中所述, 人的大脑是有类似于系统1 (快思考) 和系统2 (慢思考) , 2个系统组成<br>
系统1工作主要负责接受信息与直觉性判断; 系统2工作主要依据系统1提供的信息后流程式处理.<br>
如果系统2中没有处理问题的流程, 则要么无法处理问题, 要么直接采纳系统1给出的直觉给出的答案, 要么需要更长时间开组织一个可行的办法.<br>
如果流程过于复杂, 系统也有可能放弃处理, 这也可能与当时的身体状态有关.</p>
<p>那么将生活的各种事务都先整理成流程, 有助于加快处理这些事务的速度</p>
]]></content>
  </entry>
  <entry>
    <title>life/创业/电商/site</title>
    <url>/posts/uncategorized/d43a8a17/</url>
    <content><![CDATA[<h1 id="电商">1.  电商</h1>
<h2 id="开放平台">1.1.  开放平台</h2>
<p><img src="https://union.jd.com/index" alt="京东联盟"></p>
<p><img src="https://open.taobao.com/" alt="淘宝开放品台"><br>
<img src="https://open.alimama.com/" alt="淘宝联盟开放平台"><br>
- <img src="https://open.taobao.com/api.htm" alt="淘宝·开放平台|API文档"><br>
<img src="https://open.alipay.com/platform/home.htm" alt="支付宝开放平台"></p>
<p><img src="https://open.weixin.qq.com/" alt="微信开放平台"><br>
<img src="https://mp.weixin.qq.com" alt="微信公众平台"><br>
<img src="https://kf.qq.com/faq/120911VrYVrA150918fMZ77R.html" alt="微信公众平台|服务号"><br>
<img src="https://kf.qq.com/faq/120911VrYVrA15091832Qzqq.html" alt="微信公众平台|订阅号"><br>
<img src="https://mp.weixin.qq.com/cgi-bin/wx" alt="微信公众平台|小程序"></p>
<p><img src="https://open.douyin.com/platform" alt="抖音开放平台"><br>
<img src="https://open.mp.toutiao.com/" alt="头条号开放平台"></p>
<p><img src="https://open.weibo.com/" alt="微博开放平台"></p>
<p><img src="https://open.you.163.com/" alt="网易严选开放平台"><br>
<img src="http://openapi.mogujie.com/" alt="蘑菇街开放平台"></p>
<p><img src="http://dianshang.baidu.com/" alt="百度电商开放平台"></p>
<h2 id="跨境电商">1.2.  跨境电商</h2>
<p><img src="https://www.szcbea.org/" alt="深圳市跨境电子商务协会"><br>
亚马逊<br>
Aliexpress 速卖通<br>
ebay<br>
wish<br>
Lazada<br>
Shoppe</p>
<h2 id="供货商">1.3.  供货商</h2>
<p>Aliexpress 速卖通<br>
banggood<br>
chinabrands</p>
<h1 id="物流">2.  物流</h1>
<p><img src="https://opendj.jd.com/" alt="京东到家开放平台"><br>
<img src="https://newopen.imdada.cn/#/?_k=1ttreo" alt="达达开放平台"><br>
<img src="https://open.ele.me/" alt="蜂鸟开放平台"></p>
<h1 id="地图">3.  地图</h1>
<p><img src="http://www.beidou-lbs.com/comServOpenPlatform.html" alt="北斗开放平台"></p>
<h1 id="信息">4.  信息</h1>
<p><img src="https://www.zhihu.com/question/26070928?sort=created" alt="个人如何做跨境电商"></p>
]]></content>
  </entry>
  <entry>
    <title>base64</title>
    <url>/posts/uncategorized/cf923276/</url>
    <content><![CDATA[<p>根据RFC822规定, BASE64Encoder编码每76个字符, 还需要加上一个回车换行<br>
部分Base64编码的java库还按照这个标准实行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;qwertyuiopasdfghjklzxcvbnm1234567890qwertyuiopasdfghjklzxcvbnm&#39; | base64 </span><br><span class="line"></span><br><span class="line">echo &#39;qwertyuiopasdfghjklzxcvbnm1234567890qwertyuiopasdfghjklzxcvbnm&#39; | base64 | sed &#39;:t;N;s&#x2F;\n&#x2F;&#x2F;;b t&#39;</span><br><span class="line"></span><br><span class="line">echo &#39;cXdlcnR5dWlvcGFzZGZnaGprbHp4Y3Zibm0xMjM0NTY3ODkwcXdlcnR5dWlvcGFzZGZnaGprbHp4Y3Zibm0K&#39; | base64 -d</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>array</title>
    <url>/posts/uncategorized/a10ceeb7/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明数组</span></span><br><span class="line">array=(<span class="string">"val1"</span> <span class="string">"val2"</span> <span class="string">"val3"</span>)</span><br><span class="line"><span class="comment"># 声明键值对</span></span><br><span class="line"><span class="built_in">declare</span> -A map=([key1]=<span class="string">"val1"</span> [key2]=<span class="string">"val2"</span> [key3]=<span class="string">"val3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取数组所有键, 近似于 $&#123;!map[*]&#125;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!map[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;map[$key]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取数组所有值, 近似于 $&#123;array[*]&#125;</span></span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> <span class="variable">$&#123;!array[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$ele</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取数组的长度, 等价于 $&#123;#array[*]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line">array=($(awk -vRS=<span class="string">' '</span> <span class="string">'!a[$1]++'</span> &lt;&lt;&lt; <span class="variable">$&#123;array[@]&#125;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组拼接</span></span><br><span class="line">array=(<span class="variable">$array1</span> <span class="variable">$array2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串分割成数组</span></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">OLD_IFS=<span class="string">"<span class="variable">$IFS</span>"</span> </span><br><span class="line">IFS=<span class="string">","</span> </span><br><span class="line">arr=(<span class="variable">$a</span>) </span><br><span class="line">IFS=<span class="string">"<span class="variable">$OLD_IFS</span>"</span> </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$s</span>"</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">str=<span class="string">"192.168.31.65"</span></span><br><span class="line">array=(<span class="variable">$&#123;str//\./ &#125;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;!array[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>=&gt;<span class="variable">$&#123;array[i]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="comment"># 删除某个元素</span></span><br><span class="line"><span class="built_in">unset</span> array[0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除整个数组</span></span><br><span class="line"><span class="built_in">unset</span> array</span><br></pre></td></tr></table></figure>
<h1 id="resource">1.  Resource</h1>
<p><a href="https://www.cnblogs.com/sco1234/p/8906527.html" target="_blank" rel="noopener">https://www.cnblogs.com/sco1234/p/8906527.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>axel</title>
    <url>/posts/tool/a4b2c403/</url>
    <content><![CDATA[<p>命令行下载工具</p>
<h1 id="option">1.  option</h1>
<ul>
<li>-a 替换进度条</li>
<li>-n 连接数</li>
<li>–header key:value, -H key:value 请求头</li>
<li>-T x 超时时间</li>
</ul>
<h1 id="举例">2.  举例</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axel -a -n 100 --header &quot;Cookie: oraclelicense&#x3D;accept-securebackup-cookie&quot; http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;9.0.4+11&#x2F;c2514751926b4512b076cc82f959763f&#x2F;jdk-9.0.4_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>awk</title>
    <url>/posts/uncategorized/c4a2fe4/</url>
    <content><![CDATA[<h1 id="多个变量复制">1.  多个变量复制</h1>
<ol>
<li>方式 1</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意这2个 `&lt;` 中间有空格, 而且后面的 `&lt;` 紧挨着 `(`</span></span><br><span class="line"><span class="built_in">read</span> year month day &lt; &lt;(<span class="built_in">echo</span> <span class="string">'2018-07-11'</span> | awk -F- <span class="string">'&#123;print $1,$2,$3&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"year: <span class="variable">$year</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"month: <span class="variable">$month</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"day: <span class="variable">$day</span>"</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>方式 2</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"2018-07-11"</span> | awk -F- <span class="string">'&#123;print $1,$2,$3&#125;'</span> | <span class="keyword">while</span> <span class="built_in">read</span> year month day</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"year: <span class="variable">$year</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"month: <span class="variable">$month</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"day: <span class="variable">$day</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h1 id="打印最后一个参数">2.  打印最后一个参数</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $(NF)&#125;'</span> <span class="variable">$file</span></span><br></pre></td></tr></table></figure>
<h1 id="打印奇偶数行">3.  打印奇/偶数行</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'NR%2 == 0'</span> <span class="variable">$file</span></span><br><span class="line">awk <span class="string">'NR%2 == 1'</span> <span class="variable">$file</span></span><br></pre></td></tr></table></figure>
<h1 id="匹配打印">4.  匹配打印</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配第二列形如 `my.*` 的行, 并打印第一列</span></span><br><span class="line">docker ps | awk <span class="string">'($2 ~ /my.*/)&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>linux/cat</title>
    <url>/posts/uncategorized/4370f898/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &lt;&lt; EOF 不支持缩进, 必须顶格些</span><br><span class="line"># &lt;&lt;- EOF 可以支持缩进, 缩进随 cat 开始</span><br><span class="line">cat &gt; $file_name &lt;&lt;- EOF</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>column</title>
    <url>/posts/uncategorized/7d53877e/</url>
    <content><![CDATA[<p>用于字段对齐<br>
不太好的地方就是必须等前面的命令执行完成后才输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmstat 1 5 | column -t</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>complete</title>
    <url>/posts/uncategorized/4267d023/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>curl</title>
    <url>/posts/tool/3e01b4d/</url>
    <content><![CDATA[<h1 id="常用命令选项">1.  常用命令选项</h1>
<p>-f  连接失败时不显示http错误<br>
-s  静音模式.不输出任何东西<br>
-I  显示 Header 信息, 但是不能和 -F (上传文件) 一起使用<br>
-S  显示错误<br>
-L  当页面有跳转的时候, 输出跳转到的页面<br>
-d  POST方式传送数据<br>
-A  user-agent<br>
-H  header <a href="key:value">key:value</a><br>
-X  method<br>
-k 不效验 https 证书<br>
-c cookie.txt 将 cookie 保存到 cookie.txt<br>
-b cookie.txt 使用 cookie.txt 的内容做为 cookie<br>
-o 指定输出路径, <code>-</code> 表示输出到控制台</p>
<h1 id="获取ip">2.  获取IP</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl ipinfo.io</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;114.110.1.38&quot;,</span><br><span class="line">  &quot;hostname&quot;: &quot;No Hostname&quot;,</span><br><span class="line">  &quot;city&quot;: &quot;Beijing&quot;,</span><br><span class="line">  &quot;region&quot;: &quot;Beijing Shi&quot;,</span><br><span class="line">  &quot;country&quot;: &quot;CN&quot;,</span><br><span class="line">  &quot;loc&quot;: &quot;39.9289, 116.3883&quot;,</span><br><span class="line">  &quot;org&quot;: &quot;AS4808 CNCGROUP IP network China169 Beijing Province Network&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># curl ip.cn</span><br><span class="line">当前 IP: 114.110.1.38 来自: 北京市 广东恒敦通信技术北京分公司</span><br><span class="line"></span><br><span class="line"># curl cip.cc</span><br><span class="line">IP  : 114.110.1.38</span><br><span class="line">地址  : 中国  北京市</span><br><span class="line">数据二 : 北京市 | 广东恒敦通信技术北京分公司</span><br><span class="line">URL : http:&#x2F;&#x2F;www.cip.cc&#x2F;114.110.1.38</span><br><span class="line"></span><br><span class="line"># curl myip.ipip.net</span><br><span class="line">当前 IP: 114.110.1.38  来自于: 中国 北京 北京 联通&#x2F;电信</span><br><span class="line"></span><br><span class="line"># curl ifconfig.me</span><br><span class="line">114.110.1.38</span><br><span class="line"></span><br><span class="line"># curl http:&#x2F;&#x2F;members.3322.org&#x2F;dyndns&#x2F;getip</span><br><span class="line">114.110.1.38</span><br></pre></td></tr></table></figure>
<h1 id="样例">3.  样例</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -x socks5:&#x2F;&#x2F;127.0.0.1:1080 http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>man<br>
<a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>date</title>
    <url>/posts/uncategorized/aa9e377a/</url>
    <content><![CDATA[<h1 id="参数">1.  参数</h1>
<p>-d <timestamp> 指定时间</timestamp></p>
<h1 id="时间格式">2.  时间格式</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%a    当前locale 的星期名缩写(例如:  日, 代表星期日)</span><br><span class="line">%A    当前locale 的星期名全称 (如: 星期日)</span><br><span class="line">%b    当前locale 的月名缩写 (如: 一, 代表一月)</span><br><span class="line">%B    当前locale 的月名全称 (如: 一月)</span><br><span class="line">%c    当前locale 的日期和时间 (如: 2005年3月3日 星期四 23:05:25)</span><br><span class="line">%C    世纪; 比如 %Y, 通常为省略当前年份的后两位数字(例如: 20)</span><br><span class="line">%d    按月计的日期(例如: 01)</span><br><span class="line">%D    按月计的日期; 等于%m&#x2F;%d&#x2F;%y</span><br><span class="line">%e    按月计的日期, 添加空格, 等于%_d</span><br><span class="line">%F    完整日期格式, 等价于 %Y-%m-%d</span><br><span class="line">%g    ISO-8601 格式年份的最后两位 (参见%G)</span><br><span class="line">%G    ISO-8601 格式年份 (参见%V), 一般只和 %V 结合使用</span><br><span class="line">%h    等于%b</span><br><span class="line">%H    小时(00-23)</span><br><span class="line">%I    小时(00-12)</span><br><span class="line">%c    按年计的日期(001-366)</span><br><span class="line">%k    时(0-23)</span><br><span class="line">%l    时(1-12)</span><br><span class="line">%m    月份(01-12)</span><br><span class="line">%M    分(00-59)</span><br><span class="line">%n    换行</span><br><span class="line">%N    纳秒(000000000-999999999)</span><br><span class="line">%p    当前locale 下的&quot;上午&quot;或者&quot;下午&quot;, 未知时输出为空</span><br><span class="line">%P    与%p 类似, 但是输出小写字母</span><br><span class="line">%r    当前locale 下的 12 小时时钟时间 (如: 11:11:04 下午)</span><br><span class="line">%R    24 小时时间的时和分, 等价于 %H:%M</span><br><span class="line">%s    自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数</span><br><span class="line">%S    秒(00-60)</span><br><span class="line">%t    输出制表符 Tab</span><br><span class="line">%T    时间, 等于%H:%M:%S</span><br><span class="line">%u    星期, 1 代表星期一</span><br><span class="line">%U    一年中的第几周, 以周日为每星期第一天(00-53)</span><br><span class="line">%V    ISO-8601 格式规范下的一年中第几周, 以周一为每星期第一天(01-53)</span><br><span class="line">%w    一星期中的第几日(0-6), 0 代表周一</span><br><span class="line">%W    一年中的第几周, 以周一为每星期第一天(00-53)</span><br><span class="line">%x    当前locale 下的日期描述 (如: 12&#x2F;31&#x2F;99)</span><br><span class="line">%X    当前locale 下的时间描述 (如: 23:13:48)</span><br><span class="line">%y    年份最后两位数位 (00-99)</span><br><span class="line">%Y    年份</span><br><span class="line">%z +hhmm              数字时区(例如, -0400)</span><br><span class="line">%:z +hh:mm            数字时区(例如, -04:00)</span><br><span class="line">%::z +hh:mm:ss        数字时区(例如, -04:00:00)</span><br><span class="line">%:::z                 数字时区带有必要的精度 (例如, -04, +05:30)</span><br><span class="line">%Z                    按字母表排序的时区缩写 (例如, EDT)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#96;date &#39;+%Y-%m-%d %H:%M:%S&#39;&#96;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>du</title>
    <url>/posts/uncategorized/602739ef/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看目录下最大文件</span></span><br><span class="line"><span class="comment"># sort -r 倒序</span></span><br><span class="line"><span class="comment"># head -1 只显示第一个</span></span><br><span class="line">sudo du -s * | sort -nr | head -1</span><br><span class="line"></span><br><span class="line">du -h --max-depth=1 | grep G | sort -n</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>echo</title>
    <url>/posts/uncategorized/17043032/</url>
    <content><![CDATA[<p>#改变字体颜色</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \e[1;m 高亮加粗</span></span><br><span class="line"><span class="comment"># \e[2;m 透明</span></span><br><span class="line"><span class="comment"># \e[3;m 反色</span></span><br><span class="line"><span class="comment"># \e[4;m 下划线 </span></span><br><span class="line"><span class="comment"># \e[5;m 闪烁</span></span><br><span class="line"><span class="comment"># \e[0;30m 黑色</span></span><br><span class="line"><span class="comment"># \e[0;31m 红色</span></span><br><span class="line"><span class="comment"># \e[0;32m 绿色</span></span><br><span class="line"><span class="comment"># \e[0;33m 棕色</span></span><br><span class="line"><span class="comment"># \e[0;34m 蓝色</span></span><br><span class="line"><span class="comment"># \e[0;35m 粉红色</span></span><br><span class="line"><span class="comment"># \e[0;36m 青色</span></span><br><span class="line"><span class="comment"># \e[0;37m 浅灰色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;31m This is red text \e[0m"</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>exec</title>
    <url>/posts/uncategorized/bb6f4ec5/</url>
    <content><![CDATA[<p>exec [-cl] [-a name] [command [arguments]]</p>
<p>exec 命令被执行时, 将替换当前 shell 进程, 且 exec 命令之后的命令将不再执行.<br>
例外: 当 exec 命令对文件描述符操作的时候, 就不会替换 shell, 而是操作完成后还会继续执行后面的命令. 如 <code>exec 3&lt;&amp;0</code>, 表示将操作符3也指向标准输入</p>
<p>类似的:<br>
<code>source</code> 和 <code>.</code> 命令执行时, 将不启用新的 shell, 设定的局部变量在执行完成后仍然有效<br>
<code>bash</code> 和 <code>sh</code> 命令执行时, 将另起一个子 shell, 并继承父 shell 的环境变量, 子 shell 的变量不影响父 shell 中的.</p>
<p>-c 使得命令 command 在一个空环境中执行<br>
-l 将在传递给 command 的第 0 个参数前面加上一个连字符 (dash,`-’)<br>
-a 会将 name 作为第 0 个参数传递给要执行的命令</p>
]]></content>
  </entry>
  <entry>
    <title>grep</title>
    <url>/posts/uncategorized/984f4246/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>shell</title>
    <url>/posts/uncategorized/c9ae6404/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找 *.java 文件 | 文件中带有 xxx | 以 : 为分隔符, 取第一列 | 去重 | 用 atom 打开</span><br><span class="line">find . -name &#39;*.java&#39; | xargs grep &#39;xxx &#39; | awk -F: &#39;&#123;print $1&#125;&#39; | sort -u | xargs atom</span><br><span class="line"></span><br><span class="line"># 查找 *.java 或 *.md 文件</span><br><span class="line">find . -name &#39;*.java&#39; -o -name &#39;*.md&#39;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>iproute2</title>
    <url>/posts/tool/c422a6c4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>less</title>
    <url>/posts/uncategorized/d3b694df/</url>
    <content><![CDATA[<p>less 与 more 类似, 但使用 less 可以随意浏览文件, 而 more 仅能向前移动, 却不能向后移动, 而且 less 在查看之前不会加载整个文件.</p>
<h1 id="命令参数">1.  命令参数:</h1>
<blockquote>
<p>-b &lt;缓冲区大小&gt; 设置缓冲区的大小<br>
-e  当文件显示结束后, 自动离开<br>
-f  强迫打开特殊文件, 例如外围设备代号, 目录和二进制文件<br>
-g  只标志最后搜索的关键词<br>
-i  忽略搜索时的大小写<br>
-m  显示类似more命令的百分比<br>
-N  显示每行的行号<br>
-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>
-Q  不使用警告音<br>
-s  显示连续空行为一行<br>
-S  行过长时间将超出部分舍弃<br>
-x &lt;数字&gt; 将 <em>tab</em> 键显示为规定的数字空格</p>
</blockquote>
<blockquote>
<p>/字符串 向下搜索 <em>字符串</em> 的功能<br>
?字符串 向上搜索 <em>字符串</em> 的功能</p>
</blockquote>
<blockquote>
<p>n 重复前一个搜索(与 / 或 ? 有关)<br>
N 反向重复前一个搜索(与 / 或 ? 有关)<br>
b  向后翻一页<br>
d  向后翻半页<br>
h  显示帮助界面<br>
Q  退出less 命令<br>
u  向前滚动半页<br>
y  向前滚动一行<br>
空格键 滚动一行<br>
回车键 滚动一页<br>
[pagedown] 向下翻动一页<br>
[pageup]   向上翻动一页</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ls</title>
    <url>/posts/tool/419d16d2/</url>
    <content><![CDATA[<p>-A 显示包括隐藏文件, 但不显示 “.” 和 “…”<br>
-c 按文件修改时间排序<br>
-L 如果文件是符号链接, 则显示指向的温蒂<br>
-p 在目录后面添加 “/”<br>
-r 按字母逆序或最早优先的顺序显示<br>
-R 递归显示子目录下的文件<br>
-t 按修改时间而不是字母排序</p>
<p>ls -alt # 按修改时间排序<br>
ls --sort=time -la # 等价于&gt; ls -alt<br>
ls -alc # 按创建时间排序<br>
ls -alu # 按访问时间排序</p>
<h1 id="以上均可使用-r实现逆序排序">1.  以上均可使用-r实现逆序排序</h1>
<p>ls -alrt # 按修改时间排序<br>
ls --sort=time -lra # 等价于&gt; ls -alrt<br>
ls -alrc # 按创建时间排序</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>operator</title>
    <url>/posts/uncategorized/d7a6a781/</url>
    <content><![CDATA[<h1 id="关系运算符">1.  关系运算符</h1>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>检测两个数是否相等, 相等返回 true.</td>
<td>[ $a -eq $b ] 返回 false.</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否不相等, 不相等返回 true.</td>
<td>[ $a -ne $b ] 返回 true.</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的, 如果是, 则返回 true.</td>
<td>[ $a -gt $b ] 返回 false.</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的, 如果是, 则返回 true.</td>
<td>[ $a -lt $b ] 返回 true.</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大于等于右边的, 如果是, 则返回 true.</td>
<td>[ $a -ge $b ] 返回 false.</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的, 如果是, 则返回 true.</td>
<td>[ $a -le $b ] 返回 true.</td>
</tr>
</tbody>
</table>
<h1 id="布尔运算符">2.  布尔运算符</h1>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非运算, 表达式为 true 则返回 false, 否则返回 true.</td>
<td>[ ! false ] 返回 true.</td>
</tr>
<tr>
<td>-o</td>
<td>或运算, 有一个表达式为 true 则返回 true.</td>
<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true.</td>
</tr>
<tr>
<td>-a</td>
<td>与运算, 两个表达式都为 true 才返回 true.</td>
<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false.</td>
</tr>
</tbody>
</table>
<h1 id="逻辑运算符">3.  逻辑运算符</h1>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑的 AND</td>
<td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>
</tr>
<tr>
<td>||</td>
<td>逻辑的 OR</td>
<td>[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td>
</tr>
</tbody>
</table>
<h1 id="字符串运算符">4.  字符串运算符</h1>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>检测两个字符串是否相等, 相等返回 true.</td>
<td>[ $a = $b ] 返回 false.</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等, 不相等返回 true.</td>
<td>[ $a != $b ] 返回 true.</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0, 为0返回 true.</td>
<td>[ -z $a ] 返回 false.</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否不为 0, 不为 0 返回 true.</td>
<td>[ -n “$a” ] 返回 true.</td>
</tr>
<tr>
<td>$</td>
<td>检测字符串是否为空, 不为空返回 true.</td>
<td>[ $a ] 返回 true.</td>
</tr>
</tbody>
</table>
<h1 id="文件测试运算符">5.  文件测试运算符</h1>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b file</td>
<td>检测文件是否是块设备文件, 如果是, 则返回 true.</td>
<td>[ -b $file ] 返回 false.</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件, 如果是, 则返回 true.</td>
<td>[ -c $file ] 返回 false.</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录, 如果是, 则返回 true.</td>
<td>[ -d $file ] 返回 false.</td>
</tr>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件 (既不是目录, 也不是设备文件) , 如果是, 则返回 true.</td>
<td>[ -f $file ] 返回 true.</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位, 如果是, 则返回 true.</td>
<td>[ -g $file ] 返回 false.</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit), 如果是, 则返回 true.</td>
<td>[ -k $file ] 返回 false.</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是有名管道, 如果是, 则返回 true.</td>
<td>[ -p $file ] 返回 false.</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位, 如果是, 则返回 true.</td>
<td>[ -u $file ] 返回 false.</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读, 如果是, 则返回 true.</td>
<td>[ -r $file ] 返回 true.</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写, 如果是, 则返回 true.</td>
<td>[ -w $file ] 返回 true.</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行, 如果是, 则返回 true.</td>
<td>[ -x $file ] 返回 true.</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否为空 (文件大小是否大于0) , 不为空返回 true.</td>
<td>[ -s $file ] 返回 true.</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件 (包括目录) 是否存在, 如果是, 则返回 true.</td>
<td>[ -e $file ] 返回 true.</td>
</tr>
</tbody>
</table>
<h1 id="resource">6.  Resource</h1>
<ul>
<li><a href="https://www.runoob.com/linux/linux-shell-basic-operators.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-basic-operators.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>man</title>
    <url>/posts/uncategorized/69a297d8/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<ul>
<li>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>netstat</title>
    <url>/posts/tool/1372101d/</url>
    <content><![CDATA[<p>netstat -anop<br>
netstat -tulnp</p>
<p>统计在本厂的一台前端机上高峰时间TCP连接的情况, 统计命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;Jessy&#x2F;p&#x2F;3535612.html</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>passwd</title>
    <url>/posts/uncategorized/1b2e6194/</url>
    <content><![CDATA[<h1 id="初始化-root-用户密码">1.  初始化 root 用户密码</h1>
<figure class="highlight plain"><figcaption><span>lang=shell</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure>
<h1 id="用-root-账户修改其他用户密码">2.  用 root 账户修改其他用户密码</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改 raven 用户的密码</span><br><span class="line">passwd raven</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>param</title>
    <url>/posts/uncategorized/4592b2fd/</url>
    <content><![CDATA[<h1 id="特殊参数">1.  特殊参数</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扩展为位置参数, 从 1 开始.</span></span><br><span class="line">如果扩展发生在双引号中, 它扩展为一个词, 值是各个参数, 以特殊变量 IFS 的第一个字符分隔.</span><br><span class="line">也 就是说, <span class="string">"$*"</span> 等价于 <span class="string">"<span class="variable">$1c</span><span class="variable">$2c</span>..."</span>, 这里 c 是变量 IFS 的第一个字符.</span><br><span class="line">如果没有设置 IFS,  那么参数将用空格分隔.</span><br><span class="line"> IFS</span><br><span class="line">$*</span><br><span class="line"><span class="comment"># 扩展为位置参数, 从  1  开始.</span></span><br><span class="line">如果扩展发生在双引号中, 每个参数都将扩展为一个词.</span><br><span class="line">也就是说,   <span class="string">"<span class="variable">$@</span>"</span> 等价于 <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span> ... 如果位置参数不存在, <span class="string">"<span class="variable">$@</span>"</span> 和 <span class="variable">$@</span> 扩展为空 (即, 它们被删除了).</span><br><span class="line"></span><br><span class="line"><span class="variable">$@</span></span><br><span class="line"><span class="comment"># 扩展为位置参数的个数, 以十进制表示.</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$#</span></span><br><span class="line"><span class="comment"># 扩展为最近执行的前台管道的状态.</span></span><br><span class="line"></span><br><span class="line">$?</span><br><span class="line"><span class="comment"># 扩展为当前选项标志.</span></span><br><span class="line">标志是在启动时或以内建命令 <span class="built_in">set</span> 指定的, 或者是 shell 自身设置的 (例如选项 -i ).</span><br><span class="line"></span><br><span class="line">$-</span><br><span class="line"><span class="comment"># 扩展为 shell 的进程 ID.</span></span><br><span class="line">在一个 () 子 shell 中, 它扩展为当前 shell 的 进程 ID 而不是子 shell 的.</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line"><span class="comment"># 扩展为最近一次执行的后台 (异步) 命令的进程号.</span></span><br><span class="line"></span><br><span class="line">$!</span><br><span class="line"><span class="comment"># 扩展为 shell 或者 shell 脚本的名称.</span></span><br><span class="line">这个变量是在 shell 初始化时设置的.</span><br><span class="line">如果 bash 是执行脚本文件时启动的,  <span class="variable">$0</span>  将设置 为那个文件的名称.</span><br><span class="line">如果  bash  启动时的参数包含  -c,   那么 <span class="variable">$0</span> 被设置为启动命令行被执行后的第一个参数, 如果有的话.</span><br><span class="line">否则, 它被设置为用来启动 bash 的文件名, 就是参数 0.</span><br><span class="line"></span><br><span class="line"><span class="variable">$0</span></span><br><span class="line"><span class="comment"># shell 启动时, 设置为  shell  或参数中被执行的  shell  脚本的绝对路径名.</span></span><br><span class="line">  然后, 在扩展时扩展为上一个命令的最后一个参数.</span><br><span class="line">它也被设置为被执行的每个命令的文件全名并且  被设置到这个命令执行的环境当中.</span><br><span class="line">当检查邮件时, 这个参数保存着正在检查的邮件文件的名称.</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span></span><br></pre></td></tr></table></figure>
<h1 id="参数表达式">2.  参数表达式</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use Default Values(使用默认值).</span></span><br><span class="line">如果 parameter 未定义或值为空, 将替换为 word 的扩展.</span><br><span class="line">否则, 将替换为 parameter 的值.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:-word&#125;</span>  </span><br><span class="line"><span class="comment"># Assign  Default Values(赋默认值).</span></span><br><span class="line">如果 parameter 未定义或值为空,  word 的扩展将赋予 parameter.  parameter 的值将被替 换.</span><br><span class="line">位置参数和特殊参数不能用这种方式赋值.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:=word&#125;</span></span><br><span class="line"><span class="comment"># Display Error if Null or Unset(显示错误, 如果未定义或值为空).</span></span><br><span class="line">如果 parameter 未定义或值为空, word  (或一条信息, 如果 word 不存在) 的扩展将写入到标准错误; shell 如果不是交互的, 则将退出.</span><br><span class="line">否则,  parameter 的值将被替换.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:?word&#125;</span></span><br><span class="line"><span class="comment"># Use Alternate Value(使用可选值).</span></span><br><span class="line">如果 parameter 未定义或非空, 不会进行替换; 否则将替换为 word 扩展后的值.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:+word&#125;</span></span><br><span class="line"><span class="comment"># Substring  Expansion(子字符串扩展).</span></span><br><span class="line">  扩展为parameter  的最多  length  个字符, 从  offset 指定的字符开始.</span><br><span class="line">如果忽略了 length, 扩展为  parameter  的子字符串,   从  offset  指定的字符串开始.</span><br><span class="line">length  和  offset  是算术表达式  (参见下面的 ARITHMETIC  EVALUATION  算术求值 段落).</span><br><span class="line"> length 必须是一个大于等于 0 的数值.</span><br><span class="line">如果 offset 求值结果小于 0,  值将当作从 parameter 的值的末尾算起的偏移量.</span><br><span class="line">如果 parameter 是 @, 结果是 length 个位置参数, 从 offset 开始.</span><br><span class="line"> 如果 parameter  是 一个数组名, 以  @  或  *  索引, 结果是数组的 length 个成员, 从 <span class="variable">$&#123;parameter[offset]&#125;</span> 开始.</span><br><span class="line"> 子字符串的下标是从 0 开始 的, 除非使用位置参数时, 下标从 1 开始.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:offset&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter:offset:length&#125;</span></span><br><span class="line"><span class="comment"># 扩展为名称以 prefix 开始的变量名, 以特殊变量 IFS 的第一个字符分隔.</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;!prefix*&#125;</span></span><br><span class="line"><span class="comment"># word 被扩展为一个模式, 就像路径扩展中一样.</span></span><br><span class="line">如果这个模式匹配 parameter 扩展后的值的尾部, 那么扩展的结果是将 parameter 扩展后的值中, 最短的匹配 (``%<span class="string">''</span> 的情况) 或者最长的匹配 (``%%<span class="string">''</span>的情况) 删除的结果.</span><br><span class="line">如果 parameter 是 @ 或者是 *, 则模 式删除操作将依次施用于每个位置参数, 最后扩展为结果的列表.</span><br><span class="line">如果 parameter 是一个数组变量, 下标是 @ 或者是 *, 模式删除 将依次施用于数组中的每个成员, 最后扩展为结果的列表.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span></span><br><span class="line"><span class="comment"># patterm  被扩展为一个模式, 就像路径扩展中一样.</span></span><br><span class="line">parameter 被扩展, 其值中最长的匹配 pattern 的内容被替换为 string.</span><br><span class="line"> 在 第一种形式中, 只有第一个匹配被替换.</span><br><span class="line">第二种形式使得 pattern 中所有匹配都被替换为 string.</span><br><span class="line"> 如果 pattern 以 <span class="comment">#  开始, 它 必须匹配  parameter  扩展后  值的首部.</span></span><br><span class="line">如果 pattern 以 % 开始, 它必须匹配 parameter 扩展后值的尾部.</span><br><span class="line">如果 string 是空 值, pattern 的匹配都将被删除,  pattern 之后的 / 将被忽略.</span><br><span class="line">如果 parameter 是 @ 或者是 *, 则替换操作将依次施用于每个位 置参数, 最后扩展为结果的列表.</span><br><span class="line">如果  parameter  是一个数组变量, 下标是 @ 或者是 *, 模式删除将依次施用于数组中的每个成 员, 最后扩展为结果的列表.</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter/pattern/string&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter//pattern/string&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="事件指示器">3.  事件指示器</h1>
<p>事件指示器 (event designator) 是一个对历史列表中某个命令行条目的引用.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开始一个命令替换, 除非后面跟随的是 blank, newline, = 或是 (.</span></span><br><span class="line">!   </span><br><span class="line"><span class="comment"># 引用命令行 n.   </span></span><br><span class="line">!n     </span><br><span class="line"><span class="comment"># 引用当前命令行减去 n.</span></span><br><span class="line">!-n   </span><br><span class="line"><span class="comment"># 引用上一条命令.</span></span><br><span class="line">这是 `!-1<span class="string">' 的同义词.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">!!   </span></span><br><span class="line"><span class="string"># 引用最近的以 string 开始的命令.</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">!string</span></span><br><span class="line"><span class="string"># 引用最近的包含 string 的命令.</span></span><br><span class="line"><span class="string">尾部的 ? 可以被忽略, 如果 string 之后紧接着一个新行符.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">!?string[?]</span></span><br><span class="line"><span class="string"># 快速替换.</span></span><br><span class="line"><span class="string">重复上一条命令, 将  string1  替换为  string2.   与  ``!!:s/string1/string2/'</span><span class="string">'  等价 </span></span><br><span class="line"><span class="string">^string1^string2^</span></span><br></pre></td></tr></table></figure>
<h1 id="词指示器">4.  词指示器</h1>
<dl>
<dt>词指示器  (word designator) 用于从 event 中选择期望的词.</dt>
<dd>分隔 event 规则与 word 指示器.<br>
它可以忽略, 如果词指示器以 ^, $, *, -, 或 % 开始.<br>
词被从行首开始编号, 第一个词被表示为 0.<br>
插入当前行中的词以单个空格分隔.</dd>
</dl>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第 0 个词.</span></span><br><span class="line">对 shell 来将, 这是命令名.</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"><span class="comment"># 第 n 个词.</span></span><br><span class="line"></span><br><span class="line">n</span><br><span class="line"><span class="comment"># 第一个参数.</span></span><br><span class="line">也就是, 第 1 个词.</span><br><span class="line"></span><br><span class="line">^</span><br><span class="line"><span class="comment"># 最后的参数.</span></span><br><span class="line"></span><br><span class="line">$</span><br><span class="line"><span class="comment"># 最近一次搜索 `?string?' 匹配的词.</span></span><br><span class="line"></span><br><span class="line">%</span><br><span class="line">x</span><br><span class="line"><span class="comment"># 所有词, 除了第 0 个.</span></span><br><span class="line">这是 `1-$<span class="string">' 的同义词.</span></span><br><span class="line"><span class="string">如果 event 中只有一个词, 使用 * 也不是错误; 这种情况下将返回空字符串.</span></span><br><span class="line"><span class="string">-y    一组词; `-y'</span> 是 `0-y<span class="string">' 的简写.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string"># x-$ 的简写.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">x*</span></span><br><span class="line"><span class="string"># -$ 的简写, 就像 x* 一样, 但是忽略最后一个词.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">x-</span></span><br></pre></td></tr></table></figure>
<p>如果给出了一个 word 指示器, 没有给出 event 规则, 前一个命令将用作 event.</p>
<h1 id="常见问题">5.  常见问题</h1>
<h2 id="脚本中使用-exit-1-会退出会话">5.1.  脚本中使用 exit 1 会退出会话</h2>
<p>检查 .bashrc 等地方是否设置了 <code>set -e</code></p>
<h1 id="resources">6.  Resources</h1>
<ul>
<li><a href="http://linux.51yip.com/" target="_blank" rel="noopener">http://linux.51yip.com/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>profile</title>
    <url>/posts/uncategorized/8157aa0f/</url>
    <content><![CDATA[<ul>
<li>
<p><code>/etc/profile</code><br>
启动时生效, 只生效一次, 对所有用户生效, 修改需重启; 会自动加载 <code>/etc/profile.d/</code> 下的配置</p>
</li>
<li>
<p><code>/etc/bash.bashrc</code><br>
每次打开新会话窗口生效, 对所有用户生效, 修改后不需要重启, 打开新会话窗口就可生效</p>
</li>
<li>
<p><code>.profile</code><br>
用户登录时生效</p>
</li>
<li>
<p><code>.bashrc</code><br>
每次打开新会话窗口生效, 只对当前用户生效</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ps</title>
    <url>/posts/uncategorized/a7ea4b8f/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rsz: 进程占用的物理内存</span></span><br><span class="line"><span class="comment"># vsz: 进程占用的虚拟内存</span></span><br><span class="line">ps -e -o <span class="string">'pid,comm,args,pcpu,rsz,vsz,stime,user,uid'</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>sed</title>
    <url>/posts/uncategorized/fba335b8/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换全部匹配内容</span></span><br><span class="line">sed -i <span class="string">'s/aaa/bbb/g'</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看匹配的行</span></span><br><span class="line">sed -n <span class="string">'/aaa/p'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某时间段到现在的系统日志</span></span><br><span class="line">sed -n <span class="string">'/May 20 17/,$p'</span> /var/<span class="built_in">log</span>/messages | less</span><br><span class="line"></span><br><span class="line">sed -n <span class="string">'/2019-12-02 09:27/,/2019-12-02 09:30/p'</span>  logfile</span><br><span class="line">sed -n <span class="string">'/2010-11-17 09:[0-9][0-9]:[0-9][0-9]/,/2010-11-17 16:[0-9][0-9]:[0-9][0-9]/p'</span>  logfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并连续空行</span></span><br><span class="line">sed -e <span class="string">'/^$/&#123;N;/\n$/D&#125;;'</span> <span class="variable">$file</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line"><span class="comment"># 修改类似于 `ZSH_THEME="robbyrussel"` 改成 `ZSH_THEME="gnzh"`</span></span><br><span class="line"><span class="comment"># 这个方式必须要指定被替换部分的前后, 如下列, 前半部分: \(^ZSH_THEME=\"\) 后半部分: \(\"\$\)</span></span><br><span class="line">sed -i <span class="string">"s@\(^ZSH_THEME=\"\).*\(\"\$\)@\1gnzh\2@g"</span> ~/.zshrc_bak</span><br><span class="line"><span class="comment"># 修改类似于 `    &lt;version&gt;1.0-snapshot&lt;/version&gt;`</span></span><br><span class="line">sed -i <span class="string">"s@\(.*&lt;<span class="variable">$property_name</span>&gt;\).*\(&lt;/<span class="variable">$property_name</span>&gt;.*\)@\1<span class="variable">$sdk_version</span>\2@g"</span> <span class="variable">$pom_file</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"s/^-Xms.*/-Xms<span class="variable">$xms_size</span>/g"</span> <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">sed -i <span class="string">"s/^-Xmx.*/-Xms<span class="variable">$xmx_size</span>/g"</span> <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">sed -i <span class="string">"s@\(^-XX:ReservedCodeCacheSize=\).*\($\)@\1<span class="variable">$cache_code_size</span>\2@g"</span> <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定行及之后的后2行</span></span><br><span class="line">sed -i <span class="string">'/export NVM_DIR/,+2d'</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h1 id="resource">1.  Resource</h1>
<p><a href="https://blog.csdn.net/ha_weii/article/details/80754284" target="_blank" rel="noopener">https://blog.csdn.net/ha_weii/article/details/80754284</a></p>
]]></content>
  </entry>
  <entry>
    <title>set</title>
    <url>/posts/uncategorized/e61425dc/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 　标示已修改的变量, 以供输出至环境变量. </span><br><span class="line"></span><br><span class="line">-b 　使被中止的后台程序立刻回报执行状态. </span><br><span class="line"></span><br><span class="line">-C 　转向所产生的文件无法覆盖已存在的文件. </span><br><span class="line"></span><br><span class="line">-d 　Shell预设会用杂凑表记忆使用过的指令, 以加速指令的执行. 使用-d参数可取消. </span><br><span class="line"></span><br><span class="line">-e 　若指令传回值不等于0, 则立即退出shell. </span><br><span class="line"></span><br><span class="line">-f　 　取消使用通配符. </span><br><span class="line"></span><br><span class="line">-h 　自动记录函数的所在位置. </span><br><span class="line"></span><br><span class="line">-H Shell 　可利用&quot;!&quot;加&lt;指令编号&gt;的方式来执行history中记录的指令. </span><br><span class="line"></span><br><span class="line">-k 　指令所给的参数都会被视为此指令的环境变量. </span><br><span class="line"></span><br><span class="line">-l 　记录for循环的变量名称. </span><br><span class="line"></span><br><span class="line">-m 　使用监视模式. </span><br><span class="line"></span><br><span class="line">-n 　只读取指令, 而不实际执行. </span><br><span class="line"></span><br><span class="line">-p 　启动优先顺序模式. </span><br><span class="line"></span><br><span class="line">-P 　启动-P参数后, 执行指令时, 会以实际的文件或目录来取代符号连接. </span><br><span class="line"></span><br><span class="line">-t 　执行完随后的指令, 即退出shell. </span><br><span class="line"></span><br><span class="line">-u 　当执行时使用到未定义过的变量, 则显示错误信息. </span><br><span class="line"></span><br><span class="line">-v 　显示shell所读取的输入值. </span><br><span class="line"></span><br><span class="line">-x 　执行指令后, 会先显示该指令及所下的参数. </span><br><span class="line"></span><br><span class="line">+&lt;参数&gt; 　取消某个set曾启动的参数.</span><br></pre></td></tr></table></figure>
<h1 id="debug-模式">1.  debug 模式</h1>
<ol>
<li>在脚本中有选择的开启/关闭 debug 模式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启 debug 模式, 将后续命令输出到终端</span></span><br><span class="line"><span class="comment"># 对整个脚本都有效</span></span><br><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...执行各种命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 debug 模式</span></span><br><span class="line">&#123; <span class="built_in">set</span> +x; &#125; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>debug 模式执行脚本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -x <span class="variable">$shell_script</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>regex</title>
    <url>/posts/uncategorized/4204f8ca/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://man.linuxde.net/docs/shell_regex.html" target="_blank" rel="noopener">https://man.linuxde.net/docs/shell_regex.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>sudo</title>
    <url>/posts/uncategorized/d668a8bf/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 非交互式输入密码</span><br><span class="line">echo $password | sudo -S apt update -y</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>sort</title>
    <url>/posts/uncategorized/5124f222/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排序去重</span></span><br><span class="line">sort -u</span><br><span class="line">uniq</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>shift</title>
    <url>/posts/uncategorized/a50b3b45/</url>
    <content><![CDATA[<p><code>shift n</code>表示把第 <code>n+1</code> 个参数移到第 1 个参数, 即命令结束后 <code>$1</code> 的值等于 <code>$n+1</code>的值, 而命令执行前的前面 n 个参数不能被再次引用, 后面 <code>$#-n+1</code> 到 <code>$#</code> 的参数被 unset, 参数的个数减少为 <code>$#-n</code> 个.</p>
<p>n 的值不能为负数, 若 n 为 0 或大于参数个数 <code>$#</code> 则参数不变, 若 n 没有给定则默认为 1. 当 n 小于 0 或者大于参数个数 $# 时shift 命令的返回值大于 0, 否则返回 0.</p>
]]></content>
  </entry>
  <entry>
    <title>string</title>
    <url>/posts/shell/9ebeb2a9/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># isEmpty</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">is_empty</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    [ -n <span class="variable">$1</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># length</span></span><br><span class="line"><span class="comment"># 获取字符串长度</span></span><br><span class="line"><span class="comment"># 例如 length "123456789"</span></span><br><span class="line"><span class="function"><span class="title">length</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># expr length $string </span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;#string&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串是否相等</span></span><br><span class="line"><span class="function"><span class="title">equals</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> compare_with=<span class="variable">$2</span></span><br><span class="line">    [[ <span class="variable">$string</span> == <span class="variable">$compare_with</span> ]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串是否包含匹配表达式,</span></span><br><span class="line"><span class="function"><span class="title">contains</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    [[ <span class="variable">$string</span> =~ <span class="variable">$pattern</span> ]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串截取</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># substr "123456789"</span></span><br><span class="line"><span class="comment"># substr "123456789" 2</span></span><br><span class="line"><span class="comment"># substr "123456789" 2 -3</span></span><br><span class="line"><span class="comment"># substr "123456789" 2 4</span></span><br><span class="line"><span class="function"><span class="title">substr</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 截取的起始位置</span></span><br><span class="line">    <span class="comment"># 默认从 0 开始</span></span><br><span class="line">    <span class="built_in">local</span> position=<span class="variable">$&#123;2:-0&#125;</span></span><br><span class="line">    <span class="comment"># 截取的长度</span></span><br><span class="line">    <span class="comment"># 默认是最大长度</span></span><br><span class="line">    <span class="comment"># 为负数时, 即自后向前截取, `$length + $position` 不能超过字符串的总长度</span></span><br><span class="line">    <span class="comment"># 为正数时, 长度可以超过字符串的总长度</span></span><br><span class="line">    <span class="comment"># $position 与 $length 为闭开区间</span></span><br><span class="line">    <span class="built_in">local</span> length=<span class="variable">$&#123;3:-$&#123;#string&#125;</span>&#125;</span><br><span class="line">    <span class="comment"># expr substr $str $position $length</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string:position:length&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串删除从开头开始最短匹配的表达式</span></span><br><span class="line"><span class="comment"># 例如 cut_from_begin_by_min_matches "abcdefgabcdefg" "a*d"</span></span><br><span class="line"><span class="function"><span class="title">cut_from_begin_by_min_matches</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string#$pattern&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串删除从开头开始最长匹配的表达式</span></span><br><span class="line"><span class="comment"># 例如 cut_from_begin_by_max_matches "abcdefgabcdefg" "a*d"</span></span><br><span class="line"><span class="function"><span class="title">cut_from_begin_by_max_matches</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string##$pattern&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串删除从结尾开始最短匹配的表达式</span></span><br><span class="line"><span class="comment"># 例如 cut_from_end_by_min_matches "abcdefgabcdefg" "d*g"</span></span><br><span class="line"><span class="function"><span class="title">cut_from_end_by_min_matches</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string%$pattern&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串删除从结尾开始最长匹配的表达式</span></span><br><span class="line"><span class="comment"># 例如 cut_from_end_by_max_matches "abcdefgabcdefg" "d*g"</span></span><br><span class="line"><span class="function"><span class="title">cut_from_end_by_max_matches</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string%%$pattern&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最长匹配表达式, 替换第一个符合条件的子字符串</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># replace_first "abcdefgabcdefg" "b*d"</span></span><br><span class="line"><span class="comment"># replace_first "abcdefgabcdefg" "b*d" "zzz"</span></span><br><span class="line"><span class="function"><span class="title">replace_first</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="comment"># 需要替换成的字符串</span></span><br><span class="line">    <span class="built_in">local</span> replace_to=<span class="variable">$3</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string/$pattern/$replace_to&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最长匹配表达式, 替换第一个符合条件的子字符串</span></span><br><span class="line"><span class="comment"># 例如 replace_from_begin "abcdefgabcdefg" "a*d"</span></span><br><span class="line"><span class="function"><span class="title">replace_from_begin</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="comment"># 需要替换成的字符串</span></span><br><span class="line">    <span class="built_in">local</span> replace_to=<span class="variable">$3</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string/#$pattern/$replace_to&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最长匹配表达式, 替换第一个符合条件的子字符串</span></span><br><span class="line"><span class="comment"># 例如 replace_from_end "abcdefgabcdefg" "c*g"</span></span><br><span class="line"><span class="function"><span class="title">replace_from_end</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="comment"># 需要替换成的字符串</span></span><br><span class="line">    <span class="built_in">local</span> replace_to=<span class="variable">$3</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string/%$pattern/$replace_to&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最长匹配表达式, 替换所有符合条件的子字符串</span></span><br><span class="line"><span class="comment"># 例如 replace_all "abcdefgabcdefg" "a"</span></span><br><span class="line"><span class="function"><span class="title">replace_all</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 需要匹配的子字符串</span></span><br><span class="line">    <span class="built_in">local</span> pattern=<span class="variable">$2</span></span><br><span class="line">    <span class="comment"># 需要替换成的字符串</span></span><br><span class="line">    <span class="built_in">local</span> replace_to=<span class="variable">$3</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;string//$pattern/$replace_to&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符所在位置</span></span><br><span class="line"><span class="function"><span class="title">indexOf</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># $substring 只能是单个字符, 如果是包含多个字符的字符串, 也只匹配第一个字符</span></span><br><span class="line">    <span class="built_in">local</span> substring=<span class="variable">$2</span></span><br><span class="line">    expr index <span class="variable">$string</span> <span class="variable">$substring</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">is_number</span></span>()&#123;</span><br><span class="line">    [[ <span class="variable">$param</span> != +([0-9]) ]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">to_number</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> string=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> | awk <span class="string">'&#123;print int($0)&#125;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>user-management</title>
    <url>/posts/uncategorized/a67b891/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加docker组</span></span><br><span class="line"><span class="comment"># sudo groupadd docker</span></span><br><span class="line"><span class="comment"># sudo gpasswd -a $&#123;USER&#125; docker</span></span><br><span class="line"><span class="comment"># sudo systemctl restart docker</span></span><br><span class="line"><span class="comment"># 切换当前会话到新 group 或者重启 X 会话</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户所在的所有用户组</span></span><br><span class="line">groups</span><br><span class="line"><span class="comment"># 将用户添加到 docker 用户组</span></span><br><span class="line">sudo usermod -a -G docker &lt;username&gt;</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>top</title>
    <url>/posts/uncategorized/1ed91fca/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PID: 进程的ID</span></span><br><span class="line"><span class="comment"># USER: 进程所有者</span></span><br><span class="line"><span class="comment"># PR: 进程的优先级别, 越小越优先被执行</span></span><br><span class="line"><span class="comment"># NInice: 值</span></span><br><span class="line"><span class="comment"># VIRT: 进程占用的虚拟内存</span></span><br><span class="line"><span class="comment"># RES: 进程占用的物理内存</span></span><br><span class="line"><span class="comment"># SHR: 进程使用的共享内存</span></span><br><span class="line"><span class="comment"># S: 进程的状态.</span></span><br><span class="line">S表示休眠, R表示正在运行, Z表示僵死状态, N表示该进程优先值为负数</span><br><span class="line"><span class="comment"># %CPU: 进程占用CPU的使用率</span></span><br><span class="line"><span class="comment"># %MEM: 进程使用的物理内存和总内存的百分比</span></span><br><span class="line"><span class="comment"># TIME+: 该进程启动后占用的总的CPU时间, 即占用CPU使用时间的累加值.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># COMMAND: 进程启动命令名称</span></span><br><span class="line">top -p [pid]</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>wget</title>
    <url>/posts/tool/d5d6b05b/</url>
    <content><![CDATA[<h3 id="常用命令选项">0.0.1.  常用命令选项</h3>
<p>-c  断点续传<br>
-t  重试次数, 0 表示不限次数<br>
-T  等待超时时间<br>
-o  保存到目录</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vmstat</title>
    <url>/posts/uncategorized/ce7dcbe/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>xargs</title>
    <url>/posts/uncategorized/38dfadad/</url>
    <content><![CDATA[<h1 id="参数">1.  参数</h1>
<ul>
<li>
<p>-n<br>
多行输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每行输出3个元素</span><br><span class="line">cat test.txt | xargs -n 3</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>-d<br>
选项可以自定义一个定界符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"nameXnameXnameXname"</span> | xargs -d X</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>I<br>
指定一个替换字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat arg.txt | xargs -I &#123;&#125; ./sk.sh -p &#123;&#125; -l</span><br><span class="line">find . -name <span class="string">'teskechers_crmep-benefit*'</span> | xargs -I &#123;&#125; grep <span class="string">'T4LP75KKL44T5'</span> &#123;&#125;/run/latests/stdout</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker-cmd</title>
    <url>/posts/uncategorized/36e7a239/</url>
    <content><![CDATA[<h1 id="browsh">1.  browsh</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --rm browsh/browsh</span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://www.brow.sh" target="_blank" rel="noopener">https://www.brow.sh</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker-fabric</title>
    <url>/posts/uncategorized/f103d1d7/</url>
    <content><![CDATA[<p>参考 <code>fabric-sample/test-network/docker/docker-compose-test-net.yaml</code>, 其中服务的配置对应 <code>fabric/sampleconfig</code> 下的 yml 配置文件.</p>
<ul>
<li>core.yaml: peer 的配置</li>
<li>orderer.yaml: order 的配置</li>
</ul>
<p>例如 <code>CORE_VM_ENDPOINT</code> 配置对应 <code>fabric/sampleconfig/core.yaml</code> 文件中的 vm.endpoint. 将 <code>.</code> 替换成 <code>_</code>, 不区分大小写.</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li>
<a href="https://hub.docker.com/[object%20Object]fabric-peer" title target>fabric-peer</a>
</li>
<li>
<a href="https://github.com/hyperledger/fabric/blob/master/images/peer/Dockerfile" title target>fabric-peer Dockerfile</a>
</li>
<li>
<a href="https://github.com/hyperledger/fabric/blob/master/images/orderer/Dockerfile" title target>fabric-orderer Dockerfile</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker-compose-kafka</title>
    <url>/posts/uncategorized/c080ddda/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先需要修改 /home/raven/Workspace/Doc/blog/source/code/docker/docker-compose-kafka.yml 文件中的 KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class="line"><span class="comment"># 如果想启动多个 Kafka 实例, KAFKA_ADVERTISED_HOST_NAME 不用设置成 localhost 或 127.0.0.1, 最好还是配置为 docker 虚拟网卡的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动集群</span></span><br><span class="line">docker-compose -f /home/raven/Workspace/Doc/blog/<span class="built_in">source</span>/code/docker/docker-compose-kafka.yml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">docker-compose -f /home/raven/Workspace/Doc/blog/<span class="built_in">source</span>/code/docker/docker-compose-kafka.yml ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展 Kakfa 集群</span></span><br><span class="line">docker-compose -f /home/raven/Workspace/Doc/blog/<span class="built_in">source</span>/code/docker/docker-compose-kafka.yml scale kafka=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止集群</span></span><br><span class="line">docker-compose -f /home/raven/Workspace/Doc/blog/<span class="built_in">source</span>/code/docker/docker-compose-kafka.yml stop</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>xclip</title>
    <url>/posts/uncategorized/83e49768/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将内容保存到剪切板</span></span><br><span class="line"><span class="comment"># 如果没有 `-selection c` 则无法输出到终端之外</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello'</span> | xclip -selection c</span><br><span class="line"></span><br><span class="line">xclip -selction c <span class="variable">$file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将剪切板中内容输出到终端</span></span><br><span class="line">xclip -o</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-debian</title>
    <url>/posts/uncategorized/ef506c38/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name debian debian bash</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-rabbitmq</title>
    <url>/posts/uncategorized/85d1b80/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 --hostname raven-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -e  RABBITMQ_DEFAULT_VHOST=<span class="built_in">local</span>-vhost rabbitmq:management</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-mongo</title>
    <url>/posts/uncategorized/989a19f3/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name mongo -p 27017:27017 mongo</span><br><span class="line">docker run -d --name mongo -e MONGO_INITDB_ROOT_USERNAME&#x3D;admin -e MONGO_INITDB_ROOT_PASSWORD&#x3D;password mongo</span><br><span class="line">docker run -d --name mongo -p 27017:27017 -v &#x2F;home&#x2F;raven&#x2F;Workspace&#x2F;Doc&#x2F;blog&#x2F;source&#x2F;code&#x2F;docker:&#x2F;etc&#x2F;mongo --config &#x2F;etc&#x2F;mongo&#x2F;mongod.conf</span><br><span class="line">docker run -d --name mongo -p 27017:27017 mongo --bind_ip 0.0.0.0</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-redis</title>
    <url>/posts/uncategorized/92820dd3/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-zookeeper</title>
    <url>/posts/uncategorized/7e369b09/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name single-zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 --restart always zookeeper</span><br><span class="line"></span><br><span class="line">docker-compose -f /home/raven/Workspace/Doc/blog/<span class="built_in">source</span>/code/docker/docker-compose-kafka.yml up -d</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker-mysql</title>
    <url>/posts/uncategorized/7c87c5fe/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql-5</span></span><br><span class="line">docker run -d --name mysql-5 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e TZ=Asia/Shanghai mysql:5 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql-latest 8</span></span><br><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e TZ=Asia/Shanghai mysql:8 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line">docker run -d --name mysql-8 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -v <span class="variable">$HOME</span>/data/mysql:/var/lib/mysql mysql:8 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>life/top/target/plan/life_road_map</title>
    <url>/posts/uncategorized/5f66df19/</url>
    <content><![CDATA[<ol>
<li>养成良好习惯</li>
</ol>
<p>1.1 养成阅读习惯</p>
<p>问题: 无法集中精神阅读, 特别是哪些比较难理解的技术文档, 一看就想睡.<br>
分析: 脱离的学生时代, 很久没有阅读学习, 分析复杂问题时, 脑子跟不上了.<br>
方案: 从容易理解的书籍开始阅读, 先养成阅读学习的习惯, 让脑子活络起来.</p>
<ul>
<li>阅读 思考快与慢</li>
</ul>
<p>1.2 养成作息习惯</p>
<p>问题: 身体容易疲劳, 没有劲, 稍微运动下就累的不行; 记忆力下降.<br>
分析: 缺少运动; 长期熬夜<br>
方案: 早睡, 早起晨练.</p>
<p>1.3 养成交流习惯</p>
<p>问题: 与人交流感觉没什么话可说的;<br>
分析: 生活阅历不够丰富<br>
方案: 要多和人接触交谈.</p>
<p>问题: 容易被小事激怒<br>
分析: 心理上的问题, 太以自我为中心<br>
方案: 了解心理学, 了解自己, 学习沟通.</p>
<ol start="2">
<li>Java 高级工程师</li>
</ol>
<p>n. 财务自由</p>
]]></content>
  </entry>
  <entry>
    <title>life/top/target/vocation/职场社交关系</title>
    <url>/posts/uncategorized/3b22404/</url>
    <content><![CDATA[<h1 id="职场社交关系管理">1.  职场社交关系管理</h1>
<p>职场社交关系是一个以我个人为中心, 依据相关程度排列的体系结构.</p>
<ul>
<li>甲方公司</li>
<li>所属公司
<ul>
<li>上层部门</li>
<li>所属部门
<ul>
<li>上司</li>
<li>同级</li>
<li>我</li>
<li>下属</li>
<li>其他</li>
</ul>
</li>
<li>同级部门</li>
<li>下属部门</li>
<li>其他部门</li>
</ul>
</li>
<li>合作公司</li>
<li>下属公司</li>
<li>其他公司</li>
</ul>
<p>如上述关系所述, 根据 团队 – 部门 – 公司 的维度看与我们的相关人员的分布.</p>
<h2 id="他人的认可">1.1.  他人的认可</h2>
<p>对于职场而言, 最重要的是获得他人的认可.<br>
工作不顺心的大多数原因来自于外部.</p>
<h3 id="底线">1.1.1.  底线</h3>
<p>职场底线是哪怕得不到别人的认可, 也必须坚持的事情.<br>
通过底线保证自己没有致命的缺陷, 被人乘虚一击即溃.</p>
<ul>
<li>去任何情绪化
<ul>
<li>只对事, 不对人</li>
</ul>
</li>
<li>未成事实的事情不乱说, 不乱处理</li>
<li>损害同事声誉的事情不做<br>
不说他人负面的闲话, 尤其道听途说来的<br>
对于他人的真实看法, 不要轻易流露出来</li>
<li>损害团队及以上利益的事情不做, 并看及时制止</li>
</ul>
<h3 id="打造自己的关系网">1.1.2.  打造自己的关系网</h3>
<ul>
<li>提高自己的影响力
<ul>
<li>职位能力</li>
<li>帮助他人</li>
<li>手腕</li>
</ul>
</li>
<li>在顺手而为的时候, 尽量和所有人保持尊重和礼貌</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>后端开发技能</title>
    <url>/posts/index/b2b8e5eb/</url>
    <content><![CDATA[<ul>
<li>数据结构
<ul>
<li>数组, 队列和链表的实现原理</li>
<li>快速/归并排序算法</li>
</ul>
</li>
<li>sql
<ul>
<li>复杂统计 sql</li>
<li>优化</li>
</ul>
</li>
<li>java
<ul>
<li>反射<br>
减少代码和避免性能问题</li>
<li>集合<br>
知道并发集合类的场景和实现</li>
<li>io<br>
了解实现并能正确使用</li>
<li>泛型<br>
知道java 对泛型的实现</li>
<li>oop<br>
熟悉常用设计模式</li>
<li>JDBC<br>
特点数据库驱动实现</li>
<li>NIO/AIO<br>
了解基于NIO的框架实现</li>
<li>多线程<br>
多线程的实现机制和原理</li>
<li>JVM<br>
JVM调优和性能优化</li>
<li>字节码<br>
能修改字节码, 具备应用字节码的能力</li>
<li>序列化/反序列化<br>
了解序列化的原理和实现方法</li>
<li>servlet<br>
能够自行实现Servlet规范</li>
<li>连接池<br>
自己实现连接池</li>
</ul>
</li>
<li>常用框架
<ul>
<li>spring</li>
<li>mybabis</li>
<li>quartz</li>
<li>guava</li>
</ul>
</li>
<li>中间件
<ul>
<li>消息</li>
<li>缓存</li>
<li>NoSQL</li>
<li>Web Server</li>
<li>Web Proxy</li>
<li>LB</li>
</ul>
</li>
<li>专长
<ul>
<li>SOA</li>
<li>分布式</li>
<li>高并发</li>
<li>高可用</li>
</ul>
</li>
<li>工具
<ul>
<li>docker</li>
<li>git</li>
<li>maven/gradle</li>
</ul>
</li>
<li>分析/设计
<ul>
<li>DB 设计</li>
<li>UML 模块设计</li>
</ul>
</li>
<li>开源项目</li>
<li>Linux</li>
<li>性能调优</li>
<li>其他语言</li>
<li>团队表现</li>
<li>安全知识</li>
</ul>
<p>专业软件开发者必备:</p>
<p>设计模式. 必须能描述 GOF 书中的全部 24 种模式, 同事还要有 POSA 书中的多数模式的实战经验.<br>
设计原则. 必须了解 SOLID 原则, 而且要审核理解组件设计原则.<br>
方法. 必须理解 XP, Scrum, 精益, 看板, 瀑布, 结构化分析及结构化设计.<br>
实践. 必须掌握测试驱动开发, 面向对象设计, 结构化编程, 持续集成和结对编程.<br>
工件. 必须了解如何使用 UML 图, DFD 图, 结构图, Petri 网络图, 转台迁移图表, 流程图和决策表.</p>
<p>技能/技巧 专业知识<br>
需求管理<br>
预估<br>
PERT<br>
决策<br>
时间管理<br>
番茄工作法<br>
注意力<br>
协作<br>
质量<br>
测试</p>
]]></content>
      <categories>
        <category>index</category>
      </categories>
  </entry>
  <entry>
    <title>develop-optimization</title>
    <url>/posts/uncategorized/f614c73d/</url>
    <content><![CDATA[<h1 id="1-开发时重新设计内部结构-不停改动优化改动">1.  1. 开发时重新设计内部结构, 不停改动优化改动</h1>
<ol>
<li>经验不足, 无法在设计阶段考虑全面</li>
<li>没有做全局设计, 没有多层次的思考问题</li>
</ol>
<p>PDCA 能够不断改进, 但是会耗时, 所以在初期做计划(设计)的时候尽量全面.</p>
<h1 id="2-逐点测试">2.  2. 逐点测试</h1>
<p>逐点测试意思是一个bug点测一次, 逐步跑通整个业务过程.</p>
<p>但是每次从修改到服务启动, 再测试, 整个过程就变的缓慢了.</p>
<p>本地热部署调试, 减少发布服务消耗的时间.</p>
]]></content>
  </entry>
  <entry>
    <title>it-index</title>
    <url>/posts/index/4fc21635/</url>
    <content><![CDATA[<h3 id="roadmap">0.0.1.  Roadmap</h3>
<ul>
<li>职业规划</li>
<li>编程理念</li>
<li>技术学习</li>
<li>技术熟悉度</li>
<li>如何学习技术</li>
</ul>
<h3 id="职业规划">0.0.2.  职业规划</h3>
<p>个人理解的一个产品的实现依赖关系大致是这样的:</p>
<p>应用产品 -&gt; 功能模块 -&gt; 业务设计 -&gt; 系统设计 -&gt; 框架 -&gt; 架构设计 -&gt; 数据结构/算法/编程语言</p>
<p>往下沉, 走技术路线, 研究技术底层原理, 从而创造技术.少说话, 多做事的走这边.<br>
往上浮, 走业务路线, 管理路线, 协调软件开发.情商高, 会聊天的走这边.</p>
<h3 id="编程理念">0.0.3.  编程理念</h3>
<p>可用 —&gt; 健壮 —&gt; 可靠 —&gt; 宽容 —&gt; 精益求精</p>
<ul>
<li>可用<br>
满足需求, 可以运行</li>
<li>健壮<br>
最基本的兼容性处理, 边界处理, 异常处理, 用户输入效验等.很多时候需求方没有明确高数你的这些逻辑怎么处理, 但并不意味着你不需要处理.</li>
<li>可靠<br>
在任何情况下都, 能返回一个可靠的结果.尤其是异常情况下, 也能定位到异常出现的原因.</li>
<li>宽容<br>
对需求宽容, 对用户宽容, 对调用者宽容, 对维护者宽容.</li>
<li>精益求精<br>
<strong>可维护, 可复用, 可扩展.</strong></li>
</ul>
<h3 id="技术熟悉度分级">0.0.4.  技术熟悉度分级</h3>
<p>对于多项技术的熟练应用程度需要在工作中实际使用提现的.<br>
对于某一项技术的熟练度可分:</p>
<ul>
<li>了解<br>
知道该技术, 能解决什么问题.</li>
<li>掌握<br>
应用过该技术, 清楚该技术的框架流程.<br>
外包, 中小企业入职面试基本能应付.</li>
<li>熟悉<br>
熟悉该技术原理, 背景, 大致技术细节.能比较同类型的技术.<br>
能坦然面对大型企业的技术面试.</li>
<li>究极<br>
熟悉所以技术细节, 几乎能实现该技术.</li>
</ul>
<h3 id="如何学习技术">0.0.5.  如何学习技术</h3>
<p>多维学习技术, 从学会使用到了解底层技术实现, 从一个技术点比较同类技术点.<br>
至少要达到熟悉级别.</p>
<ul>
<li>背景<br>
在那种情况下, 解决什么问题.</li>
<li>模型<br>
用什么方法解决的问题.</li>
<li>特点<br>
优缺点.</li>
<li>比较<br>
同类型技术比较, 或者有没有更好的解决方案.</li>
</ul>
<h3 id="熟悉度的意义">0.0.6.  熟悉度的意义</h3>
<ul>
<li>如何推导出一无所知的东西?</li>
<li>有没有更好的解决办法</li>
</ul>
<h3 id="细致">0.0.7.  细致</h3>
<p>分析枚举的粒度越细越好<br>
做事, 说话要讲究, 做到极致</p>
<h3 id="做事效率">0.0.8.  做事效率</h3>
<p>从容:慢, 仔细<br>
果断:快, 效率</p>
]]></content>
      <categories>
        <category>index</category>
      </categories>
  </entry>
  <entry>
    <title>资料库</title>
    <url>/posts/uncategorized/50862efb/</url>
    <content><![CDATA[<h1 id="网站">1.  网站</h1>
<h2 id="社区">1.1.  社区</h2>
<ul>
<li>
<a href="https://www.csdn.net/" title target>CSDN</a>
</li>
<li>
<a href="https://www.oschina.net/" title target>开源中国社区</a>
</li>
<li>
<a href="https://yq.aliyun.com/" title target>阿里云溪社区</a>
</li>
<li>
<a href="https://cloud.tencent.com/developer/devdocs" title target>腾讯云社区</a>
</li>
<li>
<a href="https://bbs.huaweicloud.com/" title target>华为云社区</a>
</li>
<li>
<a href="http://www.iteye.com/" title target>ITEYE</a>
</li>
<li>
<a href="http://www.importnew.com/" title target>ImportNew</a>
</li>
<li>
<a href="http://www.infoq.com/cn/" title target>InfoQ</a>
</li>
<li>
<a href="http://www.2cto.com/" title target>红黑联盟</a>
</li>
<li>
<a href="http://www.nowamagic.net/" title target>现代魔法</a>
</li>
<li>
<a href="http://www.ituring.com.cn/" title target>图灵社区</a>
</li>
<li>
<a href="https://www.cnblogs.com/" title target>博客园</a>
</li>
<li>
<a href="https://blog.csdn.net/" title target>CSDN 博客</a>
</li>
<li>
<a href="https://wiki.jikexueyuan.com/" title target>极客学院</a>
</li>
<li>
<a href="https://segmentfault.com/" title target>Segment Fault</a>
</li>
<li>
<a href="https://juejin.im/" title target>掘金</a>
</li>
<li>
<a href="https://www.jianshu.com/" title target>简书</a>
</li>
<li>
<a href="https://www.ibm.com/developerworks/cn/java" title target>IBM DeveloperWorks</a>
</li>
<li>
<a href="https://www.anquanke.com/" title target>安全客</a>
</li>
<li>
<a href="https://hllvm-group.iteye.com/" title target>高级语言虚拟机社区</a>
</li>
</ul>
<h2 id="教程">1.2.  教程</h2>
<ul>
<li>
<a href="http://www.runoob.com/" title target>菜鸟教程</a>
</li>
<li>
<a href="http://edu.51cto.com/" title target>51CTO学院</a>
</li>
<li>
<a href="https://edu.csdn.net/" title target>CSDN学院</a>
</li>
<li>
<a href="http://www.imooc.com/" title target>慕课网</a>
</li>
<li>
<a href="http://www.w3school.com.cn/" title target>W3School</a>
</li>
<li>
<a href="https://devdocs.io/" title target>各类语言 API 文档</a>
</li>
<li>
<a href="http://daxue.qq.com/" title target>腾讯大学</a>
</li>
<li>
<a href="https://bit.baidu.com/" title target>百度技术学院</a>
</li>
<li>
<a href="http://edu.baidu.com/" title target>百度营销大学</a>
</li>
<li>
<a href="http://www.liaoxuefeng.com/" title target>廖雪峰博客</a>
</li>
<li>
<a href="http://www.ruanyifeng.com/blog/" title target>阮一峰博客</a>
</li>
<li>
<a href="http://ifeve.com/" title target>ifeve</a>
</li>
<li>
<a href="http://www.cnblogs.com/skywang12345/archive/2013/06/14/index.html" title target>skywang的博客</a>
</li>
<li>
<a href="http://mp.weixin.qq.com/s/CIPosICgva9haqstMDIHag" title target>架构师之路17年精选80篇</a>
</li>
<li>
<a href="https://github.com/DONGChuan/Java-Interview-Question" title target>Java 面试笔记</a>
</li>
</ul>
<h2 id="代码">1.3.  代码</h2>
<ul>
<li>
<a href="https://github.com/" title target>github</a>
</li>
<li>
<a href="https://gitee.com/" title target>码云</a>
</li>
<li>
<a href="https://coding.net/" title target>Coding</a>
</li>
<li>
<a href="http://hg.openjdk.java.net/" title target>Java 源码</a>
</li>
</ul>
<h2 id="问答">1.4.  问答</h2>
<ul>
<li>
<a href="https://stackoverflow.com/" title target>Stack Overflow</a>
</li>
<li>
<a href="https://www.zhihu.com/" title target>知乎</a>
</li>
</ul>
<h2 id="资讯">1.5.  资讯</h2>
<ul>
<li>
<a href="https://news.ycombinator.com/" title target>Hacker News</a>
</li>
<li>
<a href="https://www.reddit.com/" title target>Reddit</a>
</li>
<li>
<a href="https://www.techradar.com/" title target>techradar</a>
</li>
</ul>
<h2 id="项目">1.6.  项目</h2>
<ul>
<li>
<a href="https://github-trending.com/" title target>Github 优质项目推荐 TOP 100</a>
</li>
<li>
<a href="https://github.com/sindresorhus/awesome#readme" title target>Awesome 系列</a>
</li>
<li>
<a href="https://kotlin.link/" title target>Kotlin 官方 Awesome</a>
</li>
<li>
<a href="https://github.com/KotlinBy/awesome-kotlin" title target>Awesome Kotlin</a>
</li>
<li>
<a href="https://java.libhunt.com/" title target>Awesome Java</a>
</li>
<li>
<a href="https://www.21doc.net/java/awesomejava" title target>必学Java类库&#x2F;常用Java类库大全</a>
</li>
<li>
<a href="https://github.com/christian-bromann/awesome-selenium" title target>Awesome Selenium</a>
</li>
<li>
<a href="https://github.com/marmelab/awesome-rest" title target>Awesome Rest</a>
</li>
<li>
<a href="https://github.com/ksoichiro/awesome-gradle" title target>Awesome Gradle Plugin</a>
</li>
<li>
<a href="https://github.com/mfornos/awesome-microservices" title target>Awesome Microservices</a>
</li>
<li>
<a href="https://spring.io/" title target>Spring</a>
</li>
<li>
<a href="https://github.com/sindresorhus/awesome" title target>Awesome</a>
</li>
<li>
<a href="https://github.com/akullpp/awesome-java" title target>Awesome Java</a>
</li>
<li>
<a href="https://github.com/jobbole/awesome-java-cn" title target>Awesome Java 中文版</a>
</li>
<li>
<a href="https://github.com/justjavac/free-programming-books-zh_CN" title target>免费的编程中文书籍索引</a>
</li>
<li>
<a href="https://github.com/iluwatar/java-design-patterns" title target>Java 设计模式</a>
</li>
<li>
<a href="https://github.com/kdn251/interviews" title target>IT 面试指南</a>
</li>
<li>
<a href="https://github.com/alibaba/arthas" title target>Arthas</a>
</li>
<li>
<a href="https://github.com/oldmanpushcart/greys-anatomy" title target>Greys Anatomy (Arthas 的前身)</a>
</li>
<li>
<a href="https://github.com/oldratlee/useful-scripts" title target>实用 Java 调试脚本</a>
</li>
</ul>
<h2 id="规范">1.7.  规范</h2>
<a href="https://jcp.org/en/home/index" title target>JCP</a>
<h2 id="下载">1.8.  下载</h2>
<ul>
<li>微盘</li>
<li>百度云</li>
<li>CSDN</li>
</ul>
<h2 id="api">1.9.  API</h2>
<ul>
<li>
<a href="https://www.juhe.cn/" title target>聚合数据</a>
</li>
</ul>
<h2 id="赚钱">1.10.  赚钱</h2>
<ul>
<li>
<a href="http://afp.alimama.com/" title target>芒果广告</a>
</li>
</ul>
<h2 id="出版社">1.11.  出版社</h2>
<ul>
<li>
<a href="http://www.hzbook.com/index.php/Book/lst.html" title target>华章图文</a>
</li>
</ul>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://github.com/javagossip/be-a-professional-programmer" target="_blank" rel="noopener">https://github.com/javagossip/be-a-professional-programmer</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>it-term</title>
    <url>/posts/uncategorized/aeeb4abb/</url>
    <content><![CDATA[<p>TPS 每秒事务处理数量<br>
QPS 每秒请求处理数<br>
PV 页面流量次数</p>
<p>permanent 永久的<br>
permGen  JVM堆中的永久代</p>
<p>ETL<br>
Extract, Transform, and Load<br>
提取,转换和加载</p>
<p>SIT<br>
system integration test<br>
系统集成测试</p>
<p>UAT<br>
user acceptance test<br>
验收测试环境</p>
<p>PET<br>
performance evaluation test<br>
性能模拟测测</p>
<p>QAS<br>
quality assurance system<br>
质量保证</p>
<ul>
<li>
<p>OA<br>
Office Automation<br>
办公自动化</p>
</li>
<li>
<p>CRM<br>
Customer Relationship Management<br>
客户关系管理</p>
</li>
<li>
<p>HRM<br>
Human Resource Management<br>
人力资源管理</p>
</li>
<li>
<p>SCM<br>
Supply Chain Management<br>
供应链管理</p>
</li>
<li>
<p>WorkFlow<br>
工作流</p>
</li>
<li>
<p>Meta Data<br>
元数据<br>
是一个个键值对, 表示了对象的一些属性</p>
</li>
<li>
<p>RTT<br>
Round Trip Time<br>
往返时间, 请求发起到请求返回的时间</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>performance</title>
    <url>/posts/uncategorized/82d79681/</url>
    <content><![CDATA[<p>性能问题分析:<br>
- 预<br>
服务硬件配置达不到要求<br>
服务配置不正确<br>
软件开发设计不正确<br>
软件开发没有遵守规范<br>
- 前 I/O 问题<br>
发起连接<br>
- 中 CPU 问题<br>
请求处理<br>
- 后 I/O 问题<br>
结果传输</p>
]]></content>
  </entry>
  <entry>
    <title>consensus</title>
    <url>/posts/blockchain/9bcb503e/</url>
    <content><![CDATA[<p>拜占庭容错 Byzantine Fault Tolerant</p>
<h1 id="pow">1.  POW</h1>
<pre><code>proof-of-work
通过算力决定
</code></pre>
<h1 id="solo">2.  SOLO</h1>
<pre><code>单服务控制交易顺序
不适合大规模的实际生产环境，一般用在实验室测试环境中
</code></pre>
<h1 id="kafka">3.  KAFKA</h1>
<h1 id="resource">4.  Resource</h1>
<p><a href="https://blog.csdn.net/taifei/article/details/83143267" target="_blank" rel="noopener">https://blog.csdn.net/taifei/article/details/83143267</a></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
  </entry>
  <entry>
    <title>national-encryption</title>
    <url>/posts/algorithm/84145e09/</url>
    <content><![CDATA[<h1 id="sm1">1.  SM1</h1>
<p>对称加密</p>
<p>SM1 算法是分组密码算法，分组长度为128位，密钥长度都为 128 比特，算法安全保密强度及相关软硬件实现性能与 AES 相当，算法不公开，仅以IP核的形式存在于芯片中。</p>
<h1 id="sm2">2.  SM2</h1>
<p>椭圆曲线公钥密码算法, 也就是非对称加密算法</p>
<p>SM2算法就是ECC椭圆曲线密码机制，但在签名、密钥交换方面不同于ECDSA、ECDH等国际标准，而是采取了更为安全的机制。另外，SM2推荐了一条256位的曲线作为标准曲线。</p>
<p>SM2标准包括总则，数字签名算法，密钥交换协议，公钥加密算法四个部分.</p>
<h1 id="sm3">3.  SM3</h1>
<p>杂凑算法</p>
<p>此算法适用于商用密码应用中的数字签名和验证，消息认证码的生成与验证以及随机数的生成，可满足多种密码应用的安全需求。在SM2，SM9标准中使用。</p>
<h1 id="sm4">4.  SM4</h1>
<p>对称算法</p>
<p>此算法是一个分组算法，用于无线局域网产品。该算法的分组长度为128比特，密钥长度为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构。解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p>
<h1 id="sm7">5.  SM7</h1>
<p>对称密码</p>
<p>SM7算法，是一种分组密码算法<br>
SM7适用于非接触式IC卡，应用包括身份识别类应用(门禁卡、工作证、参赛证)，票务类应用(大型赛事门票、展会门票)，支付与通卡类应用（积分消费卡、校园一卡通、企业一卡通等）。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>fabric-gossip</title>
    <url>/posts/blockchain/2dcb7616/</url>
    <content><![CDATA[<p>gossip 主要帮助节点发现，同步数据<br>
gRPC是远程调用协议，用来与区块链交互调用</p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
  </entry>
  <entry>
    <title>fabric-grpc</title>
    <url>/posts/blockchain/d23c18f1/</url>
    <content><![CDATA[<p>gossip 主要帮助节点发现，同步数据<br>
gRPC是远程调用协议，用来与区块链交互调用</p>
<p><a href="https://www.cnblogs.com/informatics/p/10417173.html" target="_blank" rel="noopener">https://www.cnblogs.com/informatics/p/10417173.html</a></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
  </entry>
  <entry>
    <title>make</title>
    <url>/posts/c/1acc766e/</url>
    <content><![CDATA[<p>编译 C/C++ 源码一般用到以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<ul>
<li>configure</li>
</ul>
<p>通常为本地命令, 用于生成 makefile 文件, <code>make</code> 及 <code>make install</code> 命令将依据该文件执行.</p>
<p>通常 ``make install<code>会将所有文件安装到</code>/usr/local/bin<code>,</code>/usr/local/lib<code>等目录. 如果需要修改安装目录, 可以在 configure 时使用</code>–prefix<code>选项来指定安装目录. 如:</code>./configure–prefix=$HOME’</p>
<ul>
<li>make<br>
编译源码</li>
<li>make check,  make test<br>
测试</li>
<li>make install<br>
将程序安装至系统中. 一般需要管理员权限</li>
<li>make clean<br>
清除编译产生的可执行文件及目标文件</li>
<li>make distclean<br>
除了清除可执行文件和目标文件外, 把configure所产生的Makefile也清除掉</li>
<li>make dist<br>
将程序和相关的档案包装成一个压缩文件以供发布。执行完在目录下会产生一个以PACKAGE-VERSION.tar.gz为名称的文件。 <a href="http://xn--PACKAGEVERSIONconfigure-xo30bke288mu7dk95k4fmznfm4smf31a.in" target="_blank" rel="noopener">PACKAGE和VERSION这两个变数是根据configure.in</a></li>
<li>make distcheck<br>
和 <code>make dist</code> 类似，但是加入检查包装后的压缩文件是否正常</li>
</ul>
<h1 id="依赖">1.  依赖</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># c++ 代码编译依赖</span></span><br><span class="line">apt install g++ build-essential</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>c</category>
      </categories>
  </entry>
  <entry>
    <title>suppress-warnings</title>
    <url>/posts/java/d8ffe79d/</url>
    <content><![CDATA[<p>@SuppressWarings 注解用于抑制编译器发出警告</p>
<p>关键词可以通过 <code>javac -X</code> 命令查看, 有</p>
<ul>
<li>常用关键字</li>
</ul>
<p>all<br>
auxiliaryclass<br>
cast<br>
classfile<br>
dep-ann<br>
deprecation<br>
divzero<br>
empty<br>
fallthrough<br>
finally<br>
none<br>
options<br>
overloads<br>
overrides<br>
path<br>
processing<br>
rawtypes<br>
serial<br>
static<br>
try<br>
unchecked<br>
varargs</p>
<ul>
<li>idea 关键字</li>
</ul>
<p>SpellCheckingInspection 拼写检查<br>
ConstantConditions 自动装箱的空指针检查</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>二八定律</title>
    <url>/posts/management/abeb982d/</url>
    <content><![CDATA[<p>世界上 80% 的财富掌握在 20% 的人手中 .<br>
生活中 80% 的结果源于 20% 的行动.</p>
<p>对人和事都要按重要程度划分, 优先处理最重要的事情, 才能收获更多的回报.</p>
<p>2-8 法则其实是 2-6-2 的分割比例, 也就是 极好-普通-极坏.</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
  </entry>
  <entry>
    <title>gossip</title>
    <url>/posts/protocol/74560674/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>protocol</category>
      </categories>
  </entry>
  <entry>
    <title>venv</title>
    <url>/posts/uncategorized/6314bbb7/</url>
    <content><![CDATA[<p>Python 标准库内置的虚拟环境管理工具，Python 3.3 加入，Python 3.5 开始作为管理虚拟环境的推荐工具，用法类似 virtualenv。如果你使用 Python 3，推荐使用 venv 来替代 virtualenv。</p>
<h1 id="使用">1.  使用</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目目录</span></span><br><span class="line">mkdir <span class="variable">$&#123;project_dir&#125;</span></span><br><span class="line"><span class="built_in">cd</span> &#123;project_dir&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">python -m venv <span class="variable">$&#123;project-venv&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">. <span class="variable">$&#123;project-venv&#125;</span>/scripts/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pip</title>
    <url>/posts/uncategorized/4f8a1090/</url>
    <content><![CDATA[<h1 id="使用">1.  使用</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">pip install --upgrade <span class="variable">$package</span></span><br><span class="line">pip install -U <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">pip uninstall <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看依赖详情</span></span><br><span class="line">pip show <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成依赖列表</span></span><br><span class="line">pip <span class="variable">$package</span> &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从依赖文件安装所有依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级 pip</span></span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>pipenv</title>
    <url>/posts/uncategorized/49f98229/</url>
    <content><![CDATA[<h1 id="pip">1.  pip</h1>
<p>全局依赖安装</p>
<h1 id="pipenv">2.  pipenv</h1>
<p>项目依赖隔离安装</p>
<h1 id="使用">3.  使用</h1>
<h2 id="pyenv-迁移到-pip">3.1.  pyenv 迁移到 pip</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 requirements.txt</span></span><br><span class="line">pipenv lock -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 requirements-dev.txt</span></span><br><span class="line">pipenv lock -r --dev</span><br></pre></td></tr></table></figure>
<h1 id="setuptools">4.  setuptools</h1>
<h1 id="distutils">5.  distutils</h1>
<h1 id="distribute">6.  distribute</h1>
<h1 id="distlib">7.  distlib</h1>
]]></content>
  </entry>
  <entry>
    <title>pyenv</title>
    <url>/posts/uncategorized/25c3632f/</url>
    <content><![CDATA[<h1 id="pyenv">1.  pyenv</h1>
<h2 id="安装">1.1.  安装</h2>
<p>自动安装: <a href="https://github.com/pyenv/pyenv-installer" title target>pyenv-installer</a> 自动安装</p>
<p>手工安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预安装</span></span><br><span class="line">sudo apt install -y gcc</span><br><span class="line">sudo apt install -y make</span><br><span class="line">sudo apt install -y zlib1g-dev</span><br><span class="line">sudo apt install -y libssl-dev</span><br><span class="line">sudo apt install -y bzip2</span><br><span class="line">sudo apt install -y openssl</span><br><span class="line">sudo apt install -y sqlite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pyenv</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 bashrc 中添加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plugins:</span></span><br><span class="line"><span class="comment">#   pyenv-doctor</span></span><br><span class="line"><span class="comment">#   pyenv-installer</span></span><br><span class="line"><span class="comment">#   pyenv-update</span></span><br><span class="line"><span class="comment">#   pyenv-virtualenv</span></span><br><span class="line"><span class="comment">#   pyenv-which-ext</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pyenv-virtualenv</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 bashrc 中添加</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure>
<p>win 无法直接安装, 使用 <a href="https://github.com/pyenv-win/pyenv-win" title target>pyenv-win</a></p>
<h1 id="常用命令">2.  常用命令</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有可安装版本</span></span><br><span class="line">pyenv install -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">pyenv install 3.8.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有本地已安装版本</span></span><br><span class="line">pyenv version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化虚拟环境</span></span><br><span class="line"><span class="comment"># pyenv virtualenv $version $env_name</span></span><br><span class="line">pyenv virtualenv 3.8.5 py385</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前文件夹的虚拟环境</span></span><br><span class="line">pyenv <span class="built_in">local</span> py385</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 python 版本</span></span><br><span class="line">python --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载虚拟环境</span></span><br><span class="line">pyenv uninstall py385</span><br></pre></td></tr></table></figure>
<h1 id="常见问题">3.  常见问题</h1>
<h2 id="下载慢">3.1.  下载慢</h2>
<p>将安装包放到 <code>$PYTHON_BUILD_CACHE_PATH</code>, 也就是 <code>$PYENV_ROOT/cache</code> 下后再执行安装命令</p>
<h1 id="venv">4.  venv</h1>
<h1 id="virtualenv">5.  virtualenv</h1>
<h1 id="virtualenvwrapper">6.  virtualenvwrapper</h1>
]]></content>
  </entry>
  <entry>
    <title>virtualenv</title>
    <url>/posts/uncategorized/9c06d95c/</url>
    <content><![CDATA[<p>推荐在 python 3.3+ 时使用 venv 代替 virtualenv, 否则只能使用 virtualenv 了.</p>
<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip --user install vitualenv</span><br></pre></td></tr></table></figure>
<h1 id="使用">2.  使用</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目目录</span></span><br><span class="line">mkdir <span class="variable">$&#123;project_dir&#125;</span></span><br><span class="line"><span class="built_in">cd</span> &#123;project_dir&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">virtualenv <span class="variable">$&#123;project-venv&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>openssl</title>
    <url>/posts/tool/773a47f1/</url>
    <content><![CDATA[<ul>
<li>通过非对称算法计算得出私钥</li>
<li>通过私钥计算得出公钥</li>
<li>通过私钥以及输出的相关信息生成 CSR</li>
<li>通过指定格式,  CSR 以及私钥生成 CRT</li>
</ul>
<h1 id="rsa密钥">1.  RSA密钥</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line"><span class="comment"># 无加密</span></span><br><span class="line"><span class="comment"># 2048位强度(为了保密性)</span></span><br><span class="line">openssl genrsa -out rsa_private.key 2048</span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> rsa_private.key -pubout -out rsa_public.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># des3 加密</span></span><br><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># aes256 加密</span></span><br><span class="line"><span class="comment"># -passout 代替 shell 进行密码输入</span></span><br><span class="line">openssl genrsa -aes256 -passout pass:111111 -out rsa_aes_private.key 2048</span><br><span class="line"></span><br><span class="line">openssl rsa -<span class="keyword">in</span> rsa_aes_private.key -passin pass:111111 -pubout -out rsa_public.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥转非加密</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> rsa_aes_private.key -passin pass:111111 -out rsa_private.key</span><br><span class="line"><span class="comment"># 私钥转加密</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> rsa_private.key -aes256 -passout pass:111111 -out rsa_aes_private.key</span><br><span class="line"><span class="comment"># 私钥PEM转DER</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> rsa_private.key -outform der-out rsa_aes_private.der</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看生成的私钥或公钥</span></span><br><span class="line">openssl rsa -text -noout -<span class="keyword">in</span> rsa_private.key</span><br></pre></td></tr></table></figure>
<h1 id="生成-csr">2.  生成 CSR</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 直接生成 私钥 和 csr</span></span><br><span class="line"><span class="comment"># -nodes 表示私钥不加密, 若不带参数将提示输入密码</span></span><br><span class="line">openssl req -nodes -newkey rsa:2048 -keyout kn007.net.key -out kn007.net.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># -key的含义是：指定ca私钥</span></span><br><span class="line"><span class="comment"># -out的含义是： server.csr 生成证书文件</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"></span><br><span class="line">openssl req -new -key server.key -passin pass:111111 -out server.csr -subj <span class="string">"/C=CN/ST=GD/L=SZ/O=vihoo/OU=dev/CN=vivo.com/emailAddress=yy@vivo.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看csr文件</span></span><br><span class="line">openssl req -text -<span class="keyword">in</span> server.csr -noout</span><br></pre></td></tr></table></figure>
<h1 id="生成证书">3.  生成证书</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 RSA 私钥和自签名证书</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># req是证书请求的子命令，-newkey rsa:2048 -keyout private_key.pem 表示生成私钥(PKCS8格式)，-nodes 表示私钥不加密，若不带参数将提示输入密码；</span></span><br><span class="line"><span class="comment"># -x509表示输出证书，-days365 为有效期，此后根据提示输入证书拥有者信息；</span></span><br><span class="line"><span class="comment"># 若执行自动输入，可使用-subj选项：</span></span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout rsa_private.key -x509 -days 365 -out cert.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 已有RSA 私钥生成自签名证书</span></span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout rsa_private.key -x509 -days 365 -out cert.crt -subj <span class="string">"/C=CN/ST=GD/L=SZ/O=vihoo/OU=dev/CN=vivo.com/emailAddress=yy@vivo.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -new 指生成证书请求，加上-x509 表示直接输出证书，-key 指定私钥文件，其余选项与上述命令相同</span></span><br><span class="line">openssl req -new -x509 -days 365 -key rsa_private.key -out cert.crt</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> client.csr -signkey client.key -out client.crt</span><br></pre></td></tr></table></figure>
<h1 id="证书文件">4.  证书文件</h1>
<p>X.509证书通常指的是IETF的PKIX证书和X.509 v3证书标准的CRL 文件，即如RFC 5280（通常称为PKIX for Public Key Infrastructure（X.509））中规定的。</p>
<h2 id="文件后缀">4.1.  文件后缀</h2>
<ul>
<li>.der</li>
</ul>
<p>DER 编码的证书</p>
<ul>
<li>.pem</li>
</ul>
<p>X.509 v3 证书.<br>
是以“ - BEGIN …”前缀的ASCII（Base64）数据.</p>
<ul>
<li>.crt</li>
</ul>
<p>证书可以被编码为二进制DER或ASCII PEM</p>
<ul>
<li>.cer</li>
</ul>
<p>.crt的替代形式（Microsoft Convention）您可以在微软系统环境下将.crt转换为.cer</p>
<ul>
<li>.key</li>
</ul>
<p>用于公钥和私钥PKCS＃8. 可以是二进制DER或ASCII PEM格式</p>
<h1 id="resource">5.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/xiangguiwang/article/details/76400805" target="_blank" rel="noopener">https://blog.csdn.net/xiangguiwang/article/details/76400805</a></li>
<li>
<a href="https://www.openssl.org/source/" title target>Openssl</a>
</li>
<li><a href="https://blog.csdn.net/gengxiaoming7/article/details/78505107" target="_blank" rel="noopener">https://blog.csdn.net/gengxiaoming7/article/details/78505107</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
  </entry>
  <entry>
    <title>asymmetric-key-encryption</title>
    <url>/posts/algorithm/ed2ce70e/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>block cipher</title>
    <url>/posts/algorithm/73748ad4/</url>
    <content><![CDATA[<p>加密一般分为对称加密(Symmetric Key Encryption)和非对称加密(Asymmetric Key Encryption)。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>ca</title>
    <url>/posts/protocol/35bc7b55/</url>
    <content><![CDATA[<p>CSR (Certificate Signing Request)</p>
<p>即证书注册请求。</p>
<p>在申请SSL证书前，常常需要自己先生成证书注册请求。</p>
<p>openssl req -nodes -newkey rsa:2048 -keyout kn007.net.key -out kn007.net.csr</p>
<p>生成过程中会填写一些信息</p>
]]></content>
      <categories>
        <category>protocol</category>
      </categories>
  </entry>
  <entry>
    <title>encryption</title>
    <url>/posts/algorithm/5bbddbbb/</url>
    <content><![CDATA[<p>主要分为:</p>
<ul>
<li>对称加密算法<br>
是加密和解密使用相同密钥的加密算法<br>
用于解决<code>身份伪装</code> 问题</li>
<li>非对称加密算法<br>
是加密和解密使用不同密钥的加密算法<br>
公钥存放在客户端, 私钥存放在服务端.<br>
客户端通过公钥加密信息, 服务端通过私钥解密信息.<br>
非对称加密算法远低于对称加密算法<br>
用于解决<code>身份伪装</code>, <code>密钥配送</code> 问题</li>
<li>消息摘要算法<br>
也称为 Hash 算法, 杂凑算法, 是单向不可逆算法<br>
消息摘要跟消息长度无关, 最终能得到固定长度的散列值<br>
主要解决 <code>消息篡改</code> 问题</li>
</ul>
<h1 id="数字签名">1.  数字签名</h1>
<p>数字签名（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。<br>
<code>数字签名</code> 是非对称密钥加密技术与数字摘要技术的应用.</p>
<p>作用是：它会将报文使用一定的HASH算法算出一个固定位数的摘要信息，然后使用私钥将摘要加密，然后会将刚才的报文一起发送给接收者，接收者会通过公钥将摘要解出来。也通过hash算法算出报文摘要，如果两个摘要一致，说明数据未被篡改，说明数据是完整的。</p>
<h1 id="数字证书">2.  数字证书</h1>
<p>数字证书是互联网通讯中标志通讯各方身份信息一串数字。提供了一种在Internet上验证通信实体身份的方式。<br>
它是由CA颁发给网站的一种身份的方式。它里面包含了该网站的公钥、有效时间、网站的地址、及 CA的数字签名等。</p>
<p>作用是：它是使用CA的私钥将网站的公钥等信息进行了签名，当客户端请求服务器端的时候，网站会把证书发给客户端，客户端先通过CA的数字签名校验CA的身份，来证明证书的真实完整性。</p>
<h1 id="常见加密算法">3.  常见加密算法</h1>
<h2 id="对称加密">3.1.  对称加密</h2>
<ul>
<li>DES<br>
DES是一种将64比特的明文加密成64比特的密文的对称密码算法，它的密钥长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检查的比特，因此实质上其实密钥长度是56比特。由于DES的密文可以在短时间内被破译，因此除了用它来解密以前的密文以外，现在我们不应该使用DES了。</li>
<li>3DES<br>
三重DES是为了增加DES的强度，将DES重复3次所得到的一种密码算法，也称为TDEA,通常缩写为3DES。尽管三重DES目前还被银行等机构使用，但其处理速度不高，除了特别重视向下兼容性的情况以外，很少被用于新的用途。</li>
<li>AES<br>
AES（Advanced Encryption Standard）是取代其前任标准（DES）而成为新标准的一种对称密码算法（Rijndael）。Rijndael是由比利时密码学家Joan Daemen和Vincent Rijmen设计的分组密码算法，于2000年被选为新一代的标准密码算法——AES。Rijndael的分组长度和密钥长度可以分别以32比特为单位在128比特到256比特的范围内进行选择。不过在AES的规格中，分组长度固定为128比特，密钥长度只有128、192、和256比特三种。</li>
<li>DESX</li>
<li>Blowfish</li>
<li>IDEA</li>
<li>RC4</li>
<li>RC5</li>
<li>RC6</li>
</ul>
<h2 id="非对称加密">3.2.  非对称加密</h2>
<ul>
<li>RSA<br>
RSA是一种公钥密码算法，它的名字是由它的三位开发者，即Ron Rivest、Adi Shamir和Leonard Adleman的姓氏的首字母组成的(Rivest-Shamir-Adleman)。RSA的加密是求“E次方的 mod N”，而解密则是求“D次方的 mod N”</li>
<li>ECC(移动设备用)<br>
椭圆曲线密码<br>
它的特点是所需的密钥长度比RSA短。椭圆曲线密码是通过将椭圆曲线上的特定点进行特殊的乘法运算来实现的，它利用了这种乘法运算的逆运算非常困难这一特性。</li>
<li>Diffie-Hellman</li>
<li>El Gamal</li>
<li>Fiat-Shamir</li>
<li>Guillou- Quisquarter</li>
<li>Schnorr</li>
<li>Ong-Schnorr-Shamir</li>
<li>DSA(数字签名用)</li>
</ul>
<p>ECDSA</p>
<h2 id="消息摘要">3.3.  消息摘要</h2>
<ul>
<li>
<p>MD2</p>
</li>
<li>
<p>MD4</p>
</li>
<li>
<p>MD5<br>
能够产生128比特的散列值<br>
MD5的强抗碰撞性已经被攻破。也就是说，现在已经能够产生具备相同散列值的两条不同的消息，因此它也不安全了。</p>
</li>
<li>
<p>HAVAL</p>
</li>
<li>
<p>SHA<br>
SHA-1 一种能够产生160比特的散列值的单向散列函数。 SHA-256, SHA-384、SHA512 是散列值长度分别为256, 384, 512比特<br>
SHA-1的强抗碰撞性已于2005年被攻破，不过，SHA-2还尚未被攻破</p>
</li>
<li>
<p>CRC<br>
循环冗余校验算法, 常用于检查数据存储或数据传输时是否出错.<br>
特点是: 检错能力强，开销小.<br>
常见有 CRC16, CRC32</p>
</li>
</ul>
<h1 id="其他衍生算法">4.  其他衍生算法</h1>
<h2 id="mac">4.1.  MAC</h2>
<p>消息认证码（Message Authentication Code）是一种确认完整性并进行认证的技术，简称为MAC。<br>
消息认证指的是“消息来自正确的发送者”这一性质。消息认证码的输入包括任意长度的消息和一个发送者与接受者之间共享的密钥，它可以输出固定长度的数据，这个数据成为MAC值。<br>
要计算MAC必须持有共享密钥，没有共享密钥的人就无法计算MAC值，消息认证码正是利用这一性质来完成认证的。此外，和单向散列函数的散列值一样，哪怕消息中发生1比特的变化，MAC值也会产生变化，消息认证码正是利用这一性质来确认完整性的。消息认证码可以说是一种与密钥相关联的单向散列函数。</p>
<p>消息认证码可以使用单向散列函数和对称密码等技术来实现。</p>
<ul>
<li>HMAC</li>
<li>HMAC-MD5</li>
<li>HMAC-SHA1</li>
</ul>
<h1 id="resource">5.  Resource</h1>
<ul>
<li>
<a href="https://docs.oracle.com/en/java/javase/15/docs/specs/security/standard-names.html" title target>Java Security Standard Algorithm Names</a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>hash</title>
    <url>/posts/algorithm/d1b862b8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>pkcs</title>
    <url>/posts/algorithm/892543a3/</url>
    <content><![CDATA[<p>The Public-Key Cryptography Standards (PKCS)是由美国RSA数据安全公司及其合作伙伴制定的一组公钥密码学标准.</p>
<p>PKCS#7：定义一种通用的消息语法，包括数字签名和加密等用于增强的加密机制，PKCS#7与PEM兼容，所以不需其他密码操作，就可以将加密的消息转换成PEM消息。<br>
PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等。<br>
PKCS#11：称为Cyptoki，定义了一套独立于技术的程序设计接口，用于智能卡和PCMCIA卡之类的加密设备。<br>
PKCS#12：描述个人信息交换语法标准。描述了将用户公钥、私钥、证书和其他相关信息打包的语法。</p>
<h1 id="resource">1.  Resource</h1>
<p><a href="https://baike.baidu.com/item/PKCS/1042350?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/PKCS/1042350?fr=aladdin</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>symmetric-key-encryption</title>
    <url>/posts/algorithm/9aa668a/</url>
    <content><![CDATA[<h1 id="加密模式">1.  加密模式</h1>
<p>对称加密又分为两种加密模式: 分组加密和序列密码。</p>
<ul>
<li>
<p>分组密码，也叫块加密(block cipher)，一次加密明文中的一个块。是将明文按一定的位长分组，明文组经过加密运算得到密文组，密文组经过解密运算（加密运算的逆运算），还原成明文组。</p>
</li>
<li>
<p>序列密码，也叫流加密(stream cipher)，一次加密明文中的一个位。是指利用少量的密钥（制乱元素）通过某种复杂的运算（密码算法）产生大量的伪随机位流，用于对明文位流的加密。<br>
解密是指用同样的密钥和密码算法及与加密相同的伪随机位流，用以还原明文位流。</p>
</li>
</ul>
<h2 id="分组密码">1.1.  分组密码</h2>
<p>将数据等长分组后进行加密. 如果最后一段长度不足, 需要填充.</p>
<h3 id="ecb">1.1.1.  ECB</h3>
<p>Electronic Code Book, 电码本模式<br>
需要密钥 key<br>
在将数据分组后, 每一段通过 key 进行分组加密.</p>
<p>特点:</p>
<ul>
<li>可并行</li>
<li>不能隐藏明文的模式: 重复相同的明文段会得出相同的密文, 可以通过观察密文规律作为线索破解密码或操纵密文.</li>
</ul>
<h3 id="cbc">1.1.2.  CBC</h3>
<p>Cipher Block Chaining, 密文分组链接方式<br>
需要密钥 key 及 初始向量 IV<br>
在将数据分组后, 每一段的明文与前一段的密文进行异或后, 再通过 key 进行加密.<br>
第一段明文与初始向量异或.</p>
<p>特点:</p>
<ul>
<li>只能串行</li>
<li>无法通过密文得出明文规律</li>
</ul>
<h3 id="pcbc">1.1.3.  PCBC</h3>
<p>Propagating cipher-block chaining, 填充密码块链接模式<br>
类似于 CBC, 差别在于, 加密时, 除了需要每一段的明文与前一段的密文之外, 前一段的明文也需要参与异或.</p>
<h2 id="序列密码">1.2.  序列密码</h2>
<p>数据不需要分成固定长度, 也不需要填充</p>
<h3 id="cfb">1.2.1.  CFB</h3>
<p>Cipher feedback, 密文反馈模式<br>
在将数据分组后, 每一段的明文与 (前一段的密文再用 key 加密) 异或, 算出密文</p>
<h3 id="ofb">1.2.2.  OFB</h3>
<p>Output feedback, 输出反馈模式</p>
<h3 id="ctr">1.2.3.  CTR</h3>
<p>Counter mode，计数器模式</p>
<p>特点:</p>
<p>硬件效率：允许同时处理多块明文 / 密文。</p>
<ul>
<li>软件效率：允许并行计算，可以很好地利用 CPU 流水等并行技术。</li>
<li>预处理：算法和加密盒的输出不依靠明文和密文的输入，因此如果有足够的保证安全的存储器，加密算法将仅仅是一系列异或运算，这将极大地提高吞吐量。</li>
<li>随机访问：第 i 块密文的解密不依赖于第 i-1 块密文，提供很高的随机访问能力。</li>
<li>可证明的安全性：能够证明 CTR 至少和其他模式一样安全（CBC, CFB, OFB, …）</li>
<li>简单性：与其它模式不同，CTR模式仅要求实现加密算法，但不要求实现解密算法。对于 AES 等加/解密本质上不同的算法来说，这种简化是巨大的。</li>
<li>无填充，可以高效地作为流式加密使用。</li>
</ul>
<h3 id="gcm">1.2.4.  GCM</h3>
<p>Galois/Counter Mode</p>
<p>在之前的加密算法中都没有考虑消息完整性校验, GCM 是基于 GMAC 和 CTR 模式的算法, 即提供了消息加密, 又提供了完整性校验.</p>
<p>GMAC 是基于伽罗华域(Galois Field，GF，有限域)乘法运算来计算消息的MAC值.<br>
GMAC 是基于伽罗华域(Galois Field，GF，有限域)乘法运算来计算消息的MAC值.</p>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/chengqiuming/article/details/82288851" target="_blank" rel="noopener">https://blog.csdn.net/chengqiuming/article/details/82288851</a></li>
<li><a href="https://blog.csdn.net/u013073067/article/details/87086562" target="_blank" rel="noopener">https://blog.csdn.net/u013073067/article/details/87086562</a></li>
<li><a href="https://github.com/caizhaokai/Java_Cipher_Encrypt" target="_blank" rel="noopener">https://github.com/caizhaokai/Java_Cipher_Encrypt</a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>线程休眠的方式</title>
    <url>/posts/java/7c7f0533/</url>
    <content><![CDATA[<h1 id="1-threadsleep">1.  1. Thread.sleep()</h1>
<p>api:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以再任意地方执行</li>
<li>必须指定休眠时间</li>
<li>只能到时间自己醒过来</li>
<li>醒来后一定继续执行后续代码</li>
<li>需要捕获 InterruptedException 异常</li>
<li>不会释放持有的锁</li>
<li>休眠时线程装为 TIMED_WAITING</li>
</ul>
<h1 id="2-objectwait">2.  2. Object.wait()</h1>
<p>api:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeoutMillis, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeoutMillis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>必须在在 synchronized 中执行</li>
<li>可传入时长控制等待时长; 也可不传时长, 无限休眠直到有人唤醒</li>
<li>可以通过 notify() 唤醒, 但 <strong>notify() 必须在 wait() 之后执行, 否则会丢失唤醒信号</strong></li>
<li>醒来后不一定立即执行后续代码</li>
<li>需要捕获 InterruptedException 异常</li>
<li>会释放持有的锁</li>
<li>休眠时线程装为 WAITING</li>
</ul>
<h1 id="3-locksupportpark">3.  3. LockSupport.park()</h1>
<p>api:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(Object blocker, <span class="keyword">long</span> nanos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(Object blocker, <span class="keyword">long</span> deadline)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过二元信号量实现的阻塞: 类似开关, 要么阻塞, 要么非阻塞</li>
<li>可以再任意地方执行</li>
<li>可传入时长控制等待时长; 也可不传时长, 无限休眠直到有人唤醒</li>
<li>可以通过 unpark() 唤醒, unpark() 方法可以比 park() 先执行, 也不会丢失唤醒信号</li>
<li>醒来后一定继续执行后续代码</li>
<li>无须捕获 InterruptedException 异常, 但是也会响应中断</li>
<li>不会释放持有的锁</li>
<li>休眠时线程装为 WAITING</li>
</ul>
<h1 id="4-conditionawait">4.  4. Condition.await()</h1>
<p>api:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">awaitUntil</span><span class="params">(Date deadline)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>必须在 ReentrantLock.lock() 块中执行</li>
<li>可传入时长控制等待时长; 也可不传时长, 无限休眠直到有人唤醒</li>
<li>会释放持有的锁</li>
<li>可以通过 signal() 唤醒, 但 <strong>signal() 必须在 await() 之后执行, 否则会丢失唤醒信号</strong></li>
<li>醒来后不一定立即执行后续代码</li>
<li>需要捕获 InterruptedException 异常</li>
<li>底层盗用 LockSupport.part() 实现阻塞</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>cms-tunning</title>
    <url>/posts/uncategorized/fc6825a9/</url>
    <content><![CDATA[<h1 id="开启-cms">1.  开启 CMS</h1>
<p><code>-XX:+UseConcMarkSweepGC</code>, 采用 CMS 垃圾收集器</p>
<h1 id="回收阈值">2.  回收阈值</h1>
<p><code>-XX:CMSInitiatingOccupancyFraction</code> 老年代空间使用率到达该阈值时触发 CMS 垃圾收集, 默认为 92<br>
<code>-XX:+UseCMSInitiatingOccupancyOnly</code> 开启每次都按 <code>CMSInitiatingOccupancyFraction</code> 设置的阈值触发 CMS 垃圾回收.</p>
<p>默认情况下, 没有开启 <code>UseCMSInitiatingOccupancyOnly</code>, JVM 仅在第一次到达 <code>CMSInitiatingOccupancyFraction</code> 设置的阈值触发 CMS 垃圾收集后, JVM 会根据实际情况自动调整触发的阈值.</p>
<h1 id="压缩频率">3.  压缩频率</h1>
<p><code>-XX:CMSFullGCsBeforeCompaction</code> 压缩前的 full gc 次数, 默认为 0</p>
<p>默认情况下, 每次触发 full gc 之后都要进行空间压缩.<br>
减少压缩频率能缩短 full gc 的时间, 但是由于空间碎片的问题, full gc 的次数会增加.</p>
]]></content>
  </entry>
  <entry>
    <title>g1</title>
    <url>/posts/uncategorized/ef549917/</url>
    <content><![CDATA[<a href="/posts/uncategorized/ef549917/" title="g1 调校">g1 调校</a>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/14/gctuning/garbage-first-g1-garbage-collector1.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/14/gctuning/garbage-first-g1-garbage-collector1.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>gc-common-tunning</title>
    <url>/posts/uncategorized/dfbad38/</url>
    <content><![CDATA[<h1 id="打印虚拟机状态">1.  打印虚拟机状态</h1>
<p><code>-XX:+PrintGCDetails</code> 开启打印 GC 回收信息详情<br>
<code>-XX:+PrintFlagsInitial</code> 开启打印配置默认值<br>
<code>-XX:+PrintFlagsFinal</code> 开启打印配置最终值<br>
<code>-XX:+PrintCommandLineFlags</code> 开启打印命令行参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintFlagsInitial -version</span><br></pre></td></tr></table></figure>
<h1 id="编译模式">2.  编译模式</h1>
<p><code>-Xmixed</code> 混合模式, 先编译后执行. 默认模式.<br>
<code>-Xint</code> 解释执行模式<br>
<code>-Xcomp</code> 第一次使用就编译成本地代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会显示默认编译模式 mixed mode</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会显示默认编译模式 interpreted mode</span></span><br><span class="line">java -Xint -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会显示默认编译模式 compiled mode</span></span><br><span class="line">java -Xcomp -version</span><br></pre></td></tr></table></figure>
<h1 id="堆内存大小">3.  堆内存大小</h1>
<p><code>-Xms0m</code> 等价于 <code>-XX:InitialHeapSize</code>, 初始堆大小, 默认 0<br>
<code>-Xmx</code> 等价于 <code>-XX:MaxHeapSize</code>, 最大堆大小</p>
<h1 id="代码缓存">4.  代码缓存</h1>
<p><code>-XX:InitialCodeCacheSize</code> 初始代码缓存大小<br>
<code>-XX:ReservedCodeCacheSize</code> 等价于 <code>-Xmaxjitcodesize</code>, 最大代码缓存大小</p>
<p><code>-XX:+PrintCodeCache</code> 开启打印代码缓存空间详情<br>
<code>-XX:+PrintCodeCacheOnCompilation</code> 开启每次编译时打印缓存使用情况<br>
<code>-XX:+UseCodeCacheFlushing</code> 开始缓存空间自动清理</p>
<p>JIT 编译的代码都会放到代码缓存中.<br>
如果代码缓存空间不足, 则 JIT 无法继续编译, JVM 会打印出一条警告消息，并切换到 <code>interpreted-only</code> 模式.<br>
也就是说系统将使用解释执行模式工作, 因此性能会下降.</p>
<p>如果代码缓存不断增长, 例如热部署等原因导致的, 那么提高缓存空间知识延迟其空间占满的发生.<br>
为了避免这种情况, 通过 <code>-XX:+UseCodeCacheFlushing</code> 开启, 当代码缓存被占满时, 让 JVM 放弃一部分已编译的代码.</p>
<h1 id="分代比例">5.  分代比例</h1>
<p><code>-XX:NewRatio</code> 年轻代与老年代的比例, 默认为 1<br>
<code>-XX:SurvivorRatio</code> Survivor 区与 Eden 区的比例, 默认为 8</p>
<p><code>-XX:NewRatio=2</code> 表示年轻代与老年代的比例为 1:2, 即年轻代占整个堆的 1/3;<br>
<code>-XX:SurvivorRatio=8</code> 表示 Survivor 区与 Eden 区的比例为 2:8, 即一个 Survivor 区占整个年轻代的 1/10</p>
<h1 id="永久代内存大小">6.  永久代内存大小</h1>
<p><code>-XX:PermSize=64M</code> 初始永久代内存大小<br>
<code>-XX:MaxPermSize=128M</code> 最大永久代内存大小</p>
<p>永久代中包含了虚拟机中所有可通过反射获取到的数据, 比如 Class 和 Method 对象.<br>
full gc 会对永久代中不需要的类进行的回收. 如果永久代内存用完, 会报 OutOfMemoryError: PermGen space.<br>
<strong>JDK 1.8+ 开始, JVM 改用 MetaspaceSize 替代 PermSize.</strong></p>
<p>移除永久代的原因:</p>
<ol>
<li>某些应用会使用动态代理等方式, 导致类的数量会不断增加, 而启动时固定最大永久代大小, 很难调优</li>
<li>对于不需要的类, 可以在不暂停的情况下进行回收</li>
<li>只有 Hotspot 虚拟机才有该区域, 为了与兼容合并其他类型的虚拟机.</li>
</ol>
<h1 id="元空间">7.  元空间</h1>
<p><code>-XX:MetaspaceSize</code> 初始元空间大小, 默认约为 20.8m<br>
<code>-XX:MaxMetaspaceSize</code> 最大元空间大小, 默认没有限制<br>
<code>-XX:MinMetaspaceFreeRatio</code> 在 gc 之后, 最小的 Metaspace 剩余空间容量比例, 用于减少为分配空间所导致的垃圾收集, 默认 40<br>
<code>-XX:MaxMetaspaceFreeRatio</code> 在 gc 之后, 最大的 Metaspace 剩余空间容量比例, 用于减少为释放空间所导致的垃圾收集, 默认 70</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过该命令, 查看 M 即为 Metaspace 的使用率</span></span><br><span class="line">jstat -gcutil <span class="variable">$pid</span></span><br><span class="line"><span class="comment"># 通过该命令, 查看 MC (Metaspace Capacity) 元空间容量, MU (Metaspace Useage) 元空间使用量</span></span><br><span class="line"><span class="comment"># M = MU / MC</span></span><br><span class="line">jstat -gc <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>
<p>每次元空间内存不足时, 都会触发 full gc, 所以建议 <code>MetaspaceSize</code> 和 <code>MaxMetaspaceSize</code> 设置成相同大小.<br>
一般项目设置 256m 元空间大小足够, 具体数值, 可以在项目稳定之后, 通过上述命令查看.</p>
<h2 id="追踪类的加载和卸载">7.1.  追踪类的加载和卸载</h2>
<p><code>-XX:+TraceClassLoading</code> 开启追踪类的加载情况<br>
<code>-XX:TraceClassUnloading</code> 开启追踪类的卸载情况</p>
<p>元空间存放类的相关信息, 如果需要定位 Metaspace 频繁触发 full gc, 或者 Metaspace 内存溢出等问题, 可以通过开启以上 2 个开关定位是哪些类的问题.</p>
<h1 id="自动装箱缓存">8.  自动装箱缓存</h1>
<p><code>-XX:AutoBoxCacheMax</code> 自动装箱缓存大小, 默认 128</p>
<p>第一次使用 Integer 类型数据时, 默认会加载 [-128, 127] 范围内的数字, 缓存起来. 可根据需要调整缓存的数字范围<br>
<strong>Long 也使用了自动装箱缓存, 但是范围是不可变的</strong></p>
<h1 id="预分配内存">9.  预分配内存</h1>
<p><code>-XX:+AlwaysPreTouch</code> 开启预分配内存</p>
<p>默认情况下, Java 进程启动的时候, 分配的是虚拟内存, 没有真正分配物理内存给 JVM; 当 JVM 需要访问这些内存时, 才真正分配.<br>
这样会有以下问题:<br>
- 第一次 young gc 之前, Eden 区分配对象的速度较慢<br>
- young gc 时, Young 区对象晋升到 Old 区, 这个时候如果需要操作系统真正分配内存, 会导致 young gc 停顿更久.</p>
<p>开启预分配内存, 则在 JVM 启动时直接分配物理内存, 但是会导致 JVM 启动变慢.</p>
<h1 id="重复字符串">10.  重复字符串</h1>
<p><code>-XX:+UseStringDeduplication</code> 开启删除重复字符串</p>
<p>只保留一个 char[] 来优化堆内存</p>
<h1 id="年轻代最大存活阈值">11.  年轻代最大存活阈值</h1>
<p><code>-XX:MaxTenuringThreshold</code> 年轻代最大存活阈值, 默认 15</p>
<p>年轻代对象存活超过该阈值后会晋升到老年代.<br>
由于年轻代使用复制算法, 如果对象存活时间太久, 会导致 Survivor 区对象多过, 影响复制算法性能已经 young gc 停顿时间.</p>
<h1 id="systemgc">12.  System.gc()</h1>
<p><code>-XX:+DisableExplicitGC</code> 开启禁止程序调用 System.gc() 触发 full gc.<br>
<code>-XX:+ExplicitGCInvokesConcurrent</code> 开启使用并发处理程序调用 System.gc() 触发的 full gc.</p>
<p>默认情况下, System.gc() 会导致一个完全停顿的 full gc.<br>
在开启 <code>ExplicitGCInvokesConcurrent</code> 后, CMS 垃圾收集时一些阶段是并行处理的, 减少 full gc<br>
的停顿时长.</p>
]]></content>
  </entry>
  <entry>
    <title>flyway</title>
    <url>/posts/uncategorized/211bd515/</url>
    <content><![CDATA[<h1 id="配置">1.  配置</h1>
<h2 id="maven-依赖">1.1.  maven 依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- flyway 操作数据库需要用到的  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring-配置">1.2.  Spring 配置</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">flyway:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">baseline-on-migrate:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>其他还有</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">flyway:</span></span><br><span class="line">        <span class="attr">baseline-description:</span> <span class="comment">#对执行迁移时基准版本的描述.</span></span><br><span class="line">        <span class="attr">baseline-on-migrate:</span> <span class="comment">#当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.</span></span><br><span class="line">        <span class="attr">baseline-version:</span> <span class="comment">#开始执行基准迁移时对现有的schema的版本打标签，默认值为1.</span></span><br><span class="line">        <span class="attr">check-location:</span> <span class="comment">#检查迁移脚本的位置是否存在，默认false.</span></span><br><span class="line">        <span class="attr">clean-on-validation-error:</span> <span class="comment">#当发现校验错误时是否自动调用clean，默认false.</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="comment">#是否开启flywary，默认true.</span></span><br><span class="line">        <span class="attr">encoding:</span> <span class="comment">#设置迁移时的编码，默认UTF-8.</span></span><br><span class="line">        <span class="attr">ignore-failed-future-migration:</span> <span class="comment">#当读取元数据表时是否忽略错误的迁移，默认false.</span></span><br><span class="line">        <span class="attr">init-sqls:</span> <span class="comment">#当初始化好连接时要执行的SQL.</span></span><br><span class="line">        <span class="attr">locations:</span> <span class="comment">#迁移脚本的位置，默认db/migration.</span></span><br><span class="line">        <span class="attr">out-of-order:</span> <span class="comment">#是否允许无序的迁移，默认false.</span></span><br><span class="line">        <span class="attr">password:</span> <span class="comment">#目标数据库的密码.</span></span><br><span class="line">        <span class="attr">placeholder-prefix:</span> <span class="comment">#设置每个placeholder的前缀，默认$&#123;.</span></span><br><span class="line">        <span class="attr">placeholder-replacementplaceholders:</span> <span class="comment">#是否要被替换，默认true.</span></span><br><span class="line">        <span class="attr">placeholder-suffix:</span> <span class="comment">#设置每个placeholder的后缀，默认&#125;.</span></span><br><span class="line">        <span class="string">placeholders.[placeholder</span> <span class="string">name]:</span> <span class="comment">#设置placeholder的value</span></span><br><span class="line">        <span class="attr">schemas:</span> <span class="comment">#设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.</span></span><br><span class="line">        <span class="attr">sql-migration-prefix:</span> <span class="comment">#迁移文件的前缀，默认为V.</span></span><br><span class="line">        <span class="attr">sql-migration-separator:</span> <span class="comment">#迁移脚本的文件名分隔符，默认__</span></span><br><span class="line">        <span class="attr">sql-migration-suffix:</span> <span class="comment">#迁移脚本的后缀，默认为.sql</span></span><br><span class="line">        <span class="attr">tableflyway:</span> <span class="comment">#使用的元数据表名，默认为schema_version</span></span><br><span class="line">        <span class="attr">target:</span> <span class="comment">#迁移时使用的目标版本，默认为latest version</span></span><br><span class="line">        <span class="attr">url:</span> <span class="comment">#迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源</span></span><br><span class="line">        <span class="attr">user:</span> <span class="comment">#迁移数据库的用户名</span></span><br><span class="line">        <span class="attr">validate-on-migrate:</span> <span class="comment">#迁移时是否校验，默认为true.</span></span><br></pre></td></tr></table></figure>
<h2 id="脚本">1.3.  脚本</h2>
<p>脚本默认目录: db/migration<br>
脚本名称: V<span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#039;_&#039; at position 10: {version}_̲_">{version}__</span>{name}.sql<br>
固定的以 <code>V</code> 开头, 中间以双下划线分割.<br>
flyway 只会执行比执行历史记录表(默认 flyway_schema_history) 中版本更大的脚本.<br>
如: <code>V1.0__init.sql</code></p>
<h1 id="base-line">2.  base-line</h1>
<p>当项目存在历史数据, 需要告诉 flyway 在某个版本之前的脚本不需要执行了</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baseline-description:</span> <span class="comment">#对执行迁移时基准版本的描述.</span></span><br><span class="line"><span class="attr">baseline-on-migrate:</span> <span class="comment">#当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.</span></span><br><span class="line"><span class="attr">baseline-version:</span> <span class="comment">#开始执行基准迁移时对现有的schema的版本打标签，默认值为1.</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>jackson</title>
    <url>/posts/uncategorized/5d6f808b/</url>
    <content><![CDATA[<h1 id="resource">1.  Resource</h1>
<p><a href="https://developer.ibm.com/zh/articles/jackson-advanced-application/" target="_blank" rel="noopener">https://developer.ibm.com/zh/articles/jackson-advanced-application/</a></p>
]]></content>
  </entry>
  <entry>
    <title>lombok</title>
    <url>/posts/java/6f8c7136/</url>
    <content><![CDATA[<h1 id="常用注解">1.  常用注解</h1>
<h2 id="accessors">1.1.  @Accessors</h2>
<p>配置getter和setter方法的生成结果</p>
<ul>
<li>fluent<br>
为 true 时, 生成的 getter 和 setter 方法的方法名都是基础属性名</li>
<li>chain<br>
为 true 时, 生成的 getter 和 setter 方法回当前对象</li>
<li>prefix<br>
需要去除的属性前缀</li>
</ul>
<h2 id="equalsandhashcode">1.2.  @EqualsAndHashCode</h2>
<ul>
<li>callSuper<br>
为 true 时, 生成的代码中调用父类的 equals 方法</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>framework</tag>
      </tags>
  </entry>
  <entry>
    <title>poi</title>
    <url>/posts/java/7dbb1fd6/</url>
    <content><![CDATA[<p>Apache POI 是常用的 Java 开发 excel 相关业务功能的工具包.</p>
<p>HSSF: Excel 97 版本, 后缀: <code>.xls</code><br>
XSSF: Excel 2007 版本, 后缀: <code>.xlsx</code><br>
SXSSF: 是 Apache POI v3.8+ 之后, 在 XSSF 基础上开发的低内存的流式扩展</p>
<h1 id="常见问题">1.  常见问题</h1>
<h2 id="1-excel-数量上限">1.1.  1. excel 数量上限</h2>
<p>在 <code>org.apache.poi.ss.SpreadsheetVersion</code> 中预设了 excle 不同版本的行与列的数量上限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Excel97 format aka BIFF8</span></span><br><span class="line"><span class="comment">    * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The total number of available rows is 64k (2^16)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The total number of available columns is 256 (2^8)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The maximum number of arguments to a function is 30&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Number of conditional format conditions on a cell is 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Number of cell styles is 4000&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Length of text cell contents is 32767&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">EXCEL97(<span class="number">0x10000</span>, <span class="number">0x0100</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">4000</span>, <span class="number">32767</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Excel2007</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The total number of available rows is 1M (2^20)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The total number of available columns is 16K (2^14)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;The maximum number of arguments to a function is 255&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Number of conditional format conditions on a cell is unlimited</span></span><br><span class="line"><span class="comment">    * (actually limited by available memory in Excel)&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Number of cell styles is 64000&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;Length of text cell contents is 32767&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">EXCEL2007(<span class="number">0x100000</span>, <span class="number">0x4000</span>, <span class="number">255</span>, Integer.MAX_VALUE, <span class="number">64000</span>, <span class="number">32767</span>);</span><br></pre></td></tr></table></figure>
<p>如 excel 2007 最大行数是 2^20, 即每一个 Sheet 最大行数 为1048576.</p>
<h2 id="2-打开-excel-文件内存溢出">1.2.  2. 打开 excel 文件内存溢出</h2>
<p>如果直接 <code>WorkbookFactory.create(InputStream inputStream)</code> 读取 excel 需要非常大的内存, 容易出现内存溢出的情况</p>
<p>解决方案</p>
<ol>
<li>改成读取文件</li>
</ol>
<p>在官方 API 中有说明, ``WorkbookFactory.create(File file)` 方式读取文件的资源消耗之前方式小.</p>
<ol start="2">
<li>控制加载数据量, 流式处理</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.monitorjbl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xlsx-streamer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Workbook workbook = StreamingReader.builder()</span><br><span class="line">    .rowCacheSize(<span class="number">100</span>)  <span class="comment">//缓存到内存中的行数, 默认是10</span></span><br><span class="line">    .bufferSize(<span class="number">4096</span>)  <span class="comment">//读取资源时, 缓存到内存的字节大小, 默认是1024</span></span><br><span class="line">    .open(in);  <span class="comment">//打开资源, 必须, 可以是InputStream或者是File, 注意: 只能打开XLSX格式的文件</span></span><br></pre></td></tr></table></figure>
<h2 id="3-临时文件">1.3.  3. 临时文件</h2>
<p>poi 会在执行 <code>write</code> 方法时, 在 <code>/tmp/poifiles</code> 下创建临时文件, 名称形如 <code>poi-sxssf-sheet423173909854689649.xml</code>. 该文件大小依据需要生成文件的数据量决定, 会在线程退出时自动回收.<br>
但如果线程意外退出, 那么该文件就不会回收;</p>
<p>解决方案:</p>
<ol>
<li>清空文件数据, 释放资源占用</li>
</ol>
<p>删除文件, 并重启服务, 可释放空间. 但如果是线上服务, 无法立即重启, 可通过清空文件数据释放磁盘资源占用.<br>
由于 jvm 对临时文件还存在引用, 直接删除文件无法回收存储空间.<br>
通过 <code>echo &quot;&quot; &gt; temp.xml</code> 命令, 将文件内容清空;</p>
<ol start="2">
<li>主动清除临时文件</li>
</ol>
<p>生成文件完成后, 主动调用 <code>dispose</code> 方法清除临时文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(Workbook workbook = <span class="keyword">new</span> SXSSFWorkbook(<span class="number">200</span>);)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (workbook != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (workbook <span class="keyword">instanceof</span> SXSSFWorkbook) &#123;</span><br><span class="line">            ((SXSSFWorkbook) workbook).dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="resources">2.  Resources</h1>
<ul>
<li>
<a href="http://poi.apache.org/encryption.html" title target>加密</a>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>framework</tag>
      </tags>
  </entry>
  <entry>
    <title>jeecg</title>
    <url>/posts/uncategorized/ca425a94/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>redisson</title>
    <url>/posts/uncategorized/32cc90fa/</url>
    <content><![CDATA[<h1 id="配置">1.  配置</h1>
<h2 id="maven-依赖">1.1.  Maven 依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring-配置">1.2.  Spring 配置</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redisson:</span></span><br><span class="line">  <span class="attr">singleServerConfig:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127</span><span class="string">:0:0:1:6379</span></span><br></pre></td></tr></table></figure>
<h1 id="源码">2.  源码</h1>
<h1 id="trylock-原理">3.  tryLock 原理</h1>
<p>org.redisson.RedissonLock#tryLock(long, long, java.util.concurrent.TimeUnit)</p>
<ol>
<li>先尝试获取一次, 如果成功, 则返回; 如果超时则, 失败; 否则继续下一步</li>
<li>根据第一次尝试获取锁的时长作为超时时间, 订阅锁队列, 看在一个时长内是否可以收到解锁消息, 如果不能等到, 则获取锁失败; 付过能等到, 则继续下一步</li>
<li>判断是否超时, 如果没有则继续下一步</li>
<li>通过信号量的 <code>boolean tryAcquire(long timeout, TimeUnit unit)</code> 循环递归获取锁</li>
<li>finally 取消订阅</li>
</ol>
<h1 id="resource">4.  Resource</h1>
<ul>
<li>
<a href="https://github.com/redisson/redisson/blob/master/redisson-spring-boot-starter/README.md" title target>redisson-spring-boot-starter</a>
</li>
<li>
<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" title target>Redisson Wiki</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>meditation</title>
    <url>/posts/management/443d6953/</url>
    <content><![CDATA[<h1 id="需求">1.  需求</h1>
<ul>
<li>上班需要长时间集中注意力, 时间太久之后, 退出工作状态, 会有晕眩感, 无法再思考.</li>
<li>有时候会一直停留在之前的沟通上下文中, 切换比较缓慢.</li>
</ul>
<h1 id="冥想">2.  冥想</h1>
<p>放空大脑, 将注意力放在无感, 呼吸, 环境上.<br>
不要让工作, 生活的杂念干扰, 如果被干扰了, 马上清空再来.</p>
<h1 id="作用">3.  作用</h1>
<ul>
<li>提高自控能力<br>
控制杂念, 就能控制欲望.</li>
<li>增强记忆力<br>
让大脑有空处理内部事务, 整理记忆.</li>
<li>提高工作效率<br>
冥想一会, 大脑放松后, 工作更有效率.</li>
</ul>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>self-management</tag>
      </tags>
  </entry>
  <entry>
    <title>习惯</title>
    <url>/posts/management/970352b4/</url>
    <content><![CDATA[<h1 id="习惯">1.  习惯</h1>
<p>规划: 在一天中选择一段时间深度工作, 其余的时间做其他事情, 这样的工作效率会大大提高<br>
借力: 单靠个人的力量在事业上发展很慢, 我们需要观察谁的业务与我们共生, 谁的能力与我们互补, 彼此借力, 才能发展的更快更远.<br>
复盘: 通过 GRAI 方法对每日的工作复盘<br>
G: Goal 回顾目标<br>
R: Result 重演过程<br>
A: Analysis 分析原因<br>
I: Insight 探索答案<br>
主动: 主动学习, 主动争取机会</p>
<h1 id="自律">2.  自律</h1>
<p>安然入睡的能力: 无论碰到多大困难, 都能安然入睡, 第二天醒来, 精神抖擞的去解决问题.<br>
保持平静的能力: 遇到事情临危不乱, 冷静思考, 积极面对<br>
放空自己的能力: 不容易受负面情绪干扰和影响, 更有效的处理麻烦和困难<br>
坚持锻炼的能力: 增强自己的体制, 远离疾病<br>
终生学习的能力: 时刻突围自己的舒适圈, 保证自己竞争力</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>self-management</tag>
      </tags>
  </entry>
  <entry>
    <title>心理栅栏</title>
    <url>/posts/management/e461a281/</url>
    <content><![CDATA[<p>心理栅栏是人给自己设立的标签, 底线, 防线, 任何触碰到心理栅栏的事件都会导致各种情绪</p>
<p>常见的社会栅栏有:</p>
<ul>
<li>地域</li>
<li>学历</li>
</ul>
<p>这种优越感会形成鄙视链.</p>
<p>在家庭中, 丈夫认为自己只负责赚钱, 孩子交给妻子, 自己只需要在非常必要的时候处理下; 妻子认为丈夫下班之后, 就理所当然照顾孩子, 完全没有丈夫考虑事业上的远期打算.<br>
这些极端的标签会造成矛盾.</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>self-management</tag>
      </tags>
  </entry>
  <entry>
    <title>对标管理</title>
    <url>/posts/management/fde389fc/</url>
    <content><![CDATA[<p>对于做事的方式方法, 与别人进行比较, 用来分析自己的不足, 优化.</p>
<h1 id="resource">1.  Resource</h1>
<ul>
<li><a href="https://baike.baidu.com/item/%E5%AF%B9%E6%A0%87%E7%AE%A1%E7%90%86/1212875?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/对标管理/1212875?fr=aladdin</a></li>
</ul>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>project-management</tag>
      </tags>
  </entry>
  <entry>
    <title>思想角度</title>
    <url>/posts/management/bb23d826/</url>
    <content><![CDATA[<p>事情发生必将有利于你: 这件事情为什么发生在我身上, 这种想法转变成, 这件事情是想教会我什么.</p>
<p>人多的地方说话需要格外注意, 你议论的人, 可能恰恰是别人喜欢的.<br>
不说废话, 不讲碎语.<br>
与人结交时, 对陌生人只说百分之三十, 对熟人只说百分之五十, 对家人只说百分之七十.</p>
<p>当你希望寄托在别人身上的时候, 你只能等待; 而当你吧希望寄托在自己身上的时候, 你会义无反顾的奔跑.</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>self-management</tag>
      </tags>
  </entry>
  <entry>
    <title>osx-tunning</title>
    <url>/posts/os/4d4098e8/</url>
    <content><![CDATA[<h1 id="删除默认输入法">1.  删除默认输入法</h1>
<p>参考 <a href="https://www.jianshu.com/p/0ba1292441b9" title target>mac 删除自带 ABC 输入法的方法</a></p>
<ol>
<li>选中默认输入法</li>
<li><code>sudo open ~/Library/Preferences/com.apple.HIToolbox.plist</code></li>
<li>依次点开 Root - AppleEnabledInputSources , 会看到一列 item , 找到其中 KeyboardLayout Name 为 ABC 的那一列, 将整列 item 删掉, 然后 command + S 保存.</li>
<li>重启</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>osx</tag>
      </tags>
  </entry>
  <entry>
    <title>automator</title>
    <url>/posts/os/458ad364/</url>
    <content><![CDATA[<h1 id="执行脚本快捷键">1.  执行脚本快捷键</h1>
<p>快捷操作:<br>
工作流程收到当前: 没有输入<br>
操作:<br>
执行 Shell 脚本<br>
之后在输入框中写入脚本</p>
<p>在系统配置–快捷键–服务中设置快捷键</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>osx</tag>
      </tags>
  </entry>
  <entry>
    <title>rhythm</title>
    <url>/posts/management/8582e235/</url>
    <content><![CDATA[<p>做事要控制节奏. 在正确的时机做正确的事情.</p>
<p>顺水行舟才能事半功倍.</p>
<p>一个人的成功不仅靠能力, 还要有一股向成功的助力, 还有一点运气.<br>
要有主观意识的去改变环境, 助我们成功.</p>
<h1 id="对于趋炎附势的看法">1.  对于趋炎附势的看法</h1>
<p>我们心中一定要有一个目标, 这是我们的理想与坚持, 不变且不可动摇的信念.<br>
而趋炎附势, 水波主流是我们达成一个目标的行动方式, 并不冲突.</p>
<p>比如为了养家糊口, 工作上需要得到上级的垂青. 我们要不断提高自己的工作能力之外, 创造自己上升的空间, 助力, 让整个环境公司认可我们, 帮助我们上升. 而不是靠死做, 或者运气, 发挥自己的主观能力, 去改变环境.</p>
]]></content>
      <categories>
        <category>management</category>
      </categories>
      <tags>
        <tag>self-management</tag>
      </tags>
  </entry>
  <entry>
    <title>iterm2</title>
    <url>/posts/os/d162465b/</url>
    <content><![CDATA[<h1 id="iterm2-支持-lrzsz">1.  iTerm2 支持 lrzsz</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install lrzsz</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mmastrac/iterm2-zmodem</span><br><span class="line">cp iterm2-zmodem/*.sh /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure>
<p>给 iTerm2 添加 Triggers:<br>
Preferences / Profiles / Advanced / Triggers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Regular expression: rz waiting to receive.\*\*B0100</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-send-zmodem.sh</span><br><span class="line">Instant: checked</span><br><span class="line"></span><br><span class="line">Regular expression: \*\*B00000000000000</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters:  </span><br><span class="line">Instant: checked</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>osx</tag>
      </tags>
  </entry>
  <entry>
    <title>xcode</title>
    <url>/posts/os/59d1b397/</url>
    <content><![CDATA[<h1 id="安装">1.  安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 xcode</span></span><br><span class="line">xcode-select --install</span><br><span class="line"><span class="comment"># 之后进入 AppStore , 安装 XCode</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>osx</tag>
      </tags>
  </entry>
  <entry>
    <title>cron-expression</title>
    <url>/posts/expression/11c3174f/</url>
    <content><![CDATA[<h3 id="表达式">0.0.1.  表达式</h3>
<p>Seconds<br>
Minutes<br>
Hours<br>
Day-of-Month<br>
Month<br>
Day-of-Week<br>
Year (optional field)</p>
<h3 id="样例">0.0.2.  样例</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">秒 0-59 , – * &#x2F;</span><br><span class="line"></span><br><span class="line">分 0-59 , – * &#x2F;</span><br><span class="line"></span><br><span class="line">小时 0-23 , – * &#x2F;</span><br><span class="line"></span><br><span class="line">日期 1-31 , – * ? &#x2F; L W C</span><br><span class="line"></span><br><span class="line">月份 1-12 或者 JAN-DEC , – * &#x2F;</span><br><span class="line"></span><br><span class="line">星期 1-7 或者 SUN-SAT , – * ? &#x2F; L C #</span><br><span class="line"></span><br><span class="line">年(可选) 留空, 1970-2099 , – * &#x2F;</span><br><span class="line"></span><br><span class="line">表达式意义</span><br><span class="line"></span><br><span class="line">&quot;0 0 12 * * ?&quot; 每天中午12点触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 ? * *&quot; 每天上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 * * ?&quot; 每天上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 * * ? *&quot; 每天上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line"></span><br><span class="line">&quot;0 0&#x2F;5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line"></span><br><span class="line">&quot;0 0&#x2F;5 14, 18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line"></span><br><span class="line">&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line"></span><br><span class="line">&quot;0 10, 44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line"></span><br><span class="line">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发</span><br><span class="line"></span><br><span class="line">每天早上6点</span><br><span class="line"></span><br><span class="line">0 6 * * *</span><br><span class="line"></span><br><span class="line">每两个小时</span><br><span class="line"></span><br><span class="line">0 *&#x2F;2 * * *</span><br><span class="line"></span><br><span class="line">晚上11点到早上8点之间每两个小时, 早上八点</span><br><span class="line"></span><br><span class="line">0 23-7&#x2F;2, 8 * * *</span><br><span class="line"></span><br><span class="line">每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点</span><br><span class="line"></span><br><span class="line">0 11 4 * 1-3</span><br><span class="line"></span><br><span class="line">1月1日早上4点</span><br><span class="line"></span><br><span class="line">0 4 1 1 *</span><br></pre></td></tr></table></figure>
<h1 id="linux-下的定时任务">1.  Linux 下的定时任务</h1>
<figure class="highlight plain"><figcaption><span>/etc/crontab</span></figcaption><table><tr><td class="code"><pre><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name command to be executed</span><br><span class="line">17 *    * * *   root    cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.hourly</span><br><span class="line">25 6    * * *   root    test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )</span><br><span class="line">47 6    * * 7   root    test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )</span><br><span class="line">52 6    1 * *   root    test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示当前用户的定时任务</span><br><span class="line">crontab -l </span><br><span class="line"></span><br><span class="line"># 编辑当前用户的定时任务</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"># 删除当前用户的所有定时任务</span><br><span class="line">crontab -r</span><br></pre></td></tr></table></figure>
<h1 id="resources">2.  Resources</h1>
<ul>
<li><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>expression</category>
      </categories>
  </entry>
  <entry>
    <title>scoop</title>
    <url>/posts/uncategorized/a028bfa6/</url>
    <content><![CDATA[<p>window 上的工具安装软件</p>
<p>这款软件包管理工具更多的时候是帮助开发者安装系统工具时使用, 尤其是那些依赖于Linux但在Windows系统上不存在的软件程序.</p>
<p>可以安装  curl 等</p>
]]></content>
  </entry>
  <entry>
    <title>set-env</title>
    <url>/posts/uncategorized/4adb2126/</url>
    <content><![CDATA[<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">System.Environment</span>]::SetEnvironmentVariable(<span class="string">'PYENV'</span>,<span class="variable">$env:USERPROFILE</span> + <span class="string">"\.pyenv\pyenv-win\"</span>,<span class="string">"User"</span>)</span><br><span class="line">[<span class="type">System.Environment</span>]::SetEnvironmentVariable(<span class="string">'path'</span>, <span class="variable">$HOME</span> + <span class="string">"\.pyenv\pyenv-win\bin;"</span> + <span class="variable">$HOME</span> + <span class="string">"\.pyenv\pyenv-win\shims;"</span> + <span class="variable">$env:Path</span>,<span class="string">"User"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>chocolatey</title>
    <url>/posts/uncategorized/c9253185/</url>
    <content><![CDATA[<p>windowns 上的软件安装管理工具, 类似于 osx 上的 homebrew, debian 上的 apt 等工具</p>
<p>它能够在无需人工干预的情况下自动安装超过20种Windows软件包类型, 而且开箱即用, 支持配置超过7000款主流软件.</p>
<h1 id="安装">1.  安装</h1>
<a href="https://chocolatey.org/install" title target>安装</a>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol = [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol -bor <span class="number">3072</span>; iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br></pre></td></tr></table></figure>
<p><a href="https://chocolatey.org/" target="_blank" rel="noopener">https://chocolatey.org/</a></p>
]]></content>
  </entry>
  <entry>
    <title>protobuf</title>
    <url>/posts/protocol/99fac5be/</url>
    <content><![CDATA[<p>Google Protobuf 是语言无关, 平台无关, 可扩展的序列化结构数据的方法, 它可用于 (数据) 通信协议, 数据存储等.<br>
可高效, 自动序列结构数据, 相比与 XML, JSON, 消息更小, 传输更快.<br>
支持 Java, C#, C++, Go 和 Python.</p>
<p>通过 <code>.proto</code> 文件定义数据结构, 之后通过 <code>protoc</code> 工具编译生成多语言版本的源码.<br>
可以更新数据结构, 而不破坏由旧数据结构编译的已部署程序.</p>
<h1 id="使用">1.  使用</h1>
<ol>
<li>从 <code>https://github.com/protocolbuffers/protobuf/releases</code> 下载编译器</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">axel -n 10 -a https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protobuf-all-3.13.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -axf protobuf-all-3.13.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> protobuf-all-3.13.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/protobuf</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>然后设置环境参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>.proto</code> 文件</li>
</ol>
<p>大致格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message Type &#123;</span><br><span class="line">  [字段规则] 字段类型 字段名称 &#x3D; 字段序号;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">字段规则:</span><br><span class="line">  required: 字段只能也必须出现 1 次</span><br><span class="line">  optional: 字段可出现 0 次或1次</span><br><span class="line">  repeated: 字段可出现任意多次（包括 0）</span><br><span class="line">类型: int32、int64、sint32、sint64、string、32-bit ....</span><br><span class="line">字段编号: 不可变且唯一, 0 ~ 536870911（除去 19000 到 19999 之间的数字）</span><br><span class="line"></span><br><span class="line">样例:</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;proto</span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定 package</span><br><span class="line">option java_package &#x3D; &quot;com.raven.play.protobuf.message&quot;;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line"> int32 id &#x3D; 1;</span><br><span class="line"> string name &#x3D; 2;</span><br><span class="line"></span><br><span class="line"> repeated Phone phone &#x3D; 4;</span><br><span class="line"></span><br><span class="line"> enum PhoneType &#123;</span><br><span class="line">  MOBILE &#x3D; 0;</span><br><span class="line">  HOME &#x3D; 1;</span><br><span class="line">  WORK &#x3D; 2;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> message Phone &#123;</span><br><span class="line">  string number &#x3D; 1;</span><br><span class="line">  PhoneType type &#x3D; 2;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编译</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># protoc --java_out=../java ./message.proto</span></span><br><span class="line">protoc --java_out=<span class="variable">$target_path</span> --java_package=<span class="variable">$target_package</span> <span class="variable">$proto_file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -I 指定文件夹, 可以指定多个</span></span><br><span class="line"><span class="comment"># protoc -I. --java_out=../java *.proto</span></span><br><span class="line">protoc -I=<span class="variable">$source_paths</span> --java_out=<span class="variable">$target_path</span> --java_package=<span class="variable">$target_package</span> *.proto</span><br></pre></td></tr></table></figure>
<p>package 路径是配置在 <code>.proto</code> 文件里的</p>
<ol start="4">
<li>使用</li>
</ol>
<p>Maven 依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- protobuf &amp; json converter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.protobuf-java-format<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java-format<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf</a></li>
<li>
<a href="https://developers.google.com/protocol-buffers/docs/overview" title target>Protobuf 指南</a>
</li>
<li><a href="https://www.jianshu.com/p/a24c88c0526a" target="_blank" rel="noopener">https://www.jianshu.com/p/a24c88c0526a</a></li>
<li><a href="http://hengyunabc.github.io/thinking-about-grpc-protobuf/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">http://hengyunabc.github.io/thinking-about-grpc-protobuf/?utm_source=tuicool&amp;utm_medium=referral</a><br>
<a href="https://github.com/protostuff/protostuff" target="_blank" rel="noopener">https://github.com/protostuff/protostuff</a></li>
<li>搜索 protobuf 为什么快</li>
</ul>
]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl</title>
    <url>/posts/uncategorized/eee9a081/</url>
    <content><![CDATA[<h1 id="安装-wsl">1.  安装 wsl</h1>
<ol>
<li>控制面板 | 程序和功能 | 启用或关闭Windows功能 | 勾选 适用于Linux的Windows子系统</li>
<li>在 Windows Store 选择安装子系统版本安装, 如 Debian</li>
<li>在命令行工具输入 <code>wsl</code> 或 <code>debian</code> 启动子系统</li>
</ol>
<h1 id="wsl2">2.  wsl2</h1>
<p>wsl1 的网络不能使用 window 启动的 vpn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用虚拟机平台可选组件</span></span><br><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的子系统及 wsl 版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 wsl1 升级到 wsl2</span></span><br><span class="line">wsl -l</span><br><span class="line">wsl --<span class="built_in">set</span>-version debian 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 wsl 默认安装版本改为版本 2</span></span><br><span class="line">wsl --<span class="built_in">set</span>-default-version</span><br></pre></td></tr></table></figure>
<h1 id="wsl-安装图形界面">3.  wsl 安装图形界面</h1>
<p>用于解决 wsl 提示 <code>Error: Can't open display: (null)</code><br>
<a href="https://blog.csdn.net/Alisebeast/article/details/106680267" target="_blank" rel="noopener">https://blog.csdn.net/Alisebeast/article/details/106680267</a></p>
]]></content>
  </entry>
  <entry>
    <title>kryo</title>
    <url>/posts/protocol/b9e6ad56/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>json</title>
    <url>/posts/protocol/6b072545/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>hessian</title>
    <url>/posts/protocol/2b1e306e/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>thrift</title>
    <url>/posts/protocol/6acc3344/</url>
    <content><![CDATA[<p>此外，Facebook的thrift据说也很有特色，2007年由Facebook开发，之后在2008年加到Apache计划中。是一个跨语言的轻量级RPC消息和数据交换框架，Thrift能生成的语言有: C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml，这是它的一大优点。</p>
]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>rpc</title>
    <url>/posts/protocol/53b02c38/</url>
    <content><![CDATA[<h1 id="json-vs-protobuf-vs-thrift">1.  json vs protobuf vs thrift</h1>
<h1 id="resource">2.  Resource</h1>
<p><a href="https://blog.csdn.net/xiaoxiaoyusheng2012/article/details/81102369" target="_blank" rel="noopener">https://blog.csdn.net/xiaoxiaoyusheng2012/article/details/81102369</a></p>
<p><a href="http://cache.baiducontent.com/c?m=tkWeFLFC9BfCGMJID8fGYdTMOrZFTy3WhwfqQg0pEXt8I7Xe-aDpVPTAEXvROoikjYYn2O0g3enui9dM251nbhUCjolTEbQKEXqM7_ng5iY3V1ARM5GBBD-wVGJzPPog80AfMEcx4QDiINrf2bjn-krncW-kpSeuAkatpL1HkXC70O5_tb80jurWRAz0DX_1vYizfigaheeyKIXVyGGl0a&amp;p=9b63891285cc43fe08e2907d524c&amp;newp=80769a47c79f15b408e2907d4b4492695d0fc20e3bd4db01298ffe0cc4241a1a1a3aecbf2d271405d7c5766c0aa4425ce0f534783d0034f1f689df08d2ecce7e3ed4732f&amp;s=c74d97b01eae257e&amp;user=baidu&amp;fm=sc&amp;query=protobuf+%CE%AA%CA%B2%C3%B4%BF%EC&amp;qid=975cfe1700058ae8&amp;p1=3" target="_blank" rel="noopener">http://cache.baiducontent.com/c?m=tkWeFLFC9BfCGMJID8fGYdTMOrZFTy3WhwfqQg0pEXt8I7Xe-aDpVPTAEXvROoikjYYn2O0g3enui9dM251nbhUCjolTEbQKEXqM7_ng5iY3V1ARM5GBBD-wVGJzPPog80AfMEcx4QDiINrf2bjn-krncW-kpSeuAkatpL1HkXC70O5_tb80jurWRAz0DX_1vYizfigaheeyKIXVyGGl0a&amp;p=9b63891285cc43fe08e2907d524c&amp;newp=80769a47c79f15b408e2907d4b4492695d0fc20e3bd4db01298ffe0cc4241a1a1a3aecbf2d271405d7c5766c0aa4425ce0f534783d0034f1f689df08d2ecce7e3ed4732f&amp;s=c74d97b01eae257e&amp;user=baidu&amp;fm=sc&amp;query=protobuf+Ϊʲô��&amp;qid=975cfe1700058ae8&amp;p1=3</a></p>
<p><a href="http://hengyunabc.github.io/thinking-about-grpc-protobuf/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">http://hengyunabc.github.io/thinking-about-grpc-protobuf/?utm_source=tuicool&amp;utm_medium=referral</a></p>
<p><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/" target="_blank" rel="noopener">https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/</a></p>
]]></content>
      <categories>
        <category>protocol</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>db-connection-pool</title>
    <url>/posts/uncategorized/f943002/</url>
    <content><![CDATA[<h1 id="常用数据库连接池比较">1.  常用数据库连接池比较</h1>
<ol>
<li>性能方面 hikariCP&gt;druid&gt;tomcat-jdbc&gt;dbcp&gt;c3p0 . hikariCP的高性能得益于最大限度的避免锁竞争.<br>
hikariCP, druid, tomcat-jdbc 性能差距不大</li>
<li>druid功能最为全面, sql拦截等功能, 统计数据较为全面, 具有良好的扩展性.</li>
<li>综合性能, 扩展性等方面, 可考虑使用druid或者hikariCP连接池.</li>
<li>可开启prepareStatement缓存, 对性能会有大概20%的提升.
<ul>
<li>psCache是connection私有的, 所以不存在线程竞争的问题, 开启pscache不会存在竞争的性能损耗.</li>
<li>psCache的key为prepare执行的sql和catalog等, value对应的为prepareStatement对象. 开启缓存主要是减少了解析sql的开销.</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>功能</th>
<th>dbcp</th>
<th>druid</th>
<th>c3p0</th>
<th>tomcat-jdbc</th>
<th>HikariCP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否支持PSCache</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>监控</td>
<td>jmx</td>
<td>jmx/log/http</td>
<td>jmx,log</td>
<td>jmx</td>
<td>jmx</td>
</tr>
<tr>
<td>扩展性</td>
<td>弱</td>
<td>好</td>
<td>弱</td>
<td>弱</td>
<td>弱</td>
</tr>
<tr>
<td>sql拦截及解析</td>
<td>无</td>
<td>支持</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>代码</td>
<td>简单</td>
<td>中等</td>
<td>复杂</td>
<td>简单</td>
<td>简单</td>
</tr>
<tr>
<td>更新时间</td>
<td>2015.8.6</td>
<td>2015.10.10</td>
<td>2015.12.09</td>
<td></td>
<td>2015.12.3</td>
</tr>
<tr>
<td>特点</td>
<td>依赖于common-pool</td>
<td>阿里开源, 功能全面</td>
<td>历史久远, 代码逻辑复杂, 且不易维护</td>
<td></td>
<td>优化力度大, 功能简单, 起源于boneCP</td>
</tr>
<tr>
<td>连接池管理</td>
<td>LinkedBlockingDeque</td>
<td>数组</td>
<td></td>
<td>FairBlockingQueue</td>
<td>threadlocal+CopyOnWriteArrayList</td>
</tr>
</tbody>
</table>
<h1 id="resource">2.  Resource</h1>
<ul>
<li><a href="https://blog.csdn.net/qq_31125793/article/details/51241943" target="_blank" rel="noopener">https://blog.csdn.net/qq_31125793/article/details/51241943</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>dubbo-debug</title>
    <url>/posts/uncategorized/17fa8e30/</url>
    <content><![CDATA[<p>服务提供方</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地debug直连, 需要添加 register="false" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"zookeeper://xxx.xxx.xxx.xxx:32181"</span> <span class="attr">register</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动时 带上参数 <code>java -Dcom.xxx.dubboprovider.Ixxx=dubbo://localhost:20880</code></p>
<p>服务调用方</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地debug直连, 需要添加 url="dubbo://localhost:20882" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"dubboProviderService"</span> <span class="attr">interface</span>=<span class="string">"com.xxx.dubboprovider.Ixxx"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">url</span>=<span class="string">"dubbo://localhost:20880"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>hikari</title>
    <url>/posts/uncategorized/4d122a35/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>mybatis-plus</title>
    <url>/posts/java/e528bb3e/</url>
    <content><![CDATA[<h1 id="功能">1.  功能</h1>
<p>MetaObjectHandler 可以在 insert 或 update 时, 自动填充属性.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>framework mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>druid</title>
    <url>/posts/uncategorized/c77c9193/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>多数据源</title>
    <url>/posts/uncategorized/5562f5c7/</url>
    <content><![CDATA[<p><a href="https://baomidou.com/guide/dynamic-datasource.html" target="_blank" rel="noopener">https://baomidou.com/guide/dynamic-datasource.html</a><br>
<a href="https://gitee.com/ChuckChan/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener">https://gitee.com/ChuckChan/dynamic-datasource-spring-boot-starter</a></p>
]]></content>
  </entry>
  <entry>
    <title>spring-aop</title>
    <url>/posts/java/4ecd1f34/</url>
    <content><![CDATA[<h1 id="多个-aop-的顺序">1.  多个 AOP 的顺序</h1>
<p>可以通过在 @Order 控制顺序<br>
由于 AOP 的执行过程类似于嵌套, 所以多个 AOP 一起使用时是先进后出的模式::<br>
aop1.start -&gt; aop2.start -&gt; method.exec -&gt; aop2.end -&gt; aop1.end</p>
<h1 id="transactional-async">2.  @Transactional &amp; @Async</h1>
<p>@Transactional &amp; @Async 同时作用在一个方法上, 事务和异步都是生效的, 无需担心顺序问题.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>framework spring</tag>
      </tags>
  </entry>
  <entry>
    <title>junit-faq</title>
    <url>/posts/uncategorized/76327478/</url>
    <content><![CDATA[<h1 id="test-方法中启动线程-没有执行完就直接推出了">1.  Test 方法中启动线程, 没有执行完就直接推出了</h1>
<p>使用 Thread.join() 让主线程等待子线程执行结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>spring-bug-list</title>
    <url>/posts/uncategorized/625bf3fb/</url>
    <content><![CDATA[<h1 id="重定义-webmvcconfigurationsupport-导致格式转换失效">1.  重定义 WebMvcConfigurationSupport 导致格式转换失效</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...添加自定义拦截器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...添加静态资源处理器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上代码, 由于继承了 WebMvcConfigurationSupport, 导致 WebMvcAutoConfiguration 不加载, 从而导致一些自定义的格式化等配置失效.</p>
<h2 id="原因">1.1.  原因</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>) // 存在对应类型的 <span class="title">Bean</span> 则不加载</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">  <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方案">1.2.  解决方案</h2>
<h3 id="改用实现-webmvcconfigurer">1.2.1.  改用实现 WebMvcConfigurer</h3>
<p>通过 WebMvcConfigurer 替代 WebMvcConfigurationSupport<br>
建议使用次方案.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...添加自定义拦截器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加处理器则可以参考:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; SpringfoxWebMvcConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">SwaggerCommonConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>(<span class="title">basePackages</span> </span>= &#123;</span><br><span class="line">    <span class="string">"springfox.documentation.swagger2.mappers"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2DocumentationConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JacksonModuleRegistrar <span class="title">swagger2Module</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Swagger2JacksonModule();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HandlerMapping <span class="title">swagger2ControllerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">      DocumentationCache documentationCache,</span></span></span><br><span class="line"><span class="function"><span class="params">      ServiceModelToSwagger2Mapper mapper,</span></span></span><br><span class="line"><span class="function"><span class="params">      JsonSerializer jsonSerializer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcedRequestMappingHandlerMapping(</span><br><span class="line">        environment,</span><br><span class="line">        <span class="keyword">new</span> Swagger2Controller(environment, documentationCache, mapper, jsonSerializer));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继续添加定义格式化等配置">1.2.2.  继续添加定义格式化等配置</h3>
<p>该方案比较繁琐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalDate&gt; <span class="title">localDateConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalDate&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDate <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(Constants.DATE_PATTERN));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="title">localDateTimeConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalDateTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(Constants.DATETIME_PATTERN));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">jacksonObjectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JavaTimeModule javaTimeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateTimeSerializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">Constants</span>.<span class="title">DATETIME_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateTimeDeserializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">Constants</span>.<span class="title">DATETIME_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addSerializer(LocalDate<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateSerializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">Constants</span>.<span class="title">DATE_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDate<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateDeserializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">Constants</span>.<span class="title">DATE_PATTERN</span>)))</span>;</span><br><span class="line">        objectMapper.registerModule(javaTimeModule);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() &#123;</span></span><br><span class="line"><span class="comment">//        return builder -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(Constants.DATETIME_PATTERN)));</span></span><br><span class="line"><span class="comment">//            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(Constants.DATE_PATTERN)));</span></span><br><span class="line"><span class="comment">//            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(Constants.DATETIME_PATTERN)));</span></span><br><span class="line"><span class="comment">//            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(Constants.DATE_PATTERN)));</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, LocalDate&gt; localDateConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, LocalDateTime&gt; localDateTimeConverter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.extendMessageConverters(converters);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; converters.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (converters.get(i) <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter) &#123;</span><br><span class="line">                converters.set(i, mappingJackson2HttpMessageConverter);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        converters.add(mappingJackson2HttpMessageConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addFormatters(registry);</span><br><span class="line">        registry.addConverter(localDateConverter);</span><br><span class="line">        registry.addConverter(localDateTimeConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring-annotation</title>
    <url>/posts/uncategorized/85ef0b3a/</url>
    <content><![CDATA[<p>// todo 2020-08-25</p>
<p>@Primary<br>
@Order</p>
<p>@Configuration(proxyBeanMethods = false)<br>
@Conditional<br>
@ConditionalOnClass<br>
@ConditionalOnBean<br>
@ConditionalOnProperty<br>
@ConditionalOnSingleCandidate<br>
@ConditionalOnMissingBean</p>
<p>@Import<br>
@ImportSelector</p>
]]></content>
  </entry>
  <entry>
    <title>spring-validation</title>
    <url>/posts/uncategorized/16ac5b6e/</url>
    <content><![CDATA[<h1 id="maven">1.  Maven</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="validated-vs-valid">2.  @Validated vs @Valid</h1>
<p>@Validated 可以作用在类, 方法和方法参数上, 但不能作用在成员属性上;<br>
@Valid 可以作用在方法, 构造函数, 方法参数和成员属性上.</p>
<p>对于嵌套验证:</p>
<p>@Validated 不能嵌套验证;<br>
@Valid 通过作用在成员属性上实现嵌套验证, 而作用在方法参数上不会嵌套验证.</p>
]]></content>
  </entry>
  <entry>
    <title>apt</title>
    <url>/posts/uncategorized/ce03b4d6/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list    根据名称列出软件包</span><br><span class="line">search    搜索软件包描述</span><br><span class="line">show    显示软件包细节</span><br><span class="line">install   安装软件包</span><br><span class="line">remove    移除软件包</span><br><span class="line">pruge   移除软件包,并删除配置文件</span><br><span class="line">autoremove    卸载所有自动安装且不再使用的软件包</span><br><span class="line">autoclean     清理软件缓存</span><br><span class="line">update    更新可用软件包列表</span><br><span class="line">upgrade   通过 安装&#x2F;升级 软件来更新系统</span><br><span class="line">full-upgrade    通过 卸载&#x2F;安装&#x2F;升级 来更新系统</span><br><span class="line">edit-sources    编辑软件源信息文件</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>debian</title>
    <url>/posts/linux/73b0cd4c/</url>
    <content><![CDATA[<h1 id="装机配置">1.  装机配置</h1>
<p>装机时 <code>/home</code>,<code>/var</code> 需要配的大一些, 其次还有 <code>/opt</code></p>
<h1 id="配置">2.  配置</h1>
<h2 id="dolphin-中双击打开文件夹">2.1.  dolphin 中双击打开文件夹</h2>
<p>系统设置 / 硬件部分 / 输入设备 / 鼠标部分<br>
双击打开文件和文件夹</p>
<h1 id="常用软件">3.  常用软件</h1>
<p>sogou input<br>
postman<br>
atom<br>
astah-community   uml工具<br>
mysql-workbeanch<br>
seahorse    钥匙环,mysql-workbeanch记住密码需要这个<br>
sysv-rc-conf 管理开机服务<br>
redshift 护眼<br>
miredo IPv6 虚拟网卡<br>
sdkman 开发环境安装工具<br>
docker<br>
preload 优化应用启动速度<br>
browsh 命令行浏览器<br>
flameshot 截图工具<br>
Spectacle 截图工具, 没flameshot好用<br>
xclip 剪贴板辅助工具<br>
partitionmanager 磁盘工具 for KDE, gparted for GNOME</p>
<h1 id="常用目录">4.  常用目录</h1>
<ul>
<li>/etc/apt/sources.list.d 应用资源</li>
<li>/usr/share/applications 应用快捷键</li>
</ul>
<h1 id="常用快捷键">5.  常用快捷键</h1>
<p>Alt + Shift + F12 关闭混淆器, 可关闭透明效果</p>
<h2 id="自定义命令快捷键">5.1.  自定义命令快捷键</h2>
<ul>
<li>
<p>翻译<br>
<code>Meta + Shift + D</code> <code>/home/raven/Documents/script/run-config/chrome/dict.sh</code></p>
</li>
<li>
<p>矩形截屏<br>
<code>Meta + Shift + Print</code> <code>flameshot gui</code></p>
</li>
<li>
<p>防打扰截屏<br>
<code>Ctrl + Print</code> <code>/home/raven/Documents/script/run-config/workspace/snip_suspend_picture.sh &gt; /tmp/snip.log</code></p>
</li>
</ul>
<h1 id="problem">6.  Problem</h1>
<h2 id="输入法有时候不能切换了">6.1.  输入法有时候不能切换了</h2>
<p>重启fcitx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先 kill 掉 fcitx,sogou-qimpanel</span></span><br><span class="line"></span><br><span class="line">pidof fcitx | xargs <span class="built_in">kill</span></span><br><span class="line">pidof sogou-qimpanel | xargs <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line">nohup fcitx &gt;/tmp/fcitx.log 2&gt;&amp;1 &amp;</span><br><span class="line">nohup sogou-qimpanel &gt;/tmp/sogou-qimpanel.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常会有一下一些进程</span></span><br><span class="line"><span class="comment"># /usr/bin/fcitx</span></span><br><span class="line"><span class="comment"># /usr/bin/dbus-daemon --fork --print-pid 5 --print-address 15 --config-file /usr/share/fcitx/dbus/daemon.conf</span></span><br><span class="line"><span class="comment"># /usr/bin/fcitx-dbus-watcher unix:abstract=/tmp/dbus-GSY0LOV3Fx,guid=fe970e1739b765410121b40a5b34b23a 925</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /usr/bin/ssh-agent /usr/bin/sogou-session /usr/bin/im-launch /usr/bin/startkde</span></span><br><span class="line"><span class="comment"># sogou-qimpanel-watchdog</span></span><br><span class="line"><span class="comment"># sogou-qimpanel</span></span><br></pre></td></tr></table></figure>
<h2 id="声音突然变最大">6.2.  声音突然变最大</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以修改~/.pulse/daemon.conf</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flat-volumes = no"</span> &gt; /etc/pulse/daemon.conf</span><br><span class="line">pulseaudio -k</span><br><span class="line">pulseaudio --start</span><br></pre></td></tr></table></figure>
<p>不知道上面的命令有没有用, 后来应该是关闭了控制台声音才好的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 临时起效</span><br><span class="line">rmmod pcspkr</span><br><span class="line"></span><br><span class="line"># 重新打开</span><br><span class="line">modprobe pcspkr</span><br><span class="line"></span><br><span class="line"># 只对当前用户有效</span><br><span class="line">setterm -blength 0</span><br><span class="line">xset -b</span><br><span class="line"></span><br><span class="line"># 永久有效</span><br><span class="line"># 在 &#96;.bashrc&#96; 下添加</span><br></pre></td></tr></table></figure>
<h1 id="查看启动日志">7.  查看启动日志</h1>
<p>新建 <code>/etc/default/bootlogd</code> 打开启动日志</p>
<figure class="highlight plain"><figcaption><span>/etc/default/bootlogd</span></figcaption><table><tr><td class="code"><pre><span class="line">BOOTLOGD_ENABLE&#x3D;Yes</span><br></pre></td></tr></table></figure>
<p>以后启动之后日志在 <code>/var/log/boot</code> 中</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>dpkg</title>
    <url>/posts/uncategorized/942e918f/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用选项:</span><br><span class="line"></span><br><span class="line">--info &quot;软件包名&quot; --列出软件包解包后的包名称.</span><br><span class="line">-l --列出当前系统中所有的包.可以和参数less一起使用在分屏查看.</span><br><span class="line">-l |grep -i &quot;软件包名&quot; --查看系统中与&quot;软件包名&quot;相关联的包.</span><br><span class="line">-s 查询已安装的包的详细信息.</span><br><span class="line">-L 查询系统中已安装的软件包所安装的位置.</span><br><span class="line">-S 查询系统中某个文件属于哪个软件包.</span><br><span class="line">-I 查询deb包的详细信息,在一个软件包下载到本地之后看看用不用安装(看一下呗).</span><br><span class="line">-i 手动安装软件包(这个命令并不能解决软件包之前的依赖性问题),如果在安装某一个软件包的时候遇到了软件依赖的问题,可以用apt-get -f install在解决信赖性这个问题.</span><br><span class="line">-r 卸载软件包.不是完全的卸载,它的配置文件还存在.</span><br><span class="line">-P 全部卸载(但是还是不能解决软件包的依赖性的问题)</span><br><span class="line">-reconfigure 重新配置</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>konsole</title>
    <url>/posts/uncategorized/5ec81d1/</url>
    <content><![CDATA[<p>Konsole 好用是因为可以修改复制黏贴的快捷键, 这样操作起来比较方便.</p>
<h1 id="修改-tab-title">1.  修改 Tab title</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本地 Tab 格式 : %d : %n</span><br><span class="line"># 远程 Tab 格式 : (%u) %H</span><br><span class="line"></span><br><span class="line"># 直接修改当前 Tab 的 title</span><br><span class="line">echo -ne &quot;\033]30;New Title\007&quot;</span><br></pre></td></tr></table></figure>
<h1 id="获取-session-id">2.  获取 Session ID</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $KONSOLE_DBUS_SESSION</span><br></pre></td></tr></table></figure>
<h1 id="获取-konsole-的参数配置">3.  获取 Konsole 的参数配置</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">konsole --list-profile-properties</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>spring-configuration</title>
    <url>/posts/java/d96bda52/</url>
    <content><![CDATA[<h1 id="生成-spring-configuration-metadatajson-文件">1.  生成 spring-configuration-metadata.json 文件</h1>
<p>在 Maven 中添加依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring 会自动扫描带 <code>@ConfigurationProperties</code> 注解的文件,<br>
执行 <code>mvn clean install</code> 命令打包后, 会自动生成 <code>META-INF/spring-configuration-metadata.json</code> 文件</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>framework spring</tag>
      </tags>
  </entry>
  <entry>
    <title>source</title>
    <url>/posts/uncategorized/5f8a7f73/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更新软件园</span><br><span class="line"># https:&#x2F;&#x2F;opsx.alibaba.com&#x2F;mirror?lang&#x3D;zh-cn</span><br><span class="line">sudo cp &#x2F;etc&#x2F;apt&#x2F;source.list &#x2F;etc&#x2F;apt&#x2F;source.list.bak</span><br><span class="line">sudo cat &lt;&lt;- EOF &gt; &#x2F;etc&#x2F;apt&#x2F;source.list</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster-updates main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster-backports main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster-updates main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster-backports main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; buster&#x2F;updates main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; buster&#x2F;updates main non-free contrib</span><br><span class="line">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable</span><br><span class="line"># deb-src [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>getopts</title>
    <url>/posts/uncategorized/32fd6682/</url>
    <content><![CDATA[<ul>
<li>OPTIND<br>
标识索引位置</li>
<li>OPTARG<br>
标识参数</li>
<li>OPTSTRING<br>
标识表达式, 如 “🅰️b”<br>
第一个冒号表示忽略错误, 静默模式;<br>
标识名称后面有冒号表示必须带有参数;<br>
标识名称后面没有冒号表示可以不带参数.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"Please input arguments."</span></span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":a:b"</span> opt; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line"> a)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"this is -a the arg is ! <span class="variable">$OPTARG</span>"</span> </span><br><span class="line">   ;;</span><br><span class="line"> *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Unknown option"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line">   ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
